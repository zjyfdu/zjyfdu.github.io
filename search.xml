<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AIGC归纳</title>
    <url>/2025/09/27/AIGC%E5%BD%92%E7%BA%B3/</url>
    <content><![CDATA[<blockquote>
<p>失业的第一天，把现有的关于AIGC的乱七八糟的东西归纳一下</p>
</blockquote>
<h1 id="AI大善人们"><a href="#AI大善人们" class="headerlink" title="AI大善人们"></a>AI大善人们</h1><h2 id="GPU"><a href="#GPU" class="headerlink" title="GPU"></a>GPU</h2><h3 id="腾讯cloud-studio"><a href="#腾讯cloud-studio" class="headerlink" title="腾讯cloud studio"></a>腾讯cloud studio</h3><p><a href="https://cloudstudio.net/my-app">https://cloudstudio.net/my-app</a></p>
<p>我主要用的是这个平台，每天签到有2核时，大概A10可以用40分钟。有256g的存储，放一些图片和模型文件也够用。有一些现成的comfyUI的应用，还比较好用。</p>
<p>但感觉像没啥人维护了，文档不太好，怎么自己创建应用，在哪里写配置文件没找到。</p>
<p><img data-src="/images/image1.png"></p>
<h3 id="腾讯cnb"><a href="#腾讯cnb" class="headerlink" title="腾讯cnb"></a>腾讯cnb</h3><p><a href="https://cnb.cool/?type=activities">https://cnb.cool/?type=activities</a></p>
<p>应该和上面用法差不多，只是我没怎么用。</p>
<h3 id="谷歌colab"><a href="#谷歌colab" class="headerlink" title="谷歌colab"></a>谷歌colab</h3><p><a href="https://colab.research.google.com/">https://colab.research.google.com</a></p>
<p>免费用户可以用T4大概4小时，我这两天基本都有，好处是不用搞签到啥的，坏处是每次环境都是新的，重新安装依赖，下一遍模型。我试了index-tts是在这上面部署的。</p>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="硅基流动"><a href="#硅基流动" class="headerlink" title="硅基流动"></a>硅基流动</h3><p><a href="https://cloud.siliconflow.cn/me/models">https://cloud.siliconflow.cn/me/models</a></p>
<p>硅基流动还是挺好的，送我的14块钱一直用不完，模型也比较全，唯独api base<br>url不好找，<a href="https://api.siliconflow.cn/v1">https://api.siliconflow.cn/v1</a></p>
<h3 id="SophNet"><a href="#SophNet" class="headerlink" title="SophNet"></a>SophNet</h3><p><a href="https://sophnet.com//#/model/overview">https://sophnet.com/\#/model/overview</a></p>
<p>和硅基流动差不多，开源的模型挺全的，而且api很快，我claude<br>code用的就是SophNet部署的kimi v2</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="LibLibAI"><a href="#LibLibAI" class="headerlink" title="LibLibAI"></a>LibLibAI</h3><p><a href="https://www.liblib.art/inspiration">https://www.liblib.art/inspiration</a></p>
<p>主要是来这里学生图提示词的，lora模型比较丰富，还可以训练，但没试过。</p>
<h1 id="index-tts"><a href="#index-tts" class="headerlink" title="index-tts"></a>index-tts</h1><p>看了b站的index-tts，类似的能实现声音克隆的还有阿里的CosyVoice，社区的GPT-SoVITS。</p>
<p>index-tts最大特点在于他把音色和情绪解耦了，你可以单独控制声音的情绪。</p>
<p>github.com&#x2F;index-tts&#x2F;index-tts.git，可以直接在colab上部署。</p>
<p>做声音有个现成的方式是用minimax.io 可以克隆音色</p>
<h1 id="comfyUI"><a href="#comfyUI" class="headerlink" title="comfyUI"></a>comfyUI</h1><p>最近比较流行的生图工具了，支持的模型很多，最早我是想去试用qwen-image的。网页部署唯一比较麻烦的是下载模型，这里附上一些huggingface的命令。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">huggingface-cli list Kijai/flux-fp8\</span><br><span class="line">huggingface-cli download Kijai/flux-fp8 \--include flux1-dev-fp8.safetensor \--local-dir ./workspace/Comfyui/models/unet</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/image2.png"></p>
<p>comfyUI也不用自己搭，有很多平台能用，阿里、LibLib、runninghub都有</p>
<p>对做视频比较好用的几个模型</p>
<ul>
<li><p><a href="https://wan.video/blog/wan2.2-animate">wan2.2-animate</a>，能做吴京视频。</p>
<blockquote>
<p>Wan-Animate  supports two modes: (1) Animation mode, which generates high-fidelity character animation videos by precisely replicating the facial expressions and body movements from the reference video; (2) Replacement mode, which seamlessly integrates the character into the reference video, replacing the original character while reproducing the scene’s lighting and color style to achieve natural environmental blending.</p>
</blockquote>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/1949456021010510998">humo</a>，可以做数字人。</p>
</li>
</ul>
<h1 id="SillyTavern"><a href="#SillyTavern" class="headerlink" title="SillyTavern"></a>SillyTavern</h1><p><a href="https://github.com/SillyTavern/SillyTavern">https://github.com/SillyTavern/SillyTavern</a></p>
<p>这个就比较偏娱乐了，文字冒险游戏了，最基础的是对话，然后可以加入生图和tts，都是走api的，所以本地只有cpu的机器也可以跑。</p>
<p>角色卡可以自己捏，也可以到网上下，比如<a href="https://discord.com/channels/1124998756715216976/1165191657449332757">类脑</a>上的，大部分是NSFW。</p>
<p>要生图的话是走插件，需要安装这个插件<a href="https://github.com/wickedcode01/st-image-auto-generation%EF%BC%8C%E5%AE%89%E8%A3%85%E5%90%8E%E5%B0%B1%E4%BC%9A%E5%87%BA%E7%8E%B0%22Image">https://github.com/wickedcode01/st-image-auto-generation，安装后就会出现&quot;Image</a><br>Auto<br>Generation”插件，这个插件会要求在每次生成内容后，再生成一段生图的prompt。</p>
<p>左侧我选的是ComfyUI，ComfyUI用的是前面腾讯cloud<br>studio部署的，也可以api调用。ComfyUI的dag图是这个json文件，我不太会改，只是把模型从sd1.5换到了3.5。</p>
<p>tts我没有配置。</p>
<p><img data-src="/images/image3.png"></p>
<h1 id="CS336"><a href="#CS336" class="headerlink" title="CS336"></a>CS336</h1><p>还是不能忘记学习，<a href="https://stanford-cs336.github.io/spring2025/%EF%BC%8C">https://stanford-cs336.github.io/spring2025/，</a></p>
<p><a href="https://www.bilibili.com/video/BV1YKhhzBE1M/?vd%5C_source=d4d45a41db226393d3b605dd30e2ffa8">https://www.bilibili.com/video/BV1YKhhzBE1M/?vd\_source=d4d45a41db226393d3b605dd30e2ffa8</a></p>
<h1 id="gemini的gem"><a href="#gemini的gem" class="headerlink" title="gemini的gem"></a>gemini的gem</h1><p><a href="https://gemini.google.com/gem/9c3b6882ff67?ref=jeffsu.org">Veo Visionary | Text-to-Video Generator</a></p>
<p><img data-src="/images/image-20251019112152102.png" alt="image-20251019112152102"></p>
<p><img data-src="/images/image-20251019112549872.png" alt="image-20251019112549872"></p>
]]></content>
      <categories>
        <category>AIGC</category>
      </categories>
      <tags>
        <tag>AIGC</tag>
      </tags>
  </entry>
  <entry>
    <title>Attention</title>
    <url>/2019/03/04/Attention/</url>
    <content><![CDATA[<h1 id="Content-Attention"><a href="#Content-Attention" class="headerlink" title="Content Attention"></a>Content Attention</h1><ul>
<li><p>假设cnn之后，feature map是$T\times1$，用$x$表示，这里用caffe的表示方法，宽度在前，高度在后，忽略了batch size</p>
</li>
<li><p>Content Attention是最常见的Attention，计算权重只用到了$x$和LSTM的输出$c_{t-1}$，$c_{t-1}$和$x$都需要一个全连接</p>
</li>
<li><p>其实这里的$\hat{e}<em>{t,j},  j&#x3D;1..T$是一起算的，$wx$的shape已经是$T\times C$，而$wc</em>{t-1}$是$1\times C$，需要扩增到$T\times C$</p>
<p>$$<br>\hat{e}<em>{t,j}&#x3D;wc</em>{t-1}+wx_j \</p>
</li>
</ul>
<p>e_{t,j}&#x3D;tanh(\hat{e}<em>{t,j}) \<br>\alpha</em>{t,j}&#x3D;softmax(we_{t,j})<br>  $$</p>
<ul>
<li><p>$\alpha_t$的shape是$T\times1$，是$x$每个位置的权重，然后进行累加，$g_t$称之为glimpse向量，</p>
<p>$$<br>g_t&#x3D;\sum_{j&#x3D;1}^{T}\alpha_{t,j}x_j<br>$$</p>
</li>
<li><p>然后用LSTM解码，这里$y_{t-1}+g_t$其实是不能直接加到，shape不一致，需要先对$y_{t-1}$全连接一下</p>
<p>$$<br>c_t,h_t&#x3D;LSTM(y_{t-1}+g_t, c_{t-1}) \</p>
</li>
</ul>
<p>y_t&#x3D;argmax(softmax(wh_t))<br>  $$</p>
<h1 id="Hybrid-Attention"><a href="#Hybrid-Attention" class="headerlink" title="Hybrid Attention"></a>Hybrid Attention</h1><ul>
<li><p>Content有一个严重对问题是计算权重对时候，只用到了内容信息，没有用到位置信息，所以会出现对不齐对问题</p>
</li>
<li><p>Hybrid Attention其实是Content Attention和Locate Attention的混合，区别只是体现在$\hat{e}_{t,j}$的计算上多了上一时刻的位置信息</p>
<p>$$<br>\hat{e}<em>{t,j}&#x3D;wc</em>{t-1}+wx_j+w\alpha_{t-1,j}<br>$$</p>
</li>
<li><p>$\alpha_{t-1,j}$的shape是$T\times N\times1$，先换成$N\times T\times1$，然后用$1\times1$的卷积，卷成$N\times T\times C$，然后可以全连接，最后再换回$T\times N\times C$，这样就能加起来了</p>
</li>
</ul>
]]></content>
      <categories>
        <category>caffe</category>
      </categories>
      <tags>
        <tag>Attention</tag>
      </tags>
  </entry>
  <entry>
    <title>BLEU和GLUE</title>
    <url>/2025/06/02/BLEU%E5%92%8CGLUE/</url>
    <content><![CDATA[<p>攒了好多年的问题了，该了结一下了。</p>
<h1 id="BLEU-机器翻译指标"><a href="#BLEU-机器翻译指标" class="headerlink" title="BLEU 机器翻译指标"></a>BLEU 机器翻译指标</h1><p>transormer那篇论文里提到了BLEU指标，但一直不知道这个指标是啥。</p>
<p>BLEU（Bilingual Evaluation Understudy），通过比较机器翻译的结果与<strong>参考译文</strong>之间的相似度来衡量翻译质量。</p>
<p>$$<br>BLEU&#x3D;BP*exp(\sum_{n&#x3D;1}^N\frac{1}{N}logP_n)<br>$$</p>
<ul>
<li><p>N取4，即最多4-gram</p>
</li>
<li><p>BP（Brevity Penalty）是长度惩罚因子，$l_c$代表表示机器翻译译文的长度，$l_s$表示参考答案的有效长度，避免机器翻译太短，hack了$P_n$指标，本质上还是$P_n$只考虑了准确率，没考虑召回率。<br>$$<br>BP &#x3D; \begin{cases}<br>1 &amp; l_c \ge l_s \<br>exp(1-\frac{l_c}{l_s}) &amp; l_c &lt; l_s<br>\end{cases}<br>$$</p>
</li>
<li><p>$P_n$，n-gram，比较译文和参考译文之间n组词的相似的占比。</p>
</li>
</ul>
<p>比较详细的可以参考<a href="https://www.cnblogs.com/by-dream/p/7679284.html">这里</a>。</p>
<h1 id="GLUE"><a href="#GLUE" class="headerlink" title="GLUE"></a>GLUE</h1><p>GLUE（General Language Understanding Evaluation）是一个综合性的GLU（自然语言理解）评估基准，通过9个英语任务测试模型的通用能力，取平均值。</p>
<ul>
<li><p>单句分类任务‌</p>
<ul>
<li>CoLA‌：纽约大学发布的有关语法的数据集，该任务主要是对一个给定句子，判定其是否语法正确，因此CoLA属于单个句子的文本二分类任务</li>
<li>SST（情感分析）：是斯坦福大学发布的一个情感分析数据集，主要针对电影评论来做情感分类，因此SST属于单个句子的文本分类任务（SST-2是二分类，SST-5是五分类，SST-5的情感极性区分的更细致）</li>
</ul>
</li>
<li><p>相似性任务‌</p>
<ul>
<li>MRPC&#x2F;QQP‌（句子对语义等价判断）：判断两个给定句子，是否具有相同的语义，属于句子对的文本二分类任务</li>
<li>STS-B‌（句子相似度评分）：用1到5的分数来表征两个句子的语义相似性，本质上是一个回归问题，但依然可以用分类的方法做，因此可以归类为句子对的文本五分类任务</li>
</ul>
</li>
<li><p>推理任务‌</p>
<ul>
<li>MNLI&#x2F;QNLI&#x2F;RTE&#x2F;WNLI‌（文本蕴含与推理）</li>
</ul>
</li>
</ul>
<p>也是比较老的指标了，BERT、T5那个时代的。</p>
]]></content>
      <categories>
        <category>发疯文学</category>
      </categories>
      <tags>
        <tag>乱感叹</tag>
      </tags>
  </entry>
  <entry>
    <title>CPU历史考古</title>
    <url>/2019/12/01/CPU%E5%8E%86%E5%8F%B2%E8%80%83%E5%8F%A4/</url>
    <content><![CDATA[<ul>
<li><p>肖克利在贝尔实验室发明了三极管，后来离开贝尔，创办肖克利半导体公司</p>
</li>
<li><p>肖克利独断专行，出现了”八叛徒“叛逃，八叛徒包括摩尔、诺伊斯等人，后创立了仙童半导体</p>
</li>
<li><p>在仙童，诺伊斯发明了集成电路。摩尔、诺伊斯等人继续叛逃仙童，创办了英特尔</p>
</li>
<li><p>霍夫，我不想写了，看<a href="http://lao-qian.hxwk.org/2015/01/01/%e7%a1%85%e8%b0%b7%e4%bc%a0%e5%a5%87%ef%bc%9a%e5%be%ae%e5%a4%84%e7%90%86%e5%99%a8%e4%b9%8b%e7%88%b6-%e6%b3%b0%e5%be%b7%e2%80%a2%e9%9c%8d%e5%a4%abmarcian-edwardtedho/">这里</a>吧</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>CTC</title>
    <url>/2018/03/20/CTC/</url>
    <content><![CDATA[<ul>
<li>以OCR为例，原始图片经过CNN卷积，图片高度方向尺寸变为1</li>
<li>图片的宽度方向即为时间序列方向</li>
<li>在channel分享进行innerproduct，然后softmax，得到每个序列在每个字符的概率，类似于下面这张图</li>
</ul>
<p><img data-src="/images/ctc.jpg"></p>
<ul>
<li><p>然后根据这个概率图，使用类似动态规划的思路，可以计算出ctc loss和导数</p>
</li>
<li><p>不想写了，看下面这篇吧</p>
</li>
<li><p><a href="http://blog.csdn.net/luodongri/article/details/77005948">CTC讲解</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>caffe</category>
      </categories>
      <tags>
        <tag>CTC</tag>
      </tags>
  </entry>
  <entry>
    <title>C宏函数重载</title>
    <url>/2019/02/14/C%E5%AE%8F%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/</url>
    <content><![CDATA[<ul>
<li>理论上，宏函数是不能重载的，第二个宏会直接覆盖掉第一个</li>
<li>但我今天看到了一个非常<del>sao</del>优雅的方法，可以功能上实现重载，原文在<a href="https://blog.csdn.net/lmhuanying1012/article/details/78715351">这里</a></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> OneArgument(a) <span class="comment">// ...action with one argument</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TwoArguments(a, b) <span class="comment">// ...action with two arguments</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GetMacro(_1, _2, NAME, ...) NAME</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Macro(...) GetMacro(__VA_ARGS__, TwoArguments, OneArgument, ...)(__VA_ARGS__)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// usage:</span></span><br><span class="line"><span class="built_in">Macro</span>(a); <span class="comment">// OneArument(a) is called</span></span><br><span class="line"><span class="built_in">Macro</span>(a, b);  <span class="comment">// TwoArguments(a, b) is called</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>其中，<code>__VA_ARGS__</code>是参数<code>...</code>的展开</p>
</li>
<li><p>以此类推，三个参数的重载也是能实现的</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> OneArgument(a) <span class="comment">// ...action with one argument</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TwoArguments(a, b) <span class="comment">// ...action with two arguments</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ThreeArguments(a, b, c) <span class="comment">// ...action with three arguments</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GetMacro(_1, _2, _3, NAME, ...) NAME</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Macro(...) GetMacro(__VA_ARGS__, ThreeArguments, TwoArguments, OneArgument, ...)(__VA_ARGS__)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// usage:</span></span><br><span class="line"><span class="built_in">Macro</span>(a); <span class="comment">// OneArument(a) is called</span></span><br><span class="line"><span class="built_in">Macro</span>(a, b);  <span class="comment">// TwoArguments(a, b) is called</span></span><br><span class="line"><span class="built_in">Macro</span>(a, b, c);  <span class="comment">// ThreeArguments(a, b, c) is called</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask-migrate No support for ALTER of constraints in SQLite dialect</title>
    <url>/2018/01/08/Flask-migrate-No-support-for-ALTER-of-constraints-in-SQLite-dialect/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>由于sqlite不支持<code>DROP COLUMN</code>、<code>ALTER COLUMN</code>、<code>ADD CONSTRAINT</code>等操作，如果flask使用了sqlite做数据库，flask-migrate不能自动迁移</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>两种途径，都来自<a href="https://github.com/miguelgrinberg/Flask-Migrate/issues/61">这里</a></p>
<h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><p>换MySql或者Postgres，也是flask-migrate作者的建议。</p>
<h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><p>在创建db的地方</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> MetaData</span><br><span class="line"></span><br><span class="line">naming_convention = &#123;</span><br><span class="line">    <span class="string">&quot;ix&quot;</span>: <span class="string">&#x27;ix_%(column_0_label)s&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;uq&quot;</span>: <span class="string">&quot;uq_%(table_name)s_%(column_0_name)s&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ck&quot;</span>: <span class="string">&quot;ck_%(table_name)s_%(column_0_name)s&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fk&quot;</span>: <span class="string">&quot;fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pk&quot;</span>: <span class="string">&quot;pk_%(table_name)s&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">db = SQLAlchemy(metadata=MetaData(naming_convention=naming_convention))</span><br></pre></td></tr></table></figure>
<p>enabled batch mode for auto-generated migrations by adding a <code>render_as_batch=config.get_main_option(&#39;sqlalchemy.url&#39;).startswith(&#39;sqlite:&#39;)</code> argument to <code>context.configure()</code> in <code>run_migrations_online()</code> in <code>migrations/env.py</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">run_migrations_online</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Run migrations in &#x27;online&#x27; mode.</span></span><br><span class="line"><span class="string">    In this scenario we need to create an Engine</span></span><br><span class="line"><span class="string">    and associate a connection with the context.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    engine = engine_from_config(</span><br><span class="line">                config.get_section(config.config_ini_section),</span><br><span class="line">                prefix=<span class="string">&#x27;sqlalchemy.&#x27;</span>,</span><br><span class="line">                poolclass=pool.NullPool)</span><br><span class="line"></span><br><span class="line">    connection = engine.connect()</span><br><span class="line">    context.configure(</span><br><span class="line">                connection=connection,</span><br><span class="line">                target_metadata=target_metadata,</span><br><span class="line">                render_as_batch=config.get_main_option(<span class="string">&#x27;sqlalchemy.url&#x27;</span>).startswith(<span class="string">&#x27;sqlite:///&#x27;</span>)</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> context.begin_transaction():</span><br><span class="line">            context.run_migrations()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        connection.close()</span><br></pre></td></tr></table></figure>
<p>方法2试用到现在修改column和foreign-key没遇到什么问题，但是作者不推荐，用得很心虚（sadly）</p>
]]></content>
      <categories>
        <category>flask网站总结</category>
      </categories>
      <tags>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>GAN总结</title>
    <url>/2019/01/27/GAN%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="GAN原理"><a href="#GAN原理" class="headerlink" title="GAN原理"></a>GAN原理</h1><ul>
<li>GAN的终极目的，其实是用$P_G(x)$拟合真实的$P_{data}(x)$，最直接的想法是用MLE来做，MLE实际上和最小化KL距离是等同的，证明见下张图</li>
</ul>
<p><img data-src="/images/mle_equals_kl.jpg"></p>
<ul>
<li><p>机器之心的<a href="https://www.jiqizhixin.com/articles/2017-10-1-1">这篇</a>，基本就是照着李宏毅对课件写的，可以主要看一下为什么说判别器可以衡量两个分布之间的JS散度</p>
</li>
<li><p>GAN的过程</p>
</li>
</ul>
<p><img data-src="/images/origin_gan.jpg"></p>
<ul>
<li>Goodfellow说上面这种形式的判别器$min \ log(1 − D(G(z)))$不好收敛，就搞成了$max \ log(D(G(z)))$，据李宏毅说，这个修改没啥用，只是Goodfellow偷懒而已。但论文里还是挺有道理的。</li>
</ul>
<blockquote>
<p>In practice, equation 1 may not provide sufficient gradient for G to learn well. Early in learning,<br>when G is poor, D can reject samples with high confidence because they are clearly different from<br>the training data. In this case, log(1 − D(G(z))) saturates. Rather than training G to minimize<br>log(1 − D(G(z))) we can train G to maximize log D(G(z)). This objective function results in the<br>same fixed point of the dynamics of G and D</p>
</blockquote>
<p><img data-src="/images/origin_gan2.jpg"></p>
<h1 id="conditional-GAN"><a href="#conditional-GAN" class="headerlink" title="conditional GAN"></a>conditional GAN</h1><ul>
<li>除了图片是否真实外，判别器还要区分生成的图片类别对不对</li>
</ul>
<p><img data-src="/images/cgan.jpg"></p>
<ul>
<li>这种结构的判别器会好一点</li>
</ul>
<p><img data-src="/images/cgan_d.jpg"></p>
<ul>
<li>stack_GAN，GAN直接生成大图的话会比较模糊，所以用两阶段的方法</li>
</ul>
<p><img data-src="/images/stack_gan.jpg"></p>
<ul>
<li>语音增强和image2image也都可以看作是cGAN</li>
</ul>
<p><img data-src="/images/speach.jpg"><br><img data-src="/images/img2img.jpg"></p>
<h1 id="unsupervised-conditional-GAN"><a href="#unsupervised-conditional-GAN" class="headerlink" title="unsupervised conditional GAN"></a>unsupervised conditional GAN</h1><ul>
<li>问题：没有监督之后，generator可能会生成很真实，但不满足条件的图片</li>
<li>办法1，直接忽略这个问题，因为如果generator不是太深的话，生成图片和输入图片还是相关的</li>
<li>还有一些加入consistency</li>
</ul>
<p><img data-src="/images/direct_trans.jpg"><br><img data-src="/images/direct_trans2.jpg"><br><img data-src="/images/cycle_gan.jpg"><br><img data-src="/images/star_gan.jpg"></p>
]]></content>
      <categories>
        <category>GAN</category>
      </categories>
      <tags>
        <tag>GAN</tag>
      </tags>
  </entry>
  <entry>
    <title>JS复习笔记</title>
    <url>/2018/01/01/JS%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<ol>
<li><p>有两种比较运算符：<br>&#x3D;&#x3D;，自动转换数据类型再比较，会得到非常诡异的结果<br>&#x3D;&#x3D;&#x3D;，如果数据类型不一致，返回false，如果一致，再比较</p>
</li>
<li><p><code>NaN === NaN; // false</code><br>唯一能判断NaN的方法是通过isNaN()函数<br><code>isNaN(NaN); // true</code></p>
</li>
<li><p>浮点数比较要这样<br><code>Math.abs(1 / 3 - (1 - 2 / 3)) &lt; 0.0000001; // true</code></p>
</li>
<li><p>并如果一个变量没有通过var申明就被使用，就自动被申明为全局变量<br>ECMA在后续规范中推出了strict模式，需要在第一行加入<br><code>&#39;use strict&#39;;</code></p>
</li>
<li><p>最新的ES6标准新增了一种多行字符串的表示方法，用反引号 ` … ` 表示：<br>还有模版字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var name = &#x27;小明&#x27;;</span><br><span class="line">var age = 20;</span><br><span class="line">var message = `你好, $&#123;name&#125;, 你今年$&#123;age&#125;岁了!`;</span><br><span class="line">alert(message);</span><br></pre></td></tr></table></figure></li>
<li><p><code>for ... of</code>ES6引入<br><code>for ... in</code>循环由于历史遗留问题，它遍历的实际上是对象的属性名称。<br>更推荐用<code>forEach</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array1.forEach(function (element, index, array) &#123;</span><br><span class="line">    // element: 指向当前元素的值</span><br><span class="line">    // index: 指向当前索引</span><br><span class="line">    // array: 指向Array对象本身</span><br><span class="line">    console.log(element + &#x27;, index = &#x27; + index);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">set1.forEach(function (element, sameElement, set) &#123;</span><br><span class="line">map1.forEach(function (value, key, map) &#123;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>augments</code>和<code>rest</code>（ES6引入）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function foo(a, b) &#123;</span><br><span class="line">    var i, rest = [];</span><br><span class="line">    if (arguments.length &gt; 2) &#123;</span><br><span class="line">        for (i = 2; i&lt;arguments.length; i++) &#123;</span><br><span class="line">            rest.push(arguments[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&#x27;a = &#x27; + a);</span><br><span class="line">    console.log(&#x27;b = &#x27; + b);</span><br><span class="line">    console.log(rest);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function foo(a, b, ...rest) &#123;</span><br><span class="line">    console.log(&#x27;a = &#x27; + a);</span><br><span class="line">    console.log(&#x27;b = &#x27; + b);</span><br><span class="line">    console.log(rest);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(1, 2, 3, 4, 5);</span><br><span class="line">// 结果:</span><br><span class="line">// a = 1</span><br><span class="line">// b = 2</span><br><span class="line">// Array [ 3, 4, 5 ]</span><br><span class="line"></span><br><span class="line">foo(1);</span><br><span class="line">// 结果:</span><br><span class="line">// a = 1</span><br><span class="line">// b = undefined</span><br><span class="line">// Array []</span><br></pre></td></tr></table></figure></li>
<li><p>变量提升<br>JavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function foo() &#123;</span><br><span class="line">    var</span><br><span class="line">        x = 1, // x初始化为1</span><br><span class="line">        y = x + 1, // y初始化为2</span><br><span class="line">        z, i; // z和i为undefined</span><br><span class="line">    // 其他语句:</span><br><span class="line">    for (i=0; i&lt;100; i++) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性</p>
</li>
<li><p>为了解决块级作用域，ES6引入了新的关键字let，用let替代var可以申明一个块级作用域的变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">function foo() &#123;</span><br><span class="line">    var sum = 0;</span><br><span class="line">    for (let i=0; i&lt;100; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    // SyntaxError:</span><br><span class="line">    i += 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>ES6标准引入了新的关键字const来定义常量，const与let都具有块级作用域</p>
</li>
<li><p>要保证<code>this</code>指向正确，必须用<code>obj.xxx()</code>的形式调用！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">var xiaoming = &#123;</span><br><span class="line">    name: &#x27;小明&#x27;,</span><br><span class="line">    birth: 1990,</span><br><span class="line">    age: function () &#123;</span><br><span class="line">        var that = this; // 在方法内部一开始就捕获this</span><br><span class="line">        function getAgeFromBirth() &#123;</span><br><span class="line">            var y = new Date().getFullYear();</span><br><span class="line">            return y - that.birth; // 用that而不是this</span><br><span class="line">        &#125;</span><br><span class="line">        return getAgeFromBirth();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xiaoming.age(); // 25</span><br><span class="line">var tmp = xiaoming.age;</span><br><span class="line">tmp(); //NaN</span><br></pre></td></tr></table></figure></li>
<li><p>用 <code>apply</code>或<code>call</code>传<code>this</code><br>call和apply作用是一样的，都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部this的指向<br>从<a href="https://www.jianshu.com/p/aa2eeecd8b4f">这里</a>抄的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Math.max.apply(null, [3, 5, 4]); // 5</span><br><span class="line">Math.max.call(null, 3, 5, 4); // 5</span><br></pre></td></tr></table></figure></li>
<li><p>名字空间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 唯一的全局变量MYAPP:</span><br><span class="line">var MYAPP = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">// 其他变量:</span><br><span class="line">MYAPP.name = &#x27;myapp&#x27;;</span><br><span class="line">MYAPP.version = 1.0;</span><br><span class="line"></span><br><span class="line">// 其他函数:</span><br><span class="line">MYAPP.foo = function () &#123;</span><br><span class="line">    return &#x27;foo&#x27;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>服务器在设置Cookie时可以使用<code>httpOnly</code>，设定了<code>httpOnly</code>的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持<code>httpOnly</code>选项，IE从IE6 SP1开始支持。</p>
</li>
<li><p>原生js获取children</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 获取节点test下的所有直属子节点:</span><br><span class="line">var cs = test.children;</span><br><span class="line"></span><br><span class="line">// 获取节点test下第一个、最后一个子节点：</span><br><span class="line">var first = test.firstElementChild;</span><br><span class="line">var last = test.lastElementChild;</span><br></pre></td></tr></table></figure></li>
<li><p>CSS允许<code>font-size</code>这样的名称，但它并非JavaScript有效的属性名，所以需要在JavaScript中改写为驼峰式命名<code>fontSize</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 获取&lt;p id=&quot;p-id&quot;&gt;...&lt;/p&gt;</span><br><span class="line">var p = document.getElementById(&#x27;p-id&#x27;);</span><br><span class="line">// 设置CSS:</span><br><span class="line">p.style.color = &#x27;#ff0000&#x27;;</span><br><span class="line">p.style.fontSize = &#x27;20px&#x27;;</span><br><span class="line">p.style.paddingTop = &#x27;2em&#x27;;</span><br></pre></td></tr></table></figure></li>
<li><p>一种是修改<code>innerHTML</code>属性，这个方式非常强大，不但可以修改一个DOM节点的文本内容，还可以直接通过HTML片段修改DOM节点内部的子树。<br>修改<code>innerText</code>或<code>textContent</code>属性，这样可以自动对字符串进行HTML编码，保证无法设置任何HTML标签。两者的区别在于读取属性时，innerText不返回隐藏元素的文本，而textContent返回所有文本。<br>innerHtml</p>
</li>
<li><p>没有name属性的<code>&lt;input&gt;</code>的数据不会被提交。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- HTML --&gt;</span><br><span class="line">&lt;form id=&quot;login-form&quot; method=&quot;post&quot; onsubmit=&quot;return checkForm()&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;password&quot; id=&quot;input-password&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;hidden&quot; id=&quot;md5-password&quot; name=&quot;password&quot;&gt;</span><br><span class="line">    &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">function checkForm() &#123;</span><br><span class="line">    var input_pwd = document.getElementById(&#x27;input-password&#x27;);</span><br><span class="line">    var md5_pwd = document.getElementById(&#x27;md5-password&#x27;);</span><br><span class="line">    // 把用户输入的明文变为MD5:</span><br><span class="line">    md5_pwd.value = toMD5(input_pwd.value);</span><br><span class="line">    // 继续下一步:</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>这是因为浏览器的同源策略导致的。默认情况下，JavaScript在发送AJAX请求时，URL的域名必须和当前页面完全一致。<br>完全一致的意思是，域名要相同（<a href="http://www.example.com和example.com不同），协议要相同（http和https不同），端口号要相同（默认是:80端口，它和:8080就不同）。有的浏览器口子松一点，允许端口不同，大多数浏览器都会严格遵守这个限制。">www.example.com和example.com不同），协议要相同（http和https不同），端口号要相同（默认是:80端口，它和:8080就不同）。有的浏览器口子松一点，允许端口不同，大多数浏览器都会严格遵守这个限制。</a></p>
</li>
<li><p>解决跨域请求的几种方法：Flash、同源服务器转发、JSONP、CORS<br>下面谈的都是CORS。跨域能否成功，取决于对方服务器是否愿意给你设置一个正确的Access-Control-Allow-Origin，决定权始终在对方手中<br>上面这种跨域请求，称之为“简单请求”。简单请求包括GET、HEAD和POST（POST的Content-Type类型<br>仅限application&#x2F;x-www-form-urlencoded、multipart&#x2F;form-data和text&#x2F;plain），并且不能出现任何自定义头（例如，X-Custom: 12345），通常能满足90%的需求。<br>对于PUT、DELETE以及其他类型如application&#x2F;json的POST请求，在发送AJAX请求之前，浏览器会先发送一个OPTIONS请求（称为preflighted请求）到这个URL上，询问目标服务器是否接受。</p>
</li>
<li><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getElementById</span><br><span class="line">getElementsByTagName</span><br><span class="line">getElementsByClassName</span><br><span class="line"></span><br><span class="line">innerHTML //可以插入DOM</span><br><span class="line">innerText //会HTML编码</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>flask网站总结</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>复习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Joint Attention_CTC</title>
    <url>/2019/07/13/Joint-Attention-CTC/</url>
    <content><![CDATA[<h1 id="Joint-CTC-Attention"><a href="#Joint-CTC-Attention" class="headerlink" title="Joint CTC-Attention"></a>Joint CTC-Attention</h1><p>是一篇16年的文章，Joint CTC-Attention based End-to-End Speech Recognition using Multi-task Learning</p>
<p>作者说Attention有个问题，没有CTC一样从左到右的限制，所以不好对齐，weak on noisy speech，也不好训练，所以在训练的时候，把CTC也加进去，$\alpha$取0.2的时候效果最好<br>$$<br>L&#x3D;\alpha L_{ctc} + (1-\alpha) L_{att}<br>$$<br>但是预测的时候没有ctc，还是用Attention做decoding</p>
<h1 id="CTC-Beam-Search"><a href="#CTC-Beam-Search" class="headerlink" title="CTC Beam Search"></a>CTC Beam Search</h1><p>看的是<a href="https://medium.com/corti-ai/ctc-networks-and-language-models-prefix-beam-search-explained-c11d1ee23306">这里</a>，CTC 有两种decoding的方法，一种是最简单的，直接取最大值，叫max decoding或叫greedy decoding。但是这么做有两个问题。</p>
<ol>
<li>但是这么做其实已经做了近似，理论上的做法应该是这样的。遍历所有可能的路径，计算出每一条路径的概率值，然后把结果一致的路径的概率加起来，选择概率最大的那个结果，就是最终的结果。但是路径太多了，不能这么暴力。</li>
<li>max decoding不能结合语义。</li>
</ol>
<p>主要变量是<code>Pb</code>和<code>Pnb</code>，<code>Pb[t][l]</code>, is the probability that a prefix, l, at a specific time step, t, originates from one or more paths ending in the blank token</p>
<p>think of a language model as a function taking a sentence as input, which is often only partly constructed, and returning the probability of the last word given all the previous words. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict, Counter</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_lowercase</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prefix_beam_search</span>(<span class="params">ctc, lm=<span class="literal">None</span>, k=<span class="number">25</span>, alpha=<span class="number">0.30</span>, beta=<span class="number">5</span>, prune=<span class="number">0.001</span></span>):</span><br><span class="line">	<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">	Performs prefix beam search on the output of a CTC network.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	Args:</span></span><br><span class="line"><span class="string">		ctc (np.ndarray): The CTC output. Should be a 2D array (timesteps x alphabet_size)</span></span><br><span class="line"><span class="string">		lm (func): Language model function. Should take as input a string and output a probability.</span></span><br><span class="line"><span class="string">		k (int): The beam width. Will keep the &#x27;k&#x27; most likely candidates at each timestep.</span></span><br><span class="line"><span class="string">		alpha (float): The language model weight. Should usually be between 0 and 1.</span></span><br><span class="line"><span class="string">		beta (float): The language model compensation term. The higher the &#x27;alpha&#x27;, the higher the &#x27;beta&#x27;.</span></span><br><span class="line"><span class="string">		prune (float): Only extend prefixes with chars with an emission probability higher than &#x27;prune&#x27;.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	Retruns:</span></span><br><span class="line"><span class="string">		string: The decoded CTC output.</span></span><br><span class="line"><span class="string">	&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">	lm = (<span class="keyword">lambda</span> l: <span class="number">1</span>) <span class="keyword">if</span> lm <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> lm <span class="comment"># if no LM is provided, return 1</span></span><br><span class="line">	W = <span class="keyword">lambda</span> l: re.findall(<span class="string">r&#x27;\w+[\s|&gt;]&#x27;</span>, l)</span><br><span class="line">	alphabet = <span class="built_in">list</span>(ascii_lowercase) + [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;%&#x27;</span>]</span><br><span class="line">	F = ctc.shape[<span class="number">1</span>]</span><br><span class="line">	ctc = np.vstack((np.zeros(F), ctc)) <span class="comment"># just add an imaginative zero&#x27;th step </span></span><br><span class="line">	T = ctc.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">	<span class="comment"># STEP 1: Initiliazation</span></span><br><span class="line">	O = <span class="string">&#x27;&#x27;</span> <span class="comment"># means empty</span></span><br><span class="line">	Pb, Pnb = defaultdict(Counter), defaultdict(Counter)</span><br><span class="line">	Pb[<span class="number">0</span>][O] = <span class="number">1</span> <span class="comment"># balnk prob is 1</span></span><br><span class="line">	Pnb[<span class="number">0</span>][O] = <span class="number">0</span> <span class="comment"># non blank prob is 0</span></span><br><span class="line">	A_prev = [O]</span><br><span class="line">	<span class="comment"># END: STEP 1</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># STEP 2: Iterations and pruning</span></span><br><span class="line">	<span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, T):</span><br><span class="line">		pruned_alphabet = [alphabet[i] <span class="keyword">for</span> i <span class="keyword">in</span> np.where(ctc[t] &gt; prune)[<span class="number">0</span>]]</span><br><span class="line">		<span class="keyword">for</span> l <span class="keyword">in</span> A_prev: <span class="comment"># A_prev is a string list</span></span><br><span class="line">            </span><br><span class="line">			<span class="keyword">if</span> <span class="built_in">len</span>(l) &gt; <span class="number">0</span> <span class="keyword">and</span> l[-<span class="number">1</span>] == <span class="string">&#x27;&gt;&#x27;</span>: <span class="comment"># &lt; means end-character</span></span><br><span class="line">				Pb[t][l] = Pb[t - <span class="number">1</span>][l]</span><br><span class="line">				Pnb[t][l] = Pnb[t - <span class="number">1</span>][l]</span><br><span class="line">				<span class="keyword">continue</span>  </span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> c <span class="keyword">in</span> pruned_alphabet:</span><br><span class="line">				c_ix = alphabet.index(c)</span><br><span class="line">				<span class="comment"># END: STEP 2</span></span><br><span class="line">				</span><br><span class="line">				<span class="comment"># STEP 3: “Extending” with a blank</span></span><br><span class="line">				<span class="keyword">if</span> c == <span class="string">&#x27;%&#x27;</span>: <span class="comment"># % means blank, index is -1</span></span><br><span class="line">					Pb[t][l] += ctc[t][-<span class="number">1</span>] * (Pb[t - <span class="number">1</span>][l] + Pnb[t - <span class="number">1</span>][l])</span><br><span class="line">				<span class="comment"># END: STEP 3</span></span><br><span class="line">				</span><br><span class="line">				<span class="comment"># STEP 4: Extending with the end character</span></span><br><span class="line">				<span class="keyword">else</span>:</span><br><span class="line">					l_plus = l + c</span><br><span class="line">					<span class="keyword">if</span> <span class="built_in">len</span>(l) &gt; <span class="number">0</span> <span class="keyword">and</span> c == l[-<span class="number">1</span>]:</span><br><span class="line">						Pnb[t][l_plus] += ctc[t][c_ix] * Pb[t - <span class="number">1</span>][l]</span><br><span class="line">						Pnb[t][l] += ctc[t][c_ix] * Pnb[t - <span class="number">1</span>][l]</span><br><span class="line">				<span class="comment"># END: STEP 4</span></span><br><span class="line"></span><br><span class="line">					<span class="comment"># STEP 5: Extending with any other non-blank character </span></span><br><span class="line">                    <span class="comment"># and LM constraints</span></span><br><span class="line">                    <span class="comment">#</span></span><br><span class="line">					<span class="keyword">elif</span> <span class="built_in">len</span>(l.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>)) &gt; <span class="number">0</span> <span class="keyword">and</span> c <span class="keyword">in</span> (<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>):</span><br><span class="line">						lm_prob = lm(l_plus.strip(<span class="string">&#x27; &gt;&#x27;</span>)) ** alpha</span><br><span class="line">						Pnb[t][l_plus] += lm_prob * ctc[t][c_ix] * (Pb[t - <span class="number">1</span>][l] + Pnb[t - <span class="number">1</span>][l])</span><br><span class="line">					<span class="keyword">else</span>:</span><br><span class="line">						Pnb[t][l_plus] += ctc[t][c_ix] * (Pb[t - <span class="number">1</span>][l] + Pnb[t - <span class="number">1</span>][l])</span><br><span class="line">					<span class="comment"># END: STEP 5</span></span><br><span class="line"></span><br><span class="line">					<span class="comment"># STEP 6: Make use of discarded prefixes</span></span><br><span class="line">                    <span class="comment"># 可能l_plus已经存在过，但在上一步的时候扔掉了，这里相当于补回来</span></span><br><span class="line">					<span class="keyword">if</span> l_plus <span class="keyword">not</span> <span class="keyword">in</span> A_prev:</span><br><span class="line">						Pb[t][l_plus] += ctc[t][-<span class="number">1</span>] * (Pb[t - <span class="number">1</span>][l_plus] + Pnb[t - <span class="number">1</span>][l_plus])</span><br><span class="line">						Pnb[t][l_plus] += ctc[t][c_ix] * Pnb[t - <span class="number">1</span>][l_plus]</span><br><span class="line">					<span class="comment"># END: STEP 6</span></span><br><span class="line"></span><br><span class="line">		<span class="comment"># STEP 7: Select most probable prefixes</span></span><br><span class="line">		A_next = Pb[t] + Pnb[t]</span><br><span class="line">		sorter = <span class="keyword">lambda</span> l: A_next[l] * (<span class="built_in">len</span>(W(l)) + <span class="number">1</span>) ** beta</span><br><span class="line">		A_prev = <span class="built_in">sorted</span>(A_next, key=sorter, reverse=<span class="literal">True</span>)[:k]</span><br><span class="line">		<span class="comment"># END: STEP 7</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> A_prev[<span class="number">0</span>].strip(<span class="string">&#x27;&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>后来想起来，sequence to sequence都有beam search和 greedy search，但是只是CTC的softmax是fram synchronously，所以逻辑才比较复杂，所以Attention一样也可以用beam search。</p>
<h1 id="Advanced-Joint-CTC-Attention"><a href="#Advanced-Joint-CTC-Attention" class="headerlink" title="Advanced Joint CTC-Attention"></a>Advanced Joint CTC-Attention</h1><p>还是那几个作者的文章，升级版，Advances in Joint CTC-Attention based End-to-End Speech Recognition with a Deep CNN Encoder and RNN-LM。</p>
<p>训练的过程没有做修改，还是CTC和Attention一起训练。</p>
<p>预测解码的时候修改了，以前是只用Attention，现在需要两个结合起来，用beam search做。但beam search有一个问题，Attention的softmax是character synchronously的，而CTC的是fram synchronously，并不是能很好地对应起来。<br>$$<br>\alpha_{att}(g_l)&#x3D;\alpha_{att}(g_{l-1})+log(p(c|g_{l-1},X))<br>$$<br>Attention的概率这么计算，$c$ is the last character of $g_l$。</p>
<p>CTC不能用上面这种公式计算，但是可以用CTC计算loss时的forward来计算$\alpha_{ctc}(g_l)$，和$\alpha_{att}(g_l)$用$\lambda$结合起来。</p>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>caffe</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>RGB和YUV</title>
    <url>/2019/10/20/RGB%E5%92%8CYUV/</url>
    <content><![CDATA[<ul>
<li>里的转图是针对RGB图片的，YUV图片没办法直接用。</li>
<li>解决办法是分开Y、U、V三个分量，分别进行转图。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原始bgr图像</span></span><br><span class="line">    Mat srcImage = <span class="built_in">imread</span>(<span class="string">&quot;/Users/zhaijy/Desktop/test2.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转到YVU（YV21）</span></span><br><span class="line">    Mat dstImage;</span><br><span class="line">    <span class="built_in">cvtColor</span>(srcImage, dstImage, COLOR_BGR2YUV_YV12);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前 height * width 是Y分量</span></span><br><span class="line">    <span class="type">int</span> height = srcImage.rows, width = srcImage.cols;</span><br><span class="line">    Mat dstImageY = <span class="built_in">Mat</span>(height, width, CV_8UC1);</span><br><span class="line">    <span class="built_in">memcpy</span>(dstImageY.data, dstImage.data, height * width);</span><br><span class="line">    <span class="built_in">imwrite</span>(<span class="string">&quot;/Users/zhaijy/Desktop/Y.jpg&quot;</span>, dstImageY);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后面 height * witdth / 4 是V分量</span></span><br><span class="line">    Mat dstImageV = <span class="built_in">Mat</span>(height / <span class="number">2</span>, width / <span class="number">2</span>, CV_8UC1);</span><br><span class="line">    <span class="built_in">memcpy</span>(dstImageV.data, dstImage.data + height * width, height * width / <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">imwrite</span>(<span class="string">&quot;/Users/zhaijy/Desktop/V.jpg&quot;</span>, dstImageV);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后面 height * witdth / 4 是U分量</span></span><br><span class="line">    Mat dstImageU = <span class="built_in">Mat</span>(height / <span class="number">2</span>, width / <span class="number">2</span>, CV_8UC1);</span><br><span class="line">    <span class="built_in">memcpy</span>(dstImageU.data, dstImage.data + height * width * <span class="number">5</span> / <span class="number">4</span>, height * width / <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">imwrite</span>(<span class="string">&quot;/Users/zhaijy/Desktop/U.jpg&quot;</span>, dstImageU);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Y旋转</span></span><br><span class="line">    <span class="type">int</span> rot_height = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(<span class="built_in">floor</span>(<span class="built_in">sqrt</span>(height * height + width * width) / <span class="number">4</span>)) * <span class="number">4</span>;</span><br><span class="line">    <span class="function">Point2f <span class="title">center</span><span class="params">(<span class="keyword">static_cast</span>&lt;<span class="type">float</span>&gt;(width / <span class="number">2.</span>), <span class="keyword">static_cast</span>&lt;<span class="type">float</span>&gt;(height / <span class="number">2.</span>))</span></span>;</span><br><span class="line">    Mat rot_mat = <span class="built_in">getRotationMatrix2D</span>(center, <span class="number">45</span>, <span class="number">1.0</span>);</span><br><span class="line">    Mat rotImageY = <span class="built_in">Mat</span>(rot_height, rot_height, CV_8UC1);</span><br><span class="line">    <span class="built_in">warpAffine</span>(dstImageY, rotImageY, rot_mat, <span class="built_in">Size</span>(rot_height, rot_height), INTER_LINEAR);</span><br><span class="line">    <span class="built_in">imwrite</span>(<span class="string">&quot;/Users/zhaijy/Desktop/rotY.jpg&quot;</span>, rotImageY);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// U旋转</span></span><br><span class="line">    <span class="type">int</span> rot_height_uv = rot_height / <span class="number">2</span>;</span><br><span class="line">    <span class="function">Point2f <span class="title">center_uv</span><span class="params">(<span class="keyword">static_cast</span>&lt;<span class="type">float</span>&gt;(width / <span class="number">4.</span>), <span class="keyword">static_cast</span>&lt;<span class="type">float</span>&gt;(height / <span class="number">4.</span>))</span></span>;</span><br><span class="line">    Mat rot_mat_uv = <span class="built_in">getRotationMatrix2D</span>(center_uv, <span class="number">45</span>, <span class="number">1.0</span>);</span><br><span class="line">    Mat rotImageU = <span class="built_in">Mat</span>(rot_height / <span class="number">2</span>, rot_height / <span class="number">2</span>, CV_8UC1);</span><br><span class="line">    <span class="built_in">warpAffine</span>(dstImageU, rotImageU, rot_mat_uv, <span class="built_in">Size</span>(rot_height_uv, rot_height_uv), INTER_LINEAR);</span><br><span class="line">    <span class="built_in">imwrite</span>(<span class="string">&quot;/Users/zhaijy/Desktop/rotU.jpg&quot;</span>, rotImageU);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// V旋转</span></span><br><span class="line">    Mat rotImageV = <span class="built_in">Mat</span>(rot_height / <span class="number">2</span>, rot_height / <span class="number">2</span>, CV_8UC1);</span><br><span class="line">    <span class="built_in">warpAffine</span>(dstImageV, rotImageV, rot_mat_uv, <span class="built_in">Size</span>(rot_height_uv, rot_height_uv), INTER_LINEAR);</span><br><span class="line">    <span class="built_in">imwrite</span>(<span class="string">&quot;/Users/zhaijy/Desktop/rotV.jpg&quot;</span>, rotImageV);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拼接YVU</span></span><br><span class="line">    Mat rotImageYVU = <span class="built_in">Mat</span>(rot_height * <span class="number">3</span> / <span class="number">2</span>, rot_height, CV_8UC1);</span><br><span class="line">    <span class="built_in">memcpy</span>(rotImageYVU.data, rotImageY.data, rot_height * rot_height);</span><br><span class="line">    <span class="built_in">memcpy</span>(rotImageYVU.data + rot_height * rot_height, rotImageV.data, rot_height * rot_height / <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(rotImageYVU.data + rot_height * rot_height * <span class="number">5</span> / <span class="number">4</span>, rotImageU.data, rot_height * rot_height / <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转回BGR</span></span><br><span class="line">    Mat rotImageBGR;</span><br><span class="line">    <span class="built_in">cvtColor</span>(rotImageYVU, rotImageBGR, COLOR_YUV2BGR_YV12);</span><br><span class="line">    <span class="built_in">imwrite</span>(<span class="string">&quot;/Users/zhaijy/Desktop/rotImageBGR.jpg&quot;</span>, rotImageBGR);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>然后贴一些中间的图片</li>
</ul>
<p><img data-src="/images/test2.png" alt="test2"></p>
<center>原始图片</center>

<p><img data-src="/images/Y.jpg" alt="Y"></p>
<p><img data-src="/images/V.jpg" alt="V"></p>
<p><img data-src="/images/U.jpg" alt="U"></p>
<center>分别是YVU分量</center>

<p><img data-src="/images/rotY.jpg" alt="rotY"></p>
<p><img data-src="/images/rotV.jpg" alt="rotV"></p>
<p><img data-src="/images/rotU.jpg" alt="rotU"></p>
<center>分别是旋转后的YVU分量</center>

<p><img data-src="/images/rotImageBGR.jpg" alt="rotImageBGR"></p>
<center>最后拼接完的效果</center>
- 我看YVU的解释说，$U=B-Y$，$V=R-Y$，可能是因为这个，黑边变成了绿边了吧]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>opencv</tag>
        <tag>YUV</tag>
      </tags>
  </entry>
  <entry>
    <title>VL模型API的token怎么算</title>
    <url>/2025/10/26/VL%E6%A8%A1%E5%9E%8BAPI%E7%9A%84token%E6%80%8E%E4%B9%88%E7%AE%97/</url>
    <content><![CDATA[<p>梳理从 GPT-4.1 到 GPT-5，再到 Qwen3-VL 的核心 API 知识点，帮助你真正驾驭这些强大的工具。</p>
<h3 id="1-API-的第一课：Token，以及那个神秘的-reasoning-tokens"><a href="#1-API-的第一课：Token，以及那个神秘的-reasoning-tokens" class="headerlink" title="1. API 的第一课：Token，以及那个神秘的 reasoning_tokens"></a>1. API 的第一课：Token，以及那个神秘的 <code>reasoning_tokens</code></h3><p>你的每一次 API 调用都会返回一个 <code>usage</code> 对象，理解它就是理解你账单的第一步：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: &quot;chatcmpl-xxx&quot;,</span><br><span class="line">    &quot;object&quot;: &quot;chat.completion&quot;,</span><br><span class="line">    &quot;created&quot;: xxx,</span><br><span class="line">    &quot;model&quot;: &quot;gpt-4.1-2025-04-14&quot;,</span><br><span class="line">    &quot;choices&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;index&quot;: 0,</span><br><span class="line">            &quot;message&quot;: &#123;</span><br><span class="line">                &quot;role&quot;: &quot;assistant&quot;,</span><br><span class="line">                &quot;content&quot;: &quot;xxx&quot;,</span><br><span class="line">                &quot;refusal&quot;: null,</span><br><span class="line">                &quot;annotations&quot;: []</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;logprobs&quot;: null,</span><br><span class="line">            &quot;finish_reason&quot;: &quot;stop&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;usage&quot;: &#123;</span><br><span class="line">        &quot;prompt_tokens&quot;: 11840,</span><br><span class="line">        &quot;completion_tokens&quot;: 489,</span><br><span class="line">        &quot;total_tokens&quot;: 12329,</span><br><span class="line">        &quot;prompt_tokens_details&quot;: &#123;</span><br><span class="line">            &quot;cached_tokens&quot;: 0,</span><br><span class="line">            &quot;audio_tokens&quot;: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;completion_tokens_details&quot;: &#123;</span><br><span class="line">            &quot;reasoning_tokens&quot;: 0,</span><br><span class="line">            &quot;audio_tokens&quot;: 0,</span><br><span class="line">            &quot;accepted_prediction_tokens&quot;: 0,</span><br><span class="line">            &quot;rejected_prediction_tokens&quot;: 0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;service_tier&quot;: &quot;default&quot;,</span><br><span class="line">    &quot;system_fingerprint&quot;: &quot;xxx&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong><code>prompt_tokens</code> (输入 Token):</strong> 你<strong>发送给模型</strong>的所有内容的成本。这<strong>不是</strong>指你刚刚输入的那句话，而是你 <code>messages</code> 数组中的<strong>全部内容</strong>，包括：<ol>
<li>系统提示 (System Prompt)</li>
<li>所有的历史对话 (如果你为了保持上下文而传入了)</li>
<li>你当前发送的所有文本</li>
<li>你当前发送的所有<strong>图片</strong>（这往往是大头！）</li>
</ol>
</li>
<li><strong><code>completion_tokens</code> (输出 Token):</strong> 模型<strong>生成并返回给</strong>你的内容的成本。</li>
<li><strong><code>total_tokens</code> (总 Token):</strong> <code>prompt</code> + <code>completion</code>，你本次调用的总计费 Token。</li>
</ul>
<p><strong>那么 <code>reasoning_tokens</code> (思考 Token) 是什么？</strong></p>
<p>在 <code>gpt-4.1</code> 调用中，这个值是 <code>0</code>。这并不代表模型“没有思考”，而是代表它的架构是一站式生成最终答案的。</p>
<p>这个字段是为 <strong>GPT-5</strong> 这样的新模型准备的。GPT-5 引入了“思考深度”机制。当它处理复杂问题时，会先“打草稿”或进行中间推理，这个过程消耗的 Token 就算作 <code>reasoning_tokens</code>。在 GPT-5 的计费中，总输出成本 &#x3D; <code>completion_tokens</code> + <code>reasoning_tokens</code>。</p>
<h3 id="2-API-的核心原则：它是“无状态”的"><a href="#2-API-的核心原则：它是“无状态”的" class="headerlink" title="2. API 的核心原则：它是“无状态”的"></a>2. API 的核心原则：它是“无状态”的</h3><p>这是新手最容易犯的错误：<strong>API 调用本身不具备上下文记忆。</strong></p>
<p>你不能像在 ChatGPT 网页版那样，先问“这是什么？”，再问“它是什么颜色的？”。服务器不会“记住”你上一次的调用。</p>
<p><strong>“上下文”是你作为开发者“手动”实现的。</strong></p>
<p>你必须在你的程序中维护一个 <code>messages</code> 列表（即对话历史），并且在<strong>每一次</strong>新请求中，都把<strong>完整的历史记录</strong>再次发送给 API。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 你的程序需要自己维护这个列表</span></span><br><span class="line">messages = [</span><br><span class="line">    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你是一个助手。&quot;</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次提问</span></span><br><span class="line">messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你好，GPT-4.1 的上下文窗口多大？&quot;</span>&#125;)</span><br><span class="line">response = client.chat.completions.create(model=<span class="string">&quot;gpt-4.1&quot;</span>, messages=messages)</span><br><span class="line">messages.append(response.choices[<span class="number">0</span>].message) <span class="comment"># 把 AI 的回答也存入历史</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二次提问</span></span><br><span class="line">messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;那 GPT-5 呢？&quot;</span>&#125;)</span><br><span class="line"><span class="comment"># 这一次，你发送的是包含前 3 条消息的完整列表</span></span><br><span class="line">response = client.chat.completions.create(model=<span class="string">&quot;gpt-4.1&quot;</span>, messages=messages)</span><br><span class="line"><span class="comment"># AI 现在才能理解 &quot;那 GPT-5 呢？&quot; 是在和上一句做对比</span></span><br></pre></td></tr></table></figure>

<h3 id="3-SDK-vs-手动请求：为什么你应该用-SDK"><a href="#3-SDK-vs-手动请求：为什么你应该用-SDK" class="headerlink" title="3. SDK vs. 手动请求：为什么你应该用 SDK"></a>3. SDK vs. 手动请求：为什么你应该用 SDK</h3><p>使用 <code>openai</code> 官方库（SDK）远优于自己用 <code>requests</code> 库手搓 HTTP 请求：</p>
<ul>
<li><strong>流式处理 (Streaming):</strong> SDK 将复杂的 SSE (Server-Sent Events) 数据流自动转换成一个简单的 Python 生成器，你只需一个 <code>for</code> 循环就能处理。</li>
<li><strong>错误处理 (Error Handling):</strong> SDK 会将 API 的错误（如 <code>429</code> 速率限制、<code>401</code> 密钥错误）自动转换成明确的 Python 异常（如 <code>openai.RateLimitError</code>），方便你用 <code>try...except</code> 捕获。</li>
<li><strong>类型安全 (Type Safety):</strong> SDK 返回的是 Pydantic 对象 (如 <code>response.choices[0].message.content</code>)，而不是字典 (如 <code>resp_dict[&#39;choices&#39;][0][&#39;message&#39;][&#39;content&#39;]</code>)。这能享受 IDE 自动补全，避免拼写错误。</li>
<li><strong>自动重试 (Auto-Retry):</strong> SDK 内置了对瞬时错误的指数退避重试逻辑。</li>
</ul>
<h3 id="4-深度指南：图片如何变成-Token"><a href="#4-深度指南：图片如何变成-Token" class="headerlink" title="4. 深度指南：图片如何变成 Token"></a>4. 深度指南：图片如何变成 Token</h3><p>这可能是多模态 API 中最复杂的部分。图片 Token <strong>不看文件大小 (KB&#x2F;MB)<strong>，而是看</strong>分辨率 (像素)</strong> 和<strong>你的设置</strong>。</p>
<h4 id="A-OpenAI-的可变成本-GPT-4-1-4o-5"><a href="#A-OpenAI-的可变成本-GPT-4-1-4o-5" class="headerlink" title="A. OpenAI 的可变成本 (GPT-4.1 &#x2F; 4o &#x2F; 5)"></a>A. OpenAI 的可变成本 (GPT-4.1 &#x2F; 4o &#x2F; 5)</h4><p>通过 <code>detail</code> 参数控制成本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;image_url&quot;: &#123;</span><br><span class="line">    &quot;url&quot;: f&quot;data:image/jpeg;base64,&#123;base64_image&#125;&quot;,</span><br><span class="line">    &quot;detail&quot;: &quot;low&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong><code>detail: &quot;low&quot;</code> (低细节模式)</strong></p>
<ul>
<li><strong>成本：</strong> 固定的 85 Token。</li>
<li><strong>原理：</strong> 无论图片多大，API 都会将其强制缩放到 512x512 像素再分析。</li>
<li><strong>适用：</strong> 识别主要物体、场景（“这是一只猫”）。</li>
</ul>
</li>
<li><p><strong><code>detail: &quot;high&quot;</code> (高细节模式)</strong></p>
<ul>
<li><strong>成本：</strong> 可变，<code>85 + (170 * N)</code> 个 Token，<code>N</code> 是“瓦片”数量。</li>
<li><strong>原理：</strong><ol>
<li>API 先将图片缩放，使其最长边不超过 2048px (或放大到 512x512)。</li>
<li>然后用 512x512 的“瓦片”去切割这张缩放后的图片。</li>
<li>一张 1024x1800 的图片可能会被切成 2x3&#x3D;6 个瓦片，成本就是 <code>85 + (170 * 6) = 1105</code> Token。</li>
</ol>
</li>
<li><strong>适用：</strong> 识别图表文字、精细细节。</li>
</ul>
</li>
</ul>
<h4 id="B-终极技巧：如何处理超长图片（如网页截图）"><a href="#B-终极技巧：如何处理超长图片（如网页截图）" class="headerlink" title="B. 终极技巧：如何处理超长图片（如网页截图）"></a>B. 终极技巧：如何处理超长图片（如网页截图）</h4><p>如果你有一张 <code>1200 x 9000</code> 像素的长图，直接用 <code>detail: &quot;high&quot;</code> 发送会<strong>导致失败</strong>。API 会将其压缩成 <code>246 x 2048</code> 像素，所有细节都会丢失。</p>
<p><strong>正确的方法是“客户端手动切片”：</strong></p>
<ol>
<li><strong>在你的程序里</strong>，将 <code>1200 x 9000</code> 的长图切割成 8 张图（7 张 <code>1200x1200</code> + 1 张 <code>1200x600</code>）。</li>
<li>在<strong>同一次 API 调用</strong>中，按顺序传入这 8 张图片切片。</li>
<li>在<strong>文本提示</strong>中明确告知 AI：<code>&quot;我提供了一张长图，已按顺序切成8片，请你按顺序分析...&quot;</code>。</li>
</ol>
<h4 id="C-URL-vs-Base64：如何传入图片"><a href="#C-URL-vs-Base64：如何传入图片" class="headerlink" title="C. URL vs. Base64：如何传入图片"></a>C. URL vs. Base64：如何传入图片</h4><p>API 两种都支持：</p>
<table>
<thead>
<tr>
<th align="left">方式</th>
<th align="left">优点</th>
<th align="left">缺点</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>URL 链接</strong></td>
<td align="left">简单，API 请求体小</td>
<td align="left">图片必须是<strong>公网可访问</strong>的</td>
</tr>
<tr>
<td align="left"><strong>Base64 编码</strong></td>
<td align="left"><strong>可以处理本地&#x2F;私有图片</strong></td>
<td align="left">请求体变大 (数据膨胀约33%)</td>
</tr>
</tbody></table>
<p><strong>Base64 格式：</strong> <code>url</code> 字段必须是 <code>data:[MIME_TYPE];base64,[你的Base64字符串]</code></p>
<h3 id="5-高级策略：如何区分不同角色的图片"><a href="#5-高级策略：如何区分不同角色的图片" class="headerlink" title="5. 高级策略：如何区分不同角色的图片"></a>5. 高级策略：如何区分不同角色的图片</h3><p>假设你有一批“商品介绍图”（用来理解）和一批“备选缩略图”（用来选择）。你不能把它们混在一起丢给 AI。</p>
<ul>
<li><p><strong>方法一 (最可靠)：两次 API 调用</strong></p>
<ol>
<li><strong>调用 1：</strong> 只发送“介绍图”，Prompt 是“请详细总结这个商品”。</li>
<li>拿到总结 <code>summary</code>。</li>
<li><strong>调用 2：</strong> 发送 <code>summary</code> 文本 + “备选缩略图”，Prompt 是“根据这份总结，请在以下图片中选出最好的缩略图”。</li>
</ol>
</li>
<li><p><strong>方法二 (最高效)：单次调用 + 文本图片交错</strong><br>利用 <code>messages</code> 数组可以混合 <code>text</code> 和 <code>image</code> 的特性，为图片“打标签”：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;--- 第一部分：商品介绍图 (用于理解) ---&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image_url&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;image_url&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;...&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image_url&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;image_url&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;...&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  </span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;--- 第二部分：备选缩略图 (用于选择) ---&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;【备选缩略图 1】:&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image_url&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;image_url&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;...&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;【备选缩略图 2】:&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image_url&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;image_url&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;...&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  </span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;--- 最终任务 --- \n 请根据第一部分的信息，从第二部分选择...&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="6-模型对比：GPT-vs-Qwen"><a href="#6-模型对比：GPT-vs-Qwen" class="headerlink" title="6. 模型对比：GPT vs. Qwen"></a>6. 模型对比：GPT vs. Qwen</h3><p>最后，不同的模型家族有截然不同的特性：</p>
<table>
<thead>
<tr>
<th align="left">特性</th>
<th align="left">GPT-4.1</th>
<th align="left">GPT-5</th>
<th align="left">Qwen3-VL-30B</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>最大上下文</strong></td>
<td align="left"><strong>1,000,000</strong> (1M)</td>
<td align="left"><strong>400,000</strong> (400K)</td>
<td align="left"><strong>262,144</strong> (256K)</td>
</tr>
<tr>
<td align="left"><strong>思考机制</strong></td>
<td align="left">一站式生成</td>
<td align="left"><strong>Reasoning 机制</strong> (自动&#x2F;手动调节)</td>
<td align="left">一站式生成</td>
</tr>
<tr>
<td align="left"><strong>模型家族</strong></td>
<td align="left">单一模型</td>
<td align="left"><strong>家族</strong> (Pro, Standard, Mini, Nano)</td>
<td align="left"><strong>家族</strong> (Instruct, Thinking 等)</td>
</tr>
<tr>
<td align="left"><strong>图片计费</strong></td>
<td align="left"><strong>可变</strong> (Low: 85, High: 1000+)</td>
<td align="left"><strong>可变</strong> (类似 4.1，但成本更低)</td>
<td align="left"><strong>固定</strong> (约 <strong>1,224</strong> Token&#x2F;每张)</td>
</tr>
<tr>
<td align="left"><strong>图片限制</strong></td>
<td align="left">总 Token 限制</td>
<td align="left">总 Token 限制</td>
<td align="left">总 Token + <strong>50 张图片</strong>数量限制</td>
</tr>
</tbody></table>
<p><strong>核心差异：</strong> OpenAI 的 <code>detail: &quot;high&quot;</code> 允许你通过消耗更多 Token 来获取超高图片细节，而 Qwen3-VL 采取了<strong>固定 1224 Token</strong> 的策略，这让成本非常可预测，但代价是（在 API 层面）无法对单张图片投入更多 Token 去“看清”微小细节。</p>
]]></content>
      <categories>
        <category>AIGC</category>
      </categories>
      <tags>
        <tag>AIGC</tag>
      </tags>
  </entry>
  <entry>
    <title>YOLO2</title>
    <url>/2019/10/20/YOLO2/</url>
    <content><![CDATA[<p>#先复习一下<a href="https://zhuanlan.zhihu.com/p/32525231">yolov1</a></p>
<ul>
<li>输出的shape是$7\times7\times30$，分别是类别，置信度和坐标，虽然每个格子输出两个框，但只有一组类别</li>
<li>坐标$x, y$是相对于每一个格的，$w, h$是相对于整个图的，这样做的好处是位置坐标的取值范围都是$[0, 1]$</li>
</ul>
<p><img data-src="/images/v2-8630f8d3dbe3634f124eaf82f222ca94_r.jpg" alt="preview"></p>
<ul>
<li>loss都统一认为是回归问题</li>
</ul>
<p><img data-src="/images/v2-45795a63cdbaac8c05d875dfb6fcfb5a_r.jpg" alt="preview"></p>
]]></content>
      <tags>
        <tag>yolo</tag>
      </tags>
  </entry>
  <entry>
    <title>记一点广告的基础知识</title>
    <url>/2025/03/11/ads/</url>
    <content><![CDATA[<h2 id="MLE和MAP"><a href="#MLE和MAP" class="headerlink" title="MLE和MAP"></a>MLE和MAP</h2><ul>
<li>MLE最大化$P(Y|X,\theta)$</li>
<li>MAP最大化$P(\theta|X,Y) \propto P(Y|X,\theta)P(\theta)$</li>
</ul>
<p>特殊情况：</p>
<ul>
<li>如果$\theta$是均匀分布，两者等效</li>
<li>如果$P(\theta)$是高斯分布，等同于L2正则</li>
<li>如果$P(\theta)$是拉普拉斯分布，等同于L1正则</li>
</ul>
<h2 id="负采样纠偏"><a href="#负采样纠偏" class="headerlink" title="负采样纠偏"></a>负采样纠偏</h2><p>训练时纠偏，训练输出就是无偏结果，inference时不需要纠偏。</p>
<p>用采样后的样本，预测输出的logit为$f’$，无偏的结果为$f$，$p’&#x3D;\frac{1}{1+e^{-f’}}$，$p$同理。</p>
<p>$$<br>p&#x3D;\frac{p’}{p’+\frac{1-p’}{r}}<br>$$</p>
<p>这里$r$是负样本采样率，把$p$都替换成$f$，可以得到：</p>
<p>$$<br>f&#x3D;f’+ln(r)<br>$$</p>
<p>注：模型auc需要用这种纠偏之后，才能对比。</p>
<h2 id="Weighted-LR"><a href="#Weighted-LR" class="headerlink" title="Weighted LR"></a>Weighted LR</h2><p>YouTube-DNN 时长建模，<br>参考：<a href="https://static.googleusercontent.com/media/research.google.com/zh-CN//pubs/archive/45530.pdf">Deep Neural Networks for YouTube Recommendations</a></p>
<p>$$<br>-\sum_i [t_i y_i log(p_i) + (1-y_i) log(1-p_i)] \<br>p_i &#x3D; \frac{1}{1+e^{-wz}} \<br>odds &#x3D; \frac{P}{1-P} &#x3D; e^{wz}&#x3D;\frac{E(t)}{1-P}<br>$$</p>
<p>因为$P$比较小，所以$E(t)&#x3D;e^{wz}$</p>
<p>如果把所有的样本都作为负例，对正样本加权，就不会有近似了，直接是无偏的。</p>
<p><strong>LR概率模型分析</strong></p>
<ul>
<li>常见的LR：假设数据服从伯努利分布，发生概率为$p$，不发生为$1-p$，$odds&#x3D;p&#x2F;(1-p)$为几率比</li>
<li>weighted LR：假设数据服从几何分布，假设用户看单位时长的概率为p，期望为$\frac{1}{1-p}-1&#x3D;e^{wz}$（-1是因为几何概率一般是从1开始，我们这里是从0开始）</li>
</ul>
<h2 id="回归转分类"><a href="#回归转分类" class="headerlink" title="回归转分类"></a>回归转分类</h2><p>把连续值分桶，softmax预测在每个桶的概率，不需要对label有啥分布的假设。</p>
<p>可以对label做软化，默认分桶是01 hard label，可以类似知识蒸馏，对标签做软化，但实际上我们没有teacher model，可以依赖一些先验假设，比如高斯分布。</p>
<h3 id="TPM"><a href="#TPM" class="headerlink" title="TPM"></a><a href="https://arxiv.org/pdf/2306.03392">TPM</a></h3><p>可以有级联的loss：softmax loss，每个桶内的连续loss。参考KDD23快手的TPM，Tree based Progressive Regression Model。</p>
<p>每个叶子节点是最后的分类，也对应了一条路径，每个叶子节点的概率是多层概率的乘积。</p>
<p><img data-src="/images/v2-9dd5a641dae8bcbe5d821337c956025f_1440w.jpg" alt="img"></p>
<h3 id="Ordinal-regression"><a href="#Ordinal-regression" class="headerlink" title="Ordinal regression"></a><a href="https://en.wikipedia.org/wiki/Ordinal_regression">Ordinal regression</a></h3><p>把学习目标送PDF改为CDF，也是把连续值分成$K$个桶。预测的不是属于某个桶的概率，而是小于等于某个桶的概率。<br>$$<br>F(k)&#x3D;P(f(x_i)\le t_k)&#x3D;\sigma(t_k-f(x_i))<br>$$</p>
<p>$$<br>f(k)&#x3D;F(k)-F(k-1)<br>$$</p>
<p>但这里对分布有假设，$\sigma$是一个CDF，可以是sigmoid函数，或者高斯分布的CDF$\Phi$。</p>
<p>还有一种方法，是变成$K$个二分类。</p>
<h2 id="ZILN-loss"><a href="#ZILN-loss" class="headerlink" title="ZILN loss"></a>ZILN loss</h2><p>参考：<a href="https://arxiv.org/pdf/1912.07753">ZILN论文</a>（zero-inflated lognormal）</p>
<p>The ZILN loss can be similarly derived as the negative log-likelihood of a ZILN distributed random variable with p as the probability of being nonzero:</p>
<p>$$<br>L_{ZILN}(x; p, \mu, \sigma) &#x3D; −1_{x&#x3D;0} log(1 − p) − 1_{x&gt;0}(log p − L_{Lognormal}(x; \mu, \sigma))<br>$$</p>
<p>where 1 denotes the indicator function.</p>
<p>The loss can be decomposed into two terms:</p>
<ol>
<li>分类loss：判断客户是否为回头客</li>
<li>回归loss：预测重复购买客户的LTV</li>
</ol>
<p>$$<br>L_{ZILN}(x; p, \mu, \sigma) &#x3D; L_{CrossEntropy}(1_{x&gt;0}; p) + 1_{x&gt;0}L_{Lognormal}(x; \mu, \sigma)<br>$$</p>
<p>模型输出3个值，分别对应：$p$，$\mu$，$\sigma$</p>
<p>预估的LTV为：$p e^{\mu+\sigma^2&#x2F;2}$</p>
<h2 id="多目标建模"><a href="#多目标建模" class="headerlink" title="多目标建模"></a>多目标建模</h2><ul>
<li>MMOE</li>
<li>ESMM</li>
<li><a href="https://arxiv.org/pdf/1902.09154">DBMTL</a></li>
</ul>
<h2 id="双塔近似计算"><a href="#双塔近似计算" class="headerlink" title="双塔近似计算"></a>双塔近似计算</h2><p>参考：<a href="https://zhuanlan.zhihu.com/p/656834772">Efficient Training on Very Large Corpora via Gramian Estimation</a></p>
]]></content>
      <categories>
        <category>推荐</category>
      </categories>
      <tags>
        <tag>广告</tag>
        <tag>推荐</tag>
      </tags>
  </entry>
  <entry>
    <title>application/x-www-form-urlencoded和multipart/form-data</title>
    <url>/2018/01/30/application-x-www-form-urlencoded%E5%92%8Cmultipart-form-data/</url>
    <content><![CDATA[<p><a href="http://www.cnblogs.com/taoys/archive/2010/12/30/1922186.html">抄自这里</a></p>
<blockquote>
<p>form的enctype属性为编码方式，常用有两种：<code>application/x-www-form-urlencoded</code>和<code>multipart/form-data</code>。</p>
</blockquote>
<blockquote>
<p>默认为<code>application/x-www-form-urlencoded</code>。 当action为get时候，浏览器用x-www-form-urlencoded的编码方式把form数据转换成一个字串（name1&#x3D;value1&amp;name2&#x3D;value2…），然后把这个字串append到url后面，用?分割，加载这个新的url。 当action为post时候，浏览器把form数据封装到http body中，然后发送到server。 </p>
</blockquote>
<blockquote>
<p>如果没有type&#x3D;file的控件，用默认的<code>application/x-www-form-urlencoded</code>就可以了。 但是如果有type&#x3D;file的话，就要用到<code>multipart/form-data</code>了。浏览器会把整个表单以控件为单位分割，并为每个部分加上Content-Disposition(form-data或者file),Content-Type(默认为text&#x2F;plain),name(控件name)等信息，并加上分割符(boundary)。</p>
</blockquote>
<p><a href="http://blog.csdn.net/xiaojianpitt/article/details/6856536">更详细的</a></p>
]]></content>
      <categories>
        <category>flask网站总结</category>
      </categories>
  </entry>
  <entry>
    <title>c++文件复制</title>
    <url>/2018/07/03/c-%E6%96%87%E4%BB%B6%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    using namespace <span class="built_in">std</span>;</span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;filename missed&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ifstream <span class="title function_">in</span><span class="params">(argv[<span class="number">1</span>], ios::binary | ios::in)</span>;</span><br><span class="line">    <span class="keyword">if</span> (!in)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;source file open failed&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ofstream <span class="title function_">out</span><span class="params">(argv[<span class="number">2</span>], ios::binary | ios::out)</span>; <span class="comment">//打开文件用于写</span></span><br><span class="line">    <span class="keyword">if</span> (!out) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;New file open error.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        in.close(); <span class="comment">//打开的文件一定要关闭</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], argv[<span class="number">2</span>])==<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;the src file can&#x27;t be same with dst file&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">2048</span>];</span><br><span class="line">    <span class="keyword">while</span> (in)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//read从in流中读取2048字节，放入buf数组中，同时文件指针向后移动2048字节</span></span><br><span class="line">        <span class="comment">//若不足2048字节遇到文件结尾，则以实际提取字节读取。</span></span><br><span class="line">        in.read(buf, <span class="number">2048</span>);</span><br><span class="line">        <span class="comment">//gcount()用来提取读取的字节数，write将buf中的内容写入out流。</span></span><br><span class="line">        out.write(buf, in.gcount());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//char c;</span></span><br><span class="line">    <span class="comment">//while (in.get(c))&#123;</span></span><br><span class="line">    <span class="comment">//    out.put(c);</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    in.close();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
  </entry>
  <entry>
    <title>caffe 学习笔记</title>
    <url>/2018/01/11/caffe-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h2><p>直接看官网的安装有点抓不住要点，有一篇博客介绍得很详细，<a href="http://akmetiuk.com/posts/2016-03-29-compiling-caffe.html">点这里</a>。是针对MAC下caffe及其python模块的安装，包括有哪些依赖、怎么编译，会遇到哪些坑，以及怎么解决坑等等。感谢作者！ </p>
<h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><p>docker就方便多了，需要先安装docker，centos照着<a href="https://www.liquidweb.com/kb/how-to-install-docker-on-centos-6/">这一篇</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -iUvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</span><br><span class="line">yum update -y</span><br><span class="line">yum -y install docker-io</span><br><span class="line">service docker start</span><br><span class="line">chkconfig docker on</span><br></pre></td></tr></table></figure>

<p>至此docker安装完毕，然后搜索caffe的镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search caffe</span><br></pre></td></tr></table></figure>

<p>然后会搜到一堆镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NAME                                DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">tleyden5iwx/caffe-cpu-master                                                        48                   [OK]</span><br><span class="line">bvlc/caffe                          Official Caffe images                           42                   [OK]</span><br><span class="line">kaixhin/caffe                       Ubuntu Core 14.04 + Caffe.                      38                   [OK]</span><br><span class="line">kaixhin/cuda-caffe                  Ubuntu Core 14.04 + CUDA + Caffe.               38                   [OK]</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>其中就有官方的docker，也不知道为什么，我就用了<code>kaixhin/caffe</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull kaixhin/caffe</span><br></pre></td></tr></table></figure>

<p>这个名字太丑了，我们改为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker tag kaixhin/caffe caffe</span><br></pre></td></tr></table></figure>

<p>然后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -i -t caffe /bin/bash</span><br></pre></td></tr></table></figure>

<p>然后就你直接用现成的caffe了。<code>exit</code>退出后，需要保存容器，不然下次还是会打开全新的容器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -l</span><br><span class="line"><span class="comment"># CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span></span><br><span class="line"><span class="comment"># c8f1d7bcb4f2        caffe               &quot;/bin/bash&quot;         8 minutes ago       Exited (0) 7 minutes ago                       boring_turing</span></span><br><span class="line">docker commit c8f caffe</span><br></pre></td></tr></table></figure>

<p>还有其余一些docker命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop $(docker ps -a -q) #停用所有容器</span><br><span class="line">docker rm $(docker ps -a -q) #删除所有容器</span><br><span class="line">docker rmi &lt;image id&gt; #删除image</span><br></pre></td></tr></table></figure>

<h1 id="MNIS"><a href="#MNIS" class="headerlink" title="MNIS"></a>MNIS</h1><p>基本全是照着<a href="https://zhuanlan.zhihu.com/p/24110318">这里</a>，一知半解地做</p>
<p>训练时，报错<code>Unknown database backend</code>，需要在<code>Makefile.config</code>中，修改<code>USE_LMDB := 1</code>，然后重新<code>make clean</code>，<code>make all -j4</code>等等</p>
]]></content>
      <categories>
        <category>caffe</category>
      </categories>
      <tags>
        <tag>caffe</tag>
        <tag>docker</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>caffe运行顺序</title>
    <url>/2019/02/09/caffe%E8%BF%90%E8%A1%8C%E9%A1%BA%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="blob"><a href="#blob" class="headerlink" title="blob"></a>blob</h1><ul>
<li><p>explict，显示构造函数，只对构造函数有用，用来抑制隐式转换</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">String</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">String</span> <span class="params">( <span class="type">int</span> n )</span></span>; <span class="comment">// 本意是预先分配n个字节给字符串，加上explicit，就抑制了String ( int n )的隐式转换，</span></span><br><span class="line">    <span class="built_in">String</span> ( <span class="type">const</span> <span class="type">char</span>* p );  <span class="comment">// 用C风格的字符串p作为初始化值</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">String <span class="title">s2</span> <span class="params">( <span class="number">10</span> )</span></span>;          <span class="comment">//OK 分配10个字节的空字符串</span></span><br><span class="line">String s3 = <span class="built_in">String</span> ( <span class="number">10</span> ); <span class="comment">//OK 分配10个字节的空字符串</span></span><br><span class="line"> </span><br><span class="line">String s4 = <span class="number">10</span>;            <span class="comment">//编译不通过，不允许隐式的转换</span></span><br><span class="line">String s5 = <span class="string">&#x27;a&#x27;</span>;           <span class="comment">//编译不通过，不允许隐式的转换</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">int</span> a);   </span><br><span class="line">&#125;;   </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Function</span><span class="params">(A a)</span></span>;   </span><br><span class="line"><span class="comment">// 当调用Function(2)的时候，2会隐式转换为A类型</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;   </span><br><span class="line">    <span class="function"><span class="keyword">explicit</span>   <span class="title">A</span><span class="params">(<span class="type">int</span>   a)</span></span>;   </span><br><span class="line">&#125;;   </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Function</span><span class="params">(A a)</span></span>;  </span><br><span class="line"><span class="comment">// 这样，当调用Function(2)的时候，编译器会给出错误信息</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>template</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// suppose I&#x27;ve declared</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(T&amp; t)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;&gt; <span class="type">void</span> <span class="built_in">foo</span>&lt;<span class="type">int</span>&gt;(<span class="type">int</span>&amp; t); </span><br><span class="line"><span class="comment">// declares a specialization of the template, with potentially different body.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> <span class="type">void</span> <span class="built_in">foo</span>&lt;<span class="type">int</span>&gt;(<span class="type">int</span>&amp; t); </span><br><span class="line"><span class="comment">// causes an explicit instantiation of the template, but doesn&#x27;t introduce a specialization. </span></span><br><span class="line"><span class="comment">// It just forces the instantiation of the template for a specific type.</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>iniline主要是将代码进行复制，扩充，会使代码总量上升，好处就是可以节省调用的开销，能提高执行效率</p>
</li>
<li><p>shared_ptr引用计数智能指，可以参考<a href="https://blog.csdn.net/Xiejingfa/article/details/50750037">这里</a></p>
</li>
</ul>
<h1 id="caffe-cpp"><a href="#caffe-cpp" class="headerlink" title="caffe.cpp"></a>caffe.cpp</h1><ul>
<li><p>step1: 命令行下输入.&#x2F;build&#x2F;tools&#x2F;caffe train -solver xxx.prototxt 运行了程序的入口caffe.cpp main()</p>
</li>
<li><p>step2: caffe.cpp main()根据命令行输入的参数train 调用caffe.cpp train()</p>
</li>
<li><p>step3: caffe.cpp train()读取xxx.prototxt的参数 调用solver.cpp Solver()的构造函数创建Solver对象</p>
</li>
<li><p>step4: 创建Solver对象的时候需要调用solver.cpp Init()函数来初始化模型的网络</p>
</li>
<li><p>step5: solver.cpp Init()函数调用solver.cpp InitTrainNet()和InitTestNets()函数来分别初始化训练和测试网络。</p>
</li>
<li><p>step6: InitTrainNet() 通过xxx.prototxt 指定的xxxnet.prototxt读取net的参数，调用net.cpp Net()的构造函数，创建训练网络，</p>
</li>
<li><p>step7: net.cpp Net()调用net.cpp Init()函数，通过for循环来1)创建网络中每一个Layer对象，2)设置bottom和top，3）调用layer.cpp Setup()，Setup()里会调用具体layer的LayerSetUp()和Reshape()</p>
</li>
<li><p>step8: 调用InitTestNets()创建测试网络，与InitTrainNet(）类似</p>
</li>
<li><p>step9: 运行返回到caffe.cpp train()中，利用创建好的solver对象调用solver.cpp Solve()函数</p>
</li>
<li><p>step10: solver.cpp Solve() 调用 solver.cpp Step()函数，while循环迭代的次数，每次迭代 1）调用net.cpp ForwardBackward()来前向以及后向传播 2)solve.cpp ApplyUpdate()更新参数 3）每一定轮次运行solver.cpp TestAll()</p>
</li>
<li><p>caffe.cpp中的main()调用train()，train()中创建solver对象，solver对象初始化会调用solver.cpp中的Init()</p>
</li>
<li><p>Init()中，创建InitTrainNet()和InitTestNet()</p>
</li>
<li><p>返回到caffe.cpp的train()中，调用Solver()来训练网络，具体过程在solver.cpp的Step()中实现</p>
</li>
<li><p>以上抄自<a href="https://blog.csdn.net/BVL10101111/article/details/74787586">这里</a></p>
</li>
</ul>
<h1 id="layer-factory"><a href="#layer-factory" class="headerlink" title="layer_factory"></a>layer_factory</h1><ul>
<li>#表示：对应变量字符串化  </li>
<li>##表示：把宏参数名与宏定义代码序列中的标识符连接在一起，形成一个新的标识符</li>
<li>连接符#@：它将单字符标记符变换为单字符，即加单引号。例如<code>#define B(x) #@x</code>，则B(a)即’a’，B(1)即’1’<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> trace(x, format) printf(#x <span class="string">&quot; = %&quot;</span> #format <span class="string">&quot;\n&quot;</span>, x)  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> trace2(i) trace(x##i, d) </span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">	<span class="type">char</span> *s = <span class="string">&quot;three&quot;</span>;  </span><br><span class="line">	<span class="type">float</span> x = <span class="number">2.0</span>;</span><br><span class="line"> </span><br><span class="line">	<span class="built_in">trace</span>(i, d);    <span class="comment">// i = 1   </span></span><br><span class="line">	<span class="built_in">trace</span>(x, f);    <span class="comment">// x = 2.000000</span></span><br><span class="line">	<span class="built_in">trace</span>(s, s);    <span class="comment">// s = three      </span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> x1 = <span class="number">1</span>, x2 = <span class="number">2</span>;  </span><br><span class="line">	<span class="built_in">trace2</span>(<span class="number">1</span>);      <span class="comment">// x1 = 1</span></span><br><span class="line">	<span class="built_in">trace2</span>(<span class="number">2</span>);      <span class="comment">// x2 = 2		</span></span><br><span class="line"> </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>看<a href="https://www.jianshu.com/p/191f6cb3c102">这里</a>吧，我太懒了。</li>
</ul>
]]></content>
      <categories>
        <category>caffe</category>
      </categories>
      <tags>
        <tag>caffe</tag>
      </tags>
  </entry>
  <entry>
    <title>claude code</title>
    <url>/2025/10/07/claude-code/</url>
    <content><![CDATA[<h1 id="claude-code命令行"><a href="#claude-code命令行" class="headerlink" title="claude-code命令行"></a>claude-code命令行</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g @anthropic-ai/claude-code --registry=https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>

<p>通过环境变量修改成kimi的模型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export ANTHROPIC_BASE_URL=https://api.moonshot.cn/anthropic</span><br><span class="line">export ANTHROPIC_AUTH_TOKEN=$&#123;YOUR_MOONSHOT_API_KEY&#125;</span><br><span class="line">export ANTHROPIC_MODEL=kimi-k2-turbo-preview</span><br><span class="line">export ANTHROPIC_SMALL_FAST_MODEL=kimi-k2-turbo-preview</span><br></pre></td></tr></table></figure>

<p>或者在claude配置文件中添加环境变量<br><code>~/.claude/settings.json</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;env&quot;: &#123;</span><br><span class="line">        &quot;ANTHROPIC_BASE_URL&quot;: &quot;https://www.sophnet.com/api/open-apis/7TxazXiOf8xHVzgbxY2o6w/anthropic&quot;,</span><br><span class="line">        &quot;ANTHROPIC_AUTH_TOKEN&quot;: &quot;$&#123;YOUR_API_KEY&#125;&quot;,</span><br><span class="line">        &quot;ANTHROPIC_MODEL&quot;: &quot;Kimi-K2-0905&quot;,</span><br><span class="line">        &quot;ANTHROPIC_SMALL_FAST_MODEL&quot;: &quot;Kimi-K2-0905&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加mcp，<code>mcp-chrome-bridge</code>确实好用，就是费token</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">claude mcp add --transport http mcp-chrome-bridge http://127.0.0.1:12306/mcp</span><br></pre></td></tr></table></figure>


<h1 id="claude-code的vscode插件"><a href="#claude-code的vscode插件" class="headerlink" title="claude-code的vscode插件"></a>claude-code的vscode插件</h1><p>应用市场安装先安装一个<br>在设置中搜索<code>Claude Code: Environment Variables</code>，编辑<code>setting.json</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    &quot;claude-code.environmentVariables&quot;: [</span><br><span class="line">        &#123; &quot;name&quot;: &quot;ANTHROPIC_BASE_URL&quot;, &quot;value&quot;: &quot;https://www.sophnet.com/api/open-apis/7TxazXiOf8xHVzgbxY2o6w/anthropic&quot; &#125;,</span><br><span class="line">        &#123; &quot;name&quot;: &quot;ANTHROPIC_AUTH_TOKEN&quot;, &quot;value&quot;: &quot;$&#123;YOUR_API_KEY&#125;&quot; &#125;,</span><br><span class="line">        &#123; &quot;name&quot;: &quot;ANTHROPIC_MODEL&quot;, &quot;value&quot;: &quot;Kimi-K2-0905&quot; &#125;,</span><br><span class="line">        &#123; &quot;name&quot;: &quot;ANTHROPIC_SMALL_FAST_MODEL&quot;, &quot;value&quot;: &quot;Kimi-K2-0905&quot; &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>vscode的ai插件真多啊，有官方copilot，有早期的cline，claude code也有了</p>
]]></content>
      <categories>
        <category>claude</category>
      </categories>
      <tags>
        <tag>claude</tag>
      </tags>
  </entry>
  <entry>
    <title>conda和uv 常用命令</title>
    <url>/2018/11/19/conda-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="uv命令"><a href="#uv命令" class="headerlink" title="uv命令"></a>uv命令</h1><h1 id="conda命令"><a href="#conda命令" class="headerlink" title="conda命令"></a>conda命令</h1><ul>
<li>创建虚拟环境</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda create -n your_env_name python=x.x anaconda</span><br></pre></td></tr></table></figure>

<p>最后的anaconda可选，有的话，会安装很多包，numpy、sklearn等等</p>
<ul>
<li>激活</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source activate your_env_name</span><br></pre></td></tr></table></figure>

<ul>
<li>安装包</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda install -n your_env_name [package]</span><br></pre></td></tr></table></figure>

<ul>
<li>不激活</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source deactivate</span><br></pre></td></tr></table></figure>

<ul>
<li>已经有的虚拟环境</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda env list</span><br></pre></td></tr></table></figure>

<ul>
<li>删除虚拟环境</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda remove -n your_env_list -all</span><br></pre></td></tr></table></figure>

<ul>
<li>检查conda是否安装</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda -v</span><br></pre></td></tr></table></figure>

<ul>
<li>更新conda</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda update conda</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="为什么要用uv"><a href="#为什么要用uv" class="headerlink" title="为什么要用uv"></a>为什么要用uv</h1><p>Python 项目管理从传统的 <code>pip</code> 演进到 Conda 或 UV 等现代工具，主要围绕解决环境隔离、依赖冲突、以及依赖关系的可维护性等痛点展开。</p>
<p>以下是基于提供的资料，梳理的 Python 项目管理现代化的演进过程和主要流派：</p>
<h2 id="传统的-pip-安装和环境冲突-早期的痛点"><a href="#传统的-pip-安装和环境冲突-早期的痛点" class="headerlink" title="传统的 pip 安装和环境冲突 (早期的痛点)"></a>传统的 pip 安装和环境冲突 (早期的痛点)</h2><p>Python 在诞生之初，并未考虑工程结构的问题，导致早期的管理相当“放自我”。官方的 <code>pip</code> 规范一直在努力打补丁。</p>
<ol>
<li><strong>全局环境与冲突：</strong> 在项目初期，使用 <code>pip install flask</code> 等命令会将库安装到一个<strong>全局环境</strong>中，被计算机上所有 Python 项目共享。</li>
<li><strong>版本冲突：</strong> 这种共享机制带来棘手的问题，例如一个新项目可能需要 Flask 3.11，而另一个旧项目可能只兼容 3.0，导致全局升级后旧项目无法运行。</li>
<li><strong>依赖地狱：</strong> 库通常依赖其他几个库，这些库又有各自的依赖，层层嵌套会引发更多的版本冲突，即所谓的“依赖地狱”。</li>
</ol>
<h2 id="演进的第一步：环境隔离-Venv"><a href="#演进的第一步：环境隔离-Venv" class="headerlink" title="演进的第一步：环境隔离 (Venv)"></a>演进的第一步：环境隔离 (Venv)</h2><p>为了解决版本和依赖冲突，设计出了<strong>虚拟环境</strong>（Virtual Environment）。</p>
<ol>
<li><strong>Venv 的作用：</strong> 虚拟环境为每个项目创建了一个独立、干净的 Python 工作空间。</li>
<li><strong>创建与激活：</strong> 可以使用 <code>python -m venv .venv</code> 命令创建虚拟环境。激活环境后，再使用 <code>pip</code> 安装库，这些库就会被安装到该项目的虚拟文件夹中，从而避免冲突。</li>
<li><strong>背后的原理：</strong> 虚拟环境主要通过修改 Python 中的 <code>sys.path</code> 变量来实现。激活环境后，虚拟目录会被添加到这个搜索列表里，确保 Python 在导入模块时能够成功加载安装在虚拟环境路径中的库。</li>
</ol>
<h2 id="演进的第二步：依赖共享与配置-requirements-txt-到-pyproject-toml"><a href="#演进的第二步：依赖共享与配置-requirements-txt-到-pyproject-toml" class="headerlink" title="演进的第二步：依赖共享与配置 (requirements.txt 到 pyproject.toml)"></a>演进的第二步：依赖共享与配置 (requirements.txt 到 pyproject.toml)</h2><p>解决了环境隔离后，新的问题是如何方便准确地将项目的依赖列表分享给其他人，以便复现环境。</p>
<h4 id="1-requirements-txt-早期主流做法"><a href="#1-requirements-txt-早期主流做法" class="headerlink" title="1. requirements.txt (早期主流做法)"></a>1. requirements.txt (早期主流做法)</h4><ul>
<li><strong>做法：</strong> 早期最主流的做法是使用 <code>pip freeze</code> 命令，将当前虚拟环境中所有已安装包及其确切版本号输出到一个文件，通常命名为 <code>requirements.txt</code>。接收方只需执行 <code>pip install -r requirements.txt</code> 即可安装依赖。</li>
<li><strong>重大缺陷：</strong> <code>pip freeze</code> <strong>无法区分</strong>项目真正需要的<strong>直接依赖</strong>（Direct Dependency）和这些直接依赖引入的<strong>间接依赖</strong>（Indirect Dependency）。如果项目复杂，情况很快会失控。</li>
<li><strong>孤儿依赖：</strong> <code>pip</code> 在卸载包时也无法很好地处理依赖关系。如果卸载了某个包（如 Flask），那些因为 Flask 而被安装的间接依赖仍会留在环境中，成为无人管理的<strong>孤儿依赖</strong>。</li>
</ul>
<h4 id="2-pyproject-toml-现代标准解决方案"><a href="#2-pyproject-toml-现代标准解决方案" class="headerlink" title="2. pyproject.toml (现代标准解决方案)"></a>2. pyproject.toml (现代标准解决方案)</h4><p>现代 Python 项目的<strong>标准解决方案</strong>是使用 <code>pyproject.toml</code> 文件。</p>
<ul>
<li><strong>统一配置：</strong> <code>pyproject.toml</code> 是官方指定的统一配置文件。在此之前，不同的开发工具（如类型检查器 mypy、测试框架 pytest）通常使用各自独立的配置文件，导致根目录下配置零散。如今，绝大多数主流工具都支持了 <code>pyproject.toml</code>。</li>
<li><strong>仅声明直接依赖：</strong> 在 <code>pyproject.toml</code> 中，开发者只需在 <code>dependencies</code> 列表中声明项目的<strong>直接依赖</strong>即可。如果将来要删除某个依赖，只需删除配置文件中对应的一行，就不会留下任何孤儿依赖。</li>
<li><strong>安装复杂性：</strong> 依赖写好后，可以使用 <code>pip install .</code> 命令来安装。这条命令在背后做了两件事：首先是构建，将当前项目打包成标准 Python 软件包；其次是安装，自动把所有声明的依赖一并安装进来。</li>
<li><strong>开发模式（Editable Mode）：</strong> 在开发阶段，为了避免源代码被复制到虚拟环境中的 <code>site-packages</code> 目录导致代码修改无法同步，通常需要加上 <code>-e</code> 参数，使用 <code>pip install -e .</code> 进行可编辑安装。</li>
</ul>
<h2 id="演进的第三步：高级项目管理工具-UV-Poetry"><a href="#演进的第三步：高级项目管理工具-UV-Poetry" class="headerlink" title="演进的第三步：高级项目管理工具 (UV, Poetry)"></a>演进的第三步：高级项目管理工具 (UV, Poetry)</h2><p>纯手工维护 <code>pyproject.toml</code> 的流程存在痛点，例如无法再用简单的 <code>pip install</code> 命令添加新依赖，每次添加都需要手动查找名称和版本号并编辑配置，过程繁琐且容易出错。</p>
<ol>
<li><strong>诞生原因：</strong> 社区为解决这一痛点，催生了像 <strong>UV</strong> 和 <strong>Poetry</strong> 这样的高层项目管理工具。</li>
<li><strong>高级封装：</strong> 这些第三方工具可以被理解为对 <code>venv</code> 和 <code>pip</code> 的<strong>高级封装</strong>。它们在底层仍使用 <code>venv</code> 和 <code>pip</code>，但提供了更简单、更统一的接口。</li>
<li><strong>UV 示例：</strong> 使用 UV，只需执行 <code>uv add flask</code> 一条命令，就能自动修改 <code>pyproject.toml</code>（添加依赖声明）、自动创建 <code>venv</code> 虚拟环境，并将该包及其所有间接依赖安装到环境中。协作者只需执行 <code>uv sync</code>，即可自动读取配置文件、搭建环境并安装所有依赖。</li>
<li><strong>运行简化：</strong> UV 还提供了 <code>uv run</code> 命令，可以在虚拟环境的上下文中执行命令，无需手动激活环境。</li>
</ol>
<h2 id="独立流派：Conda-宇宙"><a href="#独立流派：Conda-宇宙" class="headerlink" title="独立流派：Conda 宇宙"></a>独立流派：Conda 宇宙</h2><p>与官方 Python 体系并行的是 Conda 宇宙，这是一个从设计之初就考虑周全的跨语言开发平台。</p>
<ol>
<li><strong>独立的生态：</strong> Conda 最早由 Anaconda 公司提供，现在免费版 MiniConda 等使用更广泛，像 Pixi 也是这个生态的一部分。Conda 体系在底层上与官方 Python 走的不是一条路，它有自己的配置文件、软件仓库，甚至连 Python 解释器都是自己编译的。</li>
<li><strong>跨语言支持：</strong> Conda 不只支持 Python，还支持 Go、Rust、C++、R 等各种语言。因此，它更像一个<strong>独立的跨语言开发平台</strong>。</li>
<li><strong>设计优势：</strong> Conda 从设计之初就将多语言支持、依赖管理和虚拟环境等问题用一套统一的方案解决了。</li>
<li><strong>AI 领域的体现：</strong> Conda 的优势在 AI 领域尤为明显，因为 AI 框架的依赖出了名的复杂，经常需要与 NVIDIA 的 CUDA 这种非 Python 库打交道。使用 Conda 安装深度学习框架通常是<strong>最省心、最不容易出错的选择</strong>。</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>conda</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>css 浮动塌陷</title>
    <url>/2018/01/30/css-%E6%B5%AE%E5%8A%A8%E5%A1%8C%E9%99%B7/</url>
    <content><![CDATA[<p><a href="http://blog.csdn.net/chris_z_0622/article/details/65442975">来自这里</a><br>css 子元素设置为float之后，脱离文件流，导致父元素撑不起来，解决办法</p>
<ol>
<li>父元素也设置为float（不推荐，会影响父元素后面都元素）</li>
<li>父元素添加 overflow:hidden（诡异的css）</li>
<li>建立一个空的子div <code>&lt;div style=&quot;clear: both&quot;&gt;&lt;/div&gt;</code></li>
<li>通过伪类:after清除浮动，具体如下<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>子元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.son &#123;</span><br><span class="line">    float: left;</span><br><span class="line">&#125;</span><br><span class="line">.father:after &#123;</span><br><span class="line">    content: &quot;&quot;;</span><br><span class="line">    height: 0;</span><br><span class="line">    width: 0;</span><br><span class="line">    visibility: hidden;</span><br><span class="line">    clear: both;</span><br><span class="line">    display: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>flask网站总结</category>
      </categories>
  </entry>
  <entry>
    <title>c复习笔记</title>
    <url>/2018/03/11/c%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<ul>
<li><p>cin 带空格的字符串时，需要这样<code>cin.getline(s, 80)</code>，s是char数组</p>
</li>
<li><p>或者也可以这样<code>getline(cin, str)</code>，原型为<code>istream&amp; getline (istream&amp; is, string&amp; str); </code>，C++对每种流都定义了一个getline函数</p>
</li>
<li><p>在gcc编译器中，对标准库进行了扩展，加入了一个getline函数。会自动malloc, realloc，所以用的话，需要自己手动free，好像没啥人用，参考<a href="https://www.cnblogs.com/xkfz007/archive/2012/08/01/2618366.html">这里</a></p>
</li>
<li><p>cout 控制输出精度 <code>cout &lt;&lt; fixed &lt;&lt; setprecision(2) &lt;&lt; f</code>，<code>#include &lt;iomanip&gt;</code></p>
</li>
<li><p>cout 控制输出格式<code>cout &lt;&lt; setfill(&#39;0&#39;) &lt;&lt; setw(4) &lt;&lt; a[i][j]</code></p>
</li>
<li><p><a href="https://blog.csdn.net/yockie/article/details/9104899">更多</a></p>
</li>
<li><p>cin cout 重定向</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;foo.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout); </span><br><span class="line"><span class="built_in">freopen</span>(“bar.txt”,”r”,stdin);</span><br></pre></td></tr></table></figure>
</li>
<li><p>lambda表达式<br><img data-src="/images/10535321.jpg" title="lambda!"> </p>
</li>
<li><p>使用lambda对vector进行排序</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span> n;</span><br><span class="line">   <span class="type">double</span> th;</span><br><span class="line">   cin &gt;&gt; n &gt;&gt; th;</span><br><span class="line">   vector&lt;pair&lt;string, <span class="type">double</span>&gt;&gt; res;  </span><br><span class="line">   <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        string name;</span><br><span class="line">        <span class="type">double</span> score;</span><br><span class="line">        cin &gt;&gt; name &gt;&gt; score;</span><br><span class="line">        <span class="keyword">if</span>(score &gt; th)&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(<span class="built_in">pair</span>&lt;string, <span class="type">double</span>&gt;(name, score));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>(), [](pair&lt;string, <span class="type">double</span>&gt;&amp; a, pair&lt;string, <span class="type">double</span>&gt;&amp; b) &#123;<span class="keyword">return</span> a.second &gt; b.second;&#125;);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i: res)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s %.1f\n&quot;</span>, i.first.<span class="built_in">c_str</span>(), i.second);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>erase删除vector元素</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(it=iVec.<span class="built_in">begin</span>();it!=iVec.<span class="built_in">end</span>();)&#123;</span><br><span class="line">　　<span class="keyword">if</span>(*it==<span class="number">4</span> || *it==<span class="number">5</span>)</span><br><span class="line">　　　　it=iVec.<span class="built_in">erase</span>(it);</span><br><span class="line">　　<span class="keyword">else</span></span><br><span class="line">　　　　it++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Sample a(0)</code>, <code>Sample a = 0</code>, 都是调用构造函数</p>
</li>
<li><p><code>Sample a(9); a = 8</code> 调用两次构造函数，</p>
</li>
<li><p><code>Sample b = a </code>, <code>Sample b(a)</code> 拷贝构造函数</p>
</li>
<li><p>类型转换构造函数，编译系统会生成一个临时变量</p>
</li>
<li><p>C++编译器遵循以下优先顺序:</p>
<blockquote>
<p>先找参数完全匹配的普通函数(非由模板实例化而得的函数)，再找参数完全匹配的模板函数，再找实参经过自动类型转换后能够匹配的普通函数，上面的都找不到, 则报错。</p>
</blockquote>
</li>
<li><p>优雅的内存对齐方法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">calc_align</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> n, <span class="type">unsigned</span> align)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> ((n + align - <span class="number">1</span>) &amp; (~(align - <span class="number">1</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>__declspec(dllexport)是导出声明，说明这个函数要从DLL中导出给别人用。</p>
</li>
<li><p>__declspec(dllimport)是说这个函数是从别处导入的，不适用也能正常编译代码。</p>
</li>
<li><p>ANSI C是美国国家标准局，为C语言制定的一套国际标准语法，避免各个厂家的C语言不一致</p>
</li>
<li><p>include的文件可以不写到gcc里面</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;max.c&quot;</span><br><span class="line">gcc main.c</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -c max.c -o max.o</span><br><span class="line">gcc max.o main.c</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cin/cout</tag>
        <tag>lambda</tag>
        <tag>构造函数</tag>
      </tags>
  </entry>
  <entry>
    <title>deeplab</title>
    <url>/2018/06/19/deeplab/</url>
    <content><![CDATA[<h1 id="v1"><a href="#v1" class="headerlink" title="v1"></a>v1</h1><h2 id="Atrous-algorithm"><a href="#Atrous-algorithm" class="headerlink" title="Atrous algorithm"></a>Atrous algorithm</h2><ul>
<li>deeplab和FCN一样，也是在VGG上finetune</li>
<li>首先要解决的问题是，如何增大最后输出的score map呢？deeplab把VGG最后的pool4和pool5的stride从2变成了1，整个VGG的stride从32变成8</li>
<li>但是修改了stide之后，后面的conv层感受野就不一样大了，不能finetune了，所以这里引入了非常优雅的atrous algorithm<ul>
<li>feature map的感受野的计算公式为$RF_{i}&#x3D;(RF_{i+1}-1)*stride+kernel$</li>
<li>所以在stride减小的情况下想办法增大kernel，即在kernel里面增加hole，kernel变大</li>
</ul>
</li>
</ul>
<p><img data-src="/images/70081567.jpg" alt="deeplab"></p>
<h2 id="Fully-connected-CRF"><a href="#Fully-connected-CRF" class="headerlink" title="Fully connected CRF"></a>Fully connected CRF</h2><ul>
<li>CRF简单来说，能做到的就是在决定一个位置的像素值时（在这个paper里是label），会考虑周围邻居的像素值（label），这样能抹除一些噪音。但是通过CNN得到的feature map在一定程度上已经足够平滑了，所以short range的CRF没什么意义。于是作者采用了fully connected CRF，这样考虑的就是全局的信息了。</li>
<li>随机变量$X_i$是像素$i$的标签，变量$X$由$X_1, X_2, …, X_N$组成随机向量，$N$就是图像中的像素个数。</li>
<li>在全连接CRF中，标签$x$的能量为</li>
</ul>
<p>$$<br>E(x)&#x3D;\sum _i\theta_i(x_i)+\sum <em>{ij}\theta</em>{ij}(x_i,x_j)<br>$$</p>
<ul>
<li>$\theta_i(x_i)$是一元能量，表示像素$i$被分割成$x_i$的能量，二元能量$\theta_{ij}(x_i,x_j)$像素点$i$、$j$同时分割成$x_i$、$x_j$的能量。</li>
<li>一元能量使用FCN的输出</li>
</ul>
<p>$$<br>\theta_i(x_i) &#x3D; -logP(x_i)<br>$$</p>
<ul>
<li>二元能量表达式为</li>
</ul>
<p>$$<br>\theta_{ij}(x_i, x_j)&#x3D;\mu(x_i, x_j)[\omega_1exp(-\frac{\left |p_i-p_j  \right |^2} {2\sigma_\alpha^2}-\frac{\left |I_i-I_j  \right |^2}{2\sigma_\beta^2})+\omega_2exp(-\frac{\left |p_i-p_j  \right |^2} {2\sigma_\gamma^2})]<br>$$</p>
<ul>
<li>主要参考<a href="https://blog.csdn.net/junparadox/article/details/52610744">这里</a></li>
</ul>
<h1 id="v2"><a href="#v2" class="headerlink" title="v2"></a>v2</h1><ul>
<li>v2在v1的基础上增加了多感受野</li>
</ul>
<p><img data-src="/images/4478311.jpg" alt="deeplabv2"></p>
<ul>
<li>参考<a href="https://blog.csdn.net/ming0808sun/article/details/78843471">这里</a></li>
</ul>
]]></content>
      <categories>
        <category>caffe</category>
      </categories>
  </entry>
  <entry>
    <title>diffusion模型基础</title>
    <url>/2025/09/20/diffusion/</url>
    <content><![CDATA[<h2 id="auto-encoder"><a href="#auto-encoder" class="headerlink" title="auto encoder"></a>auto encoder</h2><p>训练目标是：希望输入的图片经过两次转换和原来的图片越接近越好，也被称为“重构-reconstruction”(不需要有标签的数据)<br>常见的应用：原来的向量维度很高，经过encoder之后输出维度小的向量，再用这个低维度的向量去做后面的任务。</p>
<p>auto encoder严格来说不算生成模型，只是在重构，到VAE才算具备的生成能力。</p>
<p><img data-src="/images/v2-4fb6ce4972f4f716553b7d256a13c712_1440w.jpg" alt="img"></p>
<h2 id="VAE（变分自编码器）"><a href="#VAE（变分自编码器）" class="headerlink" title="VAE（变分自编码器）"></a>VAE（变分自编码器）</h2><p>VAE 是一种概率生成模型，通过编码器将输入数据映射到潜空间，再通过解码器从潜空间重构数据。</p>
<p>在VAE中，我们假设$p(Z|X)$后验分布是正态分布，给定一个真实的样本$X_k$，都有专属的分布$p(Z|X_k)$。训练生成器时，采样一个$Z_k$来还原$X_k$。</p>
<p>VAE 的损失函数由两部分组成：</p>
<ul>
<li>reconstruction loss（重构损失）：衡量重构输入 $\hat{X}$ 与原始输入 $X$ 的相似度，常用均方误差（MSE）：</li>
</ul>
<p>$$<br>\text{reconstruction loss} &#x3D; | X - \hat{X} |^2<br>$$</p>
<p>其中 $\hat{X}$ 是解码器生成的重构结果。</p>
<ul>
<li>similarity loss（相似性损失）：即 KL 散度，衡量潜在分布 $\mathcal{N}(\mu, \sigma)$ 与标准正态分布 $\mathcal{N}(0, I)$ 的差异，可以当做是一个正则项。</li>
</ul>
<p>$$<br>\text{similarity loss} &#x3D; D_{KL}(\mathcal{N}(\mu, \sigma) | \mathcal{N}(0, I)) \<br>&#x3D;\frac{1}{2}(-log\sigma ^2+\mu ^2+\sigma ^ 2 - 1)<br>$$</p>
<p>VAE的训练过程本质上是重建损失和KL散度损失之间的权衡：重建损失希望编码器学习到区分度大、能精确重建的潜在表示，这可能倾向于让$\mu$分散、$\sigma$变小。KL散度损失则希望所有分布收缩到0和1，防止VAE退化成普通AE，失去生成新样本的能力。</p>
<p>$$<br>\text{loss} &#x3D; \text{reconstruction loss} + \text{similarity loss}<br>$$</p>
<p><img data-src="/images/v2-36c7da0b2fe37bd021699532a2cff1e8_1440w.jpg" alt="VAE结构与损失函数"></p>
<p><img data-src="/images/v2-784891edddff506ea1670c81767e993c_1440w.jpg" alt="img"></p>
<p>VAE存在一个固有问题，是用L2距离来衡量$\hat{X}$ 与 $X$ 的相似度，L2距离只是近似等于分布距离，会导致图片变得模糊（倾向于生成低频信号，这样L2 loss小）。</p>
<h2 id="GAN（生成对抗网络）"><a href="#GAN（生成对抗网络）" class="headerlink" title="GAN（生成对抗网络）"></a>GAN（生成对抗网络）</h2><p>GAN的思路是reconstruction loss不好衡量，我就用个模型来代替，多加了一个discriminator来判断图片是生成的还是真实的。训练过程是generator和discriminator交替进行。</p>
<p>我以前也写过<a href="/2019/01/27/GAN%E6%80%BB%E7%BB%93/" title="GAN总结">GAN</a>，当时GAN还很火。</p>
<p>$$<br>\min_G \max_D V(D,G) &#x3D; E_{x \sim p_{\text{data}}(x)}[\log D(x)] + E_{z \sim p_{z}(z)}[\log(1 - D(G(z)))]<br>$$</p>
<p>这是<strong>生成对抗网络（GAN）</strong>的<strong>价值函数（Value Function）</strong>或<strong>目标函数（Objective Function）</strong>。</p>
<ul>
<li><strong>$G$</strong> 代表<strong>生成器（Generator）</strong>，其目标是<strong>最小化</strong>这个函数（$\min_G$）。</li>
<li><strong>$D$</strong> 代表<strong>判别器（Discriminator）</strong>，其目标是<strong>最大化</strong>这个函数（$\max_D$）。</li>
<li><strong>$V(D, G)$</strong> 是判别器 $D$ 和生成器 $G$ 之间的<strong>二人极小极大博弈</strong>的值。</li>
</ul>
<p><strong>公式组成部分：</strong></p>
<ol>
<li><p><strong>$E_{x \sim p_{\text{data}}(x)}[\log D(x)]$</strong>:</p>
<ul>
<li>这是判别器<strong>正确判断真实数据</strong> $x$ 为真的期望。</li>
<li>$p_{\text{data}}(x)$ 是真实数据分布。</li>
<li>$D(x)$ 是判别器将真实数据 $x$ 判为真的概率。</li>
<li>判别器 $D$ 想要最大化这一项，使其接近 $1$（$\log(1)&#x3D;0$）。</li>
</ul>
</li>
<li><p><strong>$E_{z \sim p_{z}(z)}[\log(1 - D(G(z)))]$</strong>:</p>
<ul>
<li>这是判别器<strong>正确判断生成数据</strong> $G(z)$ 为假的期望。</li>
<li>$p_{z}(z)$ 是噪声输入 $z$ 的先验分布。</li>
<li>$G(z)$ 是生成器 $G$ 生成的假样本。</li>
<li>$D(G(z))$ 是判别器将假样本 $G(z)$ 判为真的概率。</li>
<li>判别器 $D$ 想要最大化这一项，即使 $D(G(z))$ 接近 $0$（$\log(1-0)&#x3D;\log(1)&#x3D;0$）。</li>
<li>生成器 $G$ 想要<strong>最小化</strong>这一项，即使 $D(G(z))$ 接近 $1$，从而骗过判别器。</li>
</ul>
</li>
</ol>
<h2 id="Diffusion（扩散模型）"><a href="#Diffusion（扩散模型）" class="headerlink" title="Diffusion（扩散模型）"></a>Diffusion（扩散模型）</h2><p>Diffusion 模型是一类基于概率扩散过程的生成模型。其核心思想是将数据逐步加噪声，最终变成纯噪声，然后训练一个模型学会如何一步步去噪，最终还原出原始数据。Diffusion 模型近年来在图像生成等任务上取得了极大成功，代表模型有 DDPM、Stable Diffusion 等。</p>
<p>Diffusion 模型包括两个过程：<strong>正向扩散过程（加噪声）</strong>和<strong>反向去噪过程（生成）</strong>。</p>
<h3 id="1-正向扩散（Forward-Process）"><a href="#1-正向扩散（Forward-Process）" class="headerlink" title="1. 正向扩散（Forward Process）"></a>1. 正向扩散（Forward Process）</h3><p>正向过程将原始数据 $x_0$ 逐步加入高斯噪声，经过 $T$ 步后变成接近各向同性高斯分布的噪声 $x_T$。每一步的加噪过程如下：</p>
<p>$$<br>q(x_t|x_{t-1}) &#x3D; \mathcal{N}(x_t; \sqrt{1-\beta_t} x_{t-1}, \beta_t I)<br>$$</p>
<p>其中 $\beta_t$ 是每一步的噪声强度。</p>
<h3 id="2-反向去噪（Reverse-Process）"><a href="#2-反向去噪（Reverse-Process）" class="headerlink" title="2. 反向去噪（Reverse Process）"></a>2. 反向去噪（Reverse Process）</h3><p>反向过程的目标是从纯噪声 $x_T$ 开始，逐步去噪，最终还原出数据 $x_0$。反向过程同样是高斯过程，但均值和方差需要模型学习：</p>
<p>$$<br>p_\theta(x_{t-1}|x_t) &#x3D; \mathcal{N}(x_{t-1}; \mu_\theta(x_t, t), \Sigma_\theta(x_t, t))<br>$$</p>
<p>训练时，通常用一个神经网络（如 U-Net）预测噪声或数据的均值。</p>
<h3 id="Diffusion-模型的训练"><a href="#Diffusion-模型的训练" class="headerlink" title="Diffusion 模型的训练"></a>Diffusion 模型的训练</h3><p>Diffusion 模型的训练目标是让模型学会在每一步准确地去噪。常见的训练方式是让模型预测每一步加到数据上的噪声 $\epsilon$，损失函数为：</p>
<p>$$<br>L_{simple} &#x3D; E_{x_0, \epsilon, t} \left[ | \epsilon - \epsilon_\theta(x_t, t) |^2 \right]<br>$$</p>
<p>其中 $x_t$ 是在 $t$ 时刻加噪后的数据，$\epsilon$ 是实际加的噪声，$\epsilon_\theta$ 是模型预测的噪声。</p>
<p>训练流程如下：</p>
<ol>
<li>从数据集中采样一张图片 $x_0$。</li>
<li>随机采样一个时间步 $t$。</li>
<li>按照正向扩散公式加噪，得到 $x_t$。</li>
<li>用神经网络输入 $x_t$ 和 $t$，预测噪声 $\epsilon_\theta$。</li>
<li>计算损失并反向传播，更新模型参数。</li>
</ol>
<h3 id="Diffusion-模型的推理（采样）"><a href="#Diffusion-模型的推理（采样）" class="headerlink" title="Diffusion 模型的推理（采样）"></a>Diffusion 模型的推理（采样）</h3><p>推理阶段，从高斯噪声 $x_T$ 开始，利用训练好的模型逐步去噪，最终生成一张图片。每一步的采样过程如下：</p>
<ol>
<li>初始化 $x_T \sim \mathcal{N}(0, I)$。</li>
<li>对 $t &#x3D; T, T-1, …, 1$：<ul>
<li>用模型预测当前噪声 $\epsilon_\theta(x_t, t)$。</li>
<li>计算 $x_{t-1}$ 的均值和方差。</li>
<li>从高斯分布采样 $x_{t-1}$。</li>
</ul>
</li>
<li>最终得到 $x_0$，即生成的图片。</li>
</ol>
<p>推理过程可以理解为“逆过程”，逐步将噪声还原为清晰的样本。采样步数越多，生成质量越高，但速度越慢。近年来也有很多加速采样的改进方法。</p>
]]></content>
      <categories>
        <category>diffusion</category>
      </categories>
      <tags>
        <tag>diffusion</tag>
      </tags>
  </entry>
  <entry>
    <title>flask部署：gunicorn和nginx安装记录</title>
    <url>/2018/01/14/flask%E9%83%A8%E7%BD%B2%EF%BC%9Agunicorn%E5%92%8Cnginx%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="1-gunicorn"><a href="#1-gunicorn" class="headerlink" title="1. gunicorn"></a>1. gunicorn</h3><p>python用的是anaconda 2.7，首先安装虚拟环境<br>好像是anaconda下用virtualenv会有点问题<br>gunicorn的w表示开启进程数<br>PS: <a href="http://www.ruanyifeng.com/blog/2016/02/linux-daemon.html">nohup的详细解释</a> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda create -n newenv python=2.7 </span><br><span class="line">source activate newenv //启用python 虚拟环境</span><br><span class="line">pip install gunicorn //安装gunicorn</span><br><span class="line">nohup gunicorn -w 4 --access-logfile access.log --error-logfile error.log -b 127.0.0.1:8080 manage:app&amp;</span><br><span class="line">app_file_name:app_name &amp; </span><br></pre></td></tr></table></figure>
<p>gunicorn更改log的输出，<a href="http://docs.gunicorn.org/en/latest/settings.html#logging">详细说明</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--access-logfile FILE</span><br><span class="line">--error-logfile FILE, --log-file FILE</span><br></pre></td></tr></table></figure>
<h3 id="2-nginx"><a href="#2-nginx" class="headerlink" title="2. nginx"></a>2. nginx</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure>
<p>然后修改nginx配置，转发至localhost的端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    server_name  _;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8080;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>检查nginx config，重启nginx</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br><span class="line">service naginx restart</span><br></pre></td></tr></table></figure>

<h3 id="3-nginx反向代理和防盗链"><a href="#3-nginx反向代理和防盗链" class="headerlink" title="3.nginx反向代理和防盗链"></a>3.nginx反向代理和防盗链</h3><p>为了防止静态资源被其他站点请求，改为<code>return 403</code>。<br>但这样一来，本站请求的静态资源在经过static后，不再做转发，所以又把转发重复了一遍。<br>不知道有没有更优雅的写法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    server_name  _;</span><br><span class="line"></span><br><span class="line">    location /static/ &#123;</span><br><span class="line">        valid_referers 47.95.193.53;</span><br><span class="line">        if ($invalid_referer) &#123;</span><br><span class="line">            return 403;</span><br><span class="line">        &#125;</span><br><span class="line">        proxy_pass http://127.0.0.1:8080;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8080;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>反爬虫</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">       if ($http_user_agent ~* &quot;python|curl|java|wget|httpclient|okhttp&quot;) &#123;</span><br><span class="line">           return 503; #service unavaiable</span><br><span class="line">       &#125;</span><br><span class="line">       # 正常处理</span><br><span class="line">       ...</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-坑比阿里云的smtp端口"><a href="#4-坑比阿里云的smtp端口" class="headerlink" title="4.坑比阿里云的smtp端口"></a>4.坑比阿里云的smtp端口</h3><p>阿里云默默地把smtp的25端口禁掉了，要使用ssl的465端口<br>使用<code>flask-mail</code>需要在<code>config.py </code>中配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MAIL_SERVER = &#x27;smtp.163.com&#x27;</span><br><span class="line">MAIL_PORT = 465</span><br><span class="line">MAIL_USE_SSL = True</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>flask网站总结</category>
      </categories>
      <tags>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>直观感受下摩尔定律</title>
    <url>/2024/11/05/geekbench/</url>
    <content><![CDATA[<p>数据来源，<a href="https://browser.geekbench.com/v6/cpu/search?utf8=%E2%9C%93&q=iphone+14">geekbench官网搜的</a>，geekbench6<del>，怀疑新cpu本身就占优</del></p>
<p>我这两天把老电脑又拿出来了，装了win11，然后想起来极客湾做的高通855刷win11，说有类似4代i5水平，还是挺出乎意料的，于是把我有的几个设别的geekbench分数查了一下</p>
<p><img data-src="/images/1749975940509.png" alt="1749975940509"></p>
<h2 id="三星-q470bt04，2012"><a href="#三星-q470bt04，2012" class="headerlink" title="三星 q470bt04，2012"></a>三星 q470bt04，2012</h2><p>Mobile DualCore Intel Core i5-3210M</p>
<p>Single-Core Score 523 Multi-Core Score 1116，TDP35w</p>
<blockquote>
<p>TDP（Thermal Design Power）是“热设计功耗”的缩写，主要用于描述处理器或芯片在满负荷运行时产生的热量指标，单位为瓦特（W）</p>
</blockquote>
<p>nVIDIA GeForce GT 650M 1GB</p>
<h2 id="MacBook-Pro（13-英寸，2017，两个-Thunderbolt-3-端口）"><a href="#MacBook-Pro（13-英寸，2017，两个-Thunderbolt-3-端口）" class="headerlink" title="MacBook Pro（13 英寸，2017，两个 Thunderbolt 3 端口）"></a><a href="https://support.apple.com/zh-cn/111951">MacBook Pro（13 英寸，2017，两个 Thunderbolt 3 端口）</a></h2><p>Intel Core i5-7360U 2300 MHz (2 cores)</p>
<p>Single-Core Score 1195 Multi-Core Score 2569，TDP15w</p>
<h2 id="小米-mi8，2018"><a href="#小米-mi8，2018" class="headerlink" title="小米 mi8，2018"></a>小米 mi8，2018</h2><p>Snapdragon 845 2649 MHz (8 cores)</p>
<p>Single-Core Score 474 Multi-Core Score 1921</p>
<h2 id="ipad-mini5，2019"><a href="#ipad-mini5，2019" class="headerlink" title="ipad mini5，2019"></a>ipad mini5，2019</h2><p>Apple A12 Bionic 2490 MHz (6 cores)</p>
<p>Single-Core Score 1294 Multi-Core Score 2662</p>
<h2 id="iphone14，2022"><a href="#iphone14，2022" class="headerlink" title="iphone14，2022"></a>iphone14，2022</h2><p>Apple A15 Bionic 3230 MHz (6 cores)</p>
<p>Single-Core Score 2222 Multi-Core Score 5538</p>
]]></content>
      <categories>
        <category>发疯文学</category>
      </categories>
      <tags>
        <tag>乱感叹</tag>
      </tags>
  </entry>
  <entry>
    <title>GPTs</title>
    <url>/2024/03/15/gpts/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>模型</th>
<th>发布时间</th>
<th>层数</th>
<th>头数</th>
<th>词向量长度</th>
<th>参数量</th>
<th>预训练数据量</th>
</tr>
</thead>
<tbody><tr>
<td>GPT-1</td>
<td>2018</td>
<td>12</td>
<td>12</td>
<td>768</td>
<td>117M</td>
<td>约 5GB</td>
</tr>
<tr>
<td>GPT-2</td>
<td>2019</td>
<td>48</td>
<td>-</td>
<td>1600</td>
<td>1.5B</td>
<td>40GB</td>
</tr>
<tr>
<td>GPT-3</td>
<td>2020</td>
<td>96</td>
<td>96</td>
<td>12888</td>
<td>175B</td>
<td>45TB</td>
</tr>
<tr>
<td>instructGPT</td>
<td>2022</td>
<td>96</td>
<td>96</td>
<td>12888</td>
<td>175B</td>
<td></td>
</tr>
</tbody></table>
<span id="more"></span>


<h1 id="GPT1"><a href="#GPT1" class="headerlink" title="GPT1"></a>GPT1</h1><p>数据集：BooksCorpus数据集包含7000本没有发布的书籍。选这个数据集的原因有二：1. 数据集拥有更长的上下文依赖关系，使得模型能学得更长期的依赖关系；2. 这些书籍因为没有发布，所以很难在下游数据集上见到，更能验证模型的泛化能力。</p>
<p>网络结构：12层transformer，每个有12个头，使用BPE编码，编码长度768，位置长度3072也参与训练。</p>
<ul>
<li>单向transformer，使用masked self attention，对于当前词，只能感知到位置靠前词的信息<br><img data-src="/images/1749978474703.png" alt="1749978474703"></li>
<li>pretrain，根据前1024个词，预测下一个词，最大似然函数</li>
<li>finetune，监督任务和无监督任务一起训练</li>
</ul>
<p>有4个任务</p>
<ul>
<li>分类任务：将起始和终止token加入到原始序列两端，输入transformer中得到特征向量，最后经过一个全连接得到预测的概率分布；</li>
<li>自然语言推理：将前提（premise）和假设（hypothesis）通过分隔符（Delimiter）隔开，两端加上起始和终止token。再依次通过transformer和全连接得到预测结果；</li>
<li>语义相似度：输入的两个句子，正向和反向各拼接一次，然后分别输入给transformer，得到的特征向量拼接后再送给全连接得到预测结果；</li>
<li>问答和常识推理：将n个选项的问题抽象化为n个二分类问题，即每个选项分别和内容进行拼接，然后各送入transformer和全连接中，最后选择置信度最高的作为预测结果。</li>
</ul>
<p><img data-src="/images/1749975772757.png" alt="1749975772757"></p>
<h1 id="GPT2"><a href="#GPT2" class="headerlink" title="GPT2"></a>GPT2</h1><p>核心思路：任何有监督任务都是语言模型的一个子集，当模型的容量非常大且数据量足够丰富时，仅仅靠训练语言模型的学习便可以完成其他有监督学习的任务。完全舍弃了finetune，验证zero-shot能力。把单任务的 $P(output | input)$ 改成更具通用性的 $P(output | input,task)$。</p>
<p>数据集：Reddit上高赞的文章，命名为WebText。数据集共有约800万篇文章，累计体积约40G。为了避免和测试集的冲突，WebText移除了涉及Wikipedia的文章。</p>
<p>网络结构：48层的transformer，增加了一个LN层。</p>
<h1 id="GPT3"><a href="#GPT3" class="headerlink" title="GPT3"></a>GPT3</h1><p>In-context learning，$P(output | input)$ 到 $P(output | input,example)$。</p>
<p>类似于MAML元学习，外循环是无监督的语言模型，内循环是各种情境学习。</p>
<p><img data-src="/images/1749980016997.png" alt="1749980016997"></p>
<p>数据集：Common Crawl，高质量的WebText2，Books1，Books2和Wikipedia</p>
<p>网络结构：96层96个头，词向量12888（怎么是个奇怪的数），GPT系列从1到3，通通采用的是transformer架构，模型结构并没有创新性的设计。</p>
<h1 id="instruct-GPT"><a href="#instruct-GPT" class="headerlink" title="instruct GPT"></a>instruct GPT</h1><p><img data-src="/images/1749980460727.png" alt="1749980460727"></p>
<p>包括上面三个部分，SFT、RM、PPO（RLHF，Reinforcement Learning fromHuman Feedback）。</p>
<p>SFT数据一部分来自使用OpenAI的PlayGround的用户，另一部分来自OpenAI雇佣的40名标注工（labeler），和pretrain是一样的。</p>
<p>RM结构是将SFT训练后的模型的最后的嵌入层去掉后的模型。它的输入是prompt和Reponse，输出是奖励值。具体的讲，对于每个prompt，InstructGPT会随机生成n个输出，然后它们向每个labeler成对的展示输出结果，也就是每个prompt共展示 $C_n^2$个结果，然后用户从中选择效果更好的输出。在训练时，将每个prompt的$C_n^2$个响应对作为一个batch，这种按prompt为batch的训练方式要比传统的按样本为batch的方式更不容易过拟合，因为这种方式每个prompt会且仅会输入到模型中一次。</p>
<p>$$<br>L &#x3D; -\frac{1}{C_n^2}E_{(x,y_w,y_l)~D}[log(\sigma(r_\theta(x,y_w)-r_\theta(x,y_l)))]<br>$$</p>
<p>相当于是个ltr的loss，w&#x3D;win，l&#x3D;lose。</p>
<p>PPO数据没有进行标注，它均来自GPT-3的API的用户。有不同用户提供的不同种类的生成任务，其中占比最高的包括生成任务，QA，头脑风暴，对话等。</p>
<h1 id="RLHF-PPO"><a href="#RLHF-PPO" class="headerlink" title="RLHF-PPO"></a>RLHF-PPO</h1><ul>
<li>Actor Model：就是我们想要训练的目标语言模型，需要训练</li>
<li>Critic Model：预估总收益$ V_t$，需要训练</li>
<li>Reward Model：计算即时收益 $R_t$，参数冻结</li>
<li>Reference Model：它的作用是在RLHF阶段给语言模型增加一些约束，防止语言模型训歪，就是SFT模型，参数冻结</li>
</ul>
<p>RLHF-PPO的训练过程</p>
<ul>
<li>准备一个batch的prompts</li>
<li>将这个batch的prompts喂给Actor模型，让它生成对应的responses</li>
<li>把prompt+responses喂给Critic&#x2F;Reward&#x2F;Reference模型，让它生成用于计算actor&#x2F;critic loss的数据，这些数据称为经验（experiences）。</li>
<li>根据这些经验，实际计算出actor&#x2F;critic loss，然后更新Actor和Critic模型</li>
</ul>
<p><img data-src="/images/v2-5b0028cc73d9f2aa599b256df24bda83_r.jpg" alt="img"></p>
<p>在强化学习中，收集一个batch的经验是非常耗时的。对应RLHF，收集一次经验，它要等四个模型做完推理才可以，因此，一个batch的经验，计算ppo-epochs次loss，更新ppo-epochs次Actor和Critic模型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化RLHF中的四个模型</span></span><br><span class="line">actor, critic, reward, ref = initialize_models()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练, 对于每一个batch的数据</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> steps: </span><br><span class="line">    <span class="comment"># 先收集经验值</span></span><br><span class="line">    exps = generate_experience(prompts, actor, critic, reward, ref)</span><br><span class="line">    <span class="comment"># 一个batch的经验值将被用于计算ppo_epochs次loss，更新ppo_epochs次模型</span></span><br><span class="line">    <span class="comment"># 这也意味着，当你计算一次新loss时，你用的是更新后的模型</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> ppo_epochs:</span><br><span class="line">        actor_loss = cal_actor_loss(exps, actor)</span><br><span class="line">        critic_loss = cal_critic_loss(exps, critic)</span><br><span class="line">        actor.backward(actor_loss)</span><br><span class="line">        actor.step()</span><br><span class="line">        critc.backward(critic_loss)</span><br><span class="line">        critic.step()</span><br></pre></td></tr></table></figure>

<h2 id="actor-loss"><a href="#actor-loss" class="headerlink" title="actor loss"></a>actor loss</h2><p>$$<br>actor_loss &#x3D; -min[Adv_t * \frac{P(A_t|S_t)}{P_{old}(A_t|S_t)}, Adv_t * clip(\frac{P(A_t|S_t)}{P_{old}(A_t|S_t)}, 0.8, 1.2)]<br>$$</p>
<p>其中<br>$$<br>Adv_t&#x3D;(R_t+\gamma*V_{t+1}-V_{t})+\gamma * \lambda * Adv_{t+1}<br>$$</p>
<h2 id="critic-loss"><a href="#critic-loss" class="headerlink" title="critic loss"></a>critic loss</h2><p>$$<br>critic_loss &#x3D; (R_t+\gamma*V_{t+1}-V_t)^2<br>$$</p>
<p>其中，$V_t$是Critic对t时刻的总收益的预估，这个总收益包含即时和未来的概念（预估收益），<br>$R_t+\gamma*V_{t+1}$是Reward计算出的即时收益$R_t$，Critic预测出的$t+1$及之后时候的收益的折现$V_{t+1}$，这是比<br>$V_t$更接近t时刻真值总收益的一个值（实际收益）</p>
<h3 id="一个小注意点"><a href="#一个小注意点" class="headerlink" title="一个小注意点"></a>一个小注意点</h3><p>最大化目标函数$J(\theta)&#x3D;\mathbb{E}<em>{\tau \sim \pi</em>{\theta}}[R(\tau)]$。根据期望的定义，它可以写成：</p>
<p>$$<br>J(\theta)&#x3D;\sum_{\tau} P(\tau \mid \theta) R(\tau) \tag{6}<br>$$</p>
<p>其中 $P(\tau \mid \theta)$ 表示参数 $\theta$ 下某条轨迹 $\tau$ 发生的概率，$R(\tau)$ 表示这条轨迹的总回报。</p>
<p>对它求梯度：</p>
<p>$$<br>\nabla_{\theta} J(\theta)&#x3D;\nabla_{\theta} \sum_{\tau} P(\tau \mid \theta) R(\tau)&#x3D;\sum_{\tau}\left(\nabla_{\theta} P(\tau \mid \theta)\right) R(\tau) \tag{7}<br>$$</p>
<p>这个形式不是一个期望，我们无法通过蒙特卡洛采样来估计它。而 $\tau$ 有无限种，我们无法穷举。</p>
<blockquote>
<p>形如 $\mathbb{E}[f(X)]&#x3D;\sum_{x} P(x) f(x)$ 的式子，我们可以通过从 $P(X)$ 中采样 $x_i$，然后用 $\frac{1}{N} \sum_{i} f(x_i)$ 来近似。</p>
</blockquote>
<p>可以利用log导数的性质$\nabla_{\theta} P(\tau \mid \theta)&#x3D;P(\tau \mid \theta) \nabla_{\theta} \log P(\tau \mid \theta)$</p>
<p>$$<br>\nabla_{\theta} J(\theta) &#x3D; \sum_{\tau}\left(\nabla_{\theta} P(\tau \mid \theta)\right) R(\tau) \</p>
<p>&#x3D;\sum_{\tau} P(\tau \mid \theta)\left[\left(\nabla_{\theta} \log P(\tau \mid \theta)\right) R(\tau)\right] \</p>
<p>&#x3D; \mathbb{E}<em>{\tau \sim \theta}\left[\left(\nabla</em>{\theta} \log P(\tau \mid \theta)\right) R(\tau)\right]<br>$$</p>
<p>进一步可以证明，$\nabla_{\theta} \log P(\tau \mid \theta)&#x3D;\sum_{t&#x3D;0}^{T} \nabla_{\theta} \log \pi_{\theta}\left(a_t \mid s_t\right)$，这就是我们熟悉的策略梯度定理了。</p>
]]></content>
      <categories>
        <category>推荐</category>
      </categories>
      <tags>
        <tag>GPT</tag>
        <tag>LLM</tag>
        <tag>RLHF</tag>
        <tag>PPO</tag>
      </tags>
  </entry>
  <entry>
    <title>grep中的正则表达式</title>
    <url>/2018/11/20/grep%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p>照抄的<a href="https://blog.csdn.net/yufenghyc/article/details/51078107">这里</a></p>
<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><ul>
<li>基础正则，basic regex，即bres</li>
<li>扩展正则，extended regex，即eres</li>
<li>perl的正则，perl regex，即pres</li>
</ul>
<h1 id="不同正则表达式的区别"><a href="#不同正则表达式的区别" class="headerlink" title="不同正则表达式的区别"></a>不同正则表达式的区别</h1><ul>
<li>bres需要多写转义</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">\&#123;n,m\&#125;, x\|y #bres需要写转义，</span><br><span class="line">&#123;n,m&#125;, x|y    #而eres和pres不需要</span><br></pre></td></tr></table></figure>
<ul>
<li>pres可以用下面这些，其它两种不可以。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\d, \D, \S, \s</span><br></pre></td></tr></table></figure>

<h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h1><ul>
<li>默认的正则为基础正则，”-E”表示eres，”-P”表示pers.</li>
<li>egrep等效于grep -E，egrep -P等效于 grep -P</li>
</ul>
<h1 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h1><ul>
<li>默认是eres，-r表示要用eres，不支持pres</li>
<li>mac下到sed和linux还不太一样，写inplace替换要这样，其中，<code>-i</code>后面是</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;&#x27; &#x27;s/http.*ot0uaqt93.bkt.*\//\/images\//g&#x27; `ls *.md`</span><br></pre></td></tr></table></figure>

<h1 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h1><ul>
<li>厉害了，只支持eres</li>
</ul>
]]></content>
      <tags>
        <tag>正则</tag>
        <tag>grep</tag>
      </tags>
  </entry>
  <entry>
    <title>https原理和使用流程</title>
    <url>/2018/01/14/https%E5%8E%9F%E7%90%86%E5%92%8C%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="http原理"><a href="#http原理" class="headerlink" title="http原理"></a>http原理</h3><p>看<a href="https://www.cnblogs.com/xinzhao/p/4949344.html">这里</a></p>
<h3 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h3><ol>
<li>上<a href="https://www.aliyun.com/product/cas">阿里云</a>或七牛云的免费ssl服务，阿里云不用填什么资料直接就审核了，七牛云好像麻烦一点。</li>
<li>配置DNS</li>
<li>审核通过之后，下载证书文件，将证书文件放在Nginx安装目录cert中，一般为<code>/etc/nginx</code></li>
<li>配置nginx，主要是将http重定向到https上<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  _;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        rewrite ^/(.*)$ https://yongxinxue.xin/$1 permanent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443;</span><br><span class="line">    server_name _;</span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate   cert/214462643660969.pem;</span><br><span class="line">    ssl_certificate_key  cert/214462643660969.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    location / &#123;</span><br><span class="line">        if ( $host != &#x27;yongxinxue.xin&#x27; )&#123;</span><br><span class="line">            rewrite ^/(.*)$ https://yongxinxue.xin/$1 permanent;</span><br><span class="line">        &#125;</span><br><span class="line">        proxy_pass http://127.0.0.1:8080;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>flask网站总结</category>
      </categories>
      <tags>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery笔记</title>
    <url>/2018/02/25/jQuery%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<ol>
<li>按属性选取<code>var email = $(&#39;[name=email]&#39;);</code></li>
<li>jQuery对象和DOM对象之间可以互相转化：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var div = $(&#x27;#abc&#x27;); // jQuery对象</span><br><span class="line">var divDom = div.get(0); // 假设存在div，获取第1个DOM元素</span><br><span class="line">var another = $(divDom); // 重新把DOM包装为jQuery对象</span><br></pre></td></tr></table></figure></li>
<li>过滤器<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;ul.lang li&#x27;); // 选出JavaScript、Python和Lua 3个节点</span><br><span class="line"></span><br><span class="line">$(&#x27;ul.lang li:first-child&#x27;); // 仅选出JavaScript</span><br><span class="line">$(&#x27;ul.lang li:last-child&#x27;); // 仅选出Lua</span><br><span class="line">$(&#x27;ul.lang li:nth-child(2)&#x27;); // 选出第N个元素，N从1开始</span><br><span class="line">$(&#x27;ul.lang li:nth-child(even)&#x27;); // 选出序号为偶数的元素</span><br><span class="line">$(&#x27;ul.lang li:nth-child(odd)&#x27;); // 选出序号为奇数的元素</span><br></pre></td></tr></table></figure>
css selector, <code>element element</code>是后代就可以，<code>element&gt;element</code>必须是父子</li>
<li>ajax jsonp<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  type: &#x27;get&#x27;,</span><br><span class="line">  url: &quot;http://api.money.126.net/data/feed/0000001,1399001&quot;,</span><br><span class="line">  dataType: &#x27;jsonp&#x27;,</span><br><span class="line">  success: function(data) &#123;</span><br><span class="line">        var str = &#x27;当前价格：&#x27; +</span><br><span class="line">            data[&#x27;0000001&#x27;].name + &#x27;: &#x27; +</span><br><span class="line">            data[&#x27;0000001&#x27;].price + &#x27;；&#x27; +</span><br><span class="line">            data[&#x27;1399001&#x27;].name + &#x27;: &#x27; +</span><br><span class="line">            data[&#x27;1399001&#x27;].price;</span><br><span class="line">        alert(str);</span><br><span class="line">    &#125;,</span><br><span class="line">  error: function() &#123;</span><br><span class="line">        alert(&#x27;出错了&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
jQuery的jqXHR对象类似一个Promise对象，我们可以用链式写法来处理各种回调<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">      type: &#x27;get&#x27;,</span><br><span class="line">      url: &quot;http://api.money.126.net/data/feed/0000001,1399001&quot;,</span><br><span class="line">      dataType: &#x27;jsonp&#x27;</span><br><span class="line">&#125;).done(function (data) &#123;</span><br><span class="line">    ajaxLog(&#x27;成功, 收到的数据: &#x27; + JSON.stringify(data));</span><br><span class="line">&#125;).fail(function (xhr, status) &#123;</span><br><span class="line">    ajaxLog(&#x27;失败: &#x27; + xhr.status + &#x27;, 原因: &#x27; + status);</span><br><span class="line">&#125;).always(function () &#123;</span><br><span class="line">    ajaxLog(&#x27;请求完成: 无论成功或失败都会调用&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>flask网站总结</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>mobileNet和shuffleNet</title>
    <url>/2018/05/13/mobileNet%E5%92%8CshuffleNet/</url>
    <content><![CDATA[<h3 id="先说mobileNet"><a href="#先说mobileNet" class="headerlink" title="先说mobileNet"></a>先说mobileNet</h3><ul>
<li>使用depthwise convolution和point wise(1*1) convolution代替标准的convolution<br><img data-src="/images/8709950.jpg"></li>
<li>(b)类似于group为M的卷积，m-th filter is applied to m-th channel</li>
<li>计算量是原来的$\frac{1}{N}+\frac{1}{D_k^2}$，kernel一般是3，所以可以减少到1&#x2F;8到1&#x2F;9</li>
<li>论文里还提出了两个控制计算量的超参数</li>
<li>width multiplier，$\alpha$，乘在channel前面，计算量减小到$\frac{1}{\alpha}$</li>
<li>resolution multiplier，$\beta$，乘在输入到尺寸前面，计算量减小到$\frac{1}{\beta}$</li>
<li>好像文章里公式写错了，卷积到计算量应该是乘输出的尺寸，而不是输入到尺寸吧。。。</li>
</ul>
<h3 id="shuffleNet"><a href="#shuffleNet" class="headerlink" title="shuffleNet"></a><a href="https://blog.csdn.net/u014380165/article/details/75137111">shuffleNet</a></h3><ul>
<li>在resnet的基础上，用带group的1*1卷积代替原来的1*1卷积<br><img data-src="/images/32435128.jpg"></li>
<li>group操作会带来边界效应，学出来的特征会局限，所以就有了channel shuffle层</li>
<li>随机层的caffe实现是先reshape再transpose再flatten，不是真随机，所以可以实现backward</li>
<li>3*3的depth wise的卷积就是moblieNet里用到的</li>
<li>然后用shuffleNet Unit组成shuffetNet网络<br><img data-src="/images/77705439.jpg"></li>
<li>一个重要结论是group个数的线性增长并不会带来分类准确率的线性增长。但是发现ShuffleNet对于小的网络效果更明显，因为一般小的网络的channel个数都不多，在限定计算资源的前提下，ShuffleNet可以使用更多的feature map。</li>
</ul>
]]></content>
      <categories>
        <category>caffe</category>
      </categories>
  </entry>
  <entry>
    <title>mt19937</title>
    <url>/2018/06/12/mt19937/</url>
    <content><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul>
<li>你需要把原来mtalab的代码翻译为c、python等等</li>
<li>你的代码里使用了随机数</li>
<li>你的老板又要求你实现的方法exactly the same</li>
<li>参考<a href="https://code.i-harness.com/zh-CN/q/11a13e1">这里</a></li>
</ul>
<h3 id="mt19927"><a href="#mt19927" class="headerlink" title="mt19927"></a>mt19927</h3><ul>
<li><a href="https://en.wikipedia.org/wiki/Mersenne_Twister">Mersenne Twister</a>是目前比较常用的随机数生成器</li>
<li>周期非常长$2^{19937}-1$，速度非常快</li>
</ul>
<h3 id="python代码"><a href="#python代码" class="headerlink" title="python代码"></a>python代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">np.random.seed(1337)</span><br><span class="line">A = np.random.random((5,3))</span><br><span class="line">A.T</span><br><span class="line">array([[ 0.26202468,  0.45931689,  0.26194293,  0.11527423,  0.12505793],</span><br><span class="line">       [ 0.15868397,  0.32100054,  0.97608528,  0.38627507,  0.98354861],</span><br><span class="line">       [ 0.27812652,  0.51839282,  0.73281455,  0.62850118,  0.44322487]])</span><br></pre></td></tr></table></figure>

<h3 id="MATLAB代码"><a href="#MATLAB代码" class="headerlink" title="MATLAB代码"></a>MATLAB代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rand(&#x27;twister&#x27;, 1337);</span><br><span class="line">A = rand(3,5)</span><br><span class="line">A = </span><br><span class="line"> Columns 1 through 2</span><br><span class="line">   0.262024675015582   0.459316887214567</span><br><span class="line">   0.158683972154466   0.321000540520167</span><br><span class="line">   0.278126519494360   0.518392820597537</span><br><span class="line">  Columns 3 through 4</span><br><span class="line">   0.261942925565145   0.115274226683149</span><br><span class="line">   0.976085284877434   0.386275068634359</span><br><span class="line">   0.732814552690482   0.628501179539712</span><br><span class="line">  Column 5</span><br><span class="line">   0.125057926335599</span><br><span class="line">   0.983548605143641</span><br><span class="line">   0.443224868645128</span><br></pre></td></tr></table></figure>

<h3 id="c-代码"><a href="#c-代码" class="headerlink" title="c++代码"></a>c++代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;random&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  unsigned seed1 = 1337;</span><br><span class="line">  std::mt19937 g1(seed1);</span><br><span class="line">  for(int i=0; i&lt;100; i++)</span><br><span class="line">    std::cout &lt;&lt; 1.0*g1()/g1.max() &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="还有一些"><a href="#还有一些" class="headerlink" title="还有一些"></a>还有一些</h3><p>最简单的生成算法，混合同余法，可以看<a href="https://www.cnblogs.com/houkai/p/3807041.html">这里</a></p>
<p>c++11的random库，可以参考<a href="https://www.cnblogs.com/byhj/p/4149467.html">这里</a></p>
]]></content>
  </entry>
  <entry>
    <title>nginx 开启gzip</title>
    <url>/2018/01/09/nginx-%E5%BC%80%E5%90%AFgzip/</url>
    <content><![CDATA[<h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    ...</span><br><span class="line">    gzip on;</span><br><span class="line">    </span><br><span class="line">    gzip_min_length 1k;</span><br><span class="line">    # 启用gzip压缩的最小文件，小于设置值的文件将不会压缩</span><br><span class="line"></span><br><span class="line">    gzip_buffers 16 64k;</span><br><span class="line"></span><br><span class="line">    gzip_http_version 1.1;</span><br><span class="line"></span><br><span class="line">    gzip_comp_level 6;</span><br><span class="line">    # gzip 压缩级别，1-10，数字越大压缩的越好，也越占用CPU时间</span><br><span class="line">    </span><br><span class="line">    gzip_types text/plain application/x-javascript text/css application/xml application/javascript application/json;</span><br><span class="line">    # 进行压缩的文件类型。</span><br><span class="line"></span><br><span class="line">    gzip_vary on;</span><br><span class="line">    # 是否在http header中添加Vary: Accept-Encoding</span><br><span class="line"></span><br><span class="line">    gzip_disable &quot;MSIE [1-6]\.&quot;;</span><br><span class="line">    # 禁用IE 6 gzip</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="效果拔群"><a href="#效果拔群" class="headerlink" title="效果拔群"></a>效果拔群</h2><p>百度统计的测试结果，从12s提高到6s</p>
<p><img data-src="/images/94641900.jpg" title="-6s, excited!"> </p>
]]></content>
      <categories>
        <category>flask网站总结</category>
      </categories>
      <tags>
        <tag>nginx配置</tag>
      </tags>
  </entry>
  <entry>
    <title>npm、webpack和vue</title>
    <url>/2019/05/26/npm%E3%80%81webpack%E5%92%8Cvue/</url>
    <content><![CDATA[<h1 id="旧内容"><a href="#旧内容" class="headerlink" title="旧内容"></a>旧内容</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install packageName -g //全局安装，安装在Node安装目录下的node_modules下</span><br><span class="line">npm install packageName --save //安装到项目目录下，并在package.json文件的dependencies中写入依赖，简写为-S</span><br><span class="line">npm install packageName --save-dev //安装到项目目录下，并在package.json文件的devDependencies中写入依赖，简写为-D</span><br></pre></td></tr></table></figure>


<p><a href="https://www.jianshu.com/p/42e11515c10f">webpack</a>，这个是webpack的入门教程。链接没了</p>
<h1 id="2021年追加"><a href="#2021年追加" class="headerlink" title="2021年追加"></a>2021年追加</h1><p>最近在弄gitbook，发现需要node老版本，发现node也需要像python一样，搞点虚拟环境</p>
<p>所以<a href="https://stackoverflow.com/questions/11177954/how-do-i-completely-uninstall-node-js-and-reinstall-from-beginning-mac-os-x">卸载了node</a></p>
<p>装了nvm</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>webpack</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>onlyoffice文档在线编辑</title>
    <url>/2020/03/29/onlyoffice%E6%96%87%E6%A1%A3%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91/</url>
    <content><![CDATA[<ul>
<li>文档列表页</li>
</ul>
<p><img data-src="/images/screencapture-192-168-1-104-8088-onlyoffice-2020-05-11-22_27_51.png" alt="screencapture-192-168-1-104-8088-onlyoffice-2020-05-11-22_27_51"></p>
<ul>
<li>文档编辑页</li>
</ul>
<p><img data-src="/images/screencapture-192-168-1-104-8088-onlyoffice-1-2020-05-11-22_28_35.png" alt="screencapture-192-168-1-104-8088-onlyoffice-1-2020-05-11-22_28_35"></p>
<h1 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h1><ul>
<li>一个文档在线编辑平台，部署在局域网，可以用作组内日报&#x2F;周报系统</li>
<li>其实是从<a href="https://github.com/3xxx/engineercms">3xxx&#x2F;engineercms</a> fork来的，只保留了文档编辑的功能</li>
</ul>
<h1 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h1><ul>
<li>docker启动onlyoffice <code>docker run -i -t -d -p 9000:80 onlyoffice/documentserver</code></li>
<li>修改conf&#x2F;app.conf中的ip配置，注意不能写localhost，不然局域网的其他用户访问不到<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">documentserverip = http://192.168.1.107:9000</span><br><span class="line">entryserverip = http://192.168.1.107:8088</span><br></pre></td></tr></table></figure></li>
<li>解压main.rar，运行exe，浏览器端访问entryserverip</li>
</ul>
<h1 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h1><ul>
<li>onlyoffice负责文档编辑的功能，onlyoffice的api可以参考<a href="https://www.jianshu.com/p/2d4f977ffeac">这里</a></li>
<li>本项目负责文档的上传、删除、用户管理等，采用beego MVC架构</li>
</ul>
<h1 id="相比3xxx-engineercms做了哪些修改"><a href="#相比3xxx-engineercms做了哪些修改" class="headerlink" title="相比3xxx&#x2F;engineercms做了哪些修改"></a>相比<a href="https://github.com/3xxx/engineercms">3xxx&#x2F;engineercms</a>做了哪些修改</h1><p>修改主要是为了更适合做日报系统</p>
<h2 id="删除了文档编辑以外的功能"><a href="#删除了文档编辑以外的功能" class="headerlink" title="删除了文档编辑以外的功能"></a>删除了文档编辑以外的功能</h2><h2 id="文档自动上传"><a href="#文档自动上传" class="headerlink" title="文档自动上传"></a>文档自动上传</h2><ul>
<li><p>日报中包含日期，如“总裁办公室20200331.xlsx”，会自动复制日期最新的一份日报，并对日报做清空后自动上传</p>
</li>
<li><p>那些内容清空？</p>
<p>只保留第一个sheet，sheet命名为日期（MMdd）</p>
<p>conf&#x2F;app.conf中，设置那些行和列以内保留，≤rowkeep和colkeep的内容保留</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#####日报清空，前多少行和列保留，固定只保留第一个sheet</span><br><span class="line">rowkeep = 1</span><br><span class="line">colkeep = 4</span><br></pre></td></tr></table></figure>

<ul>
<li><p>什么时候上传？</p>
<p>每次打开文档列表也都判断是否有今天的日报，没有就自动上传</p>
<p>节假日没有人访问，所以避免了逻辑判断是否上传</p>
</li>
</ul>
<h2 id="文档自动保存"><a href="#文档自动保存" class="headerlink" title="文档自动保存"></a>文档自动保存</h2><ul>
<li><p>原来文档不会自动保存吗？</p>
<p>编辑后的文档都暂时存在onlyoffice的docker中</p>
<p>只有在所有人关闭文档的情况下，才会将文档内容保存到本地</p>
<p>做不到全部用户及时关闭文档，而如果docker崩了，文档内容就丢失了</p>
</li>
<li><p>如何解决？</p>
<p>在没有用户使用的情况下强制保存。conf&#x2F;app.conf中设置了定时保存，默认设置是晚上10点，每10分钟保存一次</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#####文档保存本地</span><br><span class="line">forcesavecron = &quot;0 */10 22 * * *&quot;</span><br><span class="line">###              秒 分  时  日 月 周</span><br></pre></td></tr></table></figure>


<h2 id="登录权限"><a href="#登录权限" class="headerlink" title="登录权限"></a>登录权限</h2><ul>
<li>内网用户比较可靠，不做权限限制，不需要注册账户</li>
<li>可以不登录用ip作为用户名</li>
<li>可以“假登录”，直接登录，不检查用户是否存在，不检查密码</li>
</ul>
]]></content>
      <tags>
        <tag>onlyoffice</tag>
        <tag>beego</tag>
      </tags>
  </entry>
  <entry>
    <title>openCV 总结</title>
    <url>/2018/07/04/openCV-%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="一些图像操作"><a href="#一些图像操作" class="headerlink" title="一些图像操作"></a>一些图像操作</h1><ul>
<li><a href="http://www.opencv.org.cn/opencvdoc/2.3.2/html/doc/tutorials/imgproc/erosion_dilatation/erosion_dilatation.html">腐蚀与膨胀(Eroding and Dilating)</a></li>
</ul>
<blockquote>
<p>膨胀腐蚀都是针对亮色区域说的，膨胀是取最大值，腐蚀是最小值，实现的话，最直接的方法是四个for循环</p>
</blockquote>
<ul>
<li><p><strong>开运算</strong>：腐蚀+膨胀，可以去除图中的小白点；<strong>闭运算</strong>：膨胀+腐蚀，可以去除图片中的小黑点</p>
</li>
<li><p><strong>top hat</strong>：原图-开，得到的是开运算中被去掉的小白点；<strong>black hat</strong>：原图-闭，得到闭运算中去掉的小黑点</p>
</li>
<li><p><a href="https://www.cnblogs.com/skyfsm/p/6902524.html">霍夫线变换</a></p>
</li>
<li><p>直方图均衡化</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cv::<span class="built_in">equalizeHist</span>(srcmat, dstmat);</span><br><span class="line"></span><br><span class="line"><span class="function">cv::Mat <span class="title">lookup</span><span class="params">(<span class="number">1</span>, <span class="number">256</span>, CV_8U)</span></span>;</span><br><span class="line"><span class="comment">// p[i] 是强度小于等于i的比例</span></span><br><span class="line">lookup.<span class="built_in">at</span>&lt;uchar&gt;(i) = <span class="built_in">static_cast</span>&lt;uchar&gt;(<span class="number">255.0</span> * p[i]);</span><br><span class="line">dstmat = <span class="built_in">applyLookUp</span>(srcmat, lookup);</span><br></pre></td></tr></table></figure>

<h1 id="C的接口"><a href="#C的接口" class="headerlink" title="C的接口"></a>C的接口</h1><ul>
<li>字体的说明参考<a href="https://blog.csdn.net/longzaitianya1989/article/details/8121286">这里</a></li>
<li>cvReleaseImage，只是将IplImage*型的变量值赋为NULL，而这个变量本身还是存在的并且在内存中的存储位置不变</li>
<li><code>iplimg-&gt;imageSize == iplimg-&gt;height * iplimg-&gt;widthStep</code>，而不是f<code>rame-&gt;height * frame-&gt;width</code></li>
<li><code>iplimg-&gt;imageData</code>是对齐的内存，<a href="https://docs.opencv.org/3.4/d6/d5b/structIplImage.html">官方文档</a>说<code>iplimg-&gt;imageDataOrigin</code>是没有对齐的内存，还没有验证过</li>
<li>默认的存储方式是BGR，不是RGB</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读图</span></span><br><span class="line">IplImage* iplimg = cvLoadImage(<span class="string">&quot;heels.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把cv::mat改为c的图</span></span><br><span class="line">*iplimg = IplImage(matimg);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建新图，最后一个参数是channel数</span></span><br><span class="line">IplImage* iplimg=cvCreateImage(cvSize(<span class="number">360</span>, <span class="number">640</span>), IPL_DEPTH_8U, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示图</span></span><br><span class="line">cvNamedWindow(<span class="string">&quot;img&quot;</span>, <span class="number">0</span>);  </span><br><span class="line">cvShowImage(<span class="string">&quot;img&quot;</span>, iplimg);  </span><br><span class="line">cvWaitKey(<span class="number">0</span>);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印字</span></span><br><span class="line">CvFont font;</span><br><span class="line">cvInitFont(&amp;font, CV_FONT_HERSHEY_COMPLEX, <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>);  </span><br><span class="line">cvPutText(iplimg, <span class="string">&quot;This is a picture named lena!&quot;</span>, cvPoint(<span class="number">50</span>, <span class="number">50</span>), &amp;font, CV_RGB(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存图</span></span><br><span class="line">cvSaveImage(<span class="string">&quot;c:\\test1.jpg&quot;</span>, iplimg);  </span><br></pre></td></tr></table></figure>

<h1 id="C-的接口"><a href="#C-的接口" class="headerlink" title="C++的接口"></a>C++的接口</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读图</span></span><br><span class="line">cv::Mat matimg = cv::<span class="built_in">imread</span> (<span class="string">&quot;heels.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把IplImage改为c++接口，第二个参数是需不需要拷贝，默认是false</span></span><br><span class="line">matimg = cv::<span class="built_in">Mat</span>(iplimg, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建新图，CV_8UC3是三通道，CV_8UC1是单通道</span></span><br><span class="line"><span class="function">cv::Mat <span class="title">matimg</span><span class="params">(<span class="number">2</span>, <span class="number">2</span>, CV_8UC3, Scalar(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示图</span></span><br><span class="line">cv::<span class="built_in">nameWindow</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">cv::<span class="built_in">imshow</span>(<span class="string">&quot;img&quot;</span>, matimg);</span><br><span class="line">cv::<span class="built_in">waitKey</span>(<span class="number">-1</span>);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印字</span></span><br><span class="line"><span class="comment">// void putText(Mat&amp; img, const string&amp; text, Point org, int fontFace, double fontScale, Scalar color, int thickness=1, int lineType=8, bool bottomLeftOrigin=false )</span></span><br><span class="line">cv::<span class="built_in">putText</span>(image, <span class="string">&quot;opencv&quot;</span>, <span class="built_in">Point</span>(<span class="number">5</span>,<span class="number">100</span>), FONT_HERSHEY_DUPLEX, <span class="number">1</span>, <span class="built_in">Scalar</span>(<span class="number">0</span>,<span class="number">143</span>,<span class="number">143</span>), <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存图，后缀名决定了图片对编码格式</span></span><br><span class="line">cv::<span class="built_in">imwrite</span>(<span class="string">&quot;c:\\test1.jpg&quot;</span>, matimg);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历图像</span></span><br><span class="line"><span class="comment">// Vec3b表示三通道usigned char类型，</span></span><br><span class="line"><span class="comment">// 还可以有2通道和4通道，类型还可以有f(loat)、i(nt)、d(ouble)、s(hort)、w(unsigned short)</span></span><br><span class="line"><span class="comment">// typedef Vec&lt;float, 2&gt; Vec2f;</span></span><br><span class="line">matimg.<span class="built_in">at</span>&lt;cv::Vec3b&gt;(j,i)[channel] = value;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还可以直接取每一行对首地址</span></span><br><span class="line">uchar* data = matimg.<span class="built_in">ptr</span>&lt;uchar&gt;(j);</span><br></pre></td></tr></table></figure>

<h1 id="头文件分析"><a href="#头文件分析" class="headerlink" title="头文件分析"></a>头文件分析</h1><ul>
<li>一般直接包含这三个头文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;opencv2/core/core.hpp&gt;</span><br><span class="line">#include&lt;opencv2/imgproc/imgproc.hpp&gt;</span><br><span class="line">#include&lt;opencv2/highgui/highgui.hpp&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>openCV</tag>
      </tags>
  </entry>
  <entry>
    <title>python 里的字符串编码问题</title>
    <url>/2018/08/03/python-%E9%87%8C%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="丑陋的编码"><a href="#丑陋的编码" class="headerlink" title="丑陋的编码"></a>丑陋的编码</h3><p>python中有很多地方涉及到编码，简直丑陋</p>
<ul>
<li>文本编辑器可以选编码格式，一般都位于右下角</li>
<li>python文件开头有<code>#coding: utf-8</code></li>
<li>python还有默认encoding<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li>字符串前有u和b</li>
</ul>
<h3 id="一些编码知识"><a href="#一些编码知识" class="headerlink" title="一些编码知识"></a><a href="https://blog.ernest.me/post/python-setdefaultencoding-unicode-bytes">一些编码知识</a></h3><ul>
<li>unicode是个大集合，支持百万级别的字符，但unicode只是给每个字符进行了一个编码，没有给具体实现</li>
<li>utf-8是unicode的一种实现形式，除此之外还有utf-16等等</li>
<li>gb系列的编码和unicode没啥关系，GB2312 &lt; GBK &lt; GB18030</li>
<li>windows中文版系统的默认编码是gbk的</li>
</ul>
<h3 id="一些python的知识"><a href="#一些python的知识" class="headerlink" title="一些python的知识"></a>一些python的知识</h3><ul>
<li>python里有三种string类，unicode（text string）、str（byte string）、basestring。basestring是前两个的父类</li>
<li>python里，字节串就等同于字符串</li>
<li>在类型转换或和文本拼接时，需要确定字节串的编码，不然就不能转换。python2的年代，默认的encoding是ASCII，放现在当然是不够用的</li>
<li>python3终于把默认的编码变成unicode</li>
<li>str转换成unicode，在python里叫decode，unicode转换成str称之为encode</li>
<li>打印unicode是不会出错的，这就是python3的厉害，打印str的话，就要看打印编码式和你显示的编码是否一致了</li>
</ul>
<h3 id="这些编码的区别"><a href="#这些编码的区别" class="headerlink" title="这些编码的区别"></a>这些编码的区别</h3><ul>
<li>文本编码格式：只和你的编辑器有关，负责把你的python文件按这种格式保存</li>
<li>python文件开头的coding：告诉python解释器，文件是按什么格式保存的，所以要与你实际文件的保存格式一致。如果不写的话，python文件里只能有ASCII</li>
<li>默认的encoding格式就是你要告诉系统，字节码以哪种格式转换成unicode</li>
<li>u是指后面引号里的内容是unocide，b是指引号里面的内容是str，所以python3里写u是没用的，python2里写b是没用的</li>
</ul>
<h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><ul>
<li>换python3</li>
<li><a href="https://blog.ernest.me/post/python-setdefaultencoding-unicode-bytes">如果换不了python3</a><ul>
<li>所有 text string 都应该是 unicode 类型，而不是 str</li>
<li>在需要转换的时候，显式转换。从字节解码成文本，用 var.decode(encoding)，从文本编码成字节，用 var.encode(encoding)</li>
<li>从外部读取数据时，默认它是字节，然后 decode 成需要的文本；同样的，当需要向外部发送文本时，encode 成字节再发送。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>编码</tag>
        <tag>字符串</tag>
        <tag>unicode</tag>
      </tags>
  </entry>
  <entry>
    <title>python把bmp和png转换成jpg</title>
    <url>/2018/08/16/python%E6%8A%8Abmp%E8%BD%AC%E6%8D%A2%E6%88%90jpg/</url>
    <content><![CDATA[<ul>
<li>反正已经加到这么晚了，索性再水一篇博客再走</li>
<li>如何把bmp和png批量转换成jpg</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">&quot;.&quot;</span>):</span><br><span class="line">    <span class="keyword">for</span> bmpfig <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> bmpfig.endswith(<span class="string">&#x27;.bmp&#x27;</span>) <span class="keyword">and</span> <span class="keyword">not</span> bmpfig.endswith(<span class="string">&#x27;.png&#x27;</span>):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        bmpfig = os.path.join(root, bmpfig)</span><br><span class="line">        newfigname = bmpfig[:-<span class="number">4</span>] + <span class="string">&quot;.jpg&quot;</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;converting from&quot;</span>, bmpfig, <span class="string">&quot;to&quot;</span>, newfigname</span><br><span class="line">        img = Image.<span class="built_in">open</span>(bmpfig)</span><br><span class="line">        img = img.convert(<span class="string">&#x27;RGB&#x27;</span>)  <span class="comment"># for png</span></span><br><span class="line">        img.save(newfigname, <span class="built_in">format</span>=<span class="string">&#x27;jpeg&#x27;</span>, quality=<span class="number">95</span>)</span><br><span class="line">        img.close()</span><br><span class="line">        os.remove(bmpfig)</span><br></pre></td></tr></table></figure>

<ul>
<li>这段代码贴在某个文件夹下，运行之后会递归地把所有bmp转换成jpg</li>
<li>其中，quality是生成jpg的质量，quality越大，jpg文件越大，图片细节越清晰，取值0-100</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>scrapy 爬虫</title>
    <url>/2018/02/12/scrapy-%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这是在dc学院上299买的课，也是丧心病狂啊，怀着后悔的心情上完了全部课程。</p>
<h3 id="主要截图"><a href="#主要截图" class="headerlink" title="主要截图"></a>主要截图</h3><p><img data-src="/images/5689847.jpg" title="框架图"></p>
<p><img data-src="/images/56909416.jpg" title="css选择器"></p>
<p><img data-src="/images/98241099.jpg" title="chrome的调试技巧"> </p>
]]></content>
      <categories>
        <category>scrapy</category>
      </categories>
  </entry>
  <entry>
    <title>sping速通</title>
    <url>/2025/10/19/sping%E9%80%9F%E9%80%9A/</url>
    <content><![CDATA[<h2 id="一、-Java-基础：从-Go-Python-到-JVM"><a href="#一、-Java-基础：从-Go-Python-到-JVM" class="headerlink" title="一、 Java 基础：从 Go&#x2F;Python 到 JVM"></a>一、 Java 基础：从 Go&#x2F;Python 到 JVM</h2><h3 id="1-语言范式的根本区别"><a href="#1-语言范式的根本区别" class="headerlink" title="1. 语言范式的根本区别"></a>1. 语言范式的根本区别</h3><table>
<thead>
<tr>
<th align="left">特性</th>
<th align="left">C++&#x2F;Python&#x2F;Go 的习惯</th>
<th align="left">Java 的要求</th>
<th align="left">关键点</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>代码结构</strong></td>
<td align="left">允许全局函数、模块级函数。</td>
<td align="left">所有的可执行代码（方法&#x2F;逻辑）<strong>必须</strong>封装在一个 <code>class</code> (类) 或 <code>interface</code> (接口) 中。</td>
<td align="left">Java 是“纯血”的面向对象语言。你不能写一个脱离类的函数。</td>
</tr>
<tr>
<td align="left"><strong>数据类型</strong></td>
<td align="left">Python (动态)，Go (静态但有类型推断)。</td>
<td align="left"><strong>强类型、静态类型</strong>。所有变量必须显式声明类型，一旦声明不能更改。</td>
<td align="left">避免 Go 语言中省略类型声明的习惯。</td>
</tr>
<tr>
<td align="left"><strong>内存管理</strong></td>
<td align="left">Go&#x2F;Python 自动垃圾回收。</td>
<td align="left">**自动垃圾回收 (GC)**。无指针运算，内存错误率低。</td>
<td align="left">与 Go&#x2F;Python 相似，无需手动管理内存。</td>
</tr>
<tr>
<td align="left"><strong>执行机制</strong></td>
<td align="left">编译成机器码 (Go&#x2F;C++) 或解释执行 (Python)。</td>
<td align="left">编译成 **字节码 (<code>.class</code>)**，然后在 <strong>JVM (Java 虚拟机)</strong> 上运行。</td>
<td align="left">实现“一次编写，到处运行”。</td>
</tr>
</tbody></table>
<h3 id="2-JDK-与版本生态"><a href="#2-JDK-与版本生态" class="headerlink" title="2. JDK 与版本生态"></a>2. JDK 与版本生态</h3><ul>
<li>**Java 版本 (Specification) $\approx$ JDK 版本 (Implementation)**：Java SE 定义了语言特性和 API 规范。JDK (Java Development Kit) 是实现这些规范的工具包。</li>
<li><strong>多供应商实现 (OpenJDK):</strong> Java 规范由 <strong>JCP (Java Community Process)</strong> 维护。市面上的主流 JDK，如 <strong>Amazon Corretto</strong>、<strong>Eclipse Temurin</strong>、<strong>Oracle JDK</strong> 等，均基于开源的 <strong>OpenJDK</strong> 并通过兼容性测试 (TCK)。</li>
</ul>
<h2 id="二、构建工具对比：Gradle-的现代优势"><a href="#二、构建工具对比：Gradle-的现代优势" class="headerlink" title="二、构建工具对比：Gradle 的现代优势"></a>二、构建工具对比：Gradle 的现代优势</h2><p>在 Java 世界中，构建工具负责依赖管理、编译、测试和打包。</p>
<table>
<thead>
<tr>
<th align="left">特性</th>
<th align="left">Maven (传统)</th>
<th align="left">Gradle (现代)</th>
<th align="left">优势点</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>配置文件</strong></td>
<td align="left"><code>pom.xml</code> (XML)</td>
<td align="left"><code>build.gradle</code> (Groovy&#x2F;Kotlin DSL)</td>
<td align="left"><strong>可读性高，支持编程逻辑。</strong></td>
</tr>
<tr>
<td align="left"><strong>配置风格</strong></td>
<td align="left">纯声明式</td>
<td align="left"><strong>编程式与声明式结合</strong></td>
<td align="left">极高的灵活性，可定义复杂的自定义任务。</td>
</tr>
<tr>
<td align="left"><strong>构建速度</strong></td>
<td align="left">每次执行全量构建</td>
<td align="left"><strong>增量构建、构建缓存 (Cache)</strong></td>
<td align="left">对于大型和多模块项目，速度明显更快。</td>
</tr>
</tbody></table>
<p><strong>结论：</strong> 对于 Spring Boot 新项目，<strong>Gradle</strong> 以其灵活性和性能优势，是更推荐的选择。</p>
<h2 id="三、-Spring-Boot-核心：依赖注入-DI-的魔法"><a href="#三、-Spring-Boot-核心：依赖注入-DI-的魔法" class="headerlink" title="三、 Spring Boot 核心：依赖注入 (DI) 的魔法"></a>三、 Spring Boot 核心：依赖注入 (DI) 的魔法</h2><p>Spring Boot 的设计哲学是 <strong>“约定优于配置”</strong>，其核心是 **依赖注入 (DI)**。</p>
<h3 id="1-依赖注入-DI-与-IoC-容器"><a href="#1-依赖注入-DI-与-IoC-容器" class="headerlink" title="1. 依赖注入 (DI) 与 IoC 容器"></a>1. 依赖注入 (DI) 与 IoC 容器</h3><table>
<thead>
<tr>
<th align="left">机制</th>
<th align="left">描述</th>
<th align="left">与传统开发的区别</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>控制反转 (IoC)</strong></td>
<td align="left">将对象的创建、管理和生命周期的<strong>控制权</strong>交给 Spring 容器。</td>
<td align="left">你不再使用 <code>new MyService()</code> 手动创建对象。</td>
</tr>
<tr>
<td align="left"><strong>依赖注入 (DI)</strong></td>
<td align="left">应用程序所需的依赖（对象）由 Spring 容器自动<strong>注入</strong>到目标对象中。</td>
<td align="left">你只需声明你需要什么 (接口)，Spring 负责找到并提供具体的实现。</td>
</tr>
</tbody></table>
<h3 id="2-核心注解速查"><a href="#2-核心注解速查" class="headerlink" title="2. 核心注解速查"></a>2. 核心注解速查</h3><table>
<thead>
<tr>
<th align="left">注解</th>
<th align="left">作用范围</th>
<th align="left">功能描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong><code>@SpringBootApplication</code></strong></td>
<td align="left">主启动类</td>
<td align="left">整合配置、自动配置和组件扫描。</td>
</tr>
<tr>
<td align="left"><strong><code>@Autowired</code></strong></td>
<td align="left">构造函数&#x2F;字段</td>
<td align="left">标记 Spring 容器应在此处自动注入依赖对象。</td>
</tr>
<tr>
<td align="left"><strong><code>@RestController</code></strong></td>
<td align="left">类</td>
<td align="left">标记为 Web 控制器，方法的返回值自动序列化为 JSON。</td>
</tr>
<tr>
<td align="left"><strong><code>@Service</code></strong></td>
<td align="left">类</td>
<td align="left">标记为业务逻辑组件 (Service Layer)。</td>
</tr>
<tr>
<td align="left"><strong><code>@Repository</code></strong></td>
<td align="left">类</td>
<td align="left">标记为数据访问组件 (DAO Layer)。</td>
</tr>
</tbody></table>
<h2 id="四、-Spring-Boot-实战：分层与持久化-JPA"><a href="#四、-Spring-Boot-实战：分层与持久化-JPA" class="headerlink" title="四、 Spring Boot 实战：分层与持久化 (JPA)"></a>四、 Spring Boot 实战：分层与持久化 (JPA)</h2><p>现代 Spring Boot 应用遵循经典的分层架构，DI 机制将它们解耦。</p>
<table>
<thead>
<tr>
<th align="left">层级</th>
<th align="left">技术&#x2F;注解</th>
<th align="left">职责</th>
<th align="left">核心原理</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>Controller (控制层)</strong></td>
<td align="left"><code>@RestController</code>, <code>@RequestBody</code>, <code>@GetMapping</code></td>
<td align="left">接收 HTTP 请求，处理路由，调用 Service，序列化&#x2F;反序列化 JSON。</td>
<td align="left">利用 <strong>Jackson</strong> 库自动完成 Java 对象与 JSON 格式的转换。</td>
</tr>
<tr>
<td align="left"><strong>Service (业务层)</strong></td>
<td align="left"><code>@Service</code></td>
<td align="left">封装核心业务逻辑和事务管理。</td>
<td align="left">依赖注入 <code>Repository</code> 接口。</td>
</tr>
<tr>
<td align="left"><strong>Repository (数据层)</strong></td>
<td align="left"><code>@Repository</code>, <code>JpaRepository</code></td>
<td align="left">与数据库交互。</td>
<td align="left">继承 <strong><code>JpaRepository&lt;Entity, ID&gt;</code></strong> 后，Spring Data JPA 会在运行时自动生成基础的 CRUD (增删改查) 实现。</td>
</tr>
<tr>
<td align="left"><strong>Entity (数据模型)</strong></td>
<td align="left"><code>@Entity</code>, <code>@Id</code>, <code>@GeneratedValue</code></td>
<td align="left">定义与数据库表对应的 Java 类。</td>
<td align="left">通过 <strong>JPA&#x2F;Hibernate</strong> 实现 ORM (对象关系映射)。</td>
</tr>
</tbody></table>
<h2 id="五、-配置管理与并发模型"><a href="#五、-配置管理与并发模型" class="headerlink" title="五、 配置管理与并发模型"></a>五、 配置管理与并发模型</h2><h3 id="1-现代化配置：YAML-与-Profiles"><a href="#1-现代化配置：YAML-与-Profiles" class="headerlink" title="1. 现代化配置：YAML 与 Profiles"></a>1. 现代化配置：YAML 与 Profiles</h3><ul>
<li><strong>YAML (Yet Another Markup Language):</strong> 使用 <strong><code>.yml</code></strong> 文件替代 <code>.properties</code>，利用缩进实现清晰的层次结构，例如：<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="comment"># ...</span></span><br></pre></td></tr></table></figure></li>
<li><strong>Profiles (环境配置):</strong> 通过创建 <code>application-&#123;profile&#125;.yml</code> 文件来隔离不同环境（dev&#x2F;test&#x2F;prod）的配置。</li>
<li><strong>激活方式:</strong> 启动时使用命令行参数激活特定环境：<code>--spring.profiles.active=prod</code></li>
</ul>
<h3 id="2-并发模型：Spring-MVC-vs-WebFlux"><a href="#2-并发模型：Spring-MVC-vs-WebFlux" class="headerlink" title="2. 并发模型：Spring MVC vs. WebFlux"></a>2. 并发模型：Spring MVC vs. WebFlux</h3><table>
<thead>
<tr>
<th align="left">模型</th>
<th align="left">Spring MVC (默认)</th>
<th align="left">Spring WebFlux (响应式)</th>
<th align="left">建议</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>底层架构</strong></td>
<td align="left">Servlet API, <strong>Thread-per-Request</strong> (每个请求一个 Java 线程等待)</td>
<td align="left"><strong>非阻塞 I&#x2F;O</strong>，基于 <strong>Reactor</strong> 库 (类似 Event Loop)。</td>
<td align="left">针对 <strong>I&#x2F;O 密集型&#x2F;高并发</strong> 场景，性能更优。</td>
</tr>
<tr>
<td align="left"><strong>适用性</strong></td>
<td align="left">易于理解，CPU 密集型或传统应用。</td>
<td align="left"><strong>高吞吐量微服务</strong>，类似 Go 的 Goroutine 优势。</td>
<td align="left">随着 <strong>Java 虚拟线程 (Virtual Threads)</strong> 的引入，Java 的并发能力正在发生革命性变化。</td>
</tr>
</tbody></table>
<h2 id="六、开发环境-IDE-推荐"><a href="#六、开发环境-IDE-推荐" class="headerlink" title="六、开发环境 (IDE) 推荐"></a>六、开发环境 (IDE) 推荐</h2><p>对于 Java 和 Spring Boot 开发，推荐：</p>
<ul>
<li><strong>IntelliJ IDEA Community Edition (社区版):</strong> 免费且功能强大，提供对 Spring Boot 和 Gradle 最完善、最智能的集成支持，能极大地提高你的开发效率。</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlite 常用命令</title>
    <url>/2018/01/22/sqlite-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="dump-database"><a href="#dump-database" class="headerlink" title="dump database"></a>dump database</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlite3 &lt;database_file&gt;</span><br><span class="line">.output &lt;dump_text_file&gt;</span><br><span class="line">.dump</span><br><span class="line">.exit</span><br></pre></td></tr></table></figure>
<h3 id="dump-table"><a href="#dump-table" class="headerlink" title="dump table"></a>dump table</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.output &lt;dump_text_file&gt;</span><br><span class="line">.dump &lt;table_name&gt;</span><br><span class="line">.exit</span><br></pre></td></tr></table></figure>
<h3 id="dump-table-structure"><a href="#dump-table-structure" class="headerlink" title="dump table structure"></a>dump table structure</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.output &lt;dump_text_file&gt;</span><br><span class="line">.schema</span><br><span class="line">.exit</span><br></pre></td></tr></table></figure>
<h3 id="dump-data-of-a-table-into-a-text"><a href="#dump-data-of-a-table-into-a-text" class="headerlink" title="dump data of a table into a text"></a>dump data of a table into a text</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.mode insert</span><br><span class="line">.output &lt;dump_text_file&gt;</span><br><span class="line">.dump &lt;table_name&gt;</span><br><span class="line">.exit</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.read &lt;dump_text_file&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>flask网站总结</category>
      </categories>
      <tags>
        <tag>sqlite</tag>
      </tags>
  </entry>
  <entry>
    <title>unix和linux历史考古</title>
    <url>/2019/12/01/unix%E5%92%8Clinux%E5%8E%86%E5%8F%B2%E8%80%83%E5%8F%A4/</url>
    <content><![CDATA[<ul>
<li><p>unix是肯·汤普森和丹尼斯·里奇在AT&amp;T开发的</p>
</li>
<li><p>里奇在创造unix的过程中，发明了C语言</p>
</li>
<li><p>汤普森和里奇后来对unix不太满意，要创造一个真正的”一切都是文件“的系统，称为”Plan 9“，utf-8是这个系统的副产品</p>
</li>
<li><p>80年代unix有两个主要的版本：AT&amp;T的版本System V和伯克利的BSD（Berkeley Software Distribution）</p>
</li>
<li><p>从System V衍生出了hp-ux和Solaris</p>
</li>
<li><p>BSD主要是比尔乔伊在上学期间开发的，他还是vi的作者</p>
</li>
<li><p>90年代，因为和AT&amp;T版权问题，BSD替换了AT&amp;T有版权的几个文件，变成了freeBSD</p>
</li>
<li><p>（Linux崛起有两个历史机遇，一是Unix在打官司两年没有更新，二是英特尔发布了80386，开始了32位时代</p>
</li>
<li><p>理查德·斯托曼创立了GUN计划，主要的软件有gcc、glibc，因为Linux用了许多GNU软件，他认为应该命名为GNU&#x2F;Linux，但Linus不同意。斯托曼同时也是Emacs的作者</p>
</li>
<li><p>Minix，是一个类unix系统，由塔能鲍姆Tanenbaum为了教学创造</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>visual studio 13使用boost</title>
    <url>/2018/06/22/visual-studio-13%E4%BD%BF%E7%94%A8boost/</url>
    <content><![CDATA[<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ul>
<li>先去<a href="http://www.boost.org/">boost官方网站</a>中查看boost的最新版本，然后去相应的链接地址进行下载</li>
<li>在你创建好的工程项目中，选择属性对话框，然后在VC++目录选项中，把boost路径添加到包含目录和库目录中</li>
<li>首选运行bootstra.bat，如果没有cl命令的话，查看<a href="https://blog.csdn.net/zhidebushizhan/article/details/51396670">这里</a>，我是这个命令<code>call &quot;%VS120COMNTOOLS%&quot;vsvars32.bat</code>解决问题</li>
<li>生成动态链接的静态库<code>bjam address-model=64 link= static  threading=multi  variant=release  runtime-link=shared  stage</code></li>
</ul>
<h3 id="困惑的地方"><a href="#困惑的地方" class="headerlink" title="困惑的地方"></a>困惑的地方</h3><ul>
<li>vs里面的vc++目录和下面的c++目录、连接器目录，什么关系啊，能自动加载子目录？</li>
</ul>
<blockquote>
<p>引用自<a href="https://www.cnblogs.com/JMLiu/p/7954630.html">这里</a>，<br>VC++ Directories是一个Windows环境变量，C&#x2F;C++是命令行参数，这是本质区别；<br>但是相同的项，也就是VC++ Directories中的include directories 对应到C&#x2F;C++中的addition include directories 是一样的效果，也就是说效果一样。同样是命令行参数的还有Link设置，Link设置中的 addition library directories对应到VC++ Directories 中的library directories，也就是说，效果是相同的。</p>
</blockquote>
<ul>
<li>bjam里面的debug release、static share是啥。。。</li>
</ul>
<blockquote>
<p>编译调试版本加 debug</p>
</blockquote>
<blockquote>
<p>编译发布版本加  release</p>
</blockquote>
<blockquote>
<p>编译静态链接库：link&#x3D;static runtime-link&#x3D;static</p>
</blockquote>
<blockquote>
<p>编译动态库：link&#x3D;shared runtime-link&#x3D;shared</p>
</blockquote>
<blockquote>
<p>静态库只是需要的文件编译到exe&#x2F;so中，而且shared的是否用户也要存在dll,所以static是更安全的方式；当然组件式开发和升级的软件用shared方式更加合适</p>
</blockquote>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://blog.csdn.net/blues1021/article/details/45034133">https://blog.csdn.net/blues1021/article/details/45034133</a></li>
<li><a href="https://blog.csdn.net/qingyulove/article/details/78863457">https://blog.csdn.net/qingyulove/article/details/78863457</a></li>
<li><a href="https://blog.csdn.net/zhidebushizhan/article/details/51396670">https://blog.csdn.net/zhidebushizhan/article/details/51396670</a></li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
  </entry>
  <entry>
    <title>write a shell in c</title>
    <url>/2018/07/16/write-a-shell-in-c/</url>
    <content><![CDATA[<p>源文章标题取得很大，<a href="https://brennan.io/2015/01/16/write-a-shell-in-c/">write a shell in c</a>。相关的内容总结如下。</p>
<ul>
<li><p>fork(), exec() and waitpid() are defined by the POSIX standard, and Windows is not POSIX-compliant. In order to have POSIX compliance under Windows, you should compile under Cygwin.</p>
</li>
<li><p>fork, exec, chdir are in unistd.h(unix std); execvp is in stdlib</p>
</li>
<li><p>system命令相当于 fork + exec + waitpid</p>
</li>
<li><p>windows也提供了一个chdir函数，叫_chdir，在direct.h里</p>
</li>
<li><p>cc来自于Unix的c语言编译器，是 c compiler 的缩写。gcc来自Linux世界，是GNU compiler collection 的缩写，注意这是一个编译器集合，不仅仅是c或c++</p>
</li>
<li><p>strtok()</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> sentence[]=<span class="string">&quot;192.168...9...14&quot;</span>;</span><br><span class="line"><span class="type">char</span> *token=strtok(sentence,<span class="string">&quot;.&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(token!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;token&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">  token=strtok(<span class="literal">NULL</span>,<span class="string">&quot;.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在gcc编译器中，对标准库进行了扩展，加入了一个getline函数。会自动malloc, realloc，所以用的话，需要自己手动free，好像没啥人用，参考<a href="https://www.cnblogs.com/xkfz007/archive/2012/08/01/2618366.html">这里</a></p>
</li>
<li><p>我用system代替了fork等，于是有了<a href="https://github.com/zjyfdu/lsh/blob/master/src/%E6%BA%90.cpp">window版</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>caffe</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>一些shell命令</title>
    <url>/2019/01/23/%E4%B8%80%E4%BA%9Bshell%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<ul>
<li>for循环</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for file in `ls /etc`</span><br><span class="line"></span><br><span class="line">for skill in Ada Coffe Action Java; do</span><br><span class="line">    echo &quot;I am good at $&#123;skill&#125;Script&quot;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">for (( EXP1; EXP2; EXP3 ))</span><br><span class="line">do</span><br><span class="line">    # do something</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">while condition</span><br><span class="line">do</span><br><span class="line">    # do something</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">until condition</span><br><span class="line">do</span><br><span class="line">    # do something</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">while</span> : 等效于 <span class="keyword">while</span> <span class="literal">true</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">There<span class="string">&#x27;s no real difference in behavior. Both commands do nothing and exit with a successful status. : emphasizes doing nothing; true emphasizes the successful status.</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>if</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    # do something</span><br><span class="line">elif</span><br><span class="line">    # do something</span><br><span class="line">else</span><br><span class="line">    # do something</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -e &quot;$filename&quot; ] # 文件是否存在，r、w、x是否可读、写、执行</span><br><span class="line">                      # d是否为目录、f是否为文件</span><br><span class="line">if [ $var -gt 0 ] # 还有lt、ge、le、eq、ne</span><br></pre></td></tr></table></figure>

<ul>
<li>case</li>
</ul>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">case &quot;$varname&quot; in</span><br><span class="line">    [a-z]) echo &quot;abc&quot;;;</span><br><span class="line">    [0-9]) echo &quot;123&quot;;; #还不知道为啥这么写，以后再补充吧</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<ul>
<li>文件包含</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ./function.sh</span><br><span class="line">. ./function.sh</span><br></pre></td></tr></table></figure>

<ul>
<li>字符串</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">string=&quot;abcd&quot;</span><br><span class="line">echo $&#123;#string&#125; # 字符串长度</span><br><span class="line"></span><br><span class="line">string=&quot;zhe pian tai shui le&quot;</span><br><span class="line">echo $&#123;string:13:4&#125; # shui</span><br></pre></td></tr></table></figure>

<ul>
<li>数组</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">arr=(1 2 3 4 5)</span><br><span class="line">echo $&#123;arr[3]&#125;</span><br><span class="line"></span><br><span class="line">echo $&#123;#arr[@]&#125; # 数组长度</span><br><span class="line">echo $&#123;arr[#arr[@]-1]&#125; # 最后一个元素</span><br></pre></td></tr></table></figure>
<ul>
<li>问号，和C里面的问号一样</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a=10</span><br><span class="line">(( t=a&lt;50?0:1 )) # t=0</span><br></pre></td></tr></table></figure>

<ul>
<li><code>/dev/null</code>是个空文件，清空一个文件可以用<code>cat /dev/null &gt; tmp.log</code>，不想保存log，也不想输出到屏幕，可以<code>1&gt;/dev/null 2&gt;&amp;1</code></li>
<li>清空一个文件也可用<code>: &gt; tmp.log</code>，:是个内建命令，什么也不做，永远返回0</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:</span><br><span class="line">echo $? # 0</span><br></pre></td></tr></table></figure>

<ul>
<li><code>cp t.&#123;txt,back&#125;</code> 文件名扩展</li>
<li>大括号和小括号的区别</li>
</ul>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a=123</span><br><span class="line">(a=321)</span><br><span class="line">echo $a # 123 在子进程中修改了a的值，对当前进程没影响</span><br><span class="line">&#123;a=321;&#125;</span><br><span class="line">echo $a # 321 想当于是一个匿名函数</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>sudo sh -c &quot;...&quot;</code>，引号里的内容都会有sudo权限</p>
</li>
<li><p><code>echo $(( 2#101011 ))</code>，这里是2进制的意思</p>
</li>
<li><p><code>trap</code></p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">trap &quot;echo Booh!&quot; SIGINT SIGTERM</span><br><span class="line">echo &quot;it&#x27;s going to run until you hit Ctrl+Z&quot;</span><br><span class="line">echo &quot;hit Ctrl+C to be blown away!&quot;</span><br><span class="line"></span><br><span class="line">while true:         </span><br><span class="line">do</span><br><span class="line">    sleep 60       </span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">“<span class="built_in">kill</span> pid” 会发送SIGTERM到进程pid.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在终端中敲入interrupt key（DELETE或ctrl+c）会产生SIGINT信号。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">“<span class="built_in">kill</span> -9 pid” 会发送SIGKILL到进程pid，SIGKILL不能被捕获，会直接结束</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>优秀的Typora</title>
    <url>/2019/07/14/%E4%BC%98%E7%A7%80%E7%9A%84Typora/</url>
    <content><![CDATA[<p>今天意外地发现了<a href="https://typora.io/">Typora</a>，几乎解决了我关于记笔记和写博客的所有问题。</p>
<h1 id="1-日常记笔记"><a href="#1-日常记笔记" class="headerlink" title="1.日常记笔记"></a>1.日常记笔记</h1><p>其实我大概三个月前是用纸笔记笔记的，直到我意识到我打字已经比写字快很多了。。。</p>
<p>然后我开始用word记事，当然是可以的，但是总觉得不够轻便</p>
<p>然后我开始用onenote，但功能又太少了，关键时刻连个公式都没有</p>
<p>直到今天，直到今天我发现了Typora</p>
<ol>
<li>实现了markdown的所见所得，标题、加粗、插图，可以直接显示，实现了word的功能又不用频繁点鼠标。</li>
<li>公式可以直接用$\LaTeX{}$打啊，而且边写边预览！</li>
<li>可以直接贴代码啊，直接语法高亮啊！这个用word我是不会做的。</li>
<li>装了pandoc之后，<strong>能直接导出word</strong>，而且公式还是原生的word公式，不是mathtype的！</li>
</ol>
<p>其实看了上面的功能，我就怀疑这个软件像是一个本地版的hexo，然后我在GitHub上找，没找到源码，但找到了到了Typora的组织，里面的仓库有node、有electron，emmm，我更加怀疑了🤔</p>
<h1 id="2-Hexo"><a href="#2-Hexo" class="headerlink" title="2.Hexo"></a>2.Hexo</h1><p>所以把Typora当作Hexo的客户端非常合适，好像Hexo写博客难受的几个点都可以解决了。</p>
<h2 id="2-1实时预览"><a href="#2-1实时预览" class="headerlink" title="2.1实时预览"></a>2.1实时预览</h2><p>hexo里能实现的，Typora上也都能实现，所以其实就是实现了实时预览。</p>
<p>虽然理论上也可以开<code>hexo server</code>，但是毕竟还是要到浏览器里刷新一下才能看到变化的，比不上直接用这个来得直接。</p>
<h2 id="2-2图片粘贴"><a href="#2-2图片粘贴" class="headerlink" title="2.2图片粘贴"></a>2.2图片粘贴</h2><p>贴图简直是hexo的灾难，最早我是把图传到七牛云的，然后复制了链接再手动写到博客里。</p>
<p>后来七牛云突然就不允许外链了，差点把我的图都搞丢，吃了教训之后，我把图都放到了<code>source/images</code>里，然后在贴图的时候用<code>![](/images/ctc.jpg)</code>，图片是要自己复制的，路径也是要自己写的。</p>
<p>但是现在有Typora 了！可以实现图片直接粘贴了</p>
<p>设置好图片自动复制，不管是本地图片，还是网络图片，都复制到<code>source/images</code>，显示相对路径，同时需要设置图片根目录，</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">typora-root-url:</span> <span class="string">../../source</span></span><br></pre></td></tr></table></figure>

<p>这样Typora生成的相对路径才可以正常在网站上显示。</p>
<p><img data-src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72019-07-14%E4%B8%8A%E5%8D%881.15.21-3039456.png" alt="屏幕快照 2019-07-14 上午1.15.21"></p>
<p>但mac上好像不能批量设置图片根目录，所以修改默认的post配置，在<code>scaffolds\post.md</code>里，添加上面那一句。</p>
<p>以前写的博客没有这一句怎么办呢？我弄了半天的<code>sed</code>最终放弃了（mac的freebsd上的sed和gnu的sed不一致），还是用python一把梭</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path_root = <span class="string">&#x27;./_posts/&#x27;</span></span><br><span class="line">files = os.listdir(path_root)</span><br><span class="line">files = [path_root + x <span class="keyword">for</span> x <span class="keyword">in</span> files <span class="keyword">if</span> x.endswith(<span class="string">&#x27;.md&#x27;</span>)]</span><br><span class="line">insert_line = <span class="string">&#x27;typora-root-url: ../../source&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file) <span class="keyword">as</span> f:</span><br><span class="line">        lines = f.readlines()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">any</span>([insert_line <span class="keyword">in</span> x <span class="keyword">for</span> x <span class="keyword">in</span> lines]):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    lines.insert(<span class="number">2</span>, insert_line + <span class="string">&#x27;\n&#x27;</span>) // 在哪一行插入都行</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.writelines(lines)</span><br></pre></td></tr></table></figure>

<p>##2.3一个Typora没解决的图片问题</p>
<p>后来想到还有一个问题没有解决，图片直接用的是原图，没有做裁剪和重命名。</p>
<p>参考<a href="https://www.karlzhou.com/articles/compress-minify-hexo/">这里</a>做的，用<code>gulp</code>压缩图片。</p>
<p>在<code>package.json</code>的 <code>dependencies</code>里加入</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;del&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.2.2&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;gulp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.9.1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;gulp-clean-css&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.3.2&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;gulp-htmlclean&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.7.22&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;gulp-htmlmin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;gulp-imagemin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.4.0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;gulp-uglify&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.1.2&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<p>然后，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm insall</span><br><span class="line">cnpm update # 直接install后报错，update之后好了</span><br><span class="line">cnpm audit fix</span><br></pre></td></tr></table></figure>

<p><code>gulpfile.js</code>做了一些修改，主要是压缩图片好事太长了，从部署流程里单独拉了出来</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">&#x27;gulp-clean-css&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-uglify&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlmin&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlclean&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-imagemin&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> del = <span class="built_in">require</span>(<span class="string">&#x27;del&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> runSequence = <span class="built_in">require</span>(<span class="string">&#x27;run-sequence&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Hexo</span> = <span class="built_in">require</span>(<span class="string">&#x27;hexo&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;clean&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">del</span>([<span class="string">&#x27;public/**/*&#x27;</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// generate html with &#x27;hexo generate&#x27;</span></span><br><span class="line"><span class="keyword">var</span> hexo = <span class="keyword">new</span> <span class="title class_">Hexo</span>(process.<span class="title function_">cwd</span>(), &#123;&#125;);</span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;generate&#x27;</span>, <span class="keyword">function</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">    hexo.<span class="title function_">init</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> hexo.<span class="title function_">call</span>(<span class="string">&#x27;generate&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">watch</span>: <span class="literal">false</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> hexo.<span class="title function_">exit</span>();</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">cb</span>()</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">        hexo.<span class="title function_">exit</span>(err);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">cb</span>(err);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-css&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/**/*.css&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">minifycss</span>(&#123;</span><br><span class="line">            <span class="attr">compatibility</span>: <span class="string">&#x27;ie8&#x27;</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-html&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/**/*.html&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">htmlclean</span>())</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">htmlmin</span>(&#123;</span><br><span class="line">            <span class="attr">removeComments</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyJS</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyCSS</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyURLs</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-js&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/**/*.js&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">uglify</span>())</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-img&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/images/**/*.*&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">imagemin</span>())</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public/images&#x27;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-img-aggressive&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./source/images/**/*.*&#x27;</span>) <span class="comment">//直接压缩source里的图片，public里的不管了</span></span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">imagemin</span>(</span><br><span class="line">        [imagemin.<span class="title function_">gifsicle</span>(&#123;<span class="string">&#x27;optimizationLevel&#x27;</span>: <span class="number">3</span>&#125;), </span><br><span class="line">        imagemin.<span class="title function_">jpegtran</span>(&#123;<span class="string">&#x27;progressive&#x27;</span>: <span class="literal">true</span>&#125;), </span><br><span class="line">        imagemin.<span class="title function_">optipng</span>(&#123;<span class="string">&#x27;optimizationLevel&#x27;</span>: <span class="number">7</span>&#125;), </span><br><span class="line">        imagemin.<span class="title function_">svgo</span>()],</span><br><span class="line">        &#123;<span class="string">&#x27;verbose&#x27;</span>: <span class="literal">true</span>&#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./source/images&#x27;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;img&#x27;</span>, [<span class="string">&#x27;minify-img-aggressive&#x27;</span>])</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;compress&#x27;</span>, <span class="keyword">function</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">    <span class="title function_">runSequence</span>([<span class="string">&#x27;minify-html&#x27;</span>, <span class="string">&#x27;minify-css&#x27;</span>, <span class="string">&#x27;minify-js&#x27;</span>], cb);</span><br><span class="line">    <span class="comment">// runSequence([&#x27;minify-html&#x27;, &#x27;minify-css&#x27;, &#x27;minify-js&#x27;, &#x27;minify-img-aggressive&#x27;], cb);</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;build&#x27;</span>, <span class="keyword">function</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">    <span class="title function_">runSequence</span>(<span class="string">&#x27;clean&#x27;</span>, <span class="string">&#x27;generate&#x27;</span>, <span class="string">&#x27;compress&#x27;</span>, cb)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>, [<span class="string">&#x27;build&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>压缩图片用这个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gulp img</span><br></pre></td></tr></table></figure>

<p>部署用这个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gulp build &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>GBDT和xgboost</title>
    <url>/2024/04/13/%E5%86%99%E5%86%99GBDT%E5%90%A7/</url>
    <content><![CDATA[<blockquote>
<p>在浮躁的LLM时代，仍然坚持古法建模，致敬xgb匠人</p>
</blockquote>
<h1 id="单棵树"><a href="#单棵树" class="headerlink" title="单棵树"></a>单棵树</h1><ul>
<li>ID3 算法中根据特征选择和信息增益评估，每次选择信息增益最大的特征作为分支标准</li>
<li>C4.5 使用“增益率”（gain ratio）来选择最优的分支标准</li>
<li>CART 的分支标准建立在 GINI 指数上，GINI 值越大表明样本集合的类别越杂乱</li>
</ul>
<h1 id="GBDT"><a href="#GBDT" class="headerlink" title="GBDT"></a>GBDT</h1><ul>
<li>先有BT（boosting tree）（相比随机森林是stacking）</li>
<li>随后有了GBT，gradient boosting tree，又可分为GBDT和GBRT，分类数和回归树</li>
<li>核心思想是<strong>利用损失函数的负梯度在当前模型的值作为残差的近似值</strong>，本质上是对损失函数进行一阶泰勒展开，从而拟合一个回归树</li>
</ul>
<p>$$<br>L(y,f_t) &#x3D; L(y,f_{t-1}+h_t)&#x3D;L(y,f_{t-1})+\frac{\partial L(y, f_{t-1})}{\partial f_{t-1}}h_t<br>$$</p>
<ul>
<li>对于mse loss，$\Delta L&#x3D;L(y,f_t)-L(y,f_{t-1})&#x3D;\frac{\partial L(y, f_{t-1})}{\partial f_{t-1}}h_k$ ，所以$h_k&#x3D;-\frac{\partial L(y, f_{t-1})}{\partial f_{t-1}}$，负梯度也就是残差</li>
<li>对于log loss，<a href="https://zhuanlan.zhihu.com/p/388225723">我没看懂</a></li>
</ul>
<h1 id="xgboost"><a href="#xgboost" class="headerlink" title="xgboost"></a>xgboost</h1><blockquote>
<p>主要<del>参考</del>自<a href="https://juejin.cn/post/6963993583217016869">这里</a>，<a href="https://arxiv.org/pdf/1603.02754.pdf">原论文</a></p>
</blockquote>
<p>然后才进化出了xgb，有几个改进点</p>
<ul>
<li>加了正则项，包含树的节点数，权重</li>
<li>一阶泰勒变成了二阶</li>
<li>一些实现上的优化，缺失值、分裂点</li>
</ul>
<p>损失函数定位为：<br>$$<br>L &#x3D; \sum_il(f_i,y_i)+\sum\Omega(f) \<br>\Omega(f)&#x3D; \gamma T+\frac{1}{2}\lambda \lVert \omega \rVert ^2<br>$$<br>$\Omega$中，$T$表示节点个数，$\omega$表示叶子节点的值，loss里直接包含了正则想，相比GBDT更不同意过拟合</p>
<p>对$L$进行二阶展开，<br>$$<br>L&#x3D;\sum_i[l(y_i,f_i^{t-1})+g_if_i^t+\frac{1}{2}h_i(f_i^t)^2]+\sum\Omega(f)<br>$$<br>这里$g_i&#x3D;\frac{\partial l(y_i,f_i^{t-1})}{\partial f_i^{t-1}}$，$h_i&#x3D;\frac{\partial ^2 l(y_i,f_i^{t-1})}{\partial ^2 f_i^{t-1}}$，即$l(y_i,f_i^{t-1})$对$ f_i^{t-1}$的一阶导数和二阶导数。利用泰勒展开式，这里将损失函数转化成了一个二次函数，而且这里二次项的系数为正，可以很方便的求得函数的最小值</p>
<p>简单一点，相对于$ f^{t}$是常数项的部分去掉<br>$$<br>L&#x3D;\sum_i[g_if_i^t+\frac{1}{2}h_i(f_i^t)^2]+\sum\Omega(f^t)<br>$$<br>决定$ f^{t}$的主要是两个纬度，一是这颗树的形态，二是树的叶子节点的权重。这里用数学表达式来表示就是<br>$$<br>\sum_if_i^t&#x3D;\sum_{j&#x3D;1}^T\sum _{i\in I_j} \omega_j<br>$$<br>等式左边的意义很明显，就是所有样本在第$t$棵树上输出的和，等式右边用另一种方式表达了这个值，第一个求和符号表示所有的叶子节点，第二个求和符号表示被分到每个叶子节点的样本集合，$i\in I_j$表示被分到第$j$个叶子节点的样本集合。$\omega_j$代表第$j$个叶子节点的权重。可以这么理解，样本分到哪一个叶子节点上表示了树的结构。</p>
<p>把这个细化的表达式带入到泰勒展开近似的损失函数中得到，<br>$$<br>L&#x3D;\sum_{j&#x3D;1}^T[(\sum _{i\in I_j} g_i)\omega_j+\frac{1}{2}(\sum _{i\in I_j}h_i+\lambda)\omega_j^2]+\gamma T<br>$$<br>给定树的结构下<br>$$<br>\omega_j^*&#x3D;\frac{\sum _{i\in I_j} g_i}{\sum _{i\in I_j}h_i+\lambda}<br>$$</p>
<h2 id="怎么确定树的结构"><a href="#怎么确定树的结构" class="headerlink" title="怎么确定树的结构"></a>怎么确定树的结构</h2><p>答案是枚举，在一个节点那里想要做分裂节点的操作，哪些样本要分到左边，哪些节点要分到右边，XGBoost就把所有的样本按某个特征排序，然后切分，以此确定树的结构，枚举下来算出最小损失值，就作为最优结构。</p>
<ul>
<li><p>当新引入的一次分裂所带来的增益Gain&lt;0时，放弃当前的分裂。这是训练损失和模型结构复杂度的博弈过程。</p>
</li>
<li><p>当树达到最大深度时，停止建树，因为树的深度太深容易出现过拟合，这里需要设置一个超参数max_depth。</p>
</li>
<li><p>当引入一次分裂后，重新计算新生成的左、右两个叶子结点的样本权重和。如果任一个叶子结点的样本权重低于某一个阈值，也会放弃此次分裂。这涉及到一个超参数:最小样本权重和，是指如果一个叶子节点包含的样本数量太少也会放弃分裂，防止树分的太细。</p>
</li>
</ul>
<h2 id="实现上的一些优化（xgb为什么快）："><a href="#实现上的一些优化（xgb为什么快）：" class="headerlink" title="实现上的一些优化（xgb为什么快）："></a>实现上的一些优化（xgb为什么快）：</h2><ul>
<li><p>对每个特征的分割决策使用并行策略：首先把每个特征都排序，因为对特征在不同的位置进行分割是独立的，所以可以使用并行的线程进行计算，从而加速训练的速度。</p>
</li>
<li><p>梯度数据缓存策略：会把需要的梯度数据放到一个额外的内存里，使用预取和缓存的方式来提高缓存的命中率，从而提升数据IO的速度。</p>
</li>
<li><p>去中心化内存策略：为了实现去中心化的计算，将数据分割成不同的块，然后将所有块存储在磁盘上。在计算过程中，利用一个单独的线程来预取磁盘中的数据，保证运算和取数据可以同时发生。</p>
</li>
</ul>
<h2 id="怎么方式过拟合"><a href="#怎么方式过拟合" class="headerlink" title="怎么方式过拟合"></a>怎么方式过拟合</h2><ul>
<li>正则项：叶子节点个数+叶子节点权重的L2正则化</li>
<li>列抽样：训练的时候只用一部分特征(只考虑一个block,不考虑剩余的Block块即可)</li>
<li>子采样：每轮计算可以不使用全部样本，随机抽取部分样本，因此算法鲁棒性更强</li>
<li>系数衰减：学习率&#x2F;步长,为了给后面的训练留出更多的学习空间。</li>
</ul>
<h2 id="和GBDT的差别"><a href="#和GBDT的差别" class="headerlink" title="和GBDT的差别"></a>和GBDT的差别</h2><ul>
<li><strong>基分类器</strong>：传统GBDT以<a href="https://link.zhihu.com/?target=https://www.cnblogs.com/wqbin/p/11689709.html">CART</a>树作为基分类器，xgboost还支持线性分类器。</li>
<li><strong>导数</strong>：传统GBDT在优化时只用到一阶导数信息，xgboost则对代价函数进行了二阶泰勒展开，同时用到了一阶和二阶导数。同时xgboost工具支持自定义代价函数，只要函数可一阶和二阶求导。 </li>
<li>正则项&#x2F;列抽样&#x2F;系数衰减的防止过拟合方法</li>
<li><strong>并行</strong>：xgboost的并行不是树粒度的并行，而是在特征粒度上的。决策树的学习最耗时步骤就是对特征的值进行排序（因为要确定最佳分割点），xgboost在训练之前，预先对数据进行了排序，然后保存为block结构，后面的迭代中重复地使用这个结构减小计算量。这个block结构也使得并行成为了可能，在进行节点的分裂时，需要计算每个特征的增益，最终选增益最大的那个特征去做分裂，那么各个特征的增益计算就可以开多线程进行。</li>
<li><strong>可并行的近似直方图算法</strong>。树节点在进行分裂时，我们需要计算每个特征的每个分割点对应的增益，即用贪心法枚举所有可能的分割点。当数据无法一次载入内存或者在分布式情况下，贪心算法效率就会变得很低，所以xgboost还提出了一种可并行的近似直方图算法，用于高效地生成候选的分割点。</li>
</ul>
<h2 id="为什么有时候不如LR"><a href="#为什么有时候不如LR" class="headerlink" title="为什么有时候不如LR"></a>为什么有时候不如LR</h2><ul>
<li>在高维稀疏特征的时候，线性模型会比非线性模型好：<strong>带正则化的线性模型比较不容易对稀疏特征过拟合。</strong></li>
</ul>
]]></content>
      <categories>
        <category>推荐</category>
      </categories>
      <tags>
        <tag>gbdt</tag>
        <tag>xgboost</tag>
      </tags>
  </entry>
  <entry>
    <title>前端历史</title>
    <url>/2019/07/14/%E5%89%8D%E7%AB%AF%E5%8E%86%E5%8F%B2/</url>
    <content><![CDATA[<p>听方应杭的知乎live记下来的，一部前端的发展史，就是一部逆袭的历史。</p>
<p>图片是他做的，应该不会找我侵删吧，红色是重大事件，蓝色是一些工具</p>
<p><img data-src="/images/image-20190714094504609.png" alt="image-20190714094504609"></p>
<ol>
<li><p><strong>后端</strong>：最开始没有前端，后端写页面，不太会css，用table布局</p>
</li>
<li><p><strong>后端+美工</strong>：开始出现美工，美工复制ps和css，用div布局</p>
</li>
<li><p><strong>后端+美工</strong>：2004年，gmail发布，页面功能复杂，大量应用ajax，微软ie5加入ajax</p>
<p>js开始受重视，后端写页面写js，美工加图片加特效</p>
</li>
<li><p><strong>后端+美工+前端</strong>：乔布斯拟物化流行，用户体验大爆发，需要有人专门用js写界面逻辑，前后端开始分离</p>
</li>
</ol>
<style>
table th:nth-of-type(1){
width: 20%;
}
table th:nth-of-type(2){
width: 40%
;
}
table th:nth-of-type(3){
width: 40%;
}
</style>


<table>
<thead>
<tr>
<th></th>
<th>原先</th>
<th>后来</th>
</tr>
</thead>
<tbody><tr>
<td>页面分离</td>
<td>页面由后端框架提供，前端只负责js和css</td>
<td>Html、css、js全部给前端</td>
</tr>
<tr>
<td>数据分离</td>
<td>数据隐藏到页面中</td>
<td>以接口形式，ajax传给前端</td>
</tr>
<tr>
<td>人员分离</td>
<td>前后端两个部门，人员分离</td>
<td></td>
</tr>
</tbody></table>
<ol start="5">
<li>后端数据比较重要，前端只负责界面，不好晋升，现在也没有解决，但缓解了很多。<ol>
<li>移动端设备兴起，2G、3G网络网络不好，页面性能优化</li>
<li>响应式，不同的设备尺寸不一</li>
<li>自动化、模块化怎么解决</li>
</ol>
</li>
</ol>
<p><img data-src="/images/image-20190714094525575.png" alt="image-20190714094525575"></p>
<ol start="6">
<li><p><strong>js语言独立</strong>：node.js出现，js可以脱离浏览器运行，前端程序员开始做一些其他程序员在做的事</p>
<ol>
<li>自动化和打包工具，Grunt、Gulp、Webpack</li>
<li>模块化约定，CommonJS、AMD、CMD、UMD，民间方案，已经过时</li>
<li>rails社区技术支援，CoffeeScript、SASS、Pug（Jade），语言不行就升级</li>
</ol>
</li>
<li><p><strong>标准制定方语言升级</strong>：xhtml&rarr;html5、css2&rarr;css3、ES5&rarr;ES6</p>
</li>
<li><p><strong>前端框架出现</strong>：</p>
<p>MVC框架出现了backbone</p>
<p>MVVM框架（MVVM是从C#的WPF里开始用的）出现了Angular</p>
<p>从Angular启发又出现了Vue</p>
<p>facebook推出react，Redux的思想，有游戏开发的思路</p>
</li>
<li><p><strong>可以做服务端</strong>：TJ加入了node，TJ以前写Ruby，express.js、koa.js，nodejs可以做后台应用</p>
</li>
<li><p><strong>可以桌面端</strong>：node+webkit，github写了electron，微信、vscode、叮叮</p>
</li>
<li><p><strong>移动端</strong>：react native可以做ios和android应用</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>卷积的实现</title>
    <url>/2019/02/09/%E5%8D%B7%E7%A7%AF%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<ul>
<li><a href="https://www.cnblogs.com/louyihang-loves-baiyan/p/5154337.html">这里</a>应该说的比较清楚</li>
<li>就贴个图吧<br><img data-src="/images/caffe_conv.jpg"></li>
</ul>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>caffe</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>又是火车上的博客</title>
    <url>/2018/02/26/%E5%8F%88%E6%98%AF%E7%81%AB%E8%BD%A6%E4%B8%8A%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="还是圣经旧约"><a href="#还是圣经旧约" class="headerlink" title="还是圣经旧约"></a>还是圣经旧约</h3><ul>
<li>雅各回乡准备见以扫，但心存芥蒂，仆人和妻子在前，他在最后，且分成两队以备不测。</li>
<li>当天晚上，朦胧之中有人找雅各摔跤，摔到天亮未分胜负，此人即是上帝，上帝让雅各改名以色列，与上帝摔跤的人。</li>
<li>以扫和雅各相约同去以东（也不知道是哪里），雅各仍有戒心，让以扫先走，然后掉头去了迦南的示剑城。</li>
<li>雅各女儿底拿被示剑城太子强奸，太子来提亲，雅各和儿子们要求示剑城全城男子割礼，太子同意，然后雅各儿子们趁他们蛋疼的时候，血洗示剑城。</li>
<li>然后雅各带所有人回家见以撒，路上底拿难产而死，产下一子。</li>
<li>雅各的一个儿子犹大扒灰的故事，太狗血不写。</li>
<li>后面慢慢来吧</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>吴恩达deeplearning.ai课程学习笔记</title>
    <url>/2018/01/16/%E5%90%B4%E6%81%A9%E8%BE%BEdeeplearning-ai%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h3><p><a href="https://github.com/zjyfdu/deeplearning.ai">作业在这里</a><br>原仓库被coursera要求删掉了，多亏我及时folk&#x2F;斜眼笑</p>
<p><a href="https://mooc.study.163.com/smartSpec/detail/1001319001.htm">视频可以直接在网易上看</a></p>
<h3 id="1-神经网络前馈和后馈"><a href="#1-神经网络前馈和后馈" class="headerlink" title="1. 神经网络前馈和后馈"></a>1. 神经网络前馈和后馈</h3><p><img data-src="/images/89948814.jpg" title="前馈"><br><img data-src="/images/41005456.jpg" title="后馈"><br>如果没有激活函数的话，多层的神经网络仍然是个线性的模型。<br><img data-src="/images/73637538.jpg" title="激活函数"></p>
<h3 id="2-超参数、正则化、优化算法等"><a href="#2-超参数、正则化、优化算法等" class="headerlink" title="2. 超参数、正则化、优化算法等"></a>2. 超参数、正则化、优化算法等</h3><p>L2正则化相当于是w权重减小， weight decay<br><img data-src="/images/69146591.jpg"><br>后面等这些是用在mini-batch中的，当训练数据量太大，需要对训练数据分割为mini-batch。但这样会造成收敛方向波动，为了减小这种波动，引入Adam优化算法。<br><img data-src="/images/27110293.jpg" title="指数加权平均"><br><img data-src="/images/27110293.jpg"><br><img data-src="/images/47657351.jpg"><br><img data-src="/images/306118.jpg"><br>batch norm<br><img data-src="/images/49641113.jpg"><br><img data-src="/images/54964765.jpg"></p>
<h3 id="3-CNN"><a href="#3-CNN" class="headerlink" title="3. CNN"></a>3. CNN</h3><p><del>待续</del></p>
<p><a href="https://mp.weixin.qq.com/s/kvbDQ2d7iZ2cur2CQ_e-1Q">感觉这篇已经总结得很好了</a></p>
]]></content>
      <categories>
        <category>caffe</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>大数乘法</title>
    <url>/2018/06/12/%E5%A4%A7%E6%95%B0%E4%B9%98%E6%B3%95/</url>
    <content><![CDATA[<p>coursera北大的c++课上的一道题，本地ok，poj(pku的OJ)上ok，垃圾coursera上compile error。<br>先贴在这里，我感觉写的还是很优雅的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;  </span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class BigInt &#123;</span><br><span class="line">public:</span><br><span class="line">	BigInt()&#123;</span><br><span class="line">		values = &quot;0&quot;;</span><br><span class="line">		flag = true;</span><br><span class="line">	&#125;</span><br><span class="line">	BigInt(const string stringvalue)&#123;</span><br><span class="line">		values = stringvalue;</span><br><span class="line">		flag = true;</span><br><span class="line">	&#125;</span><br><span class="line">	BigInt(const int intvalue)&#123;</span><br><span class="line">		if (intvalue &gt;= 0)&#123;</span><br><span class="line">			values = to_string(intvalue);</span><br><span class="line">			flag = true;</span><br><span class="line">		&#125;</span><br><span class="line">		else&#123;</span><br><span class="line">			values = to_string(-intvalue);</span><br><span class="line">			flag = false;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	//~BigInt();</span><br><span class="line">	friend ostream&amp; operator &lt;&lt; (ostream&amp; out, const BigInt&amp; b);</span><br><span class="line">	friend istream&amp; operator &gt;&gt; (istream&amp; in, const BigInt&amp; b);</span><br><span class="line">	BigInt&amp; operator + (BigInt b);</span><br><span class="line">	BigInt&amp; operator - (BigInt b);</span><br><span class="line">	BigInt&amp; operator * (BigInt b);</span><br><span class="line">	BigInt&amp; operator / (BigInt b);</span><br><span class="line">	bool operator &gt;= (BigInt b);</span><br><span class="line"></span><br><span class="line">//private:</span><br><span class="line">	string values;</span><br><span class="line">	bool flag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bool BigInt::operator &gt;= (BigInt b)&#123;</span><br><span class="line">	int agb = 0;</span><br><span class="line">	if (values.length() &gt; b.values.length())</span><br><span class="line">	&#123;</span><br><span class="line">		agb = 1;</span><br><span class="line">	&#125;</span><br><span class="line">	else if (values.length() &lt; b.values.length())</span><br><span class="line">	&#123;</span><br><span class="line">		agb = -1;</span><br><span class="line">	&#125;</span><br><span class="line">	else</span><br><span class="line">	&#123;</span><br><span class="line">		agb = values.compare(b.values);</span><br><span class="line">	&#125;</span><br><span class="line">	return agb&gt;=0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> BigInt&amp; BigInt :: operator + (BigInt b) &#123;</span><br><span class="line"></span><br><span class="line">	if (flag == b.flag)&#123;</span><br><span class="line">		string res = &quot;&quot;;</span><br><span class="line">		reverse(values.begin(), values.end());</span><br><span class="line">		reverse(b.values.begin(), b.values.end());</span><br><span class="line">		int i = 0, carry = 0;</span><br><span class="line">		for (; i &lt; values.length() &amp;&amp; i &lt; b.values.length(); ++i)&#123;</span><br><span class="line">			int tmp = values[i] - &#x27;0&#x27; + b.values[i] - &#x27;0&#x27; + carry;</span><br><span class="line">			carry = tmp / 10;</span><br><span class="line">			tmp = tmp % 10;</span><br><span class="line">			res = (char)(tmp + &#x27;0&#x27;) + res;</span><br><span class="line">		&#125;</span><br><span class="line">		if (i &lt; values.length())&#123;</span><br><span class="line">			for (; i &lt; values.length(); ++i)&#123;</span><br><span class="line">				int tmp = values[i] - &#x27;0&#x27; + carry;</span><br><span class="line">				carry = tmp / 10;</span><br><span class="line">				tmp = tmp % 10;</span><br><span class="line">				res = (char)(tmp + &#x27;0&#x27;) + res;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		else if (i &lt; b.values.length())&#123;</span><br><span class="line">			for (; i &lt; b.values.length(); ++i)&#123;</span><br><span class="line">				int tmp = b.values[i] - &#x27;0&#x27; + carry;</span><br><span class="line">				carry = tmp / 10;</span><br><span class="line">				tmp = tmp % 10;</span><br><span class="line">				res = (char)(tmp + &#x27;0&#x27;) + res;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		if (carry == 1)</span><br><span class="line">			res = &#x27;1&#x27; + res;</span><br><span class="line">		values = res;</span><br><span class="line">	&#125;</span><br><span class="line">	else&#123;</span><br><span class="line">		int agb = 0;</span><br><span class="line">		if (values.length() &gt; b.values.length())</span><br><span class="line">		&#123;</span><br><span class="line">			agb = 1;</span><br><span class="line">		&#125;</span><br><span class="line">		else if (values.length() &lt; b.values.length())</span><br><span class="line">		&#123;</span><br><span class="line">			agb = -1;</span><br><span class="line">		&#125;</span><br><span class="line">		else</span><br><span class="line">		&#123;</span><br><span class="line">			agb = values.compare(b.values);</span><br><span class="line">		&#125;</span><br><span class="line">		if (0 == agb)</span><br><span class="line">		&#123;</span><br><span class="line">			values = &quot;0&quot;;</span><br><span class="line">			return *this;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		else if (agb &lt; 0)&#123;</span><br><span class="line">			flag = !flag;</span><br><span class="line">			string tmp = values;</span><br><span class="line">			values = b.values;</span><br><span class="line">			b.values = tmp;</span><br><span class="line">		&#125;</span><br><span class="line">		string res = &quot;&quot;;</span><br><span class="line">		reverse(values.begin(), values.end());</span><br><span class="line">		reverse(b.values.begin(), b.values.end());</span><br><span class="line">		int i = 0;</span><br><span class="line">		for (; i &lt; values.length() &amp;&amp; i &lt; b.values.length(); ++i)</span><br><span class="line">			res.push_back(values.at(i) - b.values.at(i) + &#x27;0&#x27;);</span><br><span class="line"></span><br><span class="line">		if (i &lt; values.length()) </span><br><span class="line">			for (; i &lt; values.length(); ++i)</span><br><span class="line">				res.push_back(values.at(i));</span><br><span class="line"></span><br><span class="line">		int carry = 0;</span><br><span class="line">		for (i = 0; i &lt; values.length(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			int newValue = res.at(i) - carry - &#x27;0&#x27;;</span><br><span class="line">			if (newValue &lt; 0) carry = 1;</span><br><span class="line">			else carry = 0;</span><br><span class="line">			res.at(i) = newValue + carry * 10 + &#x27;0&#x27;;</span><br><span class="line">		&#125;</span><br><span class="line">		while (res[res.length() - 1] == &#x27;0&#x27;)</span><br><span class="line">			res.pop_back();</span><br><span class="line">		reverse(res.begin(), res.end());</span><br><span class="line">		values = res;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return *this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> BigInt &amp;BigInt::operator - (BigInt b)</span><br><span class="line"> &#123;	</span><br><span class="line">	 BigInt tmp(b);</span><br><span class="line">	 tmp.flag = !tmp.flag;</span><br><span class="line">	 return *this+tmp;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> BigInt &amp;BigInt::operator * (BigInt b)</span><br><span class="line"> &#123;</span><br><span class="line">	 BigInt res;</span><br><span class="line">	 if (values == &quot;0&quot; || b.values == &quot;0&quot;)&#123;</span><br><span class="line">		 values = &quot;0&quot;;</span><br><span class="line">		 return *this;</span><br><span class="line">	 &#125;</span><br><span class="line">	 if (flag == b.flag)</span><br><span class="line">		 flag = true;</span><br><span class="line">	 else</span><br><span class="line">		 flag = false;</span><br><span class="line"></span><br><span class="line">	 BigInt thisbk(*this);</span><br><span class="line">	 for (int i = 0; i &lt; b.values.length(); ++i)&#123;</span><br><span class="line">		 for (int j = 0; j &lt; b.values[i] - &#x27;0&#x27;; ++j)&#123;</span><br><span class="line">			 res = res + thisbk;</span><br><span class="line">		 &#125;</span><br><span class="line">		res.values.push_back(&#x27;0&#x27;);</span><br><span class="line">	 &#125;</span><br><span class="line">	 res.values.pop_back();</span><br><span class="line">	 values = res.values;</span><br><span class="line">	 return *this;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> BigInt &amp;BigInt::operator / (BigInt b)</span><br><span class="line"> &#123;</span><br><span class="line">	 if (b.values == &quot;0&quot;)</span><br><span class="line">		 throw &quot;Division by zero condition!&quot;;</span><br><span class="line">	 if (flag == b.flag)</span><br><span class="line">		 flag = true;</span><br><span class="line">	 else</span><br><span class="line">		 flag = false;</span><br><span class="line"></span><br><span class="line">	 BigInt one(1);</span><br><span class="line">	 while (*this &gt;= b)&#123;</span><br><span class="line">		 b.values.push_back(&#x27;0&#x27;);</span><br><span class="line">		 one.values.push_back(&#x27;0&#x27;);</span><br><span class="line">	 &#125;</span><br><span class="line">	 b.values.pop_back();</span><br><span class="line">	 one.values.pop_back();</span><br><span class="line"></span><br><span class="line">	 BigInt thisbk(*this), res(0);</span><br><span class="line">	 while (one.values.compare(&quot;0&quot;) &gt; 0)&#123;</span><br><span class="line">		 while (*this &gt;= b)&#123;</span><br><span class="line">			 *this - b;</span><br><span class="line">			 res + one;</span><br><span class="line">		 &#125;</span><br><span class="line">		 b.values.pop_back();</span><br><span class="line">		 one.values.pop_back();</span><br><span class="line">	 &#125;</span><br><span class="line">	 values = res.values;</span><br><span class="line">	 return *this;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">ostream&amp; operator &lt;&lt; (ostream&amp; ou, const BigInt&amp; b)</span><br><span class="line">&#123;</span><br><span class="line">	if (!b.flag)</span><br><span class="line">		ou &lt;&lt; &#x27;-&#x27;;</span><br><span class="line">	ou &lt;&lt; b.values;</span><br><span class="line">	return ou;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">istream&amp; operator &gt;&gt; (istream&amp; in, BigInt&amp; b)</span><br><span class="line">&#123;</span><br><span class="line">	string str;</span><br><span class="line">	in &gt;&gt; str;</span><br><span class="line">	b.values = str;</span><br><span class="line">	return in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	BigInt b1, b2;</span><br><span class="line">	string str;</span><br><span class="line">	cin &gt;&gt; b1 &gt;&gt; str &gt;&gt; b2;</span><br><span class="line"></span><br><span class="line">	if (str == &quot;+&quot;)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; b1 + b2 &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	else if (str == &quot;-&quot;)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; b1 - b2 &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	else if (str == &quot;*&quot;)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; b1 * b2 &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	else</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; b1 / b2 &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
  </entry>
  <entry>
    <title>奇异值分解</title>
    <url>/2018/01/30/%E5%A5%87%E5%BC%82%E5%80%BC%E5%88%86%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="1-基本定义"><a href="#1-基本定义" class="headerlink" title="1. 基本定义"></a>1. 基本定义</h3><p>特征值分解<br>$$ A &#x3D; \boldsymbol{V}diag(\lambda)\boldsymbol{V}^{-1} $$<br>奇异值分解类似，但不要求A是方阵<br>$$ A &#x3D; \boldsymbol{UDV}^T$$<br>假设$A$是(m,n)，那么$\boldsymbol{U}$是(m,m)，$\boldsymbol{D}$是(m,n)，$\boldsymbol{V}$是(n,n)。$\boldsymbol{U}$、$\boldsymbol{V}$均为对称矩阵，分别称为左奇异向量，右奇异向量，$D$是对角矩阵，其对角元素称为奇异值。<br>两者关系<br>$A$的左奇异向量，是$AA^T$的特征向量，$A$的右奇异向量，是$A^TA$的特征向量。$A$的非零奇异值，是$AA^T$和$A^TA$的特征值的平方根。</p>
<h3 id="2-待续吧"><a href="#2-待续吧" class="headerlink" title="2. 待续吧"></a>2. 待续吧</h3><p>等我知道了SVD怎么算之后再写。</p>
]]></content>
      <categories>
        <category>数学基础</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>如何优雅地排人才公寓</title>
    <url>/2018/11/27/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E6%8E%92%E4%BA%BA%E6%89%8D%E5%85%AC%E5%AF%93/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">start_date = datetime.date(<span class="number">2018</span>, <span class="number">6</span>, <span class="number">6</span>)</span><br><span class="line">start_rank = <span class="number">866</span></span><br><span class="line"></span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">&#x27;ASP.NET_SessionId&#x27;</span>: <span class="string">&#x27;obe4o1esws0xutvslbbapc55&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;safedog-flow-item&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://rcgy.zjhui.net/&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate, br&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">params = (</span><br><span class="line">    (<span class="string">&#x27;flag&#x27;</span>, <span class="string">&#x27;0&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;userName&#x27;</span>, <span class="string">&#x27;13122358292&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;passWord&#x27;</span>, <span class="string">&#x27;MzAyMDI4MnpqeWQ=&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;md5&#x27;</span>, <span class="string">&#x27;08dcb32a31936c855b5f8f5c21f5b957&#x27;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">&#x27;https://rcgy.zjhui.net/Login.aspx&#x27;</span>, headers=headers, params=params, cookies=cookies)</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Pragma&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://rcgy.zjhui.net/System/ApplyRecord.aspx&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate, br&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">&#x27;https://rcgy.zjhui.net/System/WaitingRecord.aspx&#x27;</span>, headers=headers, cookies=cookies)</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(response.content, features=<span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">rank = soup.find(<span class="built_in">id</span>=<span class="string">&#x27;ctl00_ctl00_ctl00_main_main_main_rptPtApplyRecord_ctl00_labPageRank&#x27;</span>).string</span><br><span class="line">rank = <span class="built_in">int</span>(rank)</span><br><span class="line"></span><br><span class="line">today = datetime.date.today()</span><br><span class="line">remain_days = <span class="built_in">float</span>(rank) * (today - start_date).days / (start_rank - rank)</span><br><span class="line">remain_days = <span class="built_in">int</span>(remain_days)</span><br><span class="line">check_in_date = today + datetime.timedelta(days=remain_days)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;rank:\t&quot;</span>, rank</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;days remaining:\t&quot;</span>, remain_days</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;check in date:\t&quot;</span>, check_in_date</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>微信公众号机器人</title>
    <url>/2018/10/06/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
    <content><![CDATA[<h1 id="itchatmp"><a href="#itchatmp" class="headerlink" title="itchatmp"></a>itchatmp</h1><ul>
<li>itchat是个微信机器人，作者通过微信网页版抓的接口</li>
<li>itchatmp是对应的微信公众号的机器人，微信官方提供的接口，但相比于itchat，不太完善，文档也不行</li>
<li>我已经要放弃这个了，这里只记录一下我修改nginx配置的过程</li>
</ul>
<ol>
<li><code>itchatmp.run(port=8180)</code>，这里首先要指定端口</li>
<li>微信公众号的配置页面里，写上对应的域名，yongxinxue.xin&#x2F;weixin，由于我根域名被占了，所以建立了个新路径</li>
<li>nginx里增加配置，<a href="https://blog.csdn.net/zhanlanmg/article/details/49684803">这里简单说一下last和break的区别</a>，<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  _;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">location</span> /weixin &#123;</span><br><span class="line">      <span class="attribute">rewrite</span> /weixin/(.*) /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">      <span class="attribute">proxy_pass</span> http://127.0.0.1:8180/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>rewrite break 重写后，直接使用当前资源，不再执行location里余下的语句，完成本次请求，地址栏url不变<br>rewrite last 重写后，马上发起一个新的请求，再次进入server块，重试location匹配，超过10次匹配不到报500错误，地址栏url不变</p>
</blockquote>
<h1 id="werobot"><a href="#werobot" class="headerlink" title="werobot"></a>werobot</h1><ul>
<li>看着更成熟一点，后面再看，<a href="https://werobot.readthedocs.io/zh_CN/latest/replies.html">这里</a></li>
</ul>
]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>微信</tag>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器端口记录</title>
    <url>/2020/02/21/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E5%8F%A3%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>端口</th>
<th>内容</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://122.51.137.82:8080/">http://122.51.137.82:8080/</a></td>
<td>个人网盘，用于向服务器传文件</td>
</tr>
<tr>
<td><a href="http://122.51.137.82:8082/">http://122.51.137.82:8082/</a></td>
<td>用vue做的<a href="https://github.com/zjyfdu/geo_game">地图游戏</a></td>
</tr>
<tr>
<td><a href="http://122.51.137.82:8085/">http://122.51.137.82:8085/</a></td>
<td>b站橙卡的giligili教学<del>半成品</del>残次品</td>
</tr>
<tr>
<td><a href="http://122.51.137.82:8086/">http://122.51.137.82:8086/</a></td>
<td>《go web编程》的gitbook</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>caffe</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>正则</title>
    <url>/2019/03/08/%E6%AD%A3%E5%88%99/</url>
    <content><![CDATA[<ul>
<li>这里占个坑</li>
<li>我想些反向搜索，但是我自己都没搞懂</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>用llama.cpp在mac上部署qwen3vl-30B</title>
    <url>/2025/10/25/%E7%94%A8llama-cpp%E5%9C%A8mac%E4%B8%8A%E9%83%A8%E7%BD%B2qwen3vl-30B/</url>
    <content><![CDATA[<h2 id="引言：一个报错"><a href="#引言：一个报错" class="headerlink" title="引言：一个报错"></a>引言：一个报错</h2><p>我目标是本地运行强大的 <strong>Qwen3-VL-30B</strong> 模型。我下载了编译了llama.cpp，但现在还不支持Qwen3系列</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">llama_model_load: error loading model: error loading model architecture: <span class="string">&#x27;qwen3vlmoe&#x27;</span></span><br></pre></td></tr></table></figure>

<p>一个 <code>unknown model architecture</code> 报错。这意味着我的 <code>llama.cpp</code> 版本太老，还不认识这个新模型的架构。幸运的是，开源社区的行动总是神速，我很快找到了一个社区提供的解决方案，而这个修复过程，也带我进行了一次关于软件工程和模型架构的深度探索。</p>
<h2 id="1-解决方案-——-如何“打补丁”跑通-Qwen3-VL"><a href="#1-解决方案-——-如何“打补丁”跑通-Qwen3-VL" class="headerlink" title="1: 解决方案 —— 如何“打补丁”跑通 Qwen3-VL"></a>1: 解决方案 —— 如何“打补丁”跑通 Qwen3-VL</h2><p>我找到的解决方案在 Hugging Face 的 <code>yairpatch/Qwen3-VL-30B-A3B-Thinking-GGUF</code> 仓库中。它的核心不是一个新程序，而是一个名为 <code>qwen3vl-implementation.patch</code> 的文件。</p>
<p>这个 <code>.patch</code> 文件就是“补丁”，它包含了让标准 <code>llama.cpp</code> 源代码支持 <code>qwen3vlmoe</code> 架构所需的所有代码更改。</p>
<p>以下是我的完整操作步骤：</p>
<p><strong>1. 下载并应用补丁</strong></p>
<p>先cd到llama.cpp目录下，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ggerganov/llama.cpp.git</span><br><span class="line"><span class="built_in">cd</span> llama.cpp</span><br></pre></td></tr></table></figure>

<p>我从社区仓库下载了 <code>.patch</code> 文件，并使用 <code>patch</code> 命令将其应用到刚克隆的源代码上：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载补丁</span></span><br><span class="line">wget https://huggingface.co/yairpatch/Qwen3-VL-30B-A3B-Thinking-GGUF/raw/main/qwen3vl-implementation.patch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用补丁</span></span><br><span class="line">patch -p1 &lt; qwen3vl-implementation.patch</span><br></pre></td></tr></table></figure>

<p><code>patch -p1</code> 命令会智能地读取“更改说明书”，并自动修改我本地的源代码。</p>
<p><strong>3. 重新编译 <code>llama.cpp</code></strong></p>
<p>源代码更新后，必须重新编译。因为我用的是 Mac，所以我开启了 Metal GPU 加速：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake --build build --config Release -j 8</span><br></pre></td></tr></table></figure>

<p><strong>4. 运行！</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">build/bin/llama-server -hf yairpatch/Qwen3-VL-30B-A3B-Thinking-GGUF:Q4_K_S</span><br></pre></td></tr></table></figure>

<p>运行后，会模型下载<strong>两个</strong> GGUF 文件：</p>
<ul>
<li><strong>主模型 (17.5 GB):</strong> <code>Qwen3-VL-30B-A3B-Q4_K_S.gguf</code></li>
<li><strong>多模态投影文件 (1.08 GB):</strong> <code>mmproj-Qwen3-VL-30B-A3B-F16.gguf</code></li>
</ul>
<p>这个命令同时会启动gui界面和api。</p>
<hr>
<h2 id="2-深入探索-——-Patch-和-mmproj-究竟是什么？"><a href="#2-深入探索-——-Patch-和-mmproj-究竟是什么？" class="headerlink" title="2: 深入探索 —— Patch 和 mmproj 究竟是什么？"></a>2: 深入探索 —— Patch 和 mmproj 究竟是什么？</h2><h3 id="patch：一个-40-岁的“新”技术"><a href="#patch：一个-40-岁的“新”技术" class="headerlink" title="patch：一个 40 岁的“新”技术"></a><code>patch</code>：一个 40 岁的“新”技术</h3><p><code>patch</code>（补丁）的概念几乎和编程一样古老。</p>
<ul>
<li><strong>物理起源 (1940s-1970s):</strong> 在使用“打孔卡片”编程的时代，修复 bug 意味着用胶带**物理地“贴住”（patch）**卡片上打错的孔。</li>
<li><strong>软件诞生 (1980s):</strong><ol>
<li><strong><code>diff</code> (1974年):</strong> Unix 系统诞生了 <code>diff</code> 命令，它可以比较两个文本文件并<strong>输出差异</strong>。</li>
<li><strong><code>patch</code> (1985年):</strong> 传奇程序员 <strong>Larry Wall</strong>（Perl 语言之父）发明了 <code>patch</code> 命令。它可以读取 <code>diff</code> 生成的“差异文件”，并<strong>自动将这些差异应用</strong>到旧文件上，将其“升级”成新版本。</li>
</ol>
</li>
</ul>
<p>所以，我刚才用的 <code>patch -p1</code> 命令，是一个在开源世界流传了近 40 年的经典工具，是软件协作和版本管理的基石。</p>
<h3 id="mmproj：连接视觉和语言的“翻译官”"><a href="#mmproj：连接视觉和语言的“翻译官”" class="headerlink" title="mmproj：连接视觉和语言的“翻译官”"></a><code>mmproj</code>：连接视觉和语言的“翻译官”</h3><p>为什么模型要分成两个文件（一个 17.5 GB 的主模型和一个 1.08 GB 的 <code>mmproj</code>）？为什么不合成一个？</p>
<p>答案在于<strong>模块化设计</strong>和<strong>效率</strong>。</p>
<p>一个视觉-语言模型（VLM）通常由两个“大脑”拼装而成：</p>
<ol>
<li><strong>视觉编码器 (Vision Encoder)：</strong> 专门“看”图片，把像素转换成一串复杂的数字（图像嵌入）。</li>
<li><strong>语言模型 (LLM)：</strong> 专门“思考和说”文本，它只懂语言。</li>
</ol>
<p>这两个“大脑”说的是不同的“语言”。而 <strong><code>mmproj</code> (Multi-Modal Projector，多模态投影器)</strong> 的唯一工作，就是充当它们之间的“翻译官”。</p>
<p>它是一个小型的神经网络，负责把“视觉编码器”输出的“图像语言”翻译成“LLM”能听懂的“文本语言”。</p>
<p><strong>为什么不合到一起？</strong></p>
<ul>
<li><strong>节省资源，按需加载：</strong> 这是最大的好处。如果我只想用 Qwen3-VL 聊天（纯文本），我<strong>不需要</strong>加载那 1.08 GB 的 <code>mmproj</code> 翻译官，从而节省了宝贵的 VRAM&#x2F;RAM。只有当我需要处理图像时，我才通过 <code>--mmproj</code> 参数把它“插”上。</li>
<li><strong>训练和实验效率：</strong> 开发者可以“冻结”昂贵的 LLM，只单独训练和迭代这个小小的 <code>mmproj</code> 翻译官，极大降低了成本。</li>
</ul>
<hr>
<h2 id="Part-3-架构揭秘-——-Qwen3-VL-的“特殊”-RoPE"><a href="#Part-3-架构揭秘-——-Qwen3-VL-的“特殊”-RoPE" class="headerlink" title="Part 3: 架构揭秘 —— Qwen3-VL 的“特殊” RoPE"></a>Part 3: 架构揭秘 —— Qwen3-VL 的“特殊” RoPE</h2><p>解决了运行问题，我开始好奇它的架构 <code>qwen3vlmoe</code> 到底特殊在哪。我了解到，它的核心优势之一在于使用了一种特殊的**旋转位置编码 (RoPE)**。</p>
<h3 id="为什么-RoPE-需要升级？"><a href="#为什么-RoPE-需要升级？" class="headerlink" title="为什么 RoPE 需要升级？"></a>为什么 RoPE 需要升级？</h3><p>标准的 RoPE 是为<strong>一维 (1D)</strong> 文本设计的，它只关心“单词A在单词B前面多远”。</p>
<p>但是 <strong>Qwen3-VL 是一个视频-语言模型</strong>，它必须处理<strong>三维 (3D)</strong> 的数据块：</p>
<ol>
<li>$h$ (高度)</li>
<li>$w$ (宽度)</li>
<li>$t$ (时间，即视频的第几帧)</li>
</ol>
<p>早期的多模态模型 (如 Qwen2-VL) 使用 <strong>MRoPE</strong> (Multimodal RoPE)，它简单地把特征维度“分块”，比如：</p>
<ul>
<li>高频特征 $\leftarrow$ [所有时间 $t$ 的信息]</li>
<li>中频特征 $\leftarrow$ [所有高度 $h$ 的信息]</li>
<li>低频特征 $\leftarrow$ [所有宽度 $w$ 的信息]</li>
</ul>
<p>这种设计的<strong>致命缺陷</strong>是，所有“时间”信息都被困在了高频区，导致模型很难理解长距离的时间依赖（比如视频开头和结尾的联系），严重限制了长视频的理解。</p>
<h3 id="Qwen3-VL-的答案：Interleaved-MRoPE-交错式"><a href="#Qwen3-VL-的答案：Interleaved-MRoPE-交错式" class="headerlink" title="Qwen3-VL 的答案：Interleaved-MRoPE (交错式)"></a>Qwen3-VL 的答案：Interleaved-MRoPE (交错式)</h3><p>Qwen3-VL 采用了更先进的 **Interleaved-MRoPE (I-MRoPE)**。</p>
<p>它不再“分块”，而是像发牌一样，把 $t, h, w$ 三个维度的信息**“交错”<strong>地、均匀地</strong>“轮询”<strong>（Round-Robin）分配到</strong>所有**的频率通道中（高、中、低频）。</p>
<p>这意味着，无论是 $t, h, $ 还是 $w$，都能访问到<strong>完整的频率频谱</strong>。</p>
<p>这种“全频率覆盖”的设计，使得 Qwen3-VL 在处理长视频和复杂空间关系时，能力远超前代。</p>
<p><strong>我输入的是静态图片，哪来的时间 $t$？</strong></p>
<p>答案是：<strong>Qwen3-VL 的架构是为更复杂的“视频”任务而设计的。</strong></p>
<ul>
<li><strong>当我输入视频时：</strong> 它在 3D 模式 ($t, h, w$) 下全速运行。</li>
<li><strong>当我输入图片时：</strong> 它只是在 2D 模式 ($h, w$) 下运行，这可以被看作是 $t&#x3D;1$ 的一种特例。</li>
</ul>
]]></content>
      <categories>
        <category>AIGC</category>
      </categories>
      <tags>
        <tag>AIGC</tag>
      </tags>
  </entry>
  <entry>
    <title>百度真香啊</title>
    <url>/2019/12/15/%E7%99%BE%E5%BA%A6%E7%9C%9F%E9%A6%99/</url>
    <content><![CDATA[<ul>
<li>目前我知道有两个地方能薅到免费的GPU，一个是google的colab，一个是百度的aistudio</li>
</ul>
<h1 id="colab"><a href="#colab" class="headerlink" title="colab"></a>colab</h1><ul>
<li>colab是tesla p100，一次可以运行12h，只能以jupyter notebook的形式运行，没有shell真的很难受啊，</li>
<li>文件可以挂载在google driver</li>
<li>有人做了ssh访问colab，看<a href="https://imadelhanafi.com/posts/google_colal_server/">这里</a>，使用Ngrok做了个反向的代理</li>
</ul>
<h1 id="aistudio"><a href="#aistudio" class="headerlink" title="aistudio"></a>aistudio</h1><ul>
<li>百度最友好的是提供命令行，同时也有个work路径，持久存储，比谷歌舒服多了</li>
<li>给的还是Tesla V100啊</li>
<li>理论上只能支持paddlepaddle，但亲测可以pytorch，需要自己安装</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2019.10-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>

<ul>
<li><p>安装之后需要修改conda的镜像，否则下载很慢，修改<code>~/.condarc</code></p>
</li>
<li><p>这个是我的<code>.condarc</code>，基本上是<code>conda install</code>的时候，如果下载的url不是清华的镜像，就需要添加相应的镜像了</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br><span class="line">show_channel_urls: true</span><br></pre></td></tr></table></figure>

<ul>
<li>安装pytorch</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda install --channel https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/ pytorch torchvision cudatoolkit=9.2 -c pytorch</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>看过的论文汇总</title>
    <url>/2018/07/17/%E7%9C%8B%E8%BF%87%E7%9A%84%E8%AE%BA%E6%96%87%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<p>论文常看常忘，还是把看过的先记下来，再补充总结</p>
<h1 id="NET"><a href="#NET" class="headerlink" title="NET"></a>NET</h1><h2 id="pvanet"><a href="#pvanet" class="headerlink" title="pvanet"></a>pvanet</h2><ul>
<li>pvanet是为了实时目标识别提出来的网络，用来提取特征的，用了很多方法来减小计算量，看起来像个大杂烩</li>
<li>C.ReLU，由于观察到浅层的网络卷基层总是存在互补层，所以直接把卷积取反再concatenate，可以减少一半的计算量</li>
<li>Inception，使用了inception unit，用两个3*3的卷集合替代了5*5的卷积，也是为了减小计算量</li>
<li>HypteNet多层融合，融合哪两层是比较讲究的，选择不好的话，会白白增加计算量。这里作者使用了最后输出层2倍和4倍多layer进行融合，以2倍的layer为标准，分别pooling和差值upscale。</li>
<li>ResNet，再inception unit里也用了残差网络。</li>
<li>整个网络结构如下表</li>
</ul>
<p><img data-src="/images/62552972.jpg" alt="pvanet"></p>
<ul>
<li>pvanet里还提到了一种学习策略，动态调整学习率，如果一定的迭代次数内，loss下降小于阈值，就说明是on plateau，这时候就降低学习率。<a href="https://github.com/BVLC/caffe/pull/4606/files">在github上有人实现</a>，只不过没有被merge进来。</li>
</ul>
<h2 id="mobilenet"><a href="#mobilenet" class="headerlink" title="mobilenet"></a>mobilenet</h2><h2 id="shufflenet"><a href="#shufflenet" class="headerlink" title="shufflenet"></a>shufflenet</h2><ul>
<li>mobile和shuffle可以看<a href="/2018/05/13/mobileNet%E5%92%8CshuffleNet/" title="mobileNet和shuffleNet">以前写的这篇</a></li>
</ul>
<h2 id="densenet"><a href="#densenet" class="headerlink" title="densenet"></a>densenet</h2><ul>
<li>每一层都有来自前面所有层的输入，L个层，就是$\frac{L*(L+1)}{2}$个连接。</li>
<li>Each layer has direct access to the gradients from the loss function and the original input signal, leading to an implicit deep supervision.</li>
<li>resNet中，l层的输出是l-1的非线性加l-1</li>
</ul>
<p>$$x_l &#x3D; H_l(x_{l-1}) + x_{l-1}$$</p>
<ul>
<li>denseNet中，是直接做的concatenate</li>
</ul>
<p>$$x_l &#x3D; H_l([x_0, x_1, …, x_{l-1}])$$</p>
<ul>
<li>denseNet中包含三个dense block，如下图所示（盗图自<a href="https://blog.csdn.net/u014380165/article/details/75142664">这里</a>）</li>
</ul>
<p><img data-src="/images/25005397.jpg" alt="dense block"></p>
<ul>
<li>整个网络的结构图如下</li>
</ul>
<p><img data-src="/images/51626114.jpg" alt="dense net"></p>
<ul>
<li><p>由于denseNet是concatenate，所以到最后一层的时候，channel会异常地大，所以每个3*3卷积前，会有个1*1的bottle neck层，减小channel数量</p>
</li>
<li><p>dense block之间还有transition层，也是用1*1的卷积减小channel数</p>
</li>
</ul>
<h1 id="Attention-和-CTC"><a href="#Attention-和-CTC" class="headerlink" title="Attention 和 CTC"></a>Attention 和 CTC</h1><p>Attention is all you need<br>CTC</p>
<h1 id="text-localization"><a href="#text-localization" class="headerlink" title="text localization"></a>text localization</h1><h2 id="EAST"><a href="#EAST" class="headerlink" title="EAST"></a>EAST</h2><ul>
<li>用于文本检测，输出可以是四边形或rotated box</li>
</ul>
<p><img data-src="/images/14151415.jpg" alt="east"></p>
<ul>
<li>最左边用的是PVANet，也可以换成其他ResNet什么的</li>
<li>然后中间是特征融合，这里作者借鉴了U-net的做法，用到了unpool，原因是文字有大有小，需要有不同的感受野</li>
<li>最后是输出层，包括score map和位置信息，输出的size是原图的1&#x2F;4大小</li>
<li>score对应的ground truth: 是将原始的bounding box按照短边长度r向内收缩了0.3r的距离。不懂为什么要这么做</li>
<li>针对bounding box内部的每个点，计算他们到上下左右四个边的距离，并且计算角度。针对bounding box外部的点，ground truth置为0</li>
<li>loss包含两个部分，score map的loss和位置坐标的loss</li>
<li>score的loss使用的是balanced cross entropy，可以配合正负样本不均衡的情况</li>
</ul>
<p>$$ L_s &#x3D; -\beta Y^* log(\hat{Y}) - (1-\beta)(1-Y^*)log(1-\hat{Y})$$<br>$$ \beta &#x3D; 1 - \frac{\sum_{y^* \in Y^*} y^*}{|Y^*|}$$</p>
<ul>
<li>位置坐标的loss我只看了rotated box的，又可以分成两个部分，iou的loss和角度的loss，角度的loss前面会乘个系数，10或者20，是个超参数</li>
</ul>
<h2 id="InceptText-from-Alibaba-IJCAI2018"><a href="#InceptText-from-Alibaba-IJCAI2018" class="headerlink" title="InceptText from Alibaba, IJCAI2018"></a>InceptText from Alibaba, IJCAI2018</h2><h1 id="text-recognition"><a href="#text-recognition" class="headerlink" title="text recognition"></a>text recognition</h1><p>FAN<br>Edit Probability</p>
<h1 id="OCR-end2end"><a href="#OCR-end2end" class="headerlink" title="OCR end2end"></a>OCR end2end</h1><p>an end to end textspotter with explicit aligment and attention, ICCV2018<br>Textbox++</p>
<h1 id="OCR-综述"><a href="#OCR-综述" class="headerlink" title="OCR 综述"></a>OCR 综述</h1><p>Text Detection and Recognition in Imagery: A Survey</p>
<h1 id="Character-Segmentation"><a href="#Character-Segmentation" class="headerlink" title="Character Segmentation"></a>Character Segmentation</h1><p>A Gradient Vector Flow-Based Method for Video Character Segmentation, ICDAR201z1</p>
<h1 id="GAN-and-Draw"><a href="#GAN-and-Draw" class="headerlink" title="GAN and Draw"></a>GAN and Draw</h1><ul>
<li>GAN可以看<a href="/2019/01/27/GAN%E6%80%BB%E7%BB%93/" title="GAN总结">GAN总结</a></li>
<li>draw</li>
</ul>
<h1 id="General-CV"><a href="#General-CV" class="headerlink" title="General CV"></a>General CV</h1><h2 id="YOLO"><a href="#YOLO" class="headerlink" title="YOLO"></a>YOLO</h2><h2 id="SSD"><a href="#SSD" class="headerlink" title="SSD"></a>SSD</h2><h2 id="Faster-rcnn"><a href="#Faster-rcnn" class="headerlink" title="Faster rcnn"></a>Faster rcnn</h2><h2 id="mask-rcnn"><a href="#mask-rcnn" class="headerlink" title="mask rcnn"></a>mask rcnn</h2><h2 id="FCN"><a href="#FCN" class="headerlink" title="FCN"></a>FCN</h2><ul>
<li>FCN里用到了三个技术，全卷积、上采样和跳层链接</li>
<li>全卷积：一般的CNN最后会有全连接层，把二维的图像压缩成以为的向量，FCN把全连接换成了卷积，实际上计算上是等价的。</li>
</ul>
<p><img data-src="/images/26480255.jpg" alt="fcn"></p>
<ul>
<li>上采样：或者叫反卷积、转置卷积（Caffe和Kera里叫Deconvolution，tensorflow里叫conv_transpose）。</li>
<li>跳层连接：将全卷积之后的结果直接上采样得到的结果是很粗糙的，所以用不同池化层的结果进行上采样之后来优化输出。</li>
</ul>
<p><img data-src="/images/48652183.jpg" alt="fcn2"></p>
<ul>
<li>原文感觉不好看，主要参考了<a href="https://blog.csdn.net/junparadox/article/details/52610744">这里</a></li>
</ul>
<h2 id="deeplab"><a href="#deeplab" class="headerlink" title="deeplab"></a>deeplab</h2><ul>
<li>deeplab可以看<a href="/2018/06/19/deeplab/" title="deeplab">以前写的这篇</a></li>
</ul>
<h1 id="Visualization"><a href="#Visualization" class="headerlink" title="Visualization"></a>Visualization</h1><p>Understanding neural Networks Through Deep Visualization</p>
]]></content>
      <categories>
        <category>caffe</category>
      </categories>
      <tags>
        <tag>还债</tag>
      </tags>
  </entry>
  <entry>
    <title>火车上写的博客</title>
    <url>/2018/02/04/%E8%80%81%E5%AD%90%E5%9C%A8%E7%81%AB%E8%BD%A6%E4%B8%8A%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="0-关于火车，关于回家"><a href="#0-关于火车，关于回家" class="headerlink" title="0. 关于火车，关于回家"></a>0. 关于火车，关于回家</h3><p>这篇是在火车上写的，回家坐火车会有种奇妙的感觉，大概一学期也就这么一次，你不会为挥霍时间而慌张，反而是时间越快越高兴，大概是家的魔力吧。</p>
<p>所以这篇思路<del>可能</del>会有点跳，想到哪写到哪吧。</p>
<h3 id="1-关于博客，关于js"><a href="#1-关于博客，关于js" class="headerlink" title="1. 关于博客，关于js"></a>1. 关于博客，关于js</h3><p>之前我一直不愿意用hexo写博客，几个原因，</p>
<ol>
<li>这种静态的博客，一点逼格也没有，连个留言都要第三方插件解决</li>
<li>没有博客对编辑界面，只能在某个特定对电脑上写，然后再推上去</li>
<li>我不会node</li>
</ol>
<p>然而最终还是意外地向hexo妥协了，还是那么几个原因，</p>
<ol>
<li>好像我的博客不会有人注册或留言的，静态也够用</li>
<li>我已经人机合一了。。。</li>
<li>我对python的热爱被flask终结掉了，我想换个语言了</li>
<li>想通了一个道理，不拥抱js&#x2F;css，网站一定会很丑。。。</li>
</ol>
<p>所以还是要感谢FJ，在我下定好决心学node又不知道做什么的时候，FJ说要有小程序，<del>于是就有了小程序</del>于是我就像突然看到了灯塔一样，也突然有了动力。</p>
<p>其实也是挺奇怪的事，我也早早想到过小程序，但是呢，所有自己想到的项目，都会在心里自动贴一个标签，练手。然后练手两个字，就完全限制了这个项目的意义，练到手熟之后呢，大概就不了了之了。FJ的作用，大概只是说了句小程序，然后提了一堆我看来奇奇怪怪的需求。但也是因此，这个本来应该是练手的项目，它的意义就足以支撑我认真做下去了。</p>
<p>所以啊，我还是一个靠意义活着的生物，不管真假。</p>
<h3 id="2-关于圣经旧约"><a href="#2-关于圣经旧约" class="headerlink" title="2. 关于圣经旧约"></a>2. 关于圣经旧约</h3><p>我是这学期开始看圣经的，当然正如你们所见的，我是个温和的共产主义者。看圣经完全是出于好奇心，主要是《西部世界》带起来的。</p>
<p>故事性不强而且很散，为了怕我看了就忘了，先把看了的部分记下来。</p>
<p>如有错误或冒犯，烦请指正。</p>
<ul>
<li>上帝创世，嗯。</li>
<li>然后就是伊甸园里，撒旦化身成蛇，引诱夏娃亚当吃了禁果，然后他们知羞耻。上帝惩罚蛇用肚子走路，女人见蛇就踩，蛇见女人就咬脚后跟，男人需要劳作才能收获果实，然后把亚当夏娃逐出伊甸园。</li>
<li>亚当夏娃大儿子该隐种地，二儿子亚伯放牧。该隐献给上帝谷物，亚伯献给上帝羊羔，上帝喜欢亚伯的礼物，该隐妒嫉，遂杀弟。</li>
<li>后来世风日下，god has seen too much evil，上帝后悔造了人，于是计划大洪水大清洗一下。</li>
<li>让诺亚造船，然后每个动物带一对。水落之后，诺亚放出鸽子，鸽子衔橄榄枝返回，诺亚于是知道水完全退了。上帝以彩虹立誓，不在用洪水灭世。</li>
<li>上帝让诺亚的长孙亚伯拉罕带着族人去往应许之地迦南。但亚伯拉罕的侄子罗德，执意去往索多玛。索多玛后被周围国家所灭，罗德通遭罪，亚伯拉罕于是去解救。</li>
<li>亚伯拉罕妻子不会生孩子，两个人急了，于是找婢女夏甲生了孩子，取名实马里。后上帝赐子亚伯拉罕，并取名为以撒。</li>
<li>上帝说索多玛恶贯满盈，要毁灭索多玛。亚伯拉罕恳求，上帝答应只要索多玛能有十个好人，就放过这里。前来考察的两个天使遇上罗德，罗德招待他们，但索多玛的全城老幼却要求罗德交出客人。天使让罗德一家逃难，然后毁灭了索多玛。罗德妻子在逃跑时，回头看，变成盐柱。</li>
<li>上帝考验亚伯拉罕，亚拿儿子献祭，上帝及时制止，并送了只羊羔。</li>
<li>以撒母亲帮儿子从她的族人中，选取了妻子利百加。</li>
<li>利百加也不能生，于是上帝让她怀上了双胞胎，分别是以扫和雅各。雅各骗取了哥哥以扫的长子权，骗取了父亲本应该给以扫的祝福。以扫恨之入骨，雅各逃往舅舅拉班家。</li>
<li>拉班有两个女儿，小女儿好看。雅各给舅舅放羊，舅答应七年之后把好看的小女儿嫁给雅各。七年之后，过完新婚之夜，雅各发现嫁给她的时大女儿。因为按照当地习俗，妹妹不能比姐姐先嫁。于是雅各又答应给拉班放七年羊，然后和妹妹结婚。</li>
<li>婚后雅各只喜欢妹妹，冷落姐姐，于是上帝让姐姐怀孕。反正后来姐妹互相争宠，给雅各生了一堆孩子。雅各放羊放着放着就变得很富有，拉班及其子妒嫉，于是上帝让雅各回到故乡。</li>
<li>好长好啰嗦，后面慢慢更。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>蒋勋的红楼梦</title>
    <url>/2019/06/16/%E8%92%8B%E5%8B%8B%E7%9A%84%E7%BA%A2%E6%A5%BC%E6%A2%A6/</url>
    <content><![CDATA[<ul>
<li><p>最近在听蒋勋的细说红楼梦，那温柔的台普，那细腻的解读，那新颖的角度，那穿插在解说其中的娓娓道来的个人经历</p>
</li>
<li><p>但是我搜了几个在线的FM，都没有资源，不得已在一个微信公众号上听，体验不是太好</p>
</li>
<li><p>于是我想在网上找资源下载下来</p>
</li>
<li><p>翻来翻去，找到了这个看着很古老的<a href="https://www.ishuyin.com/show-15626.html">网站</a>，我打开chrome的调试，音频资源直接大大方方地暴露在外面，没有任何反爬措施，奈斯</p>
</li>
</ul>
<p><img data-src="/images/jiangxun.png"></p>
<ul>
<li>于是就有了下面这个爬虫，其实代码主要是从<a href="https://www.cnblogs.com/lilinwei340/p/6793796.html">这里</a>抄的</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> closing</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">out_dir = <span class="string">&#x27;./out&#x27;</span>  <span class="comment"># 输出文件夹</span></span><br><span class="line">thread_num = <span class="number">4</span>    <span class="comment"># 线程数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(out_dir):</span><br><span class="line">    os.mkdir(out_dir)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">img_url, img_name</span>):</span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(os.path.join(out_dir, img_name)):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">with</span> closing(requests.get(img_url, stream=<span class="literal">True</span>, headers=headers)) <span class="keyword">as</span> r:</span><br><span class="line">        rc = r.status_code</span><br><span class="line">        <span class="keyword">if</span> <span class="number">299</span> &lt; rc <span class="keyword">or</span> rc &lt; <span class="number">200</span>:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;returnCode%s\t%s&#x27;</span> % (rc, img_url)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        content_length = <span class="built_in">int</span>(r.headers.get(<span class="string">&#x27;content-length&#x27;</span>, <span class="string">&#x27;0&#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span> content_length == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;size0\t%s&#x27;</span> % img_url</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(out_dir, img_name), <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> data <span class="keyword">in</span> r.iter_content(<span class="number">1024</span>):</span><br><span class="line">                f.write(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_imgurl_generate</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">161</span>):</span><br><span class="line">        <span class="keyword">yield</span> (<span class="string">&quot;http://mp3.aikeu.com/15626/&#123;&#125;.mp3&quot;</span>.<span class="built_in">format</span>(i), <span class="string">&quot;&#123;&#125;.mp3&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line"></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">loop</span>(<span class="params">imgs</span>):</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;thread %s is running...&#x27;</span> % threading.current_thread().name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> lock:</span><br><span class="line">                img_url, img_name = <span class="built_in">next</span>(imgs)</span><br><span class="line">        <span class="keyword">except</span> StopIteration:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            download(img_url, img_name)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;exceptfail\t%s&#x27;</span> % img_url</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;thread %s is end...&#x27;</span> % threading.current_thread().name</span><br><span class="line"></span><br><span class="line">img_gen = get_imgurl_generate()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, thread_num):</span><br><span class="line">    t = threading.Thread(target=loop, name=<span class="string">&#x27;LoopThread%s&#x27;</span> %i, args=(img_gen,))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>scrapy</category>
      </categories>
      <tags>
        <tag>蒋勋</tag>
        <tag>红楼梦</tag>
      </tags>
  </entry>
  <entry>
    <title>视频防盗啊啊</title>
    <url>/2018/02/12/%E8%A7%86%E9%A2%91%E9%98%B2%E7%9B%97%E5%95%8A%E5%95%8A/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>好烦啊，一直搞不定<br>下面只是记录我踩过的一些坑，大家不要看了</p>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>默认的video标签会有下载按钮，而且不能倍速播放，于是使用了video.js<br>为防止下载video禁止掉了右键菜单<br>目前存在的问题</p>
<ul>
<li>打开调试或者查看原网页可以直接看到视频链接</li>
<li>手机端会之间显示浏览器的播放界面，都有直接下载的按钮</li>
</ul>
<h3 id="途径"><a href="#途径" class="headerlink" title="途径"></a>途径</h3><h4 id="坑1-修改referrer"><a href="#坑1-修改referrer" class="headerlink" title="坑1 修改referrer"></a>坑1 修改referrer</h4><p>想通过referrer判断是否是播放还是直接下载（先假设下载都是空referrer）<br>video.js不能直接控制http请求，不能控制referrer<br>控制全局referrer可以在head中加下面这句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;referrer&quot; content=&quot;always/never/origin/default&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>应该是下载空referrer这个假设本来就有问题，这条路堵死了</p>
<h4 id="坑2-blob"><a href="#坑2-blob" class="headerlink" title="坑2 blob"></a>坑2 blob</h4><p>blob用于处理二进制文件，youtube和bilibili都是用的blob，看起来很promising<br>但是我不会用啊。。。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;video id=&quot;id&quot; width=&quot;320&quot; height=&quot;240&quot;  type=&#x27;video/mp4&#x27; controls  &gt; &lt;/video&gt;</span><br><span class="line"></span><br><span class="line">window.onload = function() &#123;</span><br><span class="line">    var xhr = new XMLHttpRequest();</span><br><span class="line">    xhr.open(&#x27;GET&#x27;, &#x27;mov_bbb.mp4&#x27;, true);</span><br><span class="line">    xhr.responseType = &#x27;blob&#x27;; //important</span><br><span class="line">    xhr.onload = function(e) &#123;</span><br><span class="line">        if (this.status == 200) &#123;</span><br><span class="line">            console.log(&quot;loaded&quot;);</span><br><span class="line">            var blob = this.response;</span><br><span class="line">            var video = document.getElementById(&#x27;id&#x27;);</span><br><span class="line">            video.oncanplaythrough = function() &#123;</span><br><span class="line">                console.log(&quot;Can play through video without stopping&quot;);</span><br><span class="line">                URL.revokeObjectURL(this.src);</span><br><span class="line">            &#125;;</span><br><span class="line">            video.src = URL.createObjectURL(blob);</span><br><span class="line">            video.load();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.send();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以工作，但需要先把视频加载一遍才能看，意思是这个页面加载时间要以分钟来记了。。。<br>而且还有跨域的问题</p>
<h4 id="坑3-阿里云的flash"><a href="#坑3-阿里云的flash" class="headerlink" title="坑3 阿里云的flash"></a>坑3 阿里云的flash</h4><p>这个坑还没踩进去，但是还是不想用flash，都2018年了啊</p>
<h4 id="后面的坑"><a href="#后面的坑" class="headerlink" title="后面的坑"></a>后面的坑</h4><ul>
<li>不行就用ua，把手机端的禁掉，然后pc端由他们下去吧</li>
<li>然后再看看<a href="https://stackoverflow.com/questions/9756837/prevent-html5-video-from-being-downloaded-right-click-saved">这个链接</a>里的方法，说不定能用呢😢</li>
<li>近期不搞了，先专心写毕业论文吧</li>
</ul>
]]></content>
      <categories>
        <category>flask网站总结</category>
      </categories>
  </entry>
  <entry>
    <title>计算感受野</title>
    <url>/2018/06/20/%E8%AE%A1%E7%AE%97%E6%84%9F%E5%8F%97%E9%87%8E/</url>
    <content><![CDATA[<ul>
<li>feature map的计算公式为<code>outsize = (insize - fsize + 2*pad) / stride + 1</code></li>
<li>stride 的计算公式为<code>totstride = totstride * stride</code>，这两个公式都是从前往后算</li>
<li>receptive field <code>RF = ((RF -1)* stride) + fsize</code>，这个要从后往前算</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line">net_struct = &#123;<span class="string">&#x27;alexnet&#x27;</span>: &#123;<span class="string">&#x27;net&#x27;</span>:[[<span class="number">11</span>,<span class="number">4</span>,<span class="number">0</span>],[<span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span>],[<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span>]],</span><br><span class="line">                   <span class="string">&#x27;name&#x27;</span>:[<span class="string">&#x27;conv1&#x27;</span>,<span class="string">&#x27;pool1&#x27;</span>,<span class="string">&#x27;conv2&#x27;</span>,<span class="string">&#x27;pool2&#x27;</span>,<span class="string">&#x27;conv3&#x27;</span>,<span class="string">&#x27;conv4&#x27;</span>,<span class="string">&#x27;conv5&#x27;</span>,<span class="string">&#x27;pool5&#x27;</span>]&#125;,</span><br><span class="line">       <span class="string">&#x27;vgg16&#x27;</span>: &#123;<span class="string">&#x27;net&#x27;</span>:[[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>]],</span><br><span class="line">                 <span class="string">&#x27;name&#x27;</span>:[<span class="string">&#x27;conv1_1&#x27;</span>,<span class="string">&#x27;conv1_2&#x27;</span>,<span class="string">&#x27;pool1&#x27;</span>,<span class="string">&#x27;conv2_1&#x27;</span>,<span class="string">&#x27;conv2_2&#x27;</span>,<span class="string">&#x27;pool2&#x27;</span>,<span class="string">&#x27;conv3_1&#x27;</span>,<span class="string">&#x27;conv3_2&#x27;</span>,</span><br><span class="line">                         <span class="string">&#x27;conv3_3&#x27;</span>, <span class="string">&#x27;pool3&#x27;</span>,<span class="string">&#x27;conv4_1&#x27;</span>,<span class="string">&#x27;conv4_2&#x27;</span>,<span class="string">&#x27;conv4_3&#x27;</span>,<span class="string">&#x27;pool4&#x27;</span>,<span class="string">&#x27;conv5_1&#x27;</span>,<span class="string">&#x27;conv5_2&#x27;</span>,<span class="string">&#x27;conv5_3&#x27;</span>,<span class="string">&#x27;pool5&#x27;</span>]&#125;,</span><br><span class="line">       <span class="string">&#x27;zf-5&#x27;</span>:&#123;<span class="string">&#x27;net&#x27;</span>: [[<span class="number">7</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>],[<span class="number">5</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>]],</span><br><span class="line">               <span class="string">&#x27;name&#x27;</span>: [<span class="string">&#x27;conv1&#x27;</span>,<span class="string">&#x27;pool1&#x27;</span>,<span class="string">&#x27;conv2&#x27;</span>,<span class="string">&#x27;pool2&#x27;</span>,<span class="string">&#x27;conv3&#x27;</span>,<span class="string">&#x27;conv4&#x27;</span>,<span class="string">&#x27;conv5&#x27;</span>]&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#[3,1,1] stands for filter_size, stride, padding</span></span><br><span class="line"></span><br><span class="line">imsize = <span class="number">224</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outFromIn</span>(<span class="params">isz, net, layernum</span>):</span><br><span class="line">    totstride = <span class="number">1</span></span><br><span class="line">    insize = isz</span><br><span class="line">    <span class="keyword">for</span> layer <span class="keyword">in</span> <span class="built_in">range</span>(layernum):</span><br><span class="line">        fsize, stride, pad = net[layer]</span><br><span class="line">        outsize = (insize - fsize + <span class="number">2</span>*pad) / stride + <span class="number">1</span></span><br><span class="line">        insize = outsize</span><br><span class="line">        totstride = totstride * stride</span><br><span class="line">    <span class="keyword">return</span> outsize, totstride</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inFromOut</span>(<span class="params">net, layernum</span>):</span><br><span class="line">    RF = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> layer <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(layernum)):</span><br><span class="line">        fsize, stride, pad = net[layer]</span><br><span class="line">        RF = ((RF -<span class="number">1</span>)* stride) + fsize</span><br><span class="line">    <span class="keyword">return</span> RF</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;layer output sizes given image = %dx%d&quot;</span> % (imsize, imsize)</span><br><span class="line">    <span class="keyword">for</span> net <span class="keyword">in</span> net_struct.keys():</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;************net structrue name is %s**************&#x27;</span>% net</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(net_struct[net][<span class="string">&#x27;net&#x27;</span>])):</span><br><span class="line">            p = outFromIn(imsize,net_struct[net][<span class="string">&#x27;net&#x27;</span>], i+<span class="number">1</span>)</span><br><span class="line">            rf = inFromOut(net_struct[net][<span class="string">&#x27;net&#x27;</span>], i+<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;Layer Name = %s, Output size = %3d, Stride = % 3d, RF size = %3d&quot;</span> % (net_struct[net][<span class="string">&#x27;name&#x27;</span>][i], p[<span class="number">0</span>], p[<span class="number">1</span>], rf)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layer output sizes given image = 224x224</span><br><span class="line">************net structrue name is vgg16**************</span><br><span class="line">Layer Name = conv1_1, Output size = 224, Stride =   1, RF size =   3</span><br><span class="line">Layer Name = conv1_2, Output size = 224, Stride =   1, RF size =   5</span><br><span class="line">Layer Name = pool1, Output size = 112, Stride =   2, RF size =   6</span><br><span class="line">Layer Name = conv2_1, Output size = 112, Stride =   2, RF size =  10</span><br><span class="line">Layer Name = conv2_2, Output size = 112, Stride =   2, RF size =  14</span><br><span class="line">Layer Name = pool2, Output size =  56, Stride =   4, RF size =  16</span><br><span class="line">Layer Name = conv3_1, Output size =  56, Stride =   4, RF size =  24</span><br><span class="line">Layer Name = conv3_2, Output size =  56, Stride =   4, RF size =  32</span><br><span class="line">Layer Name = conv3_3, Output size =  56, Stride =   4, RF size =  40</span><br><span class="line">Layer Name = pool3, Output size =  28, Stride =   8, RF size =  44</span><br><span class="line">Layer Name = conv4_1, Output size =  28, Stride =   8, RF size =  60</span><br><span class="line">Layer Name = conv4_2, Output size =  28, Stride =   8, RF size =  76</span><br><span class="line">Layer Name = conv4_3, Output size =  28, Stride =   8, RF size =  92</span><br><span class="line">Layer Name = pool4, Output size =  14, Stride =  16, RF size = 100</span><br><span class="line">Layer Name = conv5_1, Output size =  14, Stride =  16, RF size = 132</span><br><span class="line">Layer Name = conv5_2, Output size =  14, Stride =  16, RF size = 164</span><br><span class="line">Layer Name = conv5_3, Output size =  14, Stride =  16, RF size = 196</span><br><span class="line">Layer Name = pool5, Output size =   7, Stride =  32, RF size = 212</span><br><span class="line">************net structrue name is zf-5**************</span><br><span class="line">Layer Name = conv1, Output size = 112, Stride =   2, RF size =   7</span><br><span class="line">Layer Name = pool1, Output size =  56, Stride =   4, RF size =  11</span><br><span class="line">Layer Name = conv2, Output size =  28, Stride =   8, RF size =  27</span><br><span class="line">Layer Name = pool2, Output size =  14, Stride =  16, RF size =  43</span><br><span class="line">Layer Name = conv3, Output size =  14, Stride =  16, RF size =  75</span><br><span class="line">Layer Name = conv4, Output size =  14, Stride =  16, RF size = 107</span><br><span class="line">Layer Name = conv5, Output size =  14, Stride =  16, RF size = 139</span><br><span class="line">************net structrue name is alexnet**************</span><br><span class="line">Layer Name = conv1, Output size =  54, Stride =   4, RF size =  11</span><br><span class="line">Layer Name = pool1, Output size =  26, Stride =   8, RF size =  19</span><br><span class="line">Layer Name = conv2, Output size =  26, Stride =   8, RF size =  51</span><br><span class="line">Layer Name = pool2, Output size =  12, Stride =  16, RF size =  67</span><br><span class="line">Layer Name = conv3, Output size =  12, Stride =  16, RF size =  99</span><br><span class="line">Layer Name = conv4, Output size =  12, Stride =  16, RF size = 131</span><br><span class="line">Layer Name = conv5, Output size =  12, Stride =  16, RF size = 163</span><br><span class="line">Layer Name = pool5, Output size =   5, Stride =  32, RF size = 195</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>caffe</category>
      </categories>
      <tags>
        <tag>感受野</tag>
      </tags>
  </entry>
  <entry>
    <title>记一点推荐的基础知识</title>
    <url>/2023/11/11/%E8%AE%B0%E4%B8%80%E7%82%B9%E6%8E%A8%E8%8D%90%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p>推荐水哥的这个<a href="https://zhuanlan.zhihu.com/p/407871839">系列</a></p>
<p>我这记一点里面需要注意的知识</p>
<h1 id="AUC-GAUC"><a href="#AUC-GAUC" class="headerlink" title="AUC&#x2F;GAUC"></a>AUC&#x2F;GAUC</h1><p>阿里提出了一个新的评价指标 Group AUC，是用户维度加权的auc</p>
<p>$$<br>GAUC &#x3D; \frac{\sum w_u AUC_u}{\sum w_u}<br>$$</p>
<p>这里的w代表权重，可以是曝光数、点击数，更倾向于高活用户。</p>
<p>AUC<a href="https://tracholar.github.io/machine-learning/2018/01/26/auc.html">这篇</a>写挺好的</p>
<ul>
<li><p>auc曲线横坐标是$FPR&#x3D;\frac{FP}{FP+TN}$，假阳率，预测为阴性里有多少是阳的，越小越好</p>
</li>
<li><p>纵坐标是$FPR&#x3D;\frac{TP}{TP+FN}$，真阳率，召回率，预测为阳性的里面有多少是真阳性，越大越好</p>
</li>
<li><p>AUC可以看做随机从正负样本中选取一对正负样本，其中正样本的得分大于负样本的概率</p>
</li>
<li><p>可以使用sql来计算AUC</p>
<blockquote>
<p>假设我们将测试集的正负样本按照模型预测得分<strong>从小到大</strong>排序，对于第j<br>个正样本，假设它的排序为 rj， 那么说明排在这个正样本前面的总样本有 rj−1<br>个，其中正样本有 j−1 个（因为这个正样本在所有的正样本里面排第j）， 所以排在第j个正样本前面(得分比它小)的负样本个数为 rj−j个。也就是说，对于第j个正样本来说，其得分比随机取的一个负样本大(排序比它靠后)的概率是 (rj−j)&#x2F;N−,其中N−是总的负样本数目。所以，平均下来，随机取的正样本得分比负样本大的概率为</p>
<p>$$<br>AUC &#x3D; \frac{1}{N_+} \sum_{j&#x3D;1}^{N_+}(r_j - j)&#x2F;N_- \<br>&#x3D; \frac{\sum_{j&#x3D;1}^{N_+}r_j - N_+(N_+ + 1)&#x2F;2}{N_+N_-}<br>$$</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  (ry <span class="operator">-</span> <span class="number">0.5</span><span class="operator">*</span>n1<span class="operator">*</span>(n1<span class="operator">+</span><span class="number">1</span>))<span class="operator">/</span>n0<span class="operator">/</span>n1 <span class="keyword">as</span> auc</span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line">  <span class="keyword">select</span></span><br><span class="line">      <span class="built_in">sum</span>(if(y<span class="operator">=</span><span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>)) <span class="keyword">as</span> n0,</span><br><span class="line">      <span class="built_in">sum</span>(if(y<span class="operator">=</span><span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>)) <span class="keyword">as</span> n1,</span><br><span class="line">      <span class="built_in">sum</span>(if(y<span class="operator">=</span><span class="number">1</span>, r, <span class="number">0</span>)) <span class="keyword">as</span> ry</span><br><span class="line">  <span class="keyword">from</span>(</span><br><span class="line">      <span class="keyword">select</span> y, <span class="built_in">row_number</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">asc</span>) <span class="keyword">as</span> r</span><br><span class="line">      <span class="keyword">from</span>(</span><br><span class="line">          <span class="keyword">select</span> y, score</span><br><span class="line">          <span class="keyword">from</span> some.table</span><br><span class="line">      )A</span><br><span class="line">  )B</span><br><span class="line">)C</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="NDGC"><a href="#NDGC" class="headerlink" title="NDGC"></a>NDGC</h1><p>Normalized Discounted Cumulative Gain，是衡量排序效果的指标。</p>
<p>还是这位<a href="https://blog.csdn.net/xihuanyuye/article/details/85019816">😡老哥</a>说得清楚</p>
<p>理清楚顺序，GC-&gt;DGC-&gt;NDGC</p>
<p>$$<br>DCG@K &#x3D; \sum_{k&#x3D;1}^{K} \frac{rel_k}{\log_2(k + 1)}<br>$$</p>
<p>$$<br>IDCG@K &#x3D; \sum_{k&#x3D;1}^{|REL|} \frac{rel_k}{\log_2(k + 1)} &#x3D; max DGC@K<br>$$</p>
<p>$$<br>NDCG@K &#x3D; \frac{DCG@K}{IDCG_K}<br>$$</p>
<h1 id="reg-AUG"><a href="#reg-AUG" class="headerlink" title="reg-AUG"></a>reg-AUG</h1><p>我理解是没办法画ROC曲线出来，还是沿用了AUC的物理含义，任选两个样本，pred和label单调的概率。<br>可以用逆序对来计算（mergesort）。</p>
<h1 id="DCN-DCNv2"><a href="#DCN-DCNv2" class="headerlink" title="DCN DCNv2"></a>DCN DCNv2</h1><p>dcn，不是很经得起推敲，$x_l^TW_l$相当于一个常数了，作用在$x_0$上，没有起到交叉的作用，本质原因还是因为$W_l$只是一个向量。<br>$$<br>x_{l+1} &#x3D; x_0x_l^TW_l+b_l+x_l<br>$$<br><img data-src="/images/v2-e443530db2bba578bb973bcdee54afda_1440w.jpg" alt="img"></p>
<p>dcn-v2，最大的变化是$W_l$从向量变矩阵了，但因为是bit-wise的交叉，所以参数量比较大，可以做低秩分解。<br>$$<br>x_{l+1}&#x3D;x_0\odot(W_lx_l + b_l)+x_l<br>&#x3D;x_0\odot(U_lV_l^Tx_l + b_l)+x_l<br>$$<br><img data-src="/images/v2-ad511d769a222bf1a12301942dcfc00c_1440w.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>推荐</category>
      </categories>
      <tags>
        <tag>推荐</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一个vscode的bug</title>
    <url>/2018/08/08/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AAvscode%E7%9A%84bug/</url>
    <content><![CDATA[<h1 id="啰嗦一下"><a href="#啰嗦一下" class="headerlink" title="啰嗦一下"></a>啰嗦一下</h1><ul>
<li>在mac下，使用vscode，使用汉字输入法，删除完后，会多一个退格符！而且这个退格符默认是不可见的！</li>
<li>过年在家写论文的时候，就发现xetex莫名其妙不能编译，说是多了字符，苦于不知道这个字符是啥，也不知道怎么描述这个现象，一直没有找到原因。</li>
<li>就在今天，我配置博客的搜索的时候，又被这个bug给搞了，看别人的解释说是生成的检索文件里，多了BS(unicode)这个字符，终于顺着这个BS，我找到了困扰我半年的bug。</li>
<li>十分激动，以至于我一改冷淡的文风，在大半夜里啰嗦这么多。</li>
</ul>
<h1 id="vscode并不打算修"><a href="#vscode并不打算修" class="headerlink" title="vscode并不打算修"></a>vscode并不打算修</h1><ul>
<li>参考<a href="https://juejin.im/entry/5a806ddef265da4e84092eeb">这里</a>的说明。<blockquote>
<p>vscode底层使用了electron，这是electron的bug，electron不解决这个问题，vscode就不会解决。<br>electron底层使用了chromium， 这是chromium的bug，chromium不解决，elctron就无法解决。</p>
</blockquote>
</li>
<li>非常稳，于是<a href="https://github.com/Microsoft/vscode/issues/37114">这个bug还是open的</a>。</li>
</ul>
<h1 id="补救措施"><a href="#补救措施" class="headerlink" title="补救措施"></a>补救措施</h1><ul>
<li>首先让这个字符显示出来</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;editor.renderControlCharacters&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用插件 Remove backspace control character，并如下配置，这样在保存文件的时候，会自动帮你删除这些控制符</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">“editor.formatOnSave”<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> </span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>贪吃蛇AI</title>
    <url>/2019/07/15/%E8%B4%AA%E5%90%83%E8%9B%87AI/</url>
    <content><![CDATA[<p>用pygame实现的贪吃蛇AI，代码在<a href="https://github.com/zjyfdu/Snake-">这里</a></p>
<p><img data-src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A72019-07-15%E4%B8%8B%E5%8D%8811.26.42.png" alt="屏幕快照 2019-07-15 下午11.26.42"></p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install requirements.txt</span><br><span class="line">python3 main-bfs2.py</span><br></pre></td></tr></table></figure>

<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>主要是参考这篇 <a href="http://mp.weixin.qq.com/s?__biz=MzA5ODUxOTA5Mg==&mid=211204280&idx=1&sn=4589891ff2ddff98058f44f3e9dd942e&scene=24&srcid=0923YmTbhMIczvNdLDgrgPMz#rd">实现贪吃蛇AI</a>，原实现在<a href="https://github.com/Hawstein/snake-ai">这里</a>，主要的思路是下面这个图</p>
<p>主要的思路是派出一条假蛇去探路，假蛇吃完食物还能活着，真蛇才会去吃（假蛇吃完食物怎么样算能活，这个比较难判断，我的改动也主要在这里，后面会说）</p>
<div id="flowchart-0" class="flow-chart"></div>

<h1 id="改动"><a href="#改动" class="headerlink" title="改动"></a>改动</h1><p>只是做了一些微小的修改</p>
<ol>
<li>把curses改为pygame，界面好看多了</li>
<li>加了没有什么卵用的类</li>
<li>假蛇吃到食物之后，怎么算和尾巴之间有通路？<ol>
<li>头和尾相邻算没有通路（原方法），比较保守，走到最后经常会循环起来，不敢吃食</li>
<li>如果头尾相邻算成有通路，容易在前期就把自己撞死</li>
<li>没有解决这个问题，加了个判断，蛇默认是保守的，但如果长时间没有吃到食物，就变激进。从测试结果看解决了原有的问题<del>，虽然不优雅</del></li>
</ol>
</li>
</ol>
<h1 id="待改进"><a href="#待改进" class="headerlink" title="待改进"></a>待改进</h1><ol>
<li>这个算法调起来像无底洞，我应该不会再改进这个了，感觉要加逻辑判断的地方很多，应该会有更优雅的实现</li>
<li>当最后蛇很长的时候，蛇走和食物的最短路径是不合理的，因为走最短路径留下的空隙很可能会被填上食物，还需要绕一大圈才能吃到。应该是到最后，蛇直接一排一排地扫，反而是最快的</li>
</ol>
<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 开始
op_tmp_sanke=>operation: 一条虚拟的蛇探路
cond_food=>condition: 能否到食物
cond_tmp_snake=>condition: 虚蛇和尾巴之间有通路
op_shortest=>operation: 走离食物最短的路
cond_tail=>condition: 蛇和尾巴之间有通路
op_longest=>operation: 走离蛇尾最长的路
cond_move=>condition: 有可行的路
op_dead=>operation: 你死了
e=>end: 结束

st->cond_food
cond_food(yes)->op_tmp_sanke->cond_tmp_snake
cond_food(no)->cond_tail
cond_tmp_snake(yes)->op_shortest
cond_tmp_snake(no)->cond_tail
cond_tail(yes)->op_longest
cond_tail(no)->cond_move
cond_move(yes)->op_shortest
cond_move(no)->op_dead->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script>]]></content>
  </entry>
  <entry>
    <title>这也太破了</title>
    <url>/2023/11/05/%E8%BF%99%E4%B9%9F%E5%A4%AA%E7%A0%B4%E4%BA%86/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>事情是这样的，最近面试有些多，看别人简历会有些附带博客，让我也想起来我有这么个事实上废弃了的博客</p>
<p>博客写多一点，一个是说明这人有积累，一个还能引导面试官的面试方向，于是就决定去捡起我的博客来</p>
<p>写博客最密集的是18、19这两年，那时候我还在帮hxf做网站，刚刚艰难毕业，刚刚开始工作，是我对未来充满憧憬，求知欲最旺盛的时候，肯分享肯折腾</p>
<p>啊，想起来真的美好啊</p>
<p>不像现在老太龙钟，上班在sql和xgb中消磨人生，下班边玩边骂原神</p>
<p>这简直都不是博客不博客的问题了，这是要找回青春找回自我</p>
<h1 id="一地鸡毛"><a href="#一地鸡毛" class="headerlink" title="一地鸡毛"></a>一地鸡毛</h1><p>原本设想是美好的，我在本地调通hexo，然后部署到github的action里，这样我直接在网页端写博客就行</p>
<p>是啊，2023年了，本来写博客就够变态了，更不要说在本地部署写了</p>
<p>第一步给我的小mac充电，它现在不插电只能续航一个小时了，都是岁月的痕迹</p>
<p>找到博客的路径，hexo命令我忘了，但是terminal都记得，我直接hexo deploy</p>
<p>不出意外地，push不上去了，好像是github不支持https这种方式了，问题不大，就是重新ssh-keygen，我很熟</p>
<p>就是从登录github开始，事情起变化了，我登不上去了，github强制两步验证？这是啥？为什么手机验证码不支持+86？</p>
<p>github解决之后，又发现hexo generate出来的网页是空的，版本问题，hexo和node版本不兼容，node太新，hexo太老，这种问题一般有两个选项，降级node，后者更新hexo，但我现在是个有经验的程序员了，升级风险不可控，我选择苟在老版本</p>
<p>当时已经过了一点了，我现在想不起来昨天一点我是怎么折腾的，但最后我妥协用了新版本</p>
<p>其实就是把hexo再重新部署一遍，但老项目里有我很多配置项，不能完整迁移过来，我没办法完全复原我的老博客</p>
<p>新版本的hexo也太破了，配置项完全改了不说，一个语言设置选项都没法用，博客语言在阿拉伯和泰中来回切换，我最终的结局方法是啥，把语言配置文件删到只剩中文</p>
<p>hexo的搜索插件也是，很多文章搜不出来，我记得老版本没这些问题的，还有mathjax也不对</p>
<p>总之就是博客回来了，但没完全回来，回来了，但好像没那个味道了</p>
<p>但写到这里我确实想知道昨天为啥没有降级成功，我决定再去降级一次</p>
<p>应该是npm install很慢，然后我决定用cnpm，但cnpm直接不给下老版本的依赖，导致我最终放弃</p>
<p>本来我想描述一下昨天的一地鸡毛的，变成了现场表演一地鸡毛</p>
<p>npm就是卡在这里，可能因为我镜像配的还是淘宝的？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">⸨    ░░░░░░░░░░░░░░⸩ ⠇ fetchMetadata: sill mapToRegistry uri https://registry.npm.taobao.org/repeat-string</span><br><span class="line">(node:22980) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 error listeners added. Use emitter.setMaxListeners() to increase limit</span><br></pre></td></tr></table></figure>

<h1 id="留不住"><a href="#留不住" class="headerlink" title="留不住"></a>留不住</h1><p><del>这次我要耐心等npm，我还有一个下午，应该不至于再搞到很晚了。</del></p>
<p>降级还是未遂，那一个个报错就像拼多多的砍一刀，“再搞定这个报错，就能彻底找回你原来的博客了哦”</p>
<p>确实没必要强求了，虽然代码和三年前的一模一样，但好像真的不好回来了</p>
<p>但搞不成也无所谓，用新版本的hexo也是可以用的，老文章也是在的，我现在都在继续写了。要是我哪天真的想看老博客git的历史还在，北极还保存着一份呢</p>
<p>这里才是我想和自己说的，留不住就不要强留了，可以怀念但不要沉湎，现在也有好多事要做呢</p>
<p>耽误太多时间，事情可就做不完了！</p>
<h1 id="嗯？"><a href="#嗯？" class="headerlink" title="嗯？"></a>嗯？</h1><p>我现在咋这么矫情，根本原因是我不懂node，不懂hexo，咋说出这么多话来？</p>
<h1 id="我又想不通了"><a href="#我又想不通了" class="headerlink" title="我又想不通了"></a>我又想不通了</h1><p>我先记一下hexo的一些命令，都是history里的，等等再删</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10299  git push origin main:hexo2</span><br><span class="line">10300  hexo deploy</span><br><span class="line">10301  npm install hexo-deployer-git --save</span><br><span class="line">10302  hexo clean</span><br><span class="line">10303  hexo deploy</span><br><span class="line">10304  hexo server</span><br><span class="line">10323  hexo server</span><br><span class="line">10327  hexo server</span><br><span class="line">10333  hexo clean</span><br><span class="line">10334  hexo generate</span><br><span class="line">10335  hexo deploy</span><br><span class="line">10367  hexo new &quot;写写GBDT吧&quot;</span><br></pre></td></tr></table></figure>

<p>哦哦，我以为我配了github action，其实没有，都是pages的action</p>
]]></content>
      <categories>
        <category>发疯文学</category>
      </categories>
      <tags>
        <tag>乱感叹</tag>
      </tags>
  </entry>
  <entry>
    <title>配置评论、搜索和代码</title>
    <url>/2018/07/06/%E9%85%8D%E7%BD%AE%E8%AF%84%E8%AE%BA%E3%80%81%E6%90%9C%E7%B4%A2%E5%92%8C%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h1 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h1><h2 id="gitment"><a href="#gitment" class="headerlink" title="gitment"></a>gitment</h2><ul>
<li>gitment是挂在github的issue上，从github给的api上提交和拉取评论，然后界面（应该）是作者自己做的。</li>
<li>当然好处是只能github账号登陆，坏处的话，issue会很乱吧。。。</li>
<li>具体操作：可以看<a href="http://xichen.pub/2018/01/31/2018-01-31-gitment/">这里</a>，就是先注册个application，然后把id、secret什么的填到next的config里就好。</li>
<li>坑：Error：validation failed。原因是作者的方法在create an issue时，提交的id号太长了。。。方法是在<code>next/_third-party/comments/gitment.swig</code>里，修改<code>id: window.location.pathname</code>为<code>id: &#39;&#123;&#123; page.date &#125;&#125;&#39;</code></li>
</ul>
<h2 id="valine"><a href="#valine" class="headerlink" title="valine"></a><a href="https://valine.js.org/">valine</a></h2><ul>
<li>是我目前见到过的唯一支持匿名评论的，也是需要注册valine的账号</li>
</ul>
<h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><h2 id="Swiftype"><a href="#Swiftype" class="headerlink" title="Swiftype"></a><del>Swiftype</del></h2><ul>
<li><del>去注册账号，拿到swiftype_key，写道next的配置里就好</del></li>
<li>后来才这道这个是要收费的，不要用了</li>
</ul>
<h1 id="local-search"><a href="#local-search" class="headerlink" title="local search"></a>local search</h1><ul>
<li><code>npm install --save hexo-generator-search</code></li>
<li>在主题的config里，local_search的enable要打开</li>
<li>在hexo的config里，写上</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post(或者all)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>最后<code>hexo g</code>就可以了</li>
</ul>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><ul>
<li>修改hexo的配置</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span></span><br></pre></td></tr></table></figure>

<ul>
<li>然后在next的配置里修改代码配色</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight_theme:</span> <span class="string">night</span> <span class="string">bright</span></span><br></pre></td></tr></table></figure>

<ul>
<li>写代码的时候，要注意在```后加上代码类型如c、python、yml等等</li>
</ul>
<h1 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h1><ul>
<li>在next的config里，enable mathjax</li>
<li>行内公式用<code>$</code>，行间公式用<code>$$</code></li>
<li>但是还有些问题，比如说公式里有两个<code>_</code>，hexo会优先按markdown给你解析成斜体，所以latex公式还不能直接抄，有些富豪需要转义</li>
<li>当然，也有优雅的方法，换个render</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure>

<ul>
<li>更换完了行内公式还是有问题，参考<a href="https://www.jianshu.com/p/e8d433a2c5b7">这里</a></li>
<li>修改kramed的转义规则，文件为<code>/node_modules/kramed/lib/rules/inline.js</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">escape</span>: <span class="regexp">/^\\([`*\[\]()# +\-.!_&gt;])/</span>,</span><br><span class="line"><span class="attr">em</span>: <span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure>

<ul>
<li>mathjax公式粗体，放弃<code>\bm&#123;&#125;</code>，使用<code>\boldsymbol&#123;&#125;</code></li>
</ul>
<h1 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-filter-flowchart</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hexo-next</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>阅读更多</title>
    <url>/2018/01/30/%E9%98%85%E8%AF%BB%E6%9B%B4%E5%A4%9A/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;wrap&#123;&#123; subject.id &#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span>&#123;&#123; subject.about_subject | safe &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;read-more&#123;&#123; subject.id &#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;read-more&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-class">.wrap</span>&#123;<span class="attribute">position</span>: relative;<span class="attribute">overflow</span>: hidden;&#125;</span><br><span class="line"><span class="selector-class">.read-more</span> <span class="selector-tag">a</span>&#123;<span class="attribute">padding-right</span>: <span class="number">22px</span>;<span class="attribute">background</span>: <span class="built_in">url</span>() no-repeat <span class="number">100%</span> <span class="number">50%</span>;<span class="attribute">font-weight</span>: bold;<span class="attribute">text-decoration</span>: none;&#125;</span><br><span class="line"><span class="selector-class">.read-more</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>: <span class="number">#000</span>;&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">&#123;% <span class="keyword">for</span> subject <span class="keyword">in</span> subjects %&#125;</span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"> <span class="keyword">var</span> slideHeight = <span class="number">300</span>; <span class="comment">// px</span></span><br><span class="line"> <span class="keyword">var</span> defHeight = $(<span class="string">&#x27;#wrap&#123;&#123; subject.id &#125;&#125;&#x27;</span>).<span class="title function_">height</span>();</span><br><span class="line"> <span class="keyword">if</span>(defHeight &gt;= slideHeight)&#123;</span><br><span class="line">  $(<span class="string">&#x27;#wrap&#123;&#123; subject.id &#125;&#125;&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;height&#x27;</span> , slideHeight + <span class="string">&#x27;px&#x27;</span>);</span><br><span class="line">  $(<span class="string">&#x27;#read-more&#123;&#123; subject.id &#125;&#125;&#x27;</span>).<span class="title function_">append</span>(<span class="string">&#x27;&lt;a href=&quot;#&quot;&gt;查看更多&lt;/a&gt;&#x27;</span>);</span><br><span class="line">  $(<span class="string">&#x27;#read-more&#123;&#123; subject.id &#125;&#125; a&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> curHeight = $(<span class="string">&#x27;#wrap&#123;&#123; subject.id &#125;&#125;&#x27;</span>).<span class="title function_">height</span>();</span><br><span class="line">   <span class="keyword">if</span>(curHeight == slideHeight)&#123;</span><br><span class="line">    $(<span class="string">&#x27;#wrap&#123;&#123; subject.id &#125;&#125;&#x27;</span>).<span class="title function_">animate</span>(&#123;</span><br><span class="line">     <span class="attr">height</span>: defHeight</span><br><span class="line">    &#125;, <span class="string">&quot;normal&quot;</span>);</span><br><span class="line">    $(<span class="string">&#x27;#read-more&#123;&#123; subject.id &#125;&#125; a&#x27;</span>).<span class="title function_">html</span>(<span class="string">&#x27;隐藏&#x27;</span>);</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;#wrap&#123;&#123; subject.id &#125;&#125;&#x27;</span>).<span class="title function_">animate</span>(&#123;</span><br><span class="line">     <span class="attr">height</span>: slideHeight</span><br><span class="line">    &#125;, <span class="string">&quot;normal&quot;</span>);</span><br><span class="line">    $(<span class="string">&#x27;#read-more&#123;&#123; subject.id &#125;&#125; a&#x27;</span>).<span class="title function_">html</span>(<span class="string">&#x27;查看更多&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>flask网站总结</category>
      </categories>
  </entry>
  <entry>
    <title>随便写点什么吧</title>
    <url>/2019/06/16/%E9%9A%8F%E4%BE%BF%E5%86%99%E7%82%B9%E4%BB%80%E4%B9%88%E5%90%A7/</url>
    <content><![CDATA[<p>净资产 &#x3D; 总资产 - 负债<br>股本数：发行的股票的数量<br>每股净资产 &#x3D; 净资产 &#x2F; 股本数<br>市值 &#x3D; 每股价格 * 股本数<br>市净率（PB） &#x3D; 市值 &#x2F; 净资产 &#x3D; 每股价格 &#x2F; 每股净资产</p>
<p>每股利润 &#x3D; 净利润 &#x2F; 股本数<br>市盈率（PE） &#x3D; 市值 &#x2F; 净利润 &#x3D; 每股价格 &#x2F; 每股利润</p>
<p>市盈增长比（PEG） &#x3D; 市盈率 &#x2F; (平均增长率 * 100)</p>
]]></content>
      <tags>
        <tag>股票</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/package.json</url>
    <content><![CDATA[{"dependencies":{"gulp":"^4.0.2","gulp-htmlclean":"^2.7.22","gulp-htmlmin":"^5.0.1","gulp-minify-css":"^1.2.4","gulp-uglify":"^3.0.2"}}]]></content>
  </entry>
  <entry>
    <title>关于我</title>
    <url>/about/index.html</url>
    <content><![CDATA[<ul>
<li>翟大翟</li>
<li>微信：zjyxjtu</li>
<li>地址：<del>复旦张江校区微电子楼306</del></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>tags</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
