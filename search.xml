<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>20210806写给自己的话</title>
      <link href="/2021/08/06/20210806/"/>
      <url>/2021/08/06/20210806/</url>
      
        <content type="html"><![CDATA[<p>时隔这么一年多，我终于又想起来我的hexo了</p><hr><p>18年元旦开始些，那时候这是为了记录网站开发过程中遇到的一些乱七八糟的问题</p><p>现在想起来那段时间应该是我写代码最纯粹和快乐的时间（也可能是因为太久远了，所以回忆就变美好了</p><p>那段时间也是这个网站最高产的时候</p><p>到后来海康上班之后，更新频率就慢慢地慢了下来</p><p>但那时候还是保持着比较旺盛的好奇心，还会周末瞎看瞎写，瞎挖坑，收藏夹里的链接还是一个堆一个地涨</p><hr><p>20年是个分界线</p><p>海康说了不涨薪之后，我急切地想要跳出来，我想要工资一直涨，也害怕自己被无休止的业务需求蹉跎掉</p><p>就没有更了几篇，直到后来要找工作了，才假模假样的补了一些</p><p>到后来我到北京之后，这里就彻底荒废了</p><hr><p>8月7号了，等没人了我再继续写</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>onlyoffice文档在线编辑</title>
      <link href="/2020/03/29/onlyoffice%E6%96%87%E6%A1%A3%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91/"/>
      <url>/2020/03/29/onlyoffice%E6%96%87%E6%A1%A3%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<ul><li>文档列表页</li></ul><p><img src="/images/screencapture-192-168-1-104-8088-onlyoffice-2020-05-11-22_27_51.png" alt="screencapture-192-168-1-104-8088-onlyoffice-2020-05-11-22_27_51"></p><ul><li>文档编辑页</li></ul><p><img src="/images/screencapture-192-168-1-104-8088-onlyoffice-1-2020-05-11-22_28_35.png" alt="screencapture-192-168-1-104-8088-onlyoffice-1-2020-05-11-22_28_35"></p><h1 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h1><ul><li>一个文档在线编辑平台，部署在局域网，可以用作组内日报/周报系统</li><li>其实是从<a href="https://github.com/3xxx/engineercms" target="_blank" rel="noopener">3xxx/engineercms</a> fork来的，只保留了文档编辑的功能</li></ul><h1 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h1><ul><li>docker启动onlyoffice <code>docker run -i -t -d -p 9000:80 onlyoffice/documentserver</code></li><li><p>修改conf/app.conf中的ip配置，注意不能写localhost，不然局域网的其他用户访问不到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">documentserverip = http://192.168.1.107:9000</span><br><span class="line">entryserverip = http://192.168.1.107:8088</span><br></pre></td></tr></table></figure></li><li><p>解压main.rar，运行exe，浏览器端访问entryserverip</p></li></ul><h1 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h1><ul><li>onlyoffice负责文档编辑的功能，onlyoffice的api可以参考<a href="https://www.jianshu.com/p/2d4f977ffeac" target="_blank" rel="noopener">这里</a></li><li>本项目负责文档的上传、删除、用户管理等，采用beego MVC架构</li></ul><h1 id="相比3xxx-engineercms做了哪些修改"><a href="#相比3xxx-engineercms做了哪些修改" class="headerlink" title="相比3xxx/engineercms做了哪些修改"></a>相比<a href="https://github.com/3xxx/engineercms" target="_blank" rel="noopener">3xxx/engineercms</a>做了哪些修改</h1><p>修改主要是为了更适合做日报系统</p><h2 id="删除了文档编辑以外的功能"><a href="#删除了文档编辑以外的功能" class="headerlink" title="删除了文档编辑以外的功能"></a>删除了文档编辑以外的功能</h2><h2 id="文档自动上传"><a href="#文档自动上传" class="headerlink" title="文档自动上传"></a>文档自动上传</h2><ul><li><p>日报中包含日期，如“总裁办公室20200331.xlsx”，会自动复制日期最新的一份日报，并对日报做清空后自动上传</p></li><li><p>那些内容清空？</p><p>只保留第一个sheet，sheet命名为日期（MMdd）</p><p>conf/app.conf中，设置那些行和列以内保留，≤rowkeep和colkeep的内容保留</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#####日报清空，前多少行和列保留，固定只保留第一个sheet</span><br><span class="line">rowkeep = 1</span><br><span class="line">colkeep = 4</span><br></pre></td></tr></table></figure></li><li><p>什么时候上传？</p><p>每次打开文档列表也都判断是否有今天的日报，没有就自动上传</p><p>节假日没有人访问，所以避免了逻辑判断是否上传</p></li></ul><h2 id="文档自动保存"><a href="#文档自动保存" class="headerlink" title="文档自动保存"></a>文档自动保存</h2><ul><li><p>原来文档不会自动保存吗？</p><p>编辑后的文档都暂时存在onlyoffice的docker中</p><p>只有在所有人关闭文档的情况下，才会将文档内容保存到本地</p><p>做不到全部用户及时关闭文档，而如果docker崩了，文档内容就丢失了</p></li><li><p>如何解决？</p><p>在没有用户使用的情况下强制保存。conf/app.conf中设置了定时保存，默认设置是晚上10点，每10分钟保存一次</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#####文档保存本地</span><br><span class="line">forcesavecron = &quot;0 */10 22 * * *&quot;</span><br><span class="line">###              秒 分  时  日 月 周</span><br></pre></td></tr></table></figure><h2 id="登录权限"><a href="#登录权限" class="headerlink" title="登录权限"></a>登录权限</h2><ul><li>内网用户比较可靠，不做权限限制，不需要注册账户</li><li>可以不登录用ip作为用户名</li><li>可以“假登录”，直接登录，不检查用户是否存在，不检查密码</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> onlyoffice </tag>
            
            <tag> beego </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器端口记录</title>
      <link href="/2020/02/21/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E5%8F%A3%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/02/21/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E5%8F%A3%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<div class="table-container"><table><thead><tr><th>端口</th><th>内容</th></tr></thead><tbody><tr><td><a href="http://122.51.137.82:8080/" target="_blank" rel="noopener">http://122.51.137.82:8080/</a></td><td>个人网盘，用于向服务器传文件</td></tr><tr><td><a href="http://122.51.137.82:8082/" target="_blank" rel="noopener">http://122.51.137.82:8082/</a></td><td>用vue做的<a href="https://github.com/zjyfdu/geo_game" target="_blank" rel="noopener">地图游戏</a></td></tr><tr><td><a href="http://122.51.137.82:8085/" target="_blank" rel="noopener">http://122.51.137.82:8085/</a></td><td>b站橙卡的giligili教学<del>半成品</del>残次品</td></tr><tr><td><a href="http://122.51.137.82:8086/" target="_blank" rel="noopener">http://122.51.137.82:8086/</a></td><td>《go web编程》的gitbook</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> caffe </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百度真香啊</title>
      <link href="/2019/12/15/%E7%99%BE%E5%BA%A6%E7%9C%9F%E9%A6%99/"/>
      <url>/2019/12/15/%E7%99%BE%E5%BA%A6%E7%9C%9F%E9%A6%99/</url>
      
        <content type="html"><![CDATA[<ul><li>目前我知道有两个地方能薅到免费的GPU，一个是google的colab，一个是百度的aistudio</li></ul><h1 id="colab"><a href="#colab" class="headerlink" title="colab"></a>colab</h1><ul><li>colab是tesla p100，一次可以运行12h，只能以jupyter notebook的形式运行，没有shell真的很难受啊，</li><li>文件可以挂载在google driver</li><li>有人做了ssh访问colab，看<a href="https://imadelhanafi.com/posts/google_colal_server/" target="_blank" rel="noopener">这里</a>，使用Ngrok做了个反向的代理</li></ul><h1 id="aistudio"><a href="#aistudio" class="headerlink" title="aistudio"></a>aistudio</h1><ul><li>百度最友好的是提供命令行，同时也有个work路径，持久存储，比谷歌舒服多了</li><li>给的还是Tesla V100啊</li><li>理论上只能支持paddlepaddle，但亲测可以pytorch，需要自己安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2019.10-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><ul><li><p>安装之后需要修改conda的镜像，否则下载很慢，修改<code>~/.condarc</code></p></li><li><p>这个是我的<code>.condarc</code>，基本上是<code>conda install</code>的时候，如果下载的url不是清华的镜像，就需要添加相应的镜像了</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br><span class="line">show_channel_urls: true</span><br></pre></td></tr></table></figure><ul><li>安装pytorch</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install --channel https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/ pytorch torchvision cudatoolkit=9.2 -c pytorch</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CPU历史考古</title>
      <link href="/2019/12/01/CPU%E5%8E%86%E5%8F%B2%E8%80%83%E5%8F%A4/"/>
      <url>/2019/12/01/CPU%E5%8E%86%E5%8F%B2%E8%80%83%E5%8F%A4/</url>
      
        <content type="html"><![CDATA[<ul><li>肖克利在贝尔实验室发明了三极管，后来离开贝尔，创办肖克利半导体公司</li><li>肖克利独断专行，出现了”八叛徒“叛逃，八叛徒包括摩尔、诺伊斯等人，后创立了仙童半导体</li><li>在仙童，诺伊斯发明了集成电路。摩尔、诺伊斯等人继续叛逃仙童，创办了英特尔</li></ul><ul><li>霍夫，我不想写了，看<a href="http://lao-qian.hxwk.org/2015/01/01/%e7%a1%85%e8%b0%b7%e4%bc%a0%e5%a5%87%ef%bc%9a%e5%be%ae%e5%a4%84%e7%90%86%e5%99%a8%e4%b9%8b%e7%88%b6-%e6%b3%b0%e5%be%b7%e2%80%a2%e9%9c%8d%e5%a4%abmarcian-edwardtedho/" target="_blank" rel="noopener">这里</a>吧</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>unix和linux历史考古</title>
      <link href="/2019/12/01/unix%E5%92%8Clinux%E5%8E%86%E5%8F%B2%E8%80%83%E5%8F%A4/"/>
      <url>/2019/12/01/unix%E5%92%8Clinux%E5%8E%86%E5%8F%B2%E8%80%83%E5%8F%A4/</url>
      
        <content type="html"><![CDATA[<ul><li>unix是肯·汤普森和丹尼斯·里奇在AT&amp;T开发的</li><li>里奇在创造unix的过程中，发明了C语言</li><li>汤普森和里奇后来对unix不太满意，要创造一个真正的”一切都是文件“的系统，称为”Plan 9“，utf-8是这个系统的副产品</li></ul><ul><li>80年代unix有两个主要的版本：AT&amp;T的版本System V和伯克利的BSD（Berkeley Software Distribution）</li><li>从System V衍生出了hp-ux和Solaris</li><li>BSD主要是比尔乔伊在上学期间开发的，他还是vi的作者</li></ul><ul><li>90年代，因为和AT&amp;T版权问题，BSD替换了AT&amp;T有版权的几个文件，变成了freeBSD</li><li>（Linux崛起有两个历史机遇，一是Unix在打官司两年没有更新，二是英特尔发布了80386，开始了32位时代</li><li>理查德·斯托曼创立了GUN计划，主要的软件有gcc、glibc，因为Linux用了许多GNU软件，他认为应该命名为GNU/Linux，但Linus不同意。斯托曼同时也是Emacs的作者</li><li>Minix，是一个类unix系统，由塔能鲍姆Tanenbaum为了教学创造</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>YOLO2</title>
      <link href="/2019/10/20/YOLO2/"/>
      <url>/2019/10/20/YOLO2/</url>
      
        <content type="html"><![CDATA[<h1 id="先复习一下yolov1"><a href="#先复习一下yolov1" class="headerlink" title="先复习一下yolov1"></a>先复习一下<a href="https://zhuanlan.zhihu.com/p/32525231" target="_blank" rel="noopener">yolov1</a></h1><ul><li>输出的shape是$7\times7\times30$，分别是类别，置信度和坐标，虽然每个格子输出两个框，但只有一组类别</li><li>坐标$x, y$是相对于每一个格的，$w, h$是相对于整个图的，这样做的好处是位置坐标的取值范围都是$[0, 1]$</li></ul><p><img src="/images/v2-8630f8d3dbe3634f124eaf82f222ca94_r.jpg" alt="preview"></p><ul><li>loss都统一认为是回归问题</li></ul><p><img src="/images/v2-45795a63cdbaac8c05d875dfb6fcfb5a_r.jpg" alt="preview"></p>]]></content>
      
      
      
        <tags>
            
            <tag> yolo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RGB和YUV</title>
      <link href="/2019/10/20/RGB%E5%92%8CYUV/"/>
      <url>/2019/10/20/RGB%E5%92%8CYUV/</url>
      
        <content type="html"><![CDATA[<ul><li>里的转图是针对RGB图片的，YUV图片没办法直接用。</li><li>解决办法是分开Y、U、V三个分量，分别进行转图。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原始bgr图像</span></span><br><span class="line">    Mat srcImage = imread(<span class="string">"/Users/zhaijy/Desktop/test2.png"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转到YVU（YV21）</span></span><br><span class="line">    Mat dstImage;</span><br><span class="line">    cvtColor(srcImage, dstImage, COLOR_BGR2YUV_YV12);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前 height * width 是Y分量</span></span><br><span class="line">    <span class="keyword">int</span> height = srcImage.rows, width = srcImage.cols;</span><br><span class="line">    Mat dstImageY = Mat(height, width, CV_8UC1);</span><br><span class="line">    <span class="built_in">memcpy</span>(dstImageY.data, dstImage.data, height * width);</span><br><span class="line">    imwrite(<span class="string">"/Users/zhaijy/Desktop/Y.jpg"</span>, dstImageY);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后面 height * witdth / 4 是V分量</span></span><br><span class="line">    Mat dstImageV = Mat(height / <span class="number">2</span>, width / <span class="number">2</span>, CV_8UC1);</span><br><span class="line">    <span class="built_in">memcpy</span>(dstImageV.data, dstImage.data + height * width, height * width / <span class="number">4</span>);</span><br><span class="line">    imwrite(<span class="string">"/Users/zhaijy/Desktop/V.jpg"</span>, dstImageV);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后面 height * witdth / 4 是U分量</span></span><br><span class="line">    Mat dstImageU = Mat(height / <span class="number">2</span>, width / <span class="number">2</span>, CV_8UC1);</span><br><span class="line">    <span class="built_in">memcpy</span>(dstImageU.data, dstImage.data + height * width * <span class="number">5</span> / <span class="number">4</span>, height * width / <span class="number">4</span>);</span><br><span class="line">    imwrite(<span class="string">"/Users/zhaijy/Desktop/U.jpg"</span>, dstImageU);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Y旋转</span></span><br><span class="line">    <span class="keyword">int</span> rot_height = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">floor</span>(<span class="built_in">sqrt</span>(height * height + width * width) / <span class="number">4</span>)) * <span class="number">4</span>;</span><br><span class="line">    Point2f center(static_cast&lt;float&gt;(width / 2.), static_cast&lt;float&gt;(height / 2.));</span><br><span class="line">    Mat rot_mat = getRotationMatrix2D(center, <span class="number">45</span>, <span class="number">1.0</span>);</span><br><span class="line">    Mat rotImageY = Mat(rot_height, rot_height, CV_8UC1);</span><br><span class="line">    warpAffine(dstImageY, rotImageY, rot_mat, Size(rot_height, rot_height), INTER_LINEAR);</span><br><span class="line">    imwrite(<span class="string">"/Users/zhaijy/Desktop/rotY.jpg"</span>, rotImageY);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// U旋转</span></span><br><span class="line">    <span class="keyword">int</span> rot_height_uv = rot_height / <span class="number">2</span>;</span><br><span class="line">    Point2f center_uv(static_cast&lt;float&gt;(width / 4.), static_cast&lt;float&gt;(height / 4.));</span><br><span class="line">    Mat rot_mat_uv = getRotationMatrix2D(center_uv, <span class="number">45</span>, <span class="number">1.0</span>);</span><br><span class="line">    Mat rotImageU = Mat(rot_height / <span class="number">2</span>, rot_height / <span class="number">2</span>, CV_8UC1);</span><br><span class="line">    warpAffine(dstImageU, rotImageU, rot_mat_uv, Size(rot_height_uv, rot_height_uv), INTER_LINEAR);</span><br><span class="line">    imwrite(<span class="string">"/Users/zhaijy/Desktop/rotU.jpg"</span>, rotImageU);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// V旋转</span></span><br><span class="line">    Mat rotImageV = Mat(rot_height / <span class="number">2</span>, rot_height / <span class="number">2</span>, CV_8UC1);</span><br><span class="line">    warpAffine(dstImageV, rotImageV, rot_mat_uv, Size(rot_height_uv, rot_height_uv), INTER_LINEAR);</span><br><span class="line">    imwrite(<span class="string">"/Users/zhaijy/Desktop/rotV.jpg"</span>, rotImageV);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拼接YVU</span></span><br><span class="line">    Mat rotImageYVU = Mat(rot_height * <span class="number">3</span> / <span class="number">2</span>, rot_height, CV_8UC1);</span><br><span class="line">    <span class="built_in">memcpy</span>(rotImageYVU.data, rotImageY.data, rot_height * rot_height);</span><br><span class="line">    <span class="built_in">memcpy</span>(rotImageYVU.data + rot_height * rot_height, rotImageV.data, rot_height * rot_height / <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(rotImageYVU.data + rot_height * rot_height * <span class="number">5</span> / <span class="number">4</span>, rotImageU.data, rot_height * rot_height / <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转回BGR</span></span><br><span class="line">    Mat rotImageBGR;</span><br><span class="line">    cvtColor(rotImageYVU, rotImageBGR, COLOR_YUV2BGR_YV12);</span><br><span class="line">    imwrite(<span class="string">"/Users/zhaijy/Desktop/rotImageBGR.jpg"</span>, rotImageBGR);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>然后贴一些中间的图片</li></ul><p><img src="/images/test2.png" alt="test2"></p><p><center>原始图片</center><br><img src="/images/Y.jpg" alt="Y"></p><p><img src="/images/V.jpg" alt="V"></p><p><img src="/images/U.jpg" alt="U"></p><p><center>分别是YVU分量</center><br><img src="/images/rotY.jpg" alt="rotY"></p><p><img src="/images/rotV.jpg" alt="rotV"></p><p><img src="/images/rotU.jpg" alt="rotU"></p><p><center>分别是旋转后的YVU分量</center><br><img src="/images/rotImageBGR.jpg" alt="rotImageBGR"></p><p><center>最后拼接完的效果</center></p><ul><li>我看YVU的解释说，$U=B-Y$，$V=R-Y$，可能是因为这个，黑边变成了绿边了吧</li></ul>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> YUV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪吃蛇AI</title>
      <link href="/2019/07/15/%E8%B4%AA%E5%90%83%E8%9B%87AI/"/>
      <url>/2019/07/15/%E8%B4%AA%E5%90%83%E8%9B%87AI/</url>
      
        <content type="html"><![CDATA[<p>用pygame实现的贪吃蛇AI，代码在<a href="https://github.com/zjyfdu/Snake-" target="_blank" rel="noopener">这里</a></p><p><img src="/images/屏幕快照 2019-07-15 下午11.26.42.png" alt="屏幕快照 2019-07-15 下午11.26.42"></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install requirements.txt</span><br><span class="line">python3 main-bfs2.py</span><br></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>主要是参考这篇 <a href="http://mp.weixin.qq.com/s?__biz=MzA5ODUxOTA5Mg==&amp;mid=211204280&amp;idx=1&amp;sn=4589891ff2ddff98058f44f3e9dd942e&amp;scene=24&amp;srcid=0923YmTbhMIczvNdLDgrgPMz#rd" target="_blank" rel="noopener">实现贪吃蛇AI</a>，原实现在<a href="https://github.com/Hawstein/snake-ai" target="_blank" rel="noopener">这里</a>，主要的思路是下面这个图</p><p>主要的思路是派出一条假蛇去探路，假蛇吃完食物还能活着，真蛇才会去吃（假蛇吃完食物怎么样算能活，这个比较难判断，我的改动也主要在这里，后面会说）</p><div id="flowchart-0" class="flow-chart"></div><h1 id="改动"><a href="#改动" class="headerlink" title="改动"></a>改动</h1><p>只是做了一些微小的修改</p><ol><li>把curses改为pygame，界面好看多了</li><li>加了没有什么卵用的类</li><li>假蛇吃到食物之后，怎么算和尾巴之间有通路？<ol><li>头和尾相邻算没有通路（原方法），比较保守，走到最后经常会循环起来，不敢吃食</li><li>如果头尾相邻算成有通路，容易在前期就把自己撞死</li><li>没有解决这个问题，加了个判断，蛇默认是保守的，但如果长时间没有吃到食物，就变激进。从测试结果看解决了原有的问题<del>，虽然不优雅</del></li></ol></li></ol><h1 id="待改进"><a href="#待改进" class="headerlink" title="待改进"></a>待改进</h1><ol><li>这个算法调起来像无底洞，我应该不会再改进这个了，感觉要加逻辑判断的地方很多，应该会有更优雅的实现</li><li>当最后蛇很长的时候，蛇走和食物的最短路径是不合理的，因为走最短路径留下的空隙很可能会被填上食物，还需要绕一大圈才能吃到。应该是到最后，蛇直接一排一排地扫，反而是最快的</li></ol><p><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 开始op_tmp_sanke=>operation: 一条虚拟的蛇探路cond_food=>condition: 能否到食物cond_tmp_snake=>condition: 虚蛇和尾巴之间有通路op_shortest=>operation: 走离食物最短的路cond_tail=>condition: 蛇和尾巴之间有通路op_longest=>operation: 走离蛇尾最长的路cond_move=>condition: 有可行的路op_dead=>operation: 你死了e=>end: 结束st->cond_foodcond_food(yes)->op_tmp_sanke->cond_tmp_snakecond_food(no)->cond_tailcond_tmp_snake(yes)->op_shortestcond_tmp_snake(no)->cond_tailcond_tail(yes)->op_longestcond_tail(no)->cond_movecond_move(yes)->op_shortestcond_move(no)->op_dead->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端历史</title>
      <link href="/2019/07/14/%E5%89%8D%E7%AB%AF%E5%8E%86%E5%8F%B2/"/>
      <url>/2019/07/14/%E5%89%8D%E7%AB%AF%E5%8E%86%E5%8F%B2/</url>
      
        <content type="html"><![CDATA[<p>听方应杭的知乎live记下来的，一部前端的发展史，就是一部逆袭的历史。</p><p>图片是他做的，应该不会找我侵删吧，红色是重大事件，蓝色是一些工具</p><p><img src="/images/image-20190714094504609.png" alt="image-20190714094504609"></p><ol><li><p><strong>后端</strong>：最开始没有前端，后端写页面，不太会css，用table布局</p></li><li><p><strong>后端+美工</strong>：开始出现美工，美工复制ps和css，用div布局</p></li><li><p><strong>后端+美工</strong>：2004年，gmail发布，页面功能复杂，大量应用ajax，微软ie5加入ajax</p><p>js开始受重视，后端写页面写js，美工加图片加特效</p></li><li><p><strong>后端+美工+前端</strong>：乔布斯拟物化流行，用户体验大爆发，需要有人专门用js写界面逻辑，前后端开始分离</p></li></ol><style>table th:nth-of-type(1){width: 20%;}table th:nth-of-type(2){width: 40%;}table th:nth-of-type(3){width: 40%;}</style><div class="table-container"><table><thead><tr><th></th><th>原先</th><th>后来</th></tr></thead><tbody><tr><td>页面分离</td><td>页面由后端框架提供，前端只负责js和css</td><td>Html、css、js全部给前端</td></tr><tr><td>数据分离</td><td>数据隐藏到页面中</td><td>以接口形式，ajax传给前端</td></tr><tr><td>人员分离</td><td>前后端两个部门，人员分离</td></tr></tbody></table></div><ol><li>后端数据比较重要，前端只负责界面，不好晋升，现在也没有解决，但缓解了很多。<ol><li>移动端设备兴起，2G、3G网络网络不好，页面性能优化</li><li>响应式，不同的设备尺寸不一</li><li>自动化、模块化怎么解决</li></ol></li></ol><p><img src="/images/image-20190714094525575.png" alt="image-20190714094525575"></p><ol><li><p><strong>js语言独立</strong>：node.js出现，js可以脱离浏览器运行，前端程序员开始做一些其他程序员在做的事</p><ol><li>自动化和打包工具，Grunt、Gulp、Webpack</li><li>模块化约定，CommonJS、AMD、CMD、UMD，民间方案，已经过时</li><li>rails社区技术支援，CoffeeScript、SASS、Pug（Jade），语言不行就升级</li></ol></li><li><p><strong>标准制定方语言升级</strong>：xhtml&rarr;html5、css2&rarr;css3、ES5&rarr;ES6</p></li><li><p><strong>前端框架出现</strong>：</p><p>MVC框架出现了backbone</p><p>MVVM框架（MVVM是从C#的WPF里开始用的）出现了Angular</p><p>从Angular启发又出现了Vue</p><p>facebook推出react，Redux的思想，有游戏开发的思路</p></li><li><p><strong>可以做服务端</strong>：TJ加入了node，TJ以前写Ruby，express.js、koa.js，nodejs可以做后台应用</p></li><li><p><strong>可以桌面端</strong>：node+webkit，github写了electron，微信、vscode、叮叮</p></li><li><p><strong>移动端</strong>：react native可以做ios和android应用</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>优秀的Typora</title>
      <link href="/2019/07/14/%E4%BC%98%E7%A7%80%E7%9A%84Typora/"/>
      <url>/2019/07/14/%E4%BC%98%E7%A7%80%E7%9A%84Typora/</url>
      
        <content type="html"><![CDATA[<p>今天意外地发现了<a href="https://typora.io/" target="_blank" rel="noopener">Typora</a>，几乎解决了我关于记笔记和写博客的所有问题。</p><h1 id="1-日常记笔记"><a href="#1-日常记笔记" class="headerlink" title="1.日常记笔记"></a>1.日常记笔记</h1><p>其实我大概三个月前是用纸笔记笔记的，直到我意识到我打字已经比写字快很多了。。。</p><p>然后我开始用word记事，当然是可以的，但是总觉得不够轻便</p><p>然后我开始用onenote，但功能又太少了，关键时刻连个公式都没有</p><p>直到今天，直到今天我发现了Typora</p><ol><li>实现了markdown的所见所得，标题、加粗、插图，可以直接显示，实现了word的功能又不用频繁点鼠标。</li><li>公式可以直接用$\LaTeX{}$打啊，而且边写边预览！</li><li>可以直接贴代码啊，直接语法高亮啊！这个用word我是不会做的。</li><li>装了pandoc之后，<strong>能直接导出word</strong>，而且公式还是原生的word公式，不是mathtype的！</li></ol><p>其实看了上面的功能，我就怀疑这个软件像是一个本地版的hexo，然后我在GitHub上找，没找到源码，但找到了到了Typora的组织，里面的仓库有node、有electron，emmm，我更加怀疑了🤔</p><h1 id="2-Hexo"><a href="#2-Hexo" class="headerlink" title="2.Hexo"></a>2.Hexo</h1><p>所以把Typora当作Hexo的客户端非常合适，好像Hexo写博客难受的几个点都可以解决了。</p><h2 id="2-1实时预览"><a href="#2-1实时预览" class="headerlink" title="2.1实时预览"></a>2.1实时预览</h2><p>hexo里能实现的，Typora上也都能实现，所以其实就是实现了实时预览。</p><p>虽然理论上也可以开<code>hexo server</code>，但是毕竟还是要到浏览器里刷新一下才能看到变化的，比不上直接用这个来得直接。</p><h2 id="2-2图片粘贴"><a href="#2-2图片粘贴" class="headerlink" title="2.2图片粘贴"></a>2.2图片粘贴</h2><p>贴图简直是hexo的灾难，最早我是把图传到七牛云的，然后复制了链接再手动写到博客里。</p><p>后来七牛云突然就不允许外链了，差点把我的图都搞丢，吃了教训之后，我把图都放到了<code>source/images</code>里，然后在贴图的时候用<code>![](/images/ctc.jpg)</code>，图片是要自己复制的，路径也是要自己写的。</p><p>但是现在有Typora 了！可以实现图片直接粘贴了</p><p>设置好图片自动复制，不管是本地图片，还是网络图片，都复制到<code>source/images</code>，显示相对路径，同时需要设置图片根目录，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">typora-root-url:</span> <span class="string">../../source</span></span><br></pre></td></tr></table></figure><p>这样Typora生成的相对路径才可以正常在网站上显示。</p><p><img src="/images/屏幕快照 2019-07-14 上午1.15.21-3039456.png" alt="屏幕快照 2019-07-14 上午1.15.21"></p><p>但mac上好像不能批量设置图片根目录，所以修改默认的post配置，在<code>scaffolds\post.md</code>里，添加上面那一句。</p><p>以前写的博客没有这一句怎么办呢？我弄了半天的<code>sed</code>最终放弃了（mac的freebsd上的sed和gnu的sed不一致），还是用python一把梭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path_root = <span class="string">'./_posts/'</span></span><br><span class="line">files = os.listdir(path_root)</span><br><span class="line">files = [path_root + x <span class="keyword">for</span> x <span class="keyword">in</span> files <span class="keyword">if</span> x.endswith(<span class="string">'.md'</span>)]</span><br><span class="line">insert_line = <span class="string">'typora-root-url: ../../source'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">    <span class="keyword">with</span> open(file) <span class="keyword">as</span> f:</span><br><span class="line">        lines = f.readlines()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> any([insert_line <span class="keyword">in</span> x <span class="keyword">for</span> x <span class="keyword">in</span> lines]):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    lines.insert(<span class="number">2</span>, insert_line + <span class="string">'\n'</span>) // 在哪一行插入都行</span><br><span class="line">    <span class="keyword">with</span> open(file, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.writelines(lines)</span><br></pre></td></tr></table></figure><h2 id="2-3一个Typora没解决的图片问题"><a href="#2-3一个Typora没解决的图片问题" class="headerlink" title="2.3一个Typora没解决的图片问题"></a>2.3一个Typora没解决的图片问题</h2><p>后来想到还有一个问题没有解决，图片直接用的是原图，没有做裁剪和重命名。</p><p>参考<a href="https://www.karlzhou.com/articles/compress-minify-hexo/" target="_blank" rel="noopener">这里</a>做的，用<code>gulp</code>压缩图片。</p><p>在<code>package.json</code>的 <code>dependencies</code>里加入</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">"del": "^2.2.2",</span><br><span class="line">"gulp": "^3.9.1",</span><br><span class="line">"gulp-clean-css": "^2.3.2",</span><br><span class="line">"gulp-htmlclean": "^2.7.22",</span><br><span class="line">"gulp-htmlmin": "^3.0.0",</span><br><span class="line">"gulp-imagemin": "^3.4.0",</span><br><span class="line">"gulp-uglify": "^2.1.2",</span><br></pre></td></tr></table></figure><p>然后，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cnpm insall</span><br><span class="line">cnpm update # 直接install后报错，update之后好了</span><br><span class="line">cnpm audit fix</span><br></pre></td></tr></table></figure><p><code>gulpfile.js</code>做了一些修改，主要是压缩图片好事太长了，从部署流程里单独拉了出来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-clean-css'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</span><br><span class="line"><span class="keyword">var</span> del = <span class="built_in">require</span>(<span class="string">'del'</span>);</span><br><span class="line"><span class="keyword">var</span> runSequence = <span class="built_in">require</span>(<span class="string">'run-sequence'</span>);</span><br><span class="line"><span class="keyword">var</span> Hexo = <span class="built_in">require</span>(<span class="string">'hexo'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> del([<span class="string">'public/**/*'</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// generate html with 'hexo generate'</span></span><br><span class="line"><span class="keyword">var</span> hexo = <span class="keyword">new</span> Hexo(process.cwd(), &#123;&#125;);</span><br><span class="line">gulp.task(<span class="string">'generate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    hexo.init().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hexo.call(<span class="string">'generate'</span>, &#123;</span><br><span class="line">            watch: <span class="literal">false</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hexo.exit();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cb()</span><br><span class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">        hexo.exit(err);</span><br><span class="line">        <span class="keyword">return</span> cb(err);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">        .pipe(minifycss(&#123;</span><br><span class="line">            compatibility: <span class="string">'ie8'</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">        .pipe(htmlclean())</span><br><span class="line">        .pipe(htmlmin(&#123;</span><br><span class="line">            removeComments: <span class="literal">true</span>,</span><br><span class="line">            minifyJS: <span class="literal">true</span>,</span><br><span class="line">            minifyCSS: <span class="literal">true</span>,</span><br><span class="line">            minifyURLs: <span class="literal">true</span>,</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.js'</span>)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'minify-img'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/images/**/*.*'</span>)</span><br><span class="line">        .pipe(imagemin())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public/images'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'minify-img-aggressive'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./source/images/**/*.*'</span>) <span class="comment">//直接压缩source里的图片，public里的不管了</span></span><br><span class="line">        .pipe(imagemin(</span><br><span class="line">        [imagemin.gifsicle(&#123;<span class="string">'optimizationLevel'</span>: <span class="number">3</span>&#125;), </span><br><span class="line">        imagemin.jpegtran(&#123;<span class="string">'progressive'</span>: <span class="literal">true</span>&#125;), </span><br><span class="line">        imagemin.optipng(&#123;<span class="string">'optimizationLevel'</span>: <span class="number">7</span>&#125;), </span><br><span class="line">        imagemin.svgo()],</span><br><span class="line">        &#123;<span class="string">'verbose'</span>: <span class="literal">true</span>&#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./source/images'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'img'</span>, [<span class="string">'minify-img-aggressive'</span>])</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'compress'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    runSequence([<span class="string">'minify-html'</span>, <span class="string">'minify-css'</span>, <span class="string">'minify-js'</span>], cb);</span><br><span class="line">    <span class="comment">// runSequence(['minify-html', 'minify-css', 'minify-js', 'minify-img-aggressive'], cb);</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'build'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    runSequence(<span class="string">'clean'</span>, <span class="string">'generate'</span>, <span class="string">'compress'</span>, cb)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'build'</span>])</span><br></pre></td></tr></table></figure><p>压缩图片用这个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp img</span><br></pre></td></tr></table></figure><p>部署用这个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp build &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Joint Attention_CTC</title>
      <link href="/2019/07/13/Joint-Attention-CTC/"/>
      <url>/2019/07/13/Joint-Attention-CTC/</url>
      
        <content type="html"><![CDATA[<h1 id="Joint-CTC-Attention"><a href="#Joint-CTC-Attention" class="headerlink" title="Joint CTC-Attention"></a>Joint CTC-Attention</h1><p>是一篇16年的文章，Joint CTC-Attention based End-to-End Speech Recognition using Multi-task Learning</p><p>作者说Attention有个问题，没有CTC一样从左到右的限制，所以不好对齐，weak on noisy speech，也不好训练，所以在训练的时候，把CTC也加进去，$\alpha$取0.2的时候效果最好</p><script type="math/tex; mode=display">L=\alpha L_{ctc} + (1-\alpha) L_{att}</script><p>但是预测的时候没有ctc，还是用Attention做decoding</p><h1 id="CTC-Beam-Search"><a href="#CTC-Beam-Search" class="headerlink" title="CTC Beam Search"></a>CTC Beam Search</h1><p>看的是<a href="https://medium.com/corti-ai/ctc-networks-and-language-models-prefix-beam-search-explained-c11d1ee23306" target="_blank" rel="noopener">这里</a>，CTC 有两种decoding的方法，一种是最简单的，直接取最大值，叫max decoding或叫greedy decoding。但是这么做有两个问题。</p><ol><li>但是这么做其实已经做了近似，理论上的做法应该是这样的。遍历所有可能的路径，计算出每一条路径的概率值，然后把结果一致的路径的概率加起来，选择概率最大的那个结果，就是最终的结果。但是路径太多了，不能这么暴力。</li><li>max decoding不能结合语义。</li></ol><p>主要变量是<code>Pb</code>和<code>Pnb</code>，<code>Pb[t][l]</code>, is the probability that a prefix, l, at a specific time step, t, originates from one or more paths ending in the blank token</p><p>think of a language model as a function taking a sentence as input, which is often only partly constructed, and returning the probability of the last word given all the previous words. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict, Counter</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_lowercase</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prefix_beam_search</span><span class="params">(ctc, lm=None, k=<span class="number">25</span>, alpha=<span class="number">0.30</span>, beta=<span class="number">5</span>, prune=<span class="number">0.001</span>)</span>:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Performs prefix beam search on the output of a CTC network.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Args:</span></span><br><span class="line"><span class="string">ctc (np.ndarray): The CTC output. Should be a 2D array (timesteps x alphabet_size)</span></span><br><span class="line"><span class="string">lm (func): Language model function. Should take as input a string and output a probability.</span></span><br><span class="line"><span class="string">k (int): The beam width. Will keep the 'k' most likely candidates at each timestep.</span></span><br><span class="line"><span class="string">alpha (float): The language model weight. Should usually be between 0 and 1.</span></span><br><span class="line"><span class="string">beta (float): The language model compensation term. The higher the 'alpha', the higher the 'beta'.</span></span><br><span class="line"><span class="string">prune (float): Only extend prefixes with chars with an emission probability higher than 'prune'.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Retruns:</span></span><br><span class="line"><span class="string">string: The decoded CTC output.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">lm = (<span class="keyword">lambda</span> l: <span class="number">1</span>) <span class="keyword">if</span> lm <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">else</span> lm <span class="comment"># if no LM is provided, return 1</span></span><br><span class="line">W = <span class="keyword">lambda</span> l: re.findall(<span class="string">r'\w+[\s|&gt;]'</span>, l)</span><br><span class="line">alphabet = list(ascii_lowercase) + [<span class="string">' '</span>, <span class="string">'&gt;'</span>, <span class="string">'%'</span>]</span><br><span class="line">F = ctc.shape[<span class="number">1</span>]</span><br><span class="line">ctc = np.vstack((np.zeros(F), ctc)) <span class="comment"># just add an imaginative zero'th step </span></span><br><span class="line">T = ctc.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># STEP 1: Initiliazation</span></span><br><span class="line">O = <span class="string">''</span> <span class="comment"># means empty</span></span><br><span class="line">Pb, Pnb = defaultdict(Counter), defaultdict(Counter)</span><br><span class="line">Pb[<span class="number">0</span>][O] = <span class="number">1</span> <span class="comment"># balnk prob is 1</span></span><br><span class="line">Pnb[<span class="number">0</span>][O] = <span class="number">0</span> <span class="comment"># non blank prob is 0</span></span><br><span class="line">A_prev = [O]</span><br><span class="line"><span class="comment"># END: STEP 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># STEP 2: Iterations and pruning</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> range(<span class="number">1</span>, T):</span><br><span class="line">pruned_alphabet = [alphabet[i] <span class="keyword">for</span> i <span class="keyword">in</span> np.where(ctc[t] &gt; prune)[<span class="number">0</span>]]</span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> A_prev: <span class="comment"># A_prev is a string list</span></span><br><span class="line">            </span><br><span class="line"><span class="keyword">if</span> len(l) &gt; <span class="number">0</span> <span class="keyword">and</span> l[<span class="number">-1</span>] == <span class="string">'&gt;'</span>: <span class="comment"># &lt; means end-character</span></span><br><span class="line">Pb[t][l] = Pb[t - <span class="number">1</span>][l]</span><br><span class="line">Pnb[t][l] = Pnb[t - <span class="number">1</span>][l]</span><br><span class="line"><span class="keyword">continue</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> pruned_alphabet:</span><br><span class="line">c_ix = alphabet.index(c)</span><br><span class="line"><span class="comment"># END: STEP 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># STEP 3: “Extending” with a blank</span></span><br><span class="line"><span class="keyword">if</span> c == <span class="string">'%'</span>: <span class="comment"># % means blank, index is -1</span></span><br><span class="line">Pb[t][l] += ctc[t][<span class="number">-1</span>] * (Pb[t - <span class="number">1</span>][l] + Pnb[t - <span class="number">1</span>][l])</span><br><span class="line"><span class="comment"># END: STEP 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># STEP 4: Extending with the end character</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">l_plus = l + c</span><br><span class="line"><span class="keyword">if</span> len(l) &gt; <span class="number">0</span> <span class="keyword">and</span> c == l[<span class="number">-1</span>]:</span><br><span class="line">Pnb[t][l_plus] += ctc[t][c_ix] * Pb[t - <span class="number">1</span>][l]</span><br><span class="line">Pnb[t][l] += ctc[t][c_ix] * Pnb[t - <span class="number">1</span>][l]</span><br><span class="line"><span class="comment"># END: STEP 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># STEP 5: Extending with any other non-blank character </span></span><br><span class="line">                    <span class="comment"># and LM constraints</span></span><br><span class="line">                    <span class="comment">#</span></span><br><span class="line"><span class="keyword">elif</span> len(l.replace(<span class="string">' '</span>, <span class="string">''</span>)) &gt; <span class="number">0</span> <span class="keyword">and</span> c <span class="keyword">in</span> (<span class="string">' '</span>, <span class="string">'&gt;'</span>):</span><br><span class="line">lm_prob = lm(l_plus.strip(<span class="string">' &gt;'</span>)) ** alpha</span><br><span class="line">Pnb[t][l_plus] += lm_prob * ctc[t][c_ix] * (Pb[t - <span class="number">1</span>][l] + Pnb[t - <span class="number">1</span>][l])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">Pnb[t][l_plus] += ctc[t][c_ix] * (Pb[t - <span class="number">1</span>][l] + Pnb[t - <span class="number">1</span>][l])</span><br><span class="line"><span class="comment"># END: STEP 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># STEP 6: Make use of discarded prefixes</span></span><br><span class="line">                    <span class="comment"># 可能l_plus已经存在过，但在上一步的时候扔掉了，这里相当于补回来</span></span><br><span class="line"><span class="keyword">if</span> l_plus <span class="keyword">not</span> <span class="keyword">in</span> A_prev:</span><br><span class="line">Pb[t][l_plus] += ctc[t][<span class="number">-1</span>] * (Pb[t - <span class="number">1</span>][l_plus] + Pnb[t - <span class="number">1</span>][l_plus])</span><br><span class="line">Pnb[t][l_plus] += ctc[t][c_ix] * Pnb[t - <span class="number">1</span>][l_plus]</span><br><span class="line"><span class="comment"># END: STEP 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># STEP 7: Select most probable prefixes</span></span><br><span class="line">A_next = Pb[t] + Pnb[t]</span><br><span class="line">sorter = <span class="keyword">lambda</span> l: A_next[l] * (len(W(l)) + <span class="number">1</span>) ** beta</span><br><span class="line">A_prev = sorted(A_next, key=sorter, reverse=<span class="keyword">True</span>)[:k]</span><br><span class="line"><span class="comment"># END: STEP 7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> A_prev[<span class="number">0</span>].strip(<span class="string">'&gt;'</span>)</span><br></pre></td></tr></table></figure><p>后来想起来，sequence to sequence都有beam search和 greedy search，但是只是CTC的softmax是fram synchronously，所以逻辑才比较复杂，所以Attention一样也可以用beam search。</p><h1 id="Advanced-Joint-CTC-Attention"><a href="#Advanced-Joint-CTC-Attention" class="headerlink" title="Advanced Joint CTC-Attention"></a>Advanced Joint CTC-Attention</h1><p>还是那几个作者的文章，升级版，Advances in Joint CTC-Attention based End-to-End Speech Recognition with a Deep CNN Encoder and RNN-LM。</p><p>训练的过程没有做修改，还是CTC和Attention一起训练。</p><p>预测解码的时候修改了，以前是只用Attention，现在需要两个结合起来，用beam search做。但beam search有一个问题，Attention的softmax是character synchronously的，而CTC的是fram synchronously，并不是能很好地对应起来。</p><script type="math/tex; mode=display">\alpha_{att}(g_l)=\alpha_{att}(g_{l-1})+log(p(c|g_{l-1},X))</script><p>Attention的概率这么计算，$c$ is the last character of $g_l$。</p><p>CTC不能用上面这种公式计算，但是可以用CTC计算loss时的forward来计算$\alpha_{ctc}(g_l)$，和$\alpha_{att}(g_l)$用$\lambda$结合起来。</p>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> caffe </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蒋勋的红楼梦</title>
      <link href="/2019/06/16/%E8%92%8B%E5%8B%8B%E7%9A%84%E7%BA%A2%E6%A5%BC%E6%A2%A6/"/>
      <url>/2019/06/16/%E8%92%8B%E5%8B%8B%E7%9A%84%E7%BA%A2%E6%A5%BC%E6%A2%A6/</url>
      
        <content type="html"><![CDATA[<ul><li><p>最近在听蒋勋的细说红楼梦，那温柔的台普，那细腻的解读，那新颖的角度，那穿插在解说其中的娓娓道来的个人经历</p></li><li><p>但是我搜了几个在线的FM，都没有资源，不得已在一个微信公众号上听，体验不是太好</p></li><li><p>于是我想在网上找资源下载下来</p></li><li><p>翻来翻去，找到了这个看着很古老的<a href="https://www.ishuyin.com/show-15626.html" target="_blank" rel="noopener">网站</a>，我打开chrome的调试，音频资源直接大大方方地暴露在外面，没有任何反爬措施，奈斯</p></li></ul><p><img src="/images/jiangxun.png" alt></p><ul><li>于是就有了下面这个爬虫，其实代码主要是从<a href="https://www.cnblogs.com/lilinwei340/p/6793796.html" target="_blank" rel="noopener">这里</a>抄的</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> closing</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">out_dir = <span class="string">'./out'</span>  <span class="comment"># 输出文件夹</span></span><br><span class="line">thread_num = <span class="number">4</span>    <span class="comment"># 线程数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(out_dir):</span><br><span class="line">    os.mkdir(out_dir)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(img_url, img_name)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(os.path.join(out_dir, img_name)):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">with</span> closing(requests.get(img_url, stream=<span class="keyword">True</span>, headers=headers)) <span class="keyword">as</span> r:</span><br><span class="line">        rc = r.status_code</span><br><span class="line">        <span class="keyword">if</span> <span class="number">299</span> &lt; rc <span class="keyword">or</span> rc &lt; <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'returnCode%s\t%s'</span> % (rc, img_url)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        content_length = int(r.headers.get(<span class="string">'content-length'</span>, <span class="string">'0'</span>))</span><br><span class="line">        <span class="keyword">if</span> content_length == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'size0\t%s'</span> % img_url</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">with</span> open(os.path.join(out_dir, img_name), <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> data <span class="keyword">in</span> r.iter_content(<span class="number">1024</span>):</span><br><span class="line">                f.write(data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_imgurl_generate</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">161</span>):</span><br><span class="line">        <span class="keyword">yield</span> (<span class="string">"http://mp3.aikeu.com/15626/&#123;&#125;.mp3"</span>.format(i), <span class="string">"&#123;&#125;.mp3"</span>.format(i))</span><br><span class="line"></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span><span class="params">(imgs)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'thread %s is running...'</span> % threading.current_thread().name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> lock:</span><br><span class="line">                img_url, img_name = next(imgs)</span><br><span class="line">        <span class="keyword">except</span> StopIteration:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            download(img_url, img_name)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'exceptfail\t%s'</span> % img_url</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'thread %s is end...'</span> % threading.current_thread().name</span><br><span class="line"></span><br><span class="line">img_gen = get_imgurl_generate()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, thread_num):</span><br><span class="line">    t = threading.Thread(target=loop, name=<span class="string">'LoopThread%s'</span> %i, args=(img_gen,))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蒋勋 </tag>
            
            <tag> 红楼梦 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随便写点什么吧</title>
      <link href="/2019/06/16/%E9%9A%8F%E4%BE%BF%E5%86%99%E7%82%B9%E4%BB%80%E4%B9%88%E5%90%A7/"/>
      <url>/2019/06/16/%E9%9A%8F%E4%BE%BF%E5%86%99%E7%82%B9%E4%BB%80%E4%B9%88%E5%90%A7/</url>
      
        <content type="html"><![CDATA[<p>净资产 = 总资产 - 负债<br>股本数：发行的股票的数量<br>每股净资产 = 净资产 / 股本数<br>市值 = 每股价格 * 股本数<br>市净率（PB） = 市值 / 净资产 = 每股价格 / 每股净资产</p><p>每股利润 = 净利润 / 股本数<br>市盈率（PE） = 市值 / 净利润 = 每股价格 / 每股利润</p><p>市盈增长比（PEG） = 市盈率 / (平均增长率 * 100)</p>]]></content>
      
      
      
        <tags>
            
            <tag> 股票 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm、webpack和vue</title>
      <link href="/2019/05/26/npm%E3%80%81webpack%E5%92%8Cvue/"/>
      <url>/2019/05/26/npm%E3%80%81webpack%E5%92%8Cvue/</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install packageName -g //全局安装，安装在Node安装目录下的node_modules下</span><br><span class="line">npm install packageName --save //安装到项目目录下，并在package.json文件的dependencies中写入依赖，简写为-S</span><br><span class="line">npm install packageName --save-dev //安装到项目目录下，并在package.json文件的devDependencies中写入依赖，简写为-D</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/42e11515c10f" target="_blank" rel="noopener">webpack</a>，这个是webpack的入门教程。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> webpack </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则</title>
      <link href="/2019/03/08/%E6%AD%A3%E5%88%99/"/>
      <url>/2019/03/08/%E6%AD%A3%E5%88%99/</url>
      
        <content type="html"><![CDATA[<ul><li>这里占个坑</li><li>我想些反向搜索，但是我自己都没搞懂</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Attention</title>
      <link href="/2019/03/04/Attention/"/>
      <url>/2019/03/04/Attention/</url>
      
        <content type="html"><![CDATA[<h1 id="Content-Attention"><a href="#Content-Attention" class="headerlink" title="Content Attention"></a>Content Attention</h1><ul><li>假设cnn之后，feature map是$T\times1$，用$x$表示，这里用caffe的表示方法，宽度在前，高度在后，忽略了batch size</li><li>Content Attention是最常见的Attention，计算权重只用到了$x$和LSTM的输出$c_{t-1}$，$c_{t-1}$和$x$都需要一个全连接</li><li>其实这里的$\hat{e}_{t,j},  j=1..T$是一起算的，$wx$的shape已经是$T\times C$，而$wc_{t-1}$是$1\times C$，需要扩增到$T\times C$<script type="math/tex; mode=display">\hat{e}_{t,j}=wc_{t-1}+wx_j \\e_{t,j}=tanh(\hat{e}_{t,j}) \\\alpha_{t,j}=softmax(we_{t,j})</script></li><li>$\alpha_t$的shape是$T\times1$，是$x$每个位置的权重，然后进行累加，$g_t$称之为glimpse向量，<script type="math/tex; mode=display">g_t=\sum_{j=1}^{T}\alpha_{t,j}x_j</script></li><li>然后用LSTM解码，这里$y_{t-1}+g_t$其实是不能直接加到，shape不一致，需要先对$y_{t-1}$全连接一下<script type="math/tex; mode=display">c_t,h_t=LSTM(y_{t-1}+g_t, c_{t-1}) \\y_t=argmax(softmax(wh_t))</script></li></ul><h1 id="Hybrid-Attention"><a href="#Hybrid-Attention" class="headerlink" title="Hybrid Attention"></a>Hybrid Attention</h1><ul><li>Content有一个严重对问题是计算权重对时候，只用到了内容信息，没有用到位置信息，所以会出现对不齐对问题</li><li>Hybrid Attention其实是Content Attention和Locate Attention的混合，区别只是体现在$\hat{e}_{t,j}$的计算上多了上一时刻的位置信息<script type="math/tex; mode=display">\hat{e}_{t,j}=wc_{t-1}+wx_j+w\alpha_{t-1,j}</script></li><li>$\alpha_{t-1,j}$的shape是$T\times N\times1$，先换成$N\times T\times1$，然后用$1\times1$的卷积，卷成$N\times T\times C$，然后可以全连接，最后再换回$T\times N\times C$，这样就能加起来了</li></ul>]]></content>
      
      
      <categories>
          
          <category> caffe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Attention </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C宏函数重载</title>
      <link href="/2019/02/14/C%E5%AE%8F%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/"/>
      <url>/2019/02/14/C%E5%AE%8F%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<ul><li>理论上，宏函数是不能重载的，第二个宏会直接覆盖掉第一个</li><li>但我今天看到了一个非常<del>sao</del>优雅的方法，可以功能上实现重载，原文在<a href="https://blog.csdn.net/lmhuanying1012/article/details/78715351" target="_blank" rel="noopener">这里</a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OneArgument(a) <span class="comment">// ...action with one argument</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TwoArguments(a, b) <span class="comment">// ...action with two arguments</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GetMacro(_1, _2, NAME, ...) NAME</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Macro(...) GetMacro(__VA_ARGS__, TwoArguments, OneArgument, ...)(__VA_ARGS__)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// usage:</span></span><br><span class="line">Macro(a); <span class="comment">// OneArument(a) is called</span></span><br><span class="line">Macro(a, b);  <span class="comment">// TwoArguments(a, b) is called</span></span><br></pre></td></tr></table></figure><ul><li><p>其中，<code>__VA_ARGS__</code>是参数<code>...</code>的展开</p></li><li><p>以此类推，三个参数的重载也是能实现的</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OneArgument(a) <span class="comment">// ...action with one argument</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TwoArguments(a, b) <span class="comment">// ...action with two arguments</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ThreeArguments(a, b, c) <span class="comment">// ...action with three arguments</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GetMacro(_1, _2, _3, NAME, ...) NAME</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Macro(...) GetMacro(__VA_ARGS__, ThreeArguments, TwoArguments, OneArgument, ...)(__VA_ARGS__)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// usage:</span></span><br><span class="line">Macro(a); <span class="comment">// OneArument(a) is called</span></span><br><span class="line">Macro(a, b);  <span class="comment">// TwoArguments(a, b) is called</span></span><br><span class="line">Macro(a, b, c);  <span class="comment">// ThreeArguments(a, b, c) is called</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>卷积的实现</title>
      <link href="/2019/02/09/%E5%8D%B7%E7%A7%AF%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/02/09/%E5%8D%B7%E7%A7%AF%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://www.cnblogs.com/louyihang-loves-baiyan/p/5154337.html" target="_blank" rel="noopener">这里</a>应该说的比较清楚</li><li>就贴个图吧<br><img src="/images/caffe_conv.jpg" alt></li></ul>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> caffe </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>caffe运行顺序</title>
      <link href="/2019/02/09/caffe%E8%BF%90%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
      <url>/2019/02/09/caffe%E8%BF%90%E8%A1%8C%E9%A1%BA%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="blob"><a href="#blob" class="headerlink" title="blob"></a>blob</h1><ul><li><p>explict，显示构造函数，只对构造函数有用，用来抑制隐式转换</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">String</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">String</span> <span class="params">( <span class="keyword">int</span> n )</span></span>; <span class="comment">// 本意是预先分配n个字节给字符串，加上explicit，就抑制了String ( int n )的隐式转换，</span></span><br><span class="line">    String ( <span class="keyword">const</span> <span class="keyword">char</span>* p );  <span class="comment">// 用C风格的字符串p作为初始化值</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">String <span class="title">s2</span> <span class="params">( <span class="number">10</span> )</span></span>;          <span class="comment">//OK 分配10个字节的空字符串</span></span><br><span class="line">String s3 = String ( <span class="number">10</span> ); <span class="comment">//OK 分配10个字节的空字符串</span></span><br><span class="line"> </span><br><span class="line">String s4 = <span class="number">10</span>;            <span class="comment">//编译不通过，不允许隐式的转换</span></span><br><span class="line">String s5 = <span class="string">'a'</span>;           <span class="comment">//编译不通过，不允许隐式的转换</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line">    A(<span class="keyword">int</span> a);   </span><br><span class="line">&#125;;   </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Function</span><span class="params">(A a)</span></span>;   </span><br><span class="line"><span class="comment">// 当调用Function(2)的时候，2会隐式转换为A类型</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span>   </span><br><span class="line">    <span class="function"><span class="keyword">explicit</span>   <span class="title">A</span><span class="params">(<span class="keyword">int</span>   a)</span></span>;   </span><br><span class="line">&#125;;   </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Function</span><span class="params">(A a)</span></span>;  </span><br><span class="line"><span class="comment">// 这样，当调用Function(2)的时候，编译器会给出错误信息</span></span><br></pre></td></tr></table></figure></li><li><p>template</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// suppose I've declared</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(T&amp; t)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;&gt; <span class="keyword">void</span> foo&lt;<span class="keyword">int</span>&gt;(<span class="keyword">int</span>&amp; t); </span><br><span class="line"><span class="comment">// declares a specialization of the template, with potentially different body.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> <span class="keyword">void</span> foo&lt;<span class="keyword">int</span>&gt;(<span class="keyword">int</span>&amp; t); </span><br><span class="line"><span class="comment">// causes an explicit instantiation of the template, but doesn't introduce a specialization. </span></span><br><span class="line"><span class="comment">// It just forces the instantiation of the template for a specific type.</span></span><br></pre></td></tr></table></figure></li><li><p>iniline主要是将代码进行复制，扩充，会使代码总量上升，好处就是可以节省调用的开销，能提高执行效率</p></li><li><p>shared_ptr引用计数智能指，可以参考<a href="https://blog.csdn.net/Xiejingfa/article/details/50750037" target="_blank" rel="noopener">这里</a></p></li></ul><h1 id="caffe-cpp"><a href="#caffe-cpp" class="headerlink" title="caffe.cpp"></a>caffe.cpp</h1><ul><li>step1: 命令行下输入./build/tools/caffe train -solver xxx.prototxt 运行了程序的入口caffe.cpp main()</li><li>step2: caffe.cpp main()根据命令行输入的参数train 调用caffe.cpp train()</li><li>step3: caffe.cpp train()读取xxx.prototxt的参数 调用solver.cpp Solver()的构造函数创建Solver对象</li><li>step4: 创建Solver对象的时候需要调用solver.cpp Init()函数来初始化模型的网络</li><li>step5: solver.cpp Init()函数调用solver.cpp InitTrainNet()和InitTestNets()函数来分别初始化训练和测试网络。</li><li>step6: InitTrainNet() 通过xxx.prototxt 指定的xxxnet.prototxt读取net的参数，调用net.cpp Net()的构造函数，创建训练网络，</li><li>step7: net.cpp Net()调用net.cpp Init()函数，通过for循环来1)创建网络中每一个Layer对象，2)设置bottom和top，3）调用layer.cpp Setup()，Setup()里会调用具体layer的LayerSetUp()和Reshape()</li><li>step8: 调用InitTestNets()创建测试网络，与InitTrainNet(）类似</li><li>step9: 运行返回到caffe.cpp train()中，利用创建好的solver对象调用solver.cpp Solve()函数</li><li><p>step10: solver.cpp Solve() 调用 solver.cpp Step()函数，while循环迭代的次数，每次迭代 1）调用net.cpp ForwardBackward()来前向以及后向传播 2)solve.cpp ApplyUpdate()更新参数 3）每一定轮次运行solver.cpp TestAll()</p></li><li><p>caffe.cpp中的main()调用train()，train()中创建solver对象，solver对象初始化会调用solver.cpp中的Init()</p></li><li>Init()中，创建InitTrainNet()和InitTestNet()</li><li><p>返回到caffe.cpp的train()中，调用Solver()来训练网络，具体过程在solver.cpp的Step()中实现</p></li><li><p>以上抄自<a href="https://blog.csdn.net/BVL10101111/article/details/74787586" target="_blank" rel="noopener">这里</a></p></li></ul><h1 id="layer-factory"><a href="#layer-factory" class="headerlink" title="layer_factory"></a>layer_factory</h1><ul><li>#表示：对应变量字符串化  </li><li>##表示：把宏参数名与宏定义代码序列中的标识符连接在一起，形成一个新的标识符</li><li><p>连接符#@：它将单字符标记符变换为单字符，即加单引号。例如<code>#define B(x) #@x</code>，则B(a)即’a’，B(1)即’1’</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> trace(x, format) printf(#x <span class="meta-string">" = %"</span> #format <span class="meta-string">"\n"</span>, x)  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> trace2(i) trace(x##i, d) </span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> *s = <span class="string">"three"</span>;  </span><br><span class="line"><span class="keyword">float</span> x = <span class="number">2.0</span>;</span><br><span class="line"> </span><br><span class="line">trace(i, d);    <span class="comment">// i = 1   </span></span><br><span class="line">trace(x, f);    <span class="comment">// x = 2.000000</span></span><br><span class="line">trace(s, s);    <span class="comment">// s = three      </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x1 = <span class="number">1</span>, x2 = <span class="number">2</span>;  </span><br><span class="line">trace2(<span class="number">1</span>);      <span class="comment">// x1 = 1</span></span><br><span class="line">trace2(<span class="number">2</span>);      <span class="comment">// x2 = 2</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>看<a href="https://www.jianshu.com/p/191f6cb3c102" target="_blank" rel="noopener">这里</a>吧，我太懒了。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> caffe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> caffe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAN总结</title>
      <link href="/2019/01/27/GAN%E6%80%BB%E7%BB%93/"/>
      <url>/2019/01/27/GAN%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="GAN原理"><a href="#GAN原理" class="headerlink" title="GAN原理"></a>GAN原理</h1><ul><li>GAN的终极目的，其实是用$P_G(x)$拟合真实的$P_{data}(x)$，最直接的想法是用MLE来做，MLE实际上和最小化KL距离是等同的，证明见下张图</li></ul><p><img src="/images/mle_equals_kl.jpg" alt></p><ul><li><p>机器之心的<a href="https://www.jiqizhixin.com/articles/2017-10-1-1" target="_blank" rel="noopener">这篇</a>，基本就是照着李宏毅对课件写的，可以主要看一下为什么说判别器可以衡量两个分布指尖的JS散度</p></li><li><p>GAN的过程</p></li></ul><p><img src="/images/origin_gan.jpg" alt></p><ul><li>Goodfellow说上面这种形式的判别器不好收敛，就搞成了下面这种，据李宏毅说，这个修改没啥乱用，只是Goodfellow偷懒而已</li></ul><p><img src="/images/origin_gan2.jpg" alt></p><h1 id="conditional-GAN"><a href="#conditional-GAN" class="headerlink" title="conditional GAN"></a>conditional GAN</h1><ul><li>除了图片是否真实外，判别器还要区分生成的图片类别对不对</li></ul><p><img src="/images/cgan.jpg" alt></p><ul><li>这种结构的判别器会好一点</li></ul><p><img src="/images/cgan_d.jpg" alt></p><ul><li>stack_GAN，GAN直接生成大图的话会比较模糊，所以用两阶段的方法</li></ul><p><img src="/images/stack_gan.jpg" alt></p><ul><li>语音增强和image2image也都可以看作是cGAN</li></ul><p><img src="/images/speach.jpg" alt><br><img src="/images/img2img.jpg" alt></p><h1 id="unsupervised-conditional-GAN"><a href="#unsupervised-conditional-GAN" class="headerlink" title="unsupervised conditional GAN"></a>unsupervised conditional GAN</h1><ul><li>问题：没有监督之后，generator可能会生成很真实，但不满足条件的图片</li><li>办法1，直接忽略这个问题，因为如果generator不是太深的话，生成图片和输入图片还是相关的</li><li>还有一些加入consistency</li></ul><p><img src="/images/direct_trans.jpg" alt><br><img src="/images/direct_trans2.jpg" alt><br><img src="/images/cycle_gan.jpg" alt><br><img src="/images/star_gan.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> GAN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GAN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些shell命令</title>
      <link href="/2019/01/23/%E4%B8%80%E4%BA%9Bshell%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/01/23/%E4%B8%80%E4%BA%9Bshell%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<ul><li>for循环</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">for file in `ls /etc`</span><br><span class="line"></span><br><span class="line">for skill in Ada Coffe Action Java; do</span><br><span class="line">    echo "I am good at $&#123;skill&#125;Script"</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">for (( EXP1; EXP2; EXP3 ))</span><br><span class="line">do</span><br><span class="line">    # do something</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">while condition</span><br><span class="line">do</span><br><span class="line">    # do something</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">until condition</span><br><span class="line">do</span><br><span class="line">    # do something</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">while</span> : 等效于 <span class="keyword">while</span> <span class="literal">true</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> There<span class="string">'s no real difference in behavior. Both commands do nothing and exit with a successful status. : emphasizes doing nothing; true emphasizes the successful status.</span></span></span><br></pre></td></tr></table></figure><ul><li>if</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    # do something</span><br><span class="line">elif</span><br><span class="line">    # do something</span><br><span class="line">else</span><br><span class="line">    # do something</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -e "$filename" ] # 文件是否存在，r、w、x是否可读、写、执行</span><br><span class="line">                      # d是否为目录、f是否为文件</span><br><span class="line">if [ $var -gt 0 ] # 还有lt、ge、le、eq、ne</span><br></pre></td></tr></table></figure><ul><li>case</li></ul> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">case "$varname" in</span><br><span class="line">    [a-z]) echo "abc";;</span><br><span class="line">    [0-9]) echo "123";; #还不知道为啥这么写，以后再补充吧</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><ul><li>文件包含</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source ./function.sh</span><br><span class="line">. ./function.sh</span><br></pre></td></tr></table></figure><ul><li>字符串</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string="abcd"</span><br><span class="line">echo $&#123;#string&#125; # 字符串长度</span><br><span class="line"></span><br><span class="line">string="zhe pian tai shui le"</span><br><span class="line">echo $&#123;string:13:4&#125; # shui</span><br></pre></td></tr></table></figure><ul><li>数组</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr=(1 2 3 4 5)</span><br><span class="line">echo $&#123;arr[3]&#125;</span><br><span class="line"></span><br><span class="line">echo $&#123;#arr[@]&#125; # 数组长度</span><br><span class="line">echo $&#123;arr[#arr[@]-1]&#125; # 最后一个元素</span><br></pre></td></tr></table></figure><ul><li>问号，和C里面的问号一样</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=10</span><br><span class="line">(( t=a&lt;50?0:1 )) # t=0</span><br></pre></td></tr></table></figure><ul><li><code>/dev/null</code>是个空文件，清空一个文件可以用<code>cat /dev/null &gt; tmp.log</code>，不想保存log，也不想输出到屏幕，可以<code>1&gt;/dev/null 2&gt;&amp;1</code></li><li>清空一个文件也可用<code>: &gt; tmp.log</code>，:是个内建命令，什么也不做，永远返回0</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:</span><br><span class="line">echo $? # 0</span><br></pre></td></tr></table></figure><ul><li><code>cp t.{txt,back}</code> 文件名扩展</li><li>大括号和小括号的区别</li></ul> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=123</span><br><span class="line">(a=321)</span><br><span class="line">echo $a # 123 在子进程中修改了a的值，对当前进程没影响</span><br><span class="line">&#123;a=321;&#125;</span><br><span class="line">echo $a # 321 想当于是一个匿名函数</span><br></pre></td></tr></table></figure><ul><li><code>sudo sh -c &quot;...&quot;</code>，引号里的内容都会有sudo权限</li><li><p><code>echo $(( 2#101011 ))</code>，这里是2进制的意思</p></li><li><p><code>trap</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">trap "echo Booh!" SIGINT SIGTERM</span><br><span class="line">echo "it's going to run until you hit Ctrl+Z"</span><br><span class="line">echo "hit Ctrl+C to be blown away!"</span><br><span class="line"></span><br><span class="line">while true:         </span><br><span class="line">do</span><br><span class="line">    sleep 60       </span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span><span class="bash"> “<span class="built_in">kill</span> pid” 会发送SIGTERM到进程pid.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在终端中敲入interrupt key（DELETE或ctrl+c）会产生SIGINT信号。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> “<span class="built_in">kill</span> -9 pid” 会发送SIGKILL到进程pid，SIGKILL不能被捕获，会直接结束</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何优雅地排人才公寓</title>
      <link href="/2018/11/27/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E6%8E%92%E4%BA%BA%E6%89%8D%E5%85%AC%E5%AF%93/"/>
      <url>/2018/11/27/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E6%8E%92%E4%BA%BA%E6%89%8D%E5%85%AC%E5%AF%93/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">start_date = datetime.date(<span class="number">2018</span>, <span class="number">6</span>, <span class="number">6</span>)</span><br><span class="line">start_rank = <span class="number">866</span></span><br><span class="line"></span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">'ASP.NET_SessionId'</span>: <span class="string">'obe4o1esws0xutvslbbapc55'</span>,</span><br><span class="line">    <span class="string">'safedog-flow-item'</span>: <span class="string">''</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line">    <span class="string">'Upgrade-Insecure-Requests'</span>: <span class="string">'1'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8'</span>,</span><br><span class="line">    <span class="string">'Referer'</span>: <span class="string">'https://rcgy.zjhui.net/'</span>,</span><br><span class="line">    <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</span><br><span class="line">    <span class="string">'Accept-Language'</span>: <span class="string">'zh'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">params = (</span><br><span class="line">    (<span class="string">'flag'</span>, <span class="string">'0'</span>),</span><br><span class="line">    (<span class="string">'userName'</span>, <span class="string">'13122358292'</span>),</span><br><span class="line">    (<span class="string">'passWord'</span>, <span class="string">'MzAyMDI4MnpqeWQ='</span>),</span><br><span class="line">    (<span class="string">'md5'</span>, <span class="string">'08dcb32a31936c855b5f8f5c21f5b957'</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'https://rcgy.zjhui.net/Login.aspx'</span>, headers=headers, params=params, cookies=cookies)</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line">    <span class="string">'Pragma'</span>: <span class="string">'no-cache'</span>,</span><br><span class="line">    <span class="string">'Cache-Control'</span>: <span class="string">'no-cache'</span>,</span><br><span class="line">    <span class="string">'Upgrade-Insecure-Requests'</span>: <span class="string">'1'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8'</span>,</span><br><span class="line">    <span class="string">'Referer'</span>: <span class="string">'https://rcgy.zjhui.net/System/ApplyRecord.aspx'</span>,</span><br><span class="line">    <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</span><br><span class="line">    <span class="string">'Accept-Language'</span>: <span class="string">'zh'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'https://rcgy.zjhui.net/System/WaitingRecord.aspx'</span>, headers=headers, cookies=cookies)</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(response.content, features=<span class="string">"lxml"</span>)</span><br><span class="line">rank = soup.find(id=<span class="string">'ctl00_ctl00_ctl00_main_main_main_rptPtApplyRecord_ctl00_labPageRank'</span>).string</span><br><span class="line">rank = int(rank)</span><br><span class="line"></span><br><span class="line">today = datetime.date.today()</span><br><span class="line">remain_days = float(rank) * (today - start_date).days / (start_rank - rank)</span><br><span class="line">remain_days = int(remain_days)</span><br><span class="line">check_in_date = today + datetime.timedelta(days=remain_days)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"rank:\t"</span>, rank</span><br><span class="line"><span class="keyword">print</span> <span class="string">"days remaining:\t"</span>, remain_days</span><br><span class="line"><span class="keyword">print</span> <span class="string">"check in date:\t"</span>, check_in_date</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>grep中的正则表达式</title>
      <link href="/2018/11/20/grep%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2018/11/20/grep%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>照抄的<a href="https://blog.csdn.net/yufenghyc/article/details/51078107" target="_blank" rel="noopener">这里</a></p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><ul><li>基础正则，basic regex，即bres</li><li>扩展正则，extended regex，即eres</li><li>perl的正则，perl regex，即pres</li></ul><h1 id="不同正则表达式的区别"><a href="#不同正则表达式的区别" class="headerlink" title="不同正则表达式的区别"></a>不同正则表达式的区别</h1><ul><li>bres需要多写转义</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\&#123;n,m\&#125;, x\|y #bres需要写转义，</span><br><span class="line">&#123;n,m&#125;, x|y    #而eres和pres不需要</span><br></pre></td></tr></table></figure><ul><li>pres可以用下面这些，其它两种不可以。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\d, \D, \S, \s</span><br></pre></td></tr></table></figure><h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h1><ul><li>默认的正则为基础正则，”-E”表示eres，”-P”表示pers.</li><li>egrep等效于grep -E，egrep -P等效于 grep -P</li></ul><h1 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h1><ul><li>默认是eres，-r表示要用eres，不支持pres</li><li>mac下到sed和linux还不太一样，写inplace替换要这样，其中，<code>-i</code>后面是</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i '' 's/http.*ot0uaqt93.bkt.*\//\/images\//g' `ls *.md`</span><br></pre></td></tr></table></figure><h1 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h1><ul><li>厉害了，只支持eres</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 正则 </tag>
            
            <tag> grep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>conda 常用命令</title>
      <link href="/2018/11/19/conda-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/11/19/conda-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<ul><li>创建虚拟环境</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n your_env_name python=x.x anaconda</span><br></pre></td></tr></table></figure><p>最后的anaconda可选，有的话，会安装很多包，numpy、sklearn等等</p><ul><li>激活</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source activate your_env_name</span><br></pre></td></tr></table></figure><ul><li>安装包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -n your_env_name [package]</span><br></pre></td></tr></table></figure><ul><li>不激活</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source deactivate</span><br></pre></td></tr></table></figure><ul><li>已经有的虚拟环境</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env list</span><br></pre></td></tr></table></figure><ul><li>删除虚拟环境</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove -n your_env_list -all</span><br></pre></td></tr></table></figure><ul><li>检查conda是否安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda -v</span><br></pre></td></tr></table></figure><ul><li>更新conda</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda update conda</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> conda </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号机器人</title>
      <link href="/2018/10/06/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
      <url>/2018/10/06/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="itchatmp"><a href="#itchatmp" class="headerlink" title="itchatmp"></a>itchatmp</h1><ul><li>itchat是个微信机器人，作者通过微信网页版抓的接口</li><li>itchatmp是对应的微信公众号的机器人，微信官方提供的接口，但相比于itchat，不太完善，文档也不行</li><li>我已经要放弃这个了，这里只记录一下我修改nginx配置的过程</li></ul><ol><li><code>itchatmp.run(port=8180)</code>，这里首先要指定端口</li><li>微信公众号的配置页面里，写上对应的域名，yongxinxue.xin/weixin，由于我根域名被占了，所以建立了个新路径</li><li>nginx里增加配置，<a href="https://blog.csdn.net/zhanlanmg/article/details/49684803" target="_blank" rel="noopener">这里简单说一下last和break的区别</a>，<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  _;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> /weixin &#123;</span><br><span class="line">      <span class="attribute">rewrite</span> /weixin/(.*) /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">      <span class="attribute">proxy_pass</span> http://127.0.0.1:8180/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>rewrite break 重写后，直接使用当前资源，不再执行location里余下的语句，完成本次请求，地址栏url不变<br>rewrite last 重写后，马上发起一个新的请求，再次进入server块，重试location匹配，超过10次匹配不到报500错误，地址栏url不变</p></blockquote><h1 id="werobot"><a href="#werobot" class="headerlink" title="werobot"></a>werobot</h1><ul><li>看着更成熟一点，后面再看，<a href="https://werobot.readthedocs.io/zh_CN/latest/replies.html" target="_blank" rel="noopener">这里</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
            <tag> 公众号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python把bmp和png转换成jpg</title>
      <link href="/2018/08/16/python%E6%8A%8Abmp%E8%BD%AC%E6%8D%A2%E6%88%90jpg/"/>
      <url>/2018/08/16/python%E6%8A%8Abmp%E8%BD%AC%E6%8D%A2%E6%88%90jpg/</url>
      
        <content type="html"><![CDATA[<ul><li>反正已经加到这么晚了，索性再水一篇博客再走</li><li>如何把bmp和png批量转换成jpg</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">"."</span>):</span><br><span class="line">    <span class="keyword">for</span> bmpfig <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> bmpfig.endswith(<span class="string">'.bmp'</span>) <span class="keyword">and</span> <span class="keyword">not</span> bmpfig.endswith(<span class="string">'.png'</span>):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        bmpfig = os.path.join(root, bmpfig)</span><br><span class="line">        newfigname = bmpfig[:<span class="number">-4</span>] + <span class="string">".jpg"</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"converting from"</span>, bmpfig, <span class="string">"to"</span>, newfigname</span><br><span class="line">        img = Image.open(bmpfig)</span><br><span class="line">        img = img.convert(<span class="string">'RGB'</span>)  <span class="comment"># for png</span></span><br><span class="line">        img.save(newfigname, format=<span class="string">'jpeg'</span>, quality=<span class="number">95</span>)</span><br><span class="line">        img.close()</span><br><span class="line">        os.remove(bmpfig)</span><br></pre></td></tr></table></figure><ul><li>这段代码贴在某个文件夹下，运行之后会递归地把所有bmp转换成jpg</li><li>其中，quality是生成jpg的质量，quality越大，jpg文件越大，图片细节越清晰，取值0-100</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一个vscode的bug</title>
      <link href="/2018/08/08/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AAvscode%E7%9A%84bug/"/>
      <url>/2018/08/08/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AAvscode%E7%9A%84bug/</url>
      
        <content type="html"><![CDATA[<h1 id="啰嗦一下"><a href="#啰嗦一下" class="headerlink" title="啰嗦一下"></a>啰嗦一下</h1><ul><li>在mac下，使用vscode，使用汉字输入法，删除完后，会多一个退格符！而且这个退格符默认是不可见的！</li><li>过年在家写论文的时候，就发现xetex莫名其妙不能编译，说是多了字符，苦于不知道这个字符是啥，也不知道怎么描述这个现象，一直没有找到原因。</li><li>就在今天，我配置博客的搜索的时候，又被这个bug给搞了，看别人的解释说是生成的检索文件里，多了BS(unicode)这个字符，终于顺着这个BS，我找到了困扰我半年的bug。</li><li>十分激动，以至于我一改冷淡的文风，在大半夜里啰嗦这么多。</li></ul><h1 id="vscode并不打算修"><a href="#vscode并不打算修" class="headerlink" title="vscode并不打算修"></a>vscode并不打算修</h1><ul><li>参考<a href="https://juejin.im/entry/5a806ddef265da4e84092eeb" target="_blank" rel="noopener">这里</a>的说明。<blockquote><p>vscode底层使用了electron，这是electron的bug，electron不解决这个问题，vscode就不会解决。<br>electron底层使用了chromium， 这是chromium的bug，chromium不解决，elctron就无法解决。</p></blockquote></li><li>非常稳，于是<a href="https://github.com/Microsoft/vscode/issues/37114" target="_blank" rel="noopener">这个bug还是open的</a>。</li></ul><h1 id="补救措施"><a href="#补救措施" class="headerlink" title="补救措施"></a>补救措施</h1><ul><li>首先让这个字符显示出来</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"editor.renderControlCharacters": true</span><br></pre></td></tr></table></figure><ul><li>使用插件 Remove backspace control character，并如下配置，这样在保存文件的时候，会自动帮你删除这些控制符</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“editor.formatOnSave”: true</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 里的字符串编码问题</title>
      <link href="/2018/08/03/python-%E9%87%8C%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>/2018/08/03/python-%E9%87%8C%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="丑陋的编码"><a href="#丑陋的编码" class="headerlink" title="丑陋的编码"></a>丑陋的编码</h3><p>python中有很多地方涉及到编码，简直丑陋</p><ul><li>文本编辑器可以选编码格式，一般都位于右下角</li><li>python文件开头有<code>#coding: utf-8</code></li><li><p>python还有默认encoding</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure></li><li><p>字符串前有u和b</p></li></ul><h3 id="一些编码知识"><a href="#一些编码知识" class="headerlink" title="一些编码知识"></a><a href="https://blog.ernest.me/post/python-setdefaultencoding-unicode-bytes" target="_blank" rel="noopener">一些编码知识</a></h3><ul><li>unicode是个大集合，支持百万级别的字符，但unicode只是给每个字符进行了一个编码，没有给具体实现</li><li>utf-8是unicode的一种实现形式，除此之外还有utf-16等等</li><li>gb系列的编码和unicode没啥关系，GB2312 &lt; GBK &lt; GB18030</li><li>windows中文版系统的默认编码是gbk的</li></ul><h3 id="一些python的知识"><a href="#一些python的知识" class="headerlink" title="一些python的知识"></a>一些python的知识</h3><ul><li>python里有三种string类，unicode（text string）、str（byte string）、basestring。basestring是前两个的父类</li><li>python里，字节串就等同于字符串</li><li>在类型转换或和文本拼接时，需要确定字节串的编码，不然就不能转换。python2的年代，默认的encoding是ASCII，放现在当然是不够用的</li><li>python3终于把默认的编码变成unicode</li><li>str转换成unicode，在python里叫decode，unicode转换成str称之为encode</li><li>打印unicode是不会出错的，这就是python3的厉害，打印str的话，就要看打印编码式和你显示的编码是否一致了</li></ul><h3 id="这些编码的区别"><a href="#这些编码的区别" class="headerlink" title="这些编码的区别"></a>这些编码的区别</h3><ul><li>文本编码格式：只和你的编辑器有关，负责把你的python文件按这种格式保存</li><li>python文件开头的coding：告诉python解释器，文件是按什么格式保存的，所以要与你实际文件的保存格式一致。如果不写的话，python文件里只能有ASCII</li><li>默认的encoding格式就是你要告诉系统，字节码以哪种格式转换成unicode</li><li>u是指后面引号里的内容是unocide，b是指引号里面的内容是str，所以python3里写u是没用的，python2里写b是没用的</li></ul><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><ul><li>换python3</li><li><a href="https://blog.ernest.me/post/python-setdefaultencoding-unicode-bytes" target="_blank" rel="noopener">如果换不了python3</a><ul><li>所有 text string 都应该是 unicode 类型，而不是 str</li><li>在需要转换的时候，显式转换。从字节解码成文本，用 var.decode(encoding)，从文本编码成字节，用 var.encode(encoding)</li><li>从外部读取数据时，默认它是字节，然后 decode 成需要的文本；同样的，当需要向外部发送文本时，encode 成字节再发送。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编码 </tag>
            
            <tag> 字符串 </tag>
            
            <tag> unicode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>看过的论文汇总</title>
      <link href="/2018/07/17/%E7%9C%8B%E8%BF%87%E7%9A%84%E8%AE%BA%E6%96%87%E6%B1%87%E6%80%BB/"/>
      <url>/2018/07/17/%E7%9C%8B%E8%BF%87%E7%9A%84%E8%AE%BA%E6%96%87%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<p>论文常看常忘，还是把看过的先记下来，再补充总结</p><h1 id="NET"><a href="#NET" class="headerlink" title="NET"></a>NET</h1><h2 id="pvanet"><a href="#pvanet" class="headerlink" title="pvanet"></a>pvanet</h2><ul><li>pvanet是为了实时目标识别提出来的网络，用来提取特征的，用了很多方法来减小计算量，看起来像个大杂烩</li><li>C.ReLU，由于观察到浅层的网络卷基层总是存在互补层，所以直接把卷积取反再concatenate，可以减少一半的计算量</li><li>Inception，使用了inception unit，用两个3*3的卷集合替代了5*5的卷积，也是为了减小计算量</li><li>HypteNet多层融合，融合哪两层是比较讲究的，选择不好的话，会白白增加计算量。这里作者使用了最后输出层2倍和4倍多layer进行融合，以2倍的layer为标准，分别pooling和差值upscale。</li><li>ResNet，再inception unit里也用了残差网络。</li><li>整个网络结构如下表</li></ul><p><img src="/images/62552972.jpg" alt="pvanet"></p><ul><li>pvanet里还提到了一种学习策略，动态调整学习率，如果一定的迭代次数内，loss下降小于阈值，就说明是on plateau，这时候就降低学习率。<a href="https://github.com/BVLC/caffe/pull/4606/files" target="_blank" rel="noopener">在github上有人实现</a>，只不过没有被merge进来。</li></ul><h2 id="mobilenet"><a href="#mobilenet" class="headerlink" title="mobilenet"></a>mobilenet</h2><h2 id="shufflenet"><a href="#shufflenet" class="headerlink" title="shufflenet"></a>shufflenet</h2><ul><li>mobile和shuffle可以看<a href="/2018/05/13/mobileNet和shuffleNet/" title="以前写的这篇">以前写的这篇</a></li></ul><h2 id="densenet"><a href="#densenet" class="headerlink" title="densenet"></a>densenet</h2><ul><li>每一层都有来自前面所有层的输入，L个层，就是$\frac{L*(L+1)}{2}$个连接。</li><li>Each layer has direct access to the gradients from the loss function and the original input signal, leading to an implicit deep supervision.</li><li>resNet中，l层的输出是l-1的非线性加l-1</li></ul><script type="math/tex; mode=display">x_l = H_l(x_{l-1}) + x_{l-1}</script><ul><li>denseNet中，是直接做的concatenate</li></ul><script type="math/tex; mode=display">x_l = H_l([x_0, x_1, ..., x_{l-1}])</script><ul><li>denseNet中包含三个dense block，如下图所示（盗图自<a href="https://blog.csdn.net/u014380165/article/details/75142664" target="_blank" rel="noopener">这里</a>）</li></ul><p><img src="/images/25005397.jpg" alt="dense block"></p><ul><li>整个网络的结构图如下</li></ul><p><img src="/images/51626114.jpg" alt="dense net"></p><ul><li><p>由于denseNet是concatenate，所以到最后一层的时候，channel会异常地大，所以每个3*3卷积前，会有个1*1的bottle neck层，减小channel数量</p></li><li><p>dense block之间还有transition层，也是用1*1的卷积减小channel数</p></li></ul><h1 id="Attention-和-CTC"><a href="#Attention-和-CTC" class="headerlink" title="Attention 和 CTC"></a>Attention 和 CTC</h1><p>Attention is all you need<br>CTC</p><h1 id="text-localization"><a href="#text-localization" class="headerlink" title="text localization"></a>text localization</h1><h2 id="EAST"><a href="#EAST" class="headerlink" title="EAST"></a>EAST</h2><ul><li>用于文本检测，输出可以是四边形或rotated box</li></ul><p><img src="/images/14151415.jpg" alt="east"></p><ul><li>最左边用的是PVANet，也可以换成其他ResNet什么的</li><li>然后中间是特征融合，这里作者借鉴了U-net的做法，用到了unpool，原因是文字有大有小，需要有不同的感受野</li><li>最后是输出层，包括score map和位置信息，输出的size是原图的1/4大小</li><li>score对应的ground truth: 是将原始的bounding box按照短边长度r向内收缩了0.3r的距离。不懂为什么要这么做</li><li>针对bounding box内部的每个点，计算他们到上下左右四个边的距离，并且计算角度。针对bounding box外部的点，ground truth置为0</li><li>loss包含两个部分，score map的loss和位置坐标的loss</li><li>score的loss使用的是balanced cross entropy，可以配合正负样本不均衡的情况</li></ul><script type="math/tex; mode=display">L_s = -\beta Y^* log(\hat{Y}) - (1-\beta)(1-Y^*)log(1-\hat{Y})</script><script type="math/tex; mode=display">\beta = 1 - \frac{\sum_{y^* \in Y^*} y^*}{|Y^*|}</script><ul><li>位置坐标的loss我只看了rotated box的，又可以分成两个部分，iou的loss和角度的loss，角度的loss前面会乘个系数，10或者20，是个超参数</li></ul><h2 id="InceptText-from-Alibaba-IJCAI2018"><a href="#InceptText-from-Alibaba-IJCAI2018" class="headerlink" title="InceptText from Alibaba, IJCAI2018"></a>InceptText from Alibaba, IJCAI2018</h2><h1 id="text-recognition"><a href="#text-recognition" class="headerlink" title="text recognition"></a>text recognition</h1><p>FAN<br>Edit Probability</p><h1 id="OCR-end2end"><a href="#OCR-end2end" class="headerlink" title="OCR end2end"></a>OCR end2end</h1><p>an end to end textspotter with explicit aligment and attention, ICCV2018<br>Textbox++</p><h1 id="OCR-综述"><a href="#OCR-综述" class="headerlink" title="OCR 综述"></a>OCR 综述</h1><p>Text Detection and Recognition in Imagery: A Survey</p><h1 id="Character-Segmentation"><a href="#Character-Segmentation" class="headerlink" title="Character Segmentation"></a>Character Segmentation</h1><p>A Gradient Vector Flow-Based Method for Video Character Segmentation, ICDAR201z1</p><h1 id="GAN-and-Draw"><a href="#GAN-and-Draw" class="headerlink" title="GAN and Draw"></a>GAN and Draw</h1><ul><li>GAN可以看<a href="/2019/01/27/GAN总结/" title="GAN总结">GAN总结</a></li><li>draw</li></ul><h1 id="General-CV"><a href="#General-CV" class="headerlink" title="General CV"></a>General CV</h1><h2 id="YOLO"><a href="#YOLO" class="headerlink" title="YOLO"></a>YOLO</h2><h2 id="SSD"><a href="#SSD" class="headerlink" title="SSD"></a>SSD</h2><h2 id="Faster-rcnn"><a href="#Faster-rcnn" class="headerlink" title="Faster rcnn"></a>Faster rcnn</h2><h2 id="mask-rcnn"><a href="#mask-rcnn" class="headerlink" title="mask rcnn"></a>mask rcnn</h2><h2 id="FCN"><a href="#FCN" class="headerlink" title="FCN"></a>FCN</h2><ul><li>FCN里用到了三个技术，全卷积、上采样和跳层链接</li><li>全卷积：一般的CNN最后会有全连接层，把二维的图像压缩成以为的向量，FCN把全连接换成了卷积，实际上计算上是等价的。</li></ul><p><img src="/images/26480255.jpg" alt="fcn"></p><ul><li>上采样：或者叫反卷积、转置卷积（Caffe和Kera里叫Deconvolution，tensorflow里叫conv_transpose）。</li><li>跳层连接：将全卷积之后的结果直接上采样得到的结果是很粗糙的，所以用不同池化层的结果进行上采样之后来优化输出。</li></ul><p><img src="/images/48652183.jpg" alt="fcn2"></p><ul><li>原文感觉不好看，主要参考了<a href="https://blog.csdn.net/junparadox/article/details/52610744" target="_blank" rel="noopener">这里</a></li></ul><h2 id="deeplab"><a href="#deeplab" class="headerlink" title="deeplab"></a>deeplab</h2><ul><li>deeplab可以看<a href="/2018/06/19/deeplab/" title="以前写的这篇">以前写的这篇</a></li></ul><h1 id="Visualization"><a href="#Visualization" class="headerlink" title="Visualization"></a>Visualization</h1><p>Understanding neural Networks Through Deep Visualization</p>]]></content>
      
      
      <categories>
          
          <category> caffe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 还债 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>write a shell in c</title>
      <link href="/2018/07/16/write-a-shell-in-c/"/>
      <url>/2018/07/16/write-a-shell-in-c/</url>
      
        <content type="html"><![CDATA[<p>源文章标题取得很大，<a href="https://brennan.io/2015/01/16/write-a-shell-in-c/" target="_blank" rel="noopener">write a shell in c</a>。相关的内容总结如下。</p><ul><li><p>fork(), exec() and waitpid() are defined by the POSIX standard, and Windows is not POSIX-compliant. In order to have POSIX compliance under Windows, you should compile under Cygwin.</p></li><li><p>fork, exec, chdir are in unistd.h(unix std); execvp is in stdlib</p></li><li><p>system命令相当于 fork + exec + waitpid</p></li><li><p>windows也提供了一个chdir函数，叫_chdir，在direct.h里</p></li><li><p>cc来自于Unix的c语言编译器，是 c compiler 的缩写。gcc来自Linux世界，是GNU compiler collection 的缩写，注意这是一个编译器集合，不仅仅是c或c++</p></li><li><p>strtok()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> sentence[]=<span class="string">"192.168...9...14"</span>;</span><br><span class="line"><span class="keyword">char</span> *token=strtok(sentence,<span class="string">"."</span>);</span><br><span class="line"><span class="keyword">while</span>(token!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;token&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">  token=strtok(<span class="literal">NULL</span>,<span class="string">"."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在gcc编译器中，对标准库进行了扩展，加入了一个getline函数。会自动malloc, realloc，所以用的话，需要自己手动free，好像没啥人用，参考<a href="https://www.cnblogs.com/xkfz007/archive/2012/08/01/2618366.html" target="_blank" rel="noopener">这里</a></p></li><li><p>我用system代替了fork等，于是有了<a href="https://github.com/zjyfdu/lsh/blob/master/src/%E6%BA%90.cpp" target="_blank" rel="noopener">window版</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> caffe </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置评论、搜索和代码</title>
      <link href="/2018/07/06/%E9%85%8D%E7%BD%AE%E8%AF%84%E8%AE%BA%E3%80%81%E6%90%9C%E7%B4%A2%E5%92%8C%E4%BB%A3%E7%A0%81/"/>
      <url>/2018/07/06/%E9%85%8D%E7%BD%AE%E8%AF%84%E8%AE%BA%E3%80%81%E6%90%9C%E7%B4%A2%E5%92%8C%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h1><h2 id="gitment"><a href="#gitment" class="headerlink" title="gitment"></a>gitment</h2><ul><li>gitment是挂在github的issue上，从github给的api上提交和拉取评论，然后界面（应该）是作者自己做的。</li><li>当然好处是只能github账号登陆，坏处的话，issue会很乱吧。。。</li><li>具体操作：可以看<a href="http://xichen.pub/2018/01/31/2018-01-31-gitment/" target="_blank" rel="noopener">这里</a>，就是先注册个application，然后把id、secret什么的填到next的config里就好。</li><li>坑：Error：validation failed。原因是作者的方法在create an issue时，提交的id号太长了。。。方法是在<code>next/_third-party/comments/gitment.swig</code>里，修改<code>id: window.location.pathname</code>为<code>id: &#39;&#39;</code></li></ul><h2 id="valine"><a href="#valine" class="headerlink" title="valine"></a><a href="https://valine.js.org/" target="_blank" rel="noopener">valine</a></h2><ul><li>是我目前见到过的唯一支持匿名评论的，也是需要注册valine的账号</li></ul><h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><h2 id="Swiftype"><a href="#Swiftype" class="headerlink" title="Swiftype"></a><del>Swiftype</del></h2><ul><li><del>去注册账号，拿到swiftype_key，写道next的配置里就好</del></li><li>后来才这道这个是要收费的，不要用了</li></ul><h1 id="local-search"><a href="#local-search" class="headerlink" title="local search"></a>local search</h1><ul><li><code>npm install --save hexo-generator-search</code></li><li>在主题的config里，local_search的enable要打开</li><li>在hexo的config里，写上</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">  field:</span> <span class="string">post(或者all)</span></span><br></pre></td></tr></table></figure><ul><li>最后<code>hexo g</code>就可以了</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><ul><li>修改hexo的配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  auto_detect:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  tab_replace:</span></span><br></pre></td></tr></table></figure><ul><li>然后在next的配置里修改代码配色</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_theme:</span> <span class="string">night</span> <span class="string">bright</span></span><br></pre></td></tr></table></figure><ul><li>写代码的时候，要注意在```后加上代码类型如c、python、yml等等</li></ul><h1 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h1><ul><li>在next的config里，enable mathjax</li><li>行内公式用$$<code>，行间公式用</code>$$$</li><li>但是还有些问题，比如说公式里有两个<code>_</code>，hexo会优先按markdown给你解析成斜体，所以latex公式还不能直接抄，有些富豪需要转义</li><li>当然，也有优雅的方法，换个render</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><ul><li>更换完了行内公式还是有问题，参考<a href="https://www.jianshu.com/p/e8d433a2c5b7" target="_blank" rel="noopener">这里</a></li><li>修改kramed的转义规则，文件为<code>/node_modules/kramed/lib/rules/inline.js</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">escape</span>: <span class="regexp">/^\\([`*\[\]()# +\-.!_&gt;])/</span>,</span><br><span class="line">em: <span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure><ul><li>mathjax公式粗体，放弃<code>\bm{}</code>，使用<code>\boldsymbol{}</code></li></ul><h1 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-filter-flowchart</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo-next </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openCV 总结</title>
      <link href="/2018/07/04/openCV-%E6%80%BB%E7%BB%93/"/>
      <url>/2018/07/04/openCV-%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="一些图像操作"><a href="#一些图像操作" class="headerlink" title="一些图像操作"></a>一些图像操作</h1><ul><li><a href="http://www.opencv.org.cn/opencvdoc/2.3.2/html/doc/tutorials/imgproc/erosion_dilatation/erosion_dilatation.html" target="_blank" rel="noopener">腐蚀与膨胀(Eroding and Dilating)</a></li></ul><blockquote><p>膨胀腐蚀都是针对亮色区域说的，膨胀是取最大值，腐蚀是最小值，实现的话，最直接的方法是四个for循环</p></blockquote><ul><li><p><strong>开运算</strong>：腐蚀+膨胀，可以去除图中的小白点；<strong>闭运算</strong>：膨胀+腐蚀，可以去除图片中的小黑点</p></li><li><p><strong>top hat</strong>：原图-开，得到的是开运算中被去掉的小白点；<strong>black hat</strong>：原图-闭，得到闭运算中去掉的小黑点</p></li><li><p><a href="https://www.cnblogs.com/skyfsm/p/6902524.html" target="_blank" rel="noopener">霍夫线变换</a></p></li><li><p>直方图均衡化</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cv::equalizeHist(srcmat, dstmat);</span><br><span class="line"></span><br><span class="line">cv::<span class="function">Mat <span class="title">lookup</span><span class="params">(<span class="number">1</span>, <span class="number">256</span>, CV_8U)</span></span>;</span><br><span class="line"><span class="comment">// p[i] 是强度小于等于i的比例</span></span><br><span class="line">lookup.at&lt;uchar&gt;(i) = <span class="keyword">static_cast</span>&lt;uchar&gt;(<span class="number">255.0</span> * p[i]);</span><br><span class="line">dstmat = applyLookUp(srcmat, lookup);</span><br></pre></td></tr></table></figure><h1 id="C的接口"><a href="#C的接口" class="headerlink" title="C的接口"></a>C的接口</h1><ul><li>字体的说明参考<a href="https://blog.csdn.net/longzaitianya1989/article/details/8121286" target="_blank" rel="noopener">这里</a></li><li>cvReleaseImage，只是将IplImage*型的变量值赋为NULL，而这个变量本身还是存在的并且在内存中的存储位置不变</li><li><code>iplimg-&gt;imageSize == iplimg-&gt;height * iplimg-&gt;widthStep</code>，而不是f<code>rame-&gt;height * frame-&gt;width</code></li><li><code>iplimg-&gt;imageData</code>是对齐的内存，<a href="https://docs.opencv.org/3.4/d6/d5b/structIplImage.html" target="_blank" rel="noopener">官方文档</a>说<code>iplimg-&gt;imageDataOrigin</code>是没有对齐的内存，还没有验证过</li><li>默认的存储方式是BGR，不是RGB</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读图</span></span><br><span class="line">IplImage* iplimg = cvLoadImage(<span class="string">"heels.jpg"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把cv::mat改为c的图</span></span><br><span class="line">*iplimg = IplImage(matimg);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建新图，最后一个参数是channel数</span></span><br><span class="line">IplImage* iplimg=cvCreateImage(cvSize(<span class="number">360</span>, <span class="number">640</span>), IPL_DEPTH_8U, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示图</span></span><br><span class="line">cvNamedWindow(<span class="string">"img"</span>, <span class="number">0</span>);  </span><br><span class="line">cvShowImage(<span class="string">"img"</span>, iplimg);  </span><br><span class="line">cvWaitKey(<span class="number">0</span>);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印字</span></span><br><span class="line">CvFont font;</span><br><span class="line">cvInitFont(&amp;font, CV_FONT_HERSHEY_COMPLEX, <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>);  </span><br><span class="line">cvPutText(iplimg, <span class="string">"This is a picture named lena!"</span>, cvPoint(<span class="number">50</span>, <span class="number">50</span>), &amp;font, CV_RGB(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存图</span></span><br><span class="line">cvSaveImage(<span class="string">"c:\\test1.jpg"</span>, iplimg);</span><br></pre></td></tr></table></figure><h1 id="C-的接口"><a href="#C-的接口" class="headerlink" title="C++的接口"></a>C++的接口</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读图</span></span><br><span class="line">cv::Mat matimg = cv::imread (<span class="string">"heels.jpg"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把IplImage改为c++接口，第二个参数是需不需要拷贝，默认是false</span></span><br><span class="line">matimg = cv::Mat(iplimg, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建新图，CV_8UC3是三通道，CV_8UC1是单通道</span></span><br><span class="line">cv::Mat matimg(2, 2, CV_8UC3, Scalar(0,255,0));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示图</span></span><br><span class="line">cv::nameWindow(<span class="string">"img"</span>);</span><br><span class="line">cv::imshow(<span class="string">"img"</span>, matimg);</span><br><span class="line">cv::waitKey(<span class="number">-1</span>);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印字</span></span><br><span class="line"><span class="comment">// void putText(Mat&amp; img, const string&amp; text, Point org, int fontFace, double fontScale, Scalar color, int thickness=1, int lineType=8, bool bottomLeftOrigin=false )</span></span><br><span class="line">cv::putText(image, <span class="string">"opencv"</span>, Point(<span class="number">5</span>,<span class="number">100</span>), FONT_HERSHEY_DUPLEX, <span class="number">1</span>, Scalar(<span class="number">0</span>,<span class="number">143</span>,<span class="number">143</span>), <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存图，后缀名决定了图片对编码格式</span></span><br><span class="line">cv::imwrite(<span class="string">"c:\\test1.jpg"</span>, matimg);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历图像</span></span><br><span class="line"><span class="comment">// Vec3b表示三通道usigned char类型，</span></span><br><span class="line"><span class="comment">// 还可以有2通道和4通道，类型还可以有f(loat)、i(nt)、d(ouble)、s(hort)、w(unsigned short)</span></span><br><span class="line"><span class="comment">// typedef Vec&lt;float, 2&gt; Vec2f;</span></span><br><span class="line">matimg.at&lt;cv::Vec3b&gt;(j,i)[channel] = value;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还可以直接取每一行对首地址</span></span><br><span class="line">uchar* data = matimg.ptr&lt;uchar&gt;(j);</span><br></pre></td></tr></table></figure><h1 id="头文件分析"><a href="#头文件分析" class="headerlink" title="头文件分析"></a>头文件分析</h1><ul><li>一般直接包含这三个头文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;opencv2/core/core.hpp&gt;</span><br><span class="line">#include&lt;opencv2/imgproc/imgproc.hpp&gt;</span><br><span class="line">#include&lt;opencv2/highgui/highgui.hpp&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++文件复制</title>
      <link href="/2018/07/03/c-%E6%96%87%E4%BB%B6%E5%A4%8D%E5%88%B6/"/>
      <url>/2018/07/03/c-%E6%96%87%E4%BB%B6%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">if</span> (argc &lt; <span class="number">3</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"filename missed"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ifstream <span class="title">in</span><span class="params">(argv[<span class="number">1</span>], ios::binary | ios::in)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!in)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"source file open failed"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ofstream <span class="title">out</span><span class="params">(argv[<span class="number">2</span>], ios::binary | ios::out)</span></span>; <span class="comment">//打开文件用于写</span></span><br><span class="line"><span class="keyword">if</span> (!out) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"New file open error."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">in.close(); <span class="comment">//打开的文件一定要关闭</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], argv[<span class="number">2</span>])==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"the src file can't be same with dst file"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">2048</span>];</span><br><span class="line"><span class="keyword">while</span> (in)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//read从in流中读取2048字节，放入buf数组中，同时文件指针向后移动2048字节</span></span><br><span class="line"><span class="comment">//若不足2048字节遇到文件结尾，则以实际提取字节读取。</span></span><br><span class="line">in.read(buf, <span class="number">2048</span>);</span><br><span class="line"><span class="comment">//gcount()用来提取读取的字节数，write将buf中的内容写入out流。</span></span><br><span class="line">out.write(buf, in.gcount());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//char c;</span></span><br><span class="line"><span class="comment">//while (in.get(c))&#123;</span></span><br><span class="line"><span class="comment">//out.put(c);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">in.close();</span><br><span class="line">out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>visual studio 13使用boost</title>
      <link href="/2018/06/22/visual-studio-13%E4%BD%BF%E7%94%A8boost/"/>
      <url>/2018/06/22/visual-studio-13%E4%BD%BF%E7%94%A8boost/</url>
      
        <content type="html"><![CDATA[<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ul><li>先去<a href="http://www.boost.org/" target="_blank" rel="noopener">boost官方网站</a>中查看boost的最新版本，然后去相应的链接地址进行下载</li><li>在你创建好的工程项目中，选择属性对话框，然后在VC++目录选项中，把boost路径添加到包含目录和库目录中</li><li>首选运行bootstra.bat，如果没有cl命令的话，查看<a href="https://blog.csdn.net/zhidebushizhan/article/details/51396670" target="_blank" rel="noopener">这里</a>，我是这个命令<code>call &quot;%VS120COMNTOOLS%&quot;vsvars32.bat</code>解决问题</li><li>生成动态链接的静态库<code>bjam address-model=64 link= static  threading=multi  variant=release  runtime-link=shared  stage</code></li></ul><h3 id="困惑的地方"><a href="#困惑的地方" class="headerlink" title="困惑的地方"></a>困惑的地方</h3><ul><li>vs里面的vc++目录和下面的c++目录、连接器目录，什么关系啊，能自动加载子目录？</li></ul><blockquote><p>引用自<a href="https://www.cnblogs.com/JMLiu/p/7954630.html" target="_blank" rel="noopener">这里</a>，<br>VC++ Directories是一个Windows环境变量，C/C++是命令行参数，这是本质区别；<br>但是相同的项，也就是VC++ Directories中的include directories 对应到C/C++中的addition include directories 是一样的效果，也就是说效果一样。同样是命令行参数的还有Link设置，Link设置中的 addition library directories对应到VC++ Directories 中的library directories，也就是说，效果是相同的。</p></blockquote><ul><li>bjam里面的debug release、static share是啥。。。</li></ul><blockquote><p>编译调试版本加 debug</p><p>编译发布版本加  release</p><p>编译静态链接库：link=static runtime-link=static</p><p>编译动态库：link=shared runtime-link=shared</p><p>静态库只是需要的文件编译到exe/so中，而且shared的是否用户也要存在dll,所以static是更安全的方式；当然组件式开发和升级的软件用shared方式更加合适</p></blockquote><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://blog.csdn.net/blues1021/article/details/45034133" target="_blank" rel="noopener">https://blog.csdn.net/blues1021/article/details/45034133</a></li><li><a href="https://blog.csdn.net/qingyulove/article/details/78863457" target="_blank" rel="noopener">https://blog.csdn.net/qingyulove/article/details/78863457</a></li><li><a href="https://blog.csdn.net/zhidebushizhan/article/details/51396670" target="_blank" rel="noopener">https://blog.csdn.net/zhidebushizhan/article/details/51396670</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算感受野</title>
      <link href="/2018/06/20/%E8%AE%A1%E7%AE%97%E6%84%9F%E5%8F%97%E9%87%8E/"/>
      <url>/2018/06/20/%E8%AE%A1%E7%AE%97%E6%84%9F%E5%8F%97%E9%87%8E/</url>
      
        <content type="html"><![CDATA[<ul><li>feature map的计算公式为<code>outsize = (insize - fsize + 2*pad) / stride + 1</code></li><li>stride 的计算公式为<code>totstride = totstride * stride</code>，这两个公式都是从前往后算</li><li>receptive field <code>RF = ((RF -1)* stride) + fsize</code>，这个要从后往前算</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line">net_struct = &#123;<span class="string">'alexnet'</span>: &#123;<span class="string">'net'</span>:[[<span class="number">11</span>,<span class="number">4</span>,<span class="number">0</span>],[<span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span>],[<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span>]],</span><br><span class="line">                   <span class="string">'name'</span>:[<span class="string">'conv1'</span>,<span class="string">'pool1'</span>,<span class="string">'conv2'</span>,<span class="string">'pool2'</span>,<span class="string">'conv3'</span>,<span class="string">'conv4'</span>,<span class="string">'conv5'</span>,<span class="string">'pool5'</span>]&#125;,</span><br><span class="line">       <span class="string">'vgg16'</span>: &#123;<span class="string">'net'</span>:[[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                        [<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>]],</span><br><span class="line">                 <span class="string">'name'</span>:[<span class="string">'conv1_1'</span>,<span class="string">'conv1_2'</span>,<span class="string">'pool1'</span>,<span class="string">'conv2_1'</span>,<span class="string">'conv2_2'</span>,<span class="string">'pool2'</span>,<span class="string">'conv3_1'</span>,<span class="string">'conv3_2'</span>,</span><br><span class="line">                         <span class="string">'conv3_3'</span>, <span class="string">'pool3'</span>,<span class="string">'conv4_1'</span>,<span class="string">'conv4_2'</span>,<span class="string">'conv4_3'</span>,<span class="string">'pool4'</span>,<span class="string">'conv5_1'</span>,<span class="string">'conv5_2'</span>,<span class="string">'conv5_3'</span>,<span class="string">'pool5'</span>]&#125;,</span><br><span class="line">       <span class="string">'zf-5'</span>:&#123;<span class="string">'net'</span>: [[<span class="number">7</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>],[<span class="number">5</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>]],</span><br><span class="line">               <span class="string">'name'</span>: [<span class="string">'conv1'</span>,<span class="string">'pool1'</span>,<span class="string">'conv2'</span>,<span class="string">'pool2'</span>,<span class="string">'conv3'</span>,<span class="string">'conv4'</span>,<span class="string">'conv5'</span>]&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#[3,1,1] stands for filter_size, stride, padding</span></span><br><span class="line"></span><br><span class="line">imsize = <span class="number">224</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outFromIn</span><span class="params">(isz, net, layernum)</span>:</span></span><br><span class="line">    totstride = <span class="number">1</span></span><br><span class="line">    insize = isz</span><br><span class="line">    <span class="keyword">for</span> layer <span class="keyword">in</span> range(layernum):</span><br><span class="line">        fsize, stride, pad = net[layer]</span><br><span class="line">        outsize = (insize - fsize + <span class="number">2</span>*pad) / stride + <span class="number">1</span></span><br><span class="line">        insize = outsize</span><br><span class="line">        totstride = totstride * stride</span><br><span class="line">    <span class="keyword">return</span> outsize, totstride</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inFromOut</span><span class="params">(net, layernum)</span>:</span></span><br><span class="line">    RF = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> layer <span class="keyword">in</span> reversed(range(layernum)):</span><br><span class="line">        fsize, stride, pad = net[layer]</span><br><span class="line">        RF = ((RF <span class="number">-1</span>)* stride) + fsize</span><br><span class="line">    <span class="keyword">return</span> RF</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"layer output sizes given image = %dx%d"</span> % (imsize, imsize)</span><br><span class="line">    <span class="keyword">for</span> net <span class="keyword">in</span> net_struct.keys():</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'************net structrue name is %s**************'</span>% net</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(net_struct[net][<span class="string">'net'</span>])):</span><br><span class="line">            p = outFromIn(imsize,net_struct[net][<span class="string">'net'</span>], i+<span class="number">1</span>)</span><br><span class="line">            rf = inFromOut(net_struct[net][<span class="string">'net'</span>], i+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"Layer Name = %s, Output size = %3d, Stride = % 3d, RF size = %3d"</span> % (net_struct[net][<span class="string">'name'</span>][i], p[<span class="number">0</span>], p[<span class="number">1</span>], rf)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">layer output sizes given image = 224x224</span><br><span class="line">************net structrue name is vgg16**************</span><br><span class="line">Layer Name = conv1_1, Output size = 224, Stride =   1, RF size =   3</span><br><span class="line">Layer Name = conv1_2, Output size = 224, Stride =   1, RF size =   5</span><br><span class="line">Layer Name = pool1, Output size = 112, Stride =   2, RF size =   6</span><br><span class="line">Layer Name = conv2_1, Output size = 112, Stride =   2, RF size =  10</span><br><span class="line">Layer Name = conv2_2, Output size = 112, Stride =   2, RF size =  14</span><br><span class="line">Layer Name = pool2, Output size =  56, Stride =   4, RF size =  16</span><br><span class="line">Layer Name = conv3_1, Output size =  56, Stride =   4, RF size =  24</span><br><span class="line">Layer Name = conv3_2, Output size =  56, Stride =   4, RF size =  32</span><br><span class="line">Layer Name = conv3_3, Output size =  56, Stride =   4, RF size =  40</span><br><span class="line">Layer Name = pool3, Output size =  28, Stride =   8, RF size =  44</span><br><span class="line">Layer Name = conv4_1, Output size =  28, Stride =   8, RF size =  60</span><br><span class="line">Layer Name = conv4_2, Output size =  28, Stride =   8, RF size =  76</span><br><span class="line">Layer Name = conv4_3, Output size =  28, Stride =   8, RF size =  92</span><br><span class="line">Layer Name = pool4, Output size =  14, Stride =  16, RF size = 100</span><br><span class="line">Layer Name = conv5_1, Output size =  14, Stride =  16, RF size = 132</span><br><span class="line">Layer Name = conv5_2, Output size =  14, Stride =  16, RF size = 164</span><br><span class="line">Layer Name = conv5_3, Output size =  14, Stride =  16, RF size = 196</span><br><span class="line">Layer Name = pool5, Output size =   7, Stride =  32, RF size = 212</span><br><span class="line">************net structrue name is zf-5**************</span><br><span class="line">Layer Name = conv1, Output size = 112, Stride =   2, RF size =   7</span><br><span class="line">Layer Name = pool1, Output size =  56, Stride =   4, RF size =  11</span><br><span class="line">Layer Name = conv2, Output size =  28, Stride =   8, RF size =  27</span><br><span class="line">Layer Name = pool2, Output size =  14, Stride =  16, RF size =  43</span><br><span class="line">Layer Name = conv3, Output size =  14, Stride =  16, RF size =  75</span><br><span class="line">Layer Name = conv4, Output size =  14, Stride =  16, RF size = 107</span><br><span class="line">Layer Name = conv5, Output size =  14, Stride =  16, RF size = 139</span><br><span class="line">************net structrue name is alexnet**************</span><br><span class="line">Layer Name = conv1, Output size =  54, Stride =   4, RF size =  11</span><br><span class="line">Layer Name = pool1, Output size =  26, Stride =   8, RF size =  19</span><br><span class="line">Layer Name = conv2, Output size =  26, Stride =   8, RF size =  51</span><br><span class="line">Layer Name = pool2, Output size =  12, Stride =  16, RF size =  67</span><br><span class="line">Layer Name = conv3, Output size =  12, Stride =  16, RF size =  99</span><br><span class="line">Layer Name = conv4, Output size =  12, Stride =  16, RF size = 131</span><br><span class="line">Layer Name = conv5, Output size =  12, Stride =  16, RF size = 163</span><br><span class="line">Layer Name = pool5, Output size =   5, Stride =  32, RF size = 195</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> caffe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感受野 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>deeplab</title>
      <link href="/2018/06/19/deeplab/"/>
      <url>/2018/06/19/deeplab/</url>
      
        <content type="html"><![CDATA[<h1 id="v1"><a href="#v1" class="headerlink" title="v1"></a>v1</h1><h2 id="Atrous-algorithm"><a href="#Atrous-algorithm" class="headerlink" title="Atrous algorithm"></a>Atrous algorithm</h2><ul><li>deeplab和FCN一样，也是在VGG上finetune</li><li>首先要解决的问题是，如何增大最后输出的score map呢？deeplab把VGG最后的pool4和pool5的stride从2变成了1，整个VGG的stride从32变成8</li><li>但是修改了stide之后，后面的conv层感受野就不一样大了，不能finetune了，所以这里引入了非常优雅的atrous algorithm<ul><li>feature map的感受野的计算公式为$RF_{i}=(RF_{i+1}-1)*stride+kernel$</li><li>所以在stride减小的情况下想办法增大kernel，即在kernel里面增加hole，kernel变大</li></ul></li></ul><p><img src="/images/70081567.jpg" alt="deeplab"></p><h2 id="Fully-connected-CRF"><a href="#Fully-connected-CRF" class="headerlink" title="Fully connected CRF"></a>Fully connected CRF</h2><ul><li>CRF简单来说，能做到的就是在决定一个位置的像素值时（在这个paper里是label），会考虑周围邻居的像素值（label），这样能抹除一些噪音。但是通过CNN得到的feature map在一定程度上已经足够平滑了，所以short range的CRF没什么意义。于是作者采用了fully connected CRF，这样考虑的就是全局的信息了。</li><li>随机变量$X_i$是像素$i$的标签，变量$X$由$X_1, X_2, …, X_N$组成随机向量，$N$就是图像中的像素个数。</li><li>在全连接CRF中，标签$x$的能量为</li></ul><script type="math/tex; mode=display">E(x)=\sum _i\theta_i(x_i)+\sum _{ij}\theta_{ij}(x_i,x_j)</script><ul><li>$\theta_i(x_i)$是一元能量，表示像素$i$被分割成$x_i$的能量，二元能量$\theta_{ij}(x_i,x_j)$像素点$i$、$j$同时分割成$x_i$、$x_j$的能量。</li><li>一元能量使用FCN的输出</li></ul><script type="math/tex; mode=display">\theta_i(x_i) = -logP(x_i)</script><ul><li>二元能量表达式为</li></ul><script type="math/tex; mode=display">\theta_{ij}(x_i, x_j)=\mu(x_i, x_j)[\omega_1exp(-\frac{\left \|p_i-p_j  \right \|^2} {2\sigma_\alpha^2}-\frac{\left \|I_i-I_j  \right \|^2}{2\sigma_\beta^2})+\omega_2exp(-\frac{\left \|p_i-p_j  \right \|^2} {2\sigma_\gamma^2})]</script><ul><li>主要参考<a href="https://blog.csdn.net/junparadox/article/details/52610744" target="_blank" rel="noopener">这里</a></li></ul><h1 id="v2"><a href="#v2" class="headerlink" title="v2"></a>v2</h1><ul><li>v2在v1的基础上增加了多感受野</li></ul><p><img src="/images/4478311.jpg" alt="deeplabv2"></p><ul><li>参考<a href="https://blog.csdn.net/ming0808sun/article/details/78843471" target="_blank" rel="noopener">这里</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> caffe </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mt19937</title>
      <link href="/2018/06/12/mt19937/"/>
      <url>/2018/06/12/mt19937/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul><li>你需要把原来mtalab的代码翻译为c、python等等</li><li>你的代码里使用了随机数</li><li>你的老板又要求你实现的方法exactly the same</li><li>参考<a href="https://code.i-harness.com/zh-CN/q/11a13e1" target="_blank" rel="noopener">这里</a></li></ul><h3 id="mt19927"><a href="#mt19927" class="headerlink" title="mt19927"></a>mt19927</h3><ul><li><a href="https://en.wikipedia.org/wiki/Mersenne_Twister" target="_blank" rel="noopener">Mersenne Twister</a>是目前比较常用的随机数生成器</li><li>周期非常长$2^{19937}-1$，速度非常快</li></ul><h3 id="python代码"><a href="#python代码" class="headerlink" title="python代码"></a>python代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">np.random.seed(1337)</span><br><span class="line">A = np.random.random((5,3))</span><br><span class="line">A.T</span><br><span class="line">array([[ 0.26202468,  0.45931689,  0.26194293,  0.11527423,  0.12505793],</span><br><span class="line">       [ 0.15868397,  0.32100054,  0.97608528,  0.38627507,  0.98354861],</span><br><span class="line">       [ 0.27812652,  0.51839282,  0.73281455,  0.62850118,  0.44322487]])</span><br></pre></td></tr></table></figure><h3 id="MATLAB代码"><a href="#MATLAB代码" class="headerlink" title="MATLAB代码"></a>MATLAB代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">rand(&apos;twister&apos;, 1337);</span><br><span class="line">A = rand(3,5)</span><br><span class="line">A = </span><br><span class="line"> Columns 1 through 2</span><br><span class="line">   0.262024675015582   0.459316887214567</span><br><span class="line">   0.158683972154466   0.321000540520167</span><br><span class="line">   0.278126519494360   0.518392820597537</span><br><span class="line">  Columns 3 through 4</span><br><span class="line">   0.261942925565145   0.115274226683149</span><br><span class="line">   0.976085284877434   0.386275068634359</span><br><span class="line">   0.732814552690482   0.628501179539712</span><br><span class="line">  Column 5</span><br><span class="line">   0.125057926335599</span><br><span class="line">   0.983548605143641</span><br><span class="line">   0.443224868645128</span><br></pre></td></tr></table></figure><h3 id="c-代码"><a href="#c-代码" class="headerlink" title="c++代码"></a>c++代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;random&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  unsigned seed1 = 1337;</span><br><span class="line">  std::mt19937 g1(seed1);</span><br><span class="line">  for(int i=0; i&lt;100; i++)</span><br><span class="line">    std::cout &lt;&lt; 1.0*g1()/g1.max() &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="还有一些"><a href="#还有一些" class="headerlink" title="还有一些"></a>还有一些</h3><p>最简单的生成算法，混合同余法，可以看<a href="https://www.cnblogs.com/houkai/p/3807041.html" target="_blank" rel="noopener">这里</a></p><p>c++11的random库，可以参考<a href="https://www.cnblogs.com/byhj/p/4149467.html" target="_blank" rel="noopener">这里</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>大数乘法</title>
      <link href="/2018/06/12/%E5%A4%A7%E6%95%B0%E4%B9%98%E6%B3%95/"/>
      <url>/2018/06/12/%E5%A4%A7%E6%95%B0%E4%B9%98%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>coursera北大的c++课上的一道题，本地ok，poj(pku的OJ)上ok，垃圾coursera上compile error。<br>先贴在这里，我感觉写的还是很优雅的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;  </span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class BigInt &#123;</span><br><span class="line">public:</span><br><span class="line">BigInt()&#123;</span><br><span class="line">values = &quot;0&quot;;</span><br><span class="line">flag = true;</span><br><span class="line">&#125;</span><br><span class="line">BigInt(const string stringvalue)&#123;</span><br><span class="line">values = stringvalue;</span><br><span class="line">flag = true;</span><br><span class="line">&#125;</span><br><span class="line">BigInt(const int intvalue)&#123;</span><br><span class="line">if (intvalue &gt;= 0)&#123;</span><br><span class="line">values = to_string(intvalue);</span><br><span class="line">flag = true;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">values = to_string(-intvalue);</span><br><span class="line">flag = false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//~BigInt();</span><br><span class="line">friend ostream&amp; operator &lt;&lt; (ostream&amp; out, const BigInt&amp; b);</span><br><span class="line">friend istream&amp; operator &gt;&gt; (istream&amp; in, const BigInt&amp; b);</span><br><span class="line">BigInt&amp; operator + (BigInt b);</span><br><span class="line">BigInt&amp; operator - (BigInt b);</span><br><span class="line">BigInt&amp; operator * (BigInt b);</span><br><span class="line">BigInt&amp; operator / (BigInt b);</span><br><span class="line">bool operator &gt;= (BigInt b);</span><br><span class="line"></span><br><span class="line">//private:</span><br><span class="line">string values;</span><br><span class="line">bool flag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bool BigInt::operator &gt;= (BigInt b)&#123;</span><br><span class="line">int agb = 0;</span><br><span class="line">if (values.length() &gt; b.values.length())</span><br><span class="line">&#123;</span><br><span class="line">agb = 1;</span><br><span class="line">&#125;</span><br><span class="line">else if (values.length() &lt; b.values.length())</span><br><span class="line">&#123;</span><br><span class="line">agb = -1;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">agb = values.compare(b.values);</span><br><span class="line">&#125;</span><br><span class="line">return agb&gt;=0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> BigInt&amp; BigInt :: operator + (BigInt b) &#123;</span><br><span class="line"></span><br><span class="line">if (flag == b.flag)&#123;</span><br><span class="line">string res = &quot;&quot;;</span><br><span class="line">reverse(values.begin(), values.end());</span><br><span class="line">reverse(b.values.begin(), b.values.end());</span><br><span class="line">int i = 0, carry = 0;</span><br><span class="line">for (; i &lt; values.length() &amp;&amp; i &lt; b.values.length(); ++i)&#123;</span><br><span class="line">int tmp = values[i] - &apos;0&apos; + b.values[i] - &apos;0&apos; + carry;</span><br><span class="line">carry = tmp / 10;</span><br><span class="line">tmp = tmp % 10;</span><br><span class="line">res = (char)(tmp + &apos;0&apos;) + res;</span><br><span class="line">&#125;</span><br><span class="line">if (i &lt; values.length())&#123;</span><br><span class="line">for (; i &lt; values.length(); ++i)&#123;</span><br><span class="line">int tmp = values[i] - &apos;0&apos; + carry;</span><br><span class="line">carry = tmp / 10;</span><br><span class="line">tmp = tmp % 10;</span><br><span class="line">res = (char)(tmp + &apos;0&apos;) + res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else if (i &lt; b.values.length())&#123;</span><br><span class="line">for (; i &lt; b.values.length(); ++i)&#123;</span><br><span class="line">int tmp = b.values[i] - &apos;0&apos; + carry;</span><br><span class="line">carry = tmp / 10;</span><br><span class="line">tmp = tmp % 10;</span><br><span class="line">res = (char)(tmp + &apos;0&apos;) + res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (carry == 1)</span><br><span class="line">res = &apos;1&apos; + res;</span><br><span class="line">values = res;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">int agb = 0;</span><br><span class="line">if (values.length() &gt; b.values.length())</span><br><span class="line">&#123;</span><br><span class="line">agb = 1;</span><br><span class="line">&#125;</span><br><span class="line">else if (values.length() &lt; b.values.length())</span><br><span class="line">&#123;</span><br><span class="line">agb = -1;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">agb = values.compare(b.values);</span><br><span class="line">&#125;</span><br><span class="line">if (0 == agb)</span><br><span class="line">&#123;</span><br><span class="line">values = &quot;0&quot;;</span><br><span class="line">return *this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">else if (agb &lt; 0)&#123;</span><br><span class="line">flag = !flag;</span><br><span class="line">string tmp = values;</span><br><span class="line">values = b.values;</span><br><span class="line">b.values = tmp;</span><br><span class="line">&#125;</span><br><span class="line">string res = &quot;&quot;;</span><br><span class="line">reverse(values.begin(), values.end());</span><br><span class="line">reverse(b.values.begin(), b.values.end());</span><br><span class="line">int i = 0;</span><br><span class="line">for (; i &lt; values.length() &amp;&amp; i &lt; b.values.length(); ++i)</span><br><span class="line">res.push_back(values.at(i) - b.values.at(i) + &apos;0&apos;);</span><br><span class="line"></span><br><span class="line">if (i &lt; values.length()) </span><br><span class="line">for (; i &lt; values.length(); ++i)</span><br><span class="line">res.push_back(values.at(i));</span><br><span class="line"></span><br><span class="line">int carry = 0;</span><br><span class="line">for (i = 0; i &lt; values.length(); ++i)</span><br><span class="line">&#123;</span><br><span class="line">int newValue = res.at(i) - carry - &apos;0&apos;;</span><br><span class="line">if (newValue &lt; 0) carry = 1;</span><br><span class="line">else carry = 0;</span><br><span class="line">res.at(i) = newValue + carry * 10 + &apos;0&apos;;</span><br><span class="line">&#125;</span><br><span class="line">while (res[res.length() - 1] == &apos;0&apos;)</span><br><span class="line">res.pop_back();</span><br><span class="line">reverse(res.begin(), res.end());</span><br><span class="line">values = res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return *this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> BigInt &amp;BigInt::operator - (BigInt b)</span><br><span class="line"> &#123;</span><br><span class="line"> BigInt tmp(b);</span><br><span class="line"> tmp.flag = !tmp.flag;</span><br><span class="line"> return *this+tmp;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> BigInt &amp;BigInt::operator * (BigInt b)</span><br><span class="line"> &#123;</span><br><span class="line"> BigInt res;</span><br><span class="line"> if (values == &quot;0&quot; || b.values == &quot;0&quot;)&#123;</span><br><span class="line"> values = &quot;0&quot;;</span><br><span class="line"> return *this;</span><br><span class="line"> &#125;</span><br><span class="line"> if (flag == b.flag)</span><br><span class="line"> flag = true;</span><br><span class="line"> else</span><br><span class="line"> flag = false;</span><br><span class="line"></span><br><span class="line"> BigInt thisbk(*this);</span><br><span class="line"> for (int i = 0; i &lt; b.values.length(); ++i)&#123;</span><br><span class="line"> for (int j = 0; j &lt; b.values[i] - &apos;0&apos;; ++j)&#123;</span><br><span class="line"> res = res + thisbk;</span><br><span class="line"> &#125;</span><br><span class="line">res.values.push_back(&apos;0&apos;);</span><br><span class="line"> &#125;</span><br><span class="line"> res.values.pop_back();</span><br><span class="line"> values = res.values;</span><br><span class="line"> return *this;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> BigInt &amp;BigInt::operator / (BigInt b)</span><br><span class="line"> &#123;</span><br><span class="line"> if (b.values == &quot;0&quot;)</span><br><span class="line"> throw &quot;Division by zero condition!&quot;;</span><br><span class="line"> if (flag == b.flag)</span><br><span class="line"> flag = true;</span><br><span class="line"> else</span><br><span class="line"> flag = false;</span><br><span class="line"></span><br><span class="line"> BigInt one(1);</span><br><span class="line"> while (*this &gt;= b)&#123;</span><br><span class="line"> b.values.push_back(&apos;0&apos;);</span><br><span class="line"> one.values.push_back(&apos;0&apos;);</span><br><span class="line"> &#125;</span><br><span class="line"> b.values.pop_back();</span><br><span class="line"> one.values.pop_back();</span><br><span class="line"></span><br><span class="line"> BigInt thisbk(*this), res(0);</span><br><span class="line"> while (one.values.compare(&quot;0&quot;) &gt; 0)&#123;</span><br><span class="line"> while (*this &gt;= b)&#123;</span><br><span class="line"> *this - b;</span><br><span class="line"> res + one;</span><br><span class="line"> &#125;</span><br><span class="line"> b.values.pop_back();</span><br><span class="line"> one.values.pop_back();</span><br><span class="line"> &#125;</span><br><span class="line"> values = res.values;</span><br><span class="line"> return *this;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">ostream&amp; operator &lt;&lt; (ostream&amp; ou, const BigInt&amp; b)</span><br><span class="line">&#123;</span><br><span class="line">if (!b.flag)</span><br><span class="line">ou &lt;&lt; &apos;-&apos;;</span><br><span class="line">ou &lt;&lt; b.values;</span><br><span class="line">return ou;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">istream&amp; operator &gt;&gt; (istream&amp; in, BigInt&amp; b)</span><br><span class="line">&#123;</span><br><span class="line">string str;</span><br><span class="line">in &gt;&gt; str;</span><br><span class="line">b.values = str;</span><br><span class="line">return in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">BigInt b1, b2;</span><br><span class="line">string str;</span><br><span class="line">cin &gt;&gt; b1 &gt;&gt; str &gt;&gt; b2;</span><br><span class="line"></span><br><span class="line">if (str == &quot;+&quot;)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; b1 + b2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else if (str == &quot;-&quot;)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; b1 - b2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else if (str == &quot;*&quot;)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; b1 * b2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; b1 / b2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mobileNet和shuffleNet</title>
      <link href="/2018/05/13/mobileNet%E5%92%8CshuffleNet/"/>
      <url>/2018/05/13/mobileNet%E5%92%8CshuffleNet/</url>
      
        <content type="html"><![CDATA[<h3 id="先说mobileNet"><a href="#先说mobileNet" class="headerlink" title="先说mobileNet"></a>先说mobileNet</h3><ul><li>使用depthwise convolution和point wise(1*1) convolution代替标准的convolution<br><img src="/images/8709950.jpg" alt></li><li>(b)类似于group为M的卷积，m-th filter is applied to m-th channel</li><li>计算量是原来的$\frac{1}{N}+\frac{1}{D_k^2}$，kernel一般是3，所以可以减少到1/8到1/9</li><li>论文里还提出了两个控制计算量的超参数</li><li>width multiplier，$\alpha$，乘在channel前面，计算量减小到$\frac{1}{\alpha}$</li><li>resolution multiplier，$\beta$，乘在输入到尺寸前面，计算量减小到$\frac{1}{\beta}$</li><li>好像文章里公式写错了，卷积到计算量应该是乘输出的尺寸，而不是输入到尺寸吧。。。</li></ul><h3 id="shuffleNet"><a href="#shuffleNet" class="headerlink" title="shuffleNet"></a><a href="https://blog.csdn.net/u014380165/article/details/75137111" target="_blank" rel="noopener">shuffleNet</a></h3><ul><li>在resnet的基础上，用带group的1*1卷积代替原来的1*1卷积<br><img src="/images/32435128.jpg" alt></li><li>group操作会带来边界效应，学出来的特征会局限，所以就有了channel shuffle层</li><li>随机层的caffe实现是先reshape再transpose再flatten，不是真随机，所以可以实现backward</li><li>3*3的depth wise的卷积就是moblieNet里用到的</li><li>然后用shuffleNet Unit组成shuffetNet网络<br><img src="/images/77705439.jpg" alt></li><li>一个重要结论是group个数的线性增长并不会带来分类准确率的线性增长。但是发现ShuffleNet对于小的网络效果更明显，因为一般小的网络的channel个数都不多，在限定计算资源的前提下，ShuffleNet可以使用更多的feature map。</li></ul>]]></content>
      
      
      <categories>
          
          <category> caffe </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CTC</title>
      <link href="/2018/03/20/CTC/"/>
      <url>/2018/03/20/CTC/</url>
      
        <content type="html"><![CDATA[<ul><li>以OCR为例，原始图片经过CNN卷积，图片高度方向尺寸变为1</li><li>图片的宽度方向即为时间序列方向</li><li>在channel分享进行innerproduct，然后softmax，得到每个序列在每个字符的概率，类似于下面这张图</li></ul><p><img src="/images/ctc.jpg" alt></p><ul><li><p>然后根据这个概率图，使用类似动态规划的思路，可以计算出ctc loss和导数</p></li><li><p>不想写了，看下面这篇吧</p></li><li><p><a href="http://blog.csdn.net/luodongri/article/details/77005948" target="_blank" rel="noopener">CTC讲解</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> caffe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c复习笔记</title>
      <link href="/2018/03/11/c%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/03/11/c%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<ul><li>cin 带空格的字符串时，需要这样<code>cin.getline(s, 80)</code>，s是char数组</li><li>或者也可以这样<code>getline(cin, str)</code>，原型为<code>istream&amp; getline (istream&amp; is, string&amp; str);</code>，C++对每种流都定义了一个getline函数</li><li><p>在gcc编译器中，对标准库进行了扩展，加入了一个getline函数。会自动malloc, realloc，所以用的话，需要自己手动free，好像没啥人用，参考<a href="https://www.cnblogs.com/xkfz007/archive/2012/08/01/2618366.html" target="_blank" rel="noopener">这里</a></p></li><li><p>cout 控制输出精度 <code>cout &lt;&lt; fixed &lt;&lt; setprecision(2) &lt;&lt; f</code>，<code>#include &lt;iomanip&gt;</code></p></li><li>cout 控制输出格式<code>cout &lt;&lt; setfill(&#39;0&#39;) &lt;&lt; setw(4) &lt;&lt; a[i][j]</code></li><li><p><a href="https://blog.csdn.net/yockie/article/details/9104899" target="_blank" rel="noopener">更多</a></p></li><li><p>cin cout 重定向</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">freopen(<span class="string">"foo.txt"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>); </span><br><span class="line">freopen(“bar.txt”,”r”,<span class="built_in">stdin</span>);</span><br></pre></td></tr></table></figure></li><li><p>lambda表达式<br><img src="/images/10535321.jpg" alt title="lambda!"> </p></li><li><p>使用lambda对vector进行排序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> n;</span><br><span class="line">   <span class="keyword">double</span> th;</span><br><span class="line">   <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; th;</span><br><span class="line">   <span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">double</span>&gt;&gt; res;  </span><br><span class="line">   <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">string</span> name;</span><br><span class="line">        <span class="keyword">double</span> score;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; name &gt;&gt; score;</span><br><span class="line">        <span class="keyword">if</span>(score &gt; th)&#123;</span><br><span class="line">            res.push_back(pair&lt;<span class="built_in">string</span>, <span class="keyword">double</span>&gt;(name, score));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(res.begin(), res.end(), [](pair&lt;<span class="built_in">string</span>, <span class="keyword">double</span>&gt;&amp; a, pair&lt;<span class="built_in">string</span>, <span class="keyword">double</span>&gt;&amp; b) &#123;<span class="keyword">return</span> a.second &gt; b.second;&#125;);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i: res)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s %.1f\n"</span>, i.first.c_str(), i.second);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>erase删除vector元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(it=iVec.begin();it!=iVec.end();)&#123;</span><br><span class="line">　　<span class="keyword">if</span>(*it==<span class="number">4</span> || *it==<span class="number">5</span>)</span><br><span class="line">　　　　it=iVec.erase(it);</span><br><span class="line">　　<span class="keyword">else</span></span><br><span class="line">　　　　it++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Sample a(0)</code>, <code>Sample a = 0</code>, 都是调用构造函数</p></li><li><code>Sample a(9); a = 8</code> 调用两次构造函数，</li><li><code>Sample b = a</code>, <code>Sample b(a)</code> 拷贝构造函数</li><li>类型转换构造函数，编译系统会生成一个临时变量</li></ul><ul><li><p>C++编译器遵循以下优先顺序:</p><blockquote><p>先找参数完全匹配的普通函数(非由模板实例化而得的函数)，再找参数完全匹配的模板函数，再找实参经过自动类型转换后能够匹配的普通函数，上面的都找不到, 则报错。</p></blockquote></li><li><p>优雅的内存对齐方法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">calc_align</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> n, <span class="keyword">unsigned</span> align)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((n + align - <span class="number">1</span>) &amp; (~(align - <span class="number">1</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>__declspec(dllexport)是导出声明，说明这个函数要从DLL中导出给别人用。</p></li><li><p>__declspec(dllimport)是说这个函数是从别处导入的，不适用也能正常编译代码。</p></li><li><p>ANSI C是美国国家标准局，为C语言制定的一套国际标准语法，避免各个厂家的C语言不一致</p></li><li>include的文件可以不写到gcc里面</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;max.c&quot;</span><br><span class="line">gcc main.c</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c max.c -o max.o</span><br><span class="line">gcc max.o main.c</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cin/cout </tag>
            
            <tag> lambda </tag>
            
            <tag> 构造函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>又是火车上的博客</title>
      <link href="/2018/02/26/%E5%8F%88%E6%98%AF%E7%81%AB%E8%BD%A6%E4%B8%8A%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/02/26/%E5%8F%88%E6%98%AF%E7%81%AB%E8%BD%A6%E4%B8%8A%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="还是圣经旧约"><a href="#还是圣经旧约" class="headerlink" title="还是圣经旧约"></a>还是圣经旧约</h3><ul><li>雅各回乡准备见以扫，但心存芥蒂，仆人和妻子在前，他在最后，且分成两队以备不测。</li><li>当天晚上，朦胧之中有人找雅各摔跤，摔到天亮未分胜负，此人即是上帝，上帝让雅各改名以色列，与上帝摔跤的人。</li><li>以扫和雅各相约同去以东（也不知道是哪里），雅各仍有戒心，让以扫先走，然后掉头去了迦南的示剑城。</li><li>雅各女儿底拿被示剑城太子强奸，太子来提亲，雅各和儿子们要求示剑城全城男子割礼，太子同意，然后雅各儿子们趁他们蛋疼的时候，血洗示剑城。</li><li>然后雅各带所有人回家见以撒，路上底拿难产而死，产下一子。</li><li>雅各的一个儿子犹大扒灰的故事，太狗血不写。</li><li>后面慢慢来吧</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jQuery笔记</title>
      <link href="/2018/02/25/jQuery%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/02/25/jQuery%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<ol><li>按属性选取<code>var email = $(&#39;[name=email]&#39;);</code></li><li><p>jQuery对象和DOM对象之间可以互相转化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var div = $(&apos;#abc&apos;); // jQuery对象</span><br><span class="line">var divDom = div.get(0); // 假设存在div，获取第1个DOM元素</span><br><span class="line">var another = $(divDom); // 重新把DOM包装为jQuery对象</span><br></pre></td></tr></table></figure></li><li><p>过滤器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;ul.lang li&apos;); // 选出JavaScript、Python和Lua 3个节点</span><br><span class="line"></span><br><span class="line">$(&apos;ul.lang li:first-child&apos;); // 仅选出JavaScript</span><br><span class="line">$(&apos;ul.lang li:last-child&apos;); // 仅选出Lua</span><br><span class="line">$(&apos;ul.lang li:nth-child(2)&apos;); // 选出第N个元素，N从1开始</span><br><span class="line">$(&apos;ul.lang li:nth-child(even)&apos;); // 选出序号为偶数的元素</span><br><span class="line">$(&apos;ul.lang li:nth-child(odd)&apos;); // 选出序号为奇数的元素</span><br></pre></td></tr></table></figure></li></ol><p>css selector, <code>element element</code>是后代就可以，<code>element&gt;element</code>必须是父子</p><ol><li>ajax jsonp<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  type: &apos;get&apos;,</span><br><span class="line">  url: &quot;http://api.money.126.net/data/feed/0000001,1399001&quot;,</span><br><span class="line">  dataType: &apos;jsonp&apos;,</span><br><span class="line">  success: function(data) &#123;</span><br><span class="line">        var str = &apos;当前价格：&apos; +</span><br><span class="line">            data[&apos;0000001&apos;].name + &apos;: &apos; +</span><br><span class="line">            data[&apos;0000001&apos;].price + &apos;；&apos; +</span><br><span class="line">            data[&apos;1399001&apos;].name + &apos;: &apos; +</span><br><span class="line">            data[&apos;1399001&apos;].price;</span><br><span class="line">        alert(str);</span><br><span class="line">    &#125;,</span><br><span class="line">  error: function() &#123;</span><br><span class="line">        alert(&apos;出错了&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><p>jQuery的jqXHR对象类似一个Promise对象，我们可以用链式写法来处理各种回调<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">      type: &apos;get&apos;,</span><br><span class="line">      url: &quot;http://api.money.126.net/data/feed/0000001,1399001&quot;,</span><br><span class="line">      dataType: &apos;jsonp&apos;</span><br><span class="line">&#125;).done(function (data) &#123;</span><br><span class="line">    ajaxLog(&apos;成功, 收到的数据: &apos; + JSON.stringify(data));</span><br><span class="line">&#125;).fail(function (xhr, status) &#123;</span><br><span class="line">    ajaxLog(&apos;失败: &apos; + xhr.status + &apos;, 原因: &apos; + status);</span><br><span class="line">&#125;).always(function () &#123;</span><br><span class="line">    ajaxLog(&apos;请求完成: 无论成功或失败都会调用&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> flask网站总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy 爬虫</title>
      <link href="/2018/02/12/scrapy-%E7%88%AC%E8%99%AB/"/>
      <url>/2018/02/12/scrapy-%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这是在dc学院上299买的课，也是丧心病狂啊，怀着后悔的心情上完了全部课程。</p><h3 id="主要截图"><a href="#主要截图" class="headerlink" title="主要截图"></a>主要截图</h3><p><img src="/images/5689847.jpg" alt title="框架图"></p><p><img src="/images/56909416.jpg" alt title="css选择器"></p><p><img src="/images/98241099.jpg" alt title="chrome的调试技巧"> </p>]]></content>
      
      
      <categories>
          
          <category> scrapy </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>视频防盗啊啊</title>
      <link href="/2018/02/12/%E8%A7%86%E9%A2%91%E9%98%B2%E7%9B%97%E5%95%8A%E5%95%8A/"/>
      <url>/2018/02/12/%E8%A7%86%E9%A2%91%E9%98%B2%E7%9B%97%E5%95%8A%E5%95%8A/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>好烦啊，一直搞不定<br>下面只是记录我踩过的一些坑，大家不要看了</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>默认的video标签会有下载按钮，而且不能倍速播放，于是使用了video.js<br>为防止下载video禁止掉了右键菜单<br>目前存在的问题</p><ul><li>打开调试或者查看原网页可以直接看到视频链接</li><li>手机端会之间显示浏览器的播放界面，都有直接下载的按钮</li></ul><h3 id="途径"><a href="#途径" class="headerlink" title="途径"></a>途径</h3><h4 id="坑1-修改referrer"><a href="#坑1-修改referrer" class="headerlink" title="坑1 修改referrer"></a>坑1 修改referrer</h4><p>想通过referrer判断是否是播放还是直接下载（先假设下载都是空referrer）<br>video.js不能直接控制http请求，不能控制referrer<br>控制全局referrer可以在head中加下面这句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;referrer&quot; content=&quot;always/never/origin/default&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>应该是下载空referrer这个假设本来就有问题，这条路堵死了</p><h4 id="坑2-blob"><a href="#坑2-blob" class="headerlink" title="坑2 blob"></a>坑2 blob</h4><p>blob用于处理二进制文件，youtube和bilibili都是用的blob，看起来很promising<br>但是我不会用啊。。。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;video id=&quot;id&quot; width=&quot;320&quot; height=&quot;240&quot;  type=&apos;video/mp4&apos; controls  &gt; &lt;/video&gt;</span><br><span class="line"></span><br><span class="line">window.onload = function() &#123;</span><br><span class="line">    var xhr = new XMLHttpRequest();</span><br><span class="line">    xhr.open(&apos;GET&apos;, &apos;mov_bbb.mp4&apos;, true);</span><br><span class="line">    xhr.responseType = &apos;blob&apos;; //important</span><br><span class="line">    xhr.onload = function(e) &#123;</span><br><span class="line">        if (this.status == 200) &#123;</span><br><span class="line">            console.log(&quot;loaded&quot;);</span><br><span class="line">            var blob = this.response;</span><br><span class="line">            var video = document.getElementById(&apos;id&apos;);</span><br><span class="line">            video.oncanplaythrough = function() &#123;</span><br><span class="line">                console.log(&quot;Can play through video without stopping&quot;);</span><br><span class="line">                URL.revokeObjectURL(this.src);</span><br><span class="line">            &#125;;</span><br><span class="line">            video.src = URL.createObjectURL(blob);</span><br><span class="line">            video.load();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.send();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以工作，但需要先把视频加载一遍才能看，意思是这个页面加载时间要以分钟来记了。。。<br>而且还有跨域的问题</p><h4 id="坑3-阿里云的flash"><a href="#坑3-阿里云的flash" class="headerlink" title="坑3 阿里云的flash"></a>坑3 阿里云的flash</h4><p>这个坑还没踩进去，但是还是不想用flash，都2018年了啊</p><h4 id="后面的坑"><a href="#后面的坑" class="headerlink" title="后面的坑"></a>后面的坑</h4><ul><li>不行就用ua，把手机端的禁掉，然后pc端由他们下去吧</li><li>然后再看看<a href="https://stackoverflow.com/questions/9756837/prevent-html5-video-from-being-downloaded-right-click-saved" target="_blank" rel="noopener">这个链接</a>里的方法，说不定能用呢😢</li><li>近期不搞了，先专心写毕业论文吧</li></ul>]]></content>
      
      
      <categories>
          
          <category> flask网站总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>火车上写的博客</title>
      <link href="/2018/02/04/%E8%80%81%E5%AD%90%E5%9C%A8%E7%81%AB%E8%BD%A6%E4%B8%8A%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/02/04/%E8%80%81%E5%AD%90%E5%9C%A8%E7%81%AB%E8%BD%A6%E4%B8%8A%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="0-关于火车，关于回家"><a href="#0-关于火车，关于回家" class="headerlink" title="0. 关于火车，关于回家"></a>0. 关于火车，关于回家</h3><p>这篇是在火车上写的，回家坐火车会有种奇妙的感觉，大概一学期也就这么一次，你不会为挥霍时间而慌张，反而是时间越快越高兴，大概是家的魔力吧。</p><p>所以这篇思路<del>可能</del>会有点跳，想到哪写到哪吧。</p><h3 id="1-关于博客，关于js"><a href="#1-关于博客，关于js" class="headerlink" title="1. 关于博客，关于js"></a>1. 关于博客，关于js</h3><p>之前我一直不愿意用hexo写博客，几个原因，</p><ol><li>这种静态的博客，一点逼格也没有，连个留言都要第三方插件解决</li><li>没有博客对编辑界面，只能在某个特定对电脑上写，然后再推上去</li><li>我不会node</li></ol><p>然而最终还是意外地向hexo妥协了，还是那么几个原因，</p><ol><li>好像我的博客不会有人注册或留言的，静态也够用</li><li>我已经人机合一了。。。</li><li>我对python的热爱被flask终结掉了，我想换个语言了</li><li>想通了一个道理，不拥抱js/css，网站一定会很丑。。。</li></ol><p>所以还是要感谢FJ，在我下定好决心学node又不知道做什么的时候，FJ说要有小程序，<del>于是就有了小程序</del>于是我就像突然看到了灯塔一样，也突然有了动力。</p><p>其实也是挺奇怪的事，我也早早想到过小程序，但是呢，所有自己想到的项目，都会在心里自动贴一个标签，练手。然后练手两个字，就完全限制了这个项目的意义，练到手熟之后呢，大概就不了了之了。FJ的作用，大概只是说了句小程序，然后提了一堆我看来奇奇怪怪的需求。但也是因此，这个本来应该是练手的项目，它的意义就足以支撑我认真做下去了。</p><p>所以啊，我还是一个靠意义活着的生物，不管真假。</p><h3 id="2-关于圣经旧约"><a href="#2-关于圣经旧约" class="headerlink" title="2. 关于圣经旧约"></a>2. 关于圣经旧约</h3><p>我是这学期开始看圣经的，当然正如你们所见的，我是个温和的共产主义者。看圣经完全是出于好奇心，主要是《西部世界》带起来的。</p><p>故事性不强而且很散，为了怕我看了就忘了，先把看了的部分记下来。</p><p>如有错误或冒犯，烦请指正。</p><ul><li>上帝创世，嗯。</li><li>然后就是伊甸园里，撒旦化身成蛇，引诱夏娃亚当吃了禁果，然后他们知羞耻。上帝惩罚蛇用肚子走路，女人见蛇就踩，蛇见女人就咬脚后跟，男人需要劳作才能收获果实，然后把亚当夏娃逐出伊甸园。</li><li>亚当夏娃大儿子该隐种地，二儿子亚伯放牧。该隐献给上帝谷物，亚伯献给上帝羊羔，上帝喜欢亚伯的礼物，该隐妒嫉，遂杀弟。</li><li>后来世风日下，god has seen too much evil，上帝后悔造了人，于是计划大洪水大清洗一下。</li><li>让诺亚造船，然后每个动物带一对。水落之后，诺亚放出鸽子，鸽子衔橄榄枝返回，诺亚于是知道水完全退了。上帝以彩虹立誓，不在用洪水灭世。</li><li>上帝让诺亚的长孙亚伯拉罕带着族人去往应许之地迦南。但亚伯拉罕的侄子罗德，执意去往索多玛。索多玛后被周围国家所灭，罗德通遭罪，亚伯拉罕于是去解救。</li><li>亚伯拉罕妻子不会生孩子，两个人急了，于是找婢女夏甲生了孩子，取名实马里。后上帝赐子亚伯拉罕，并取名为以撒。</li><li>上帝说索多玛恶贯满盈，要毁灭索多玛。亚伯拉罕恳求，上帝答应只要索多玛能有十个好人，就放过这里。前来考察的两个天使遇上罗德，罗德招待他们，但索多玛的全城老幼却要求罗德交出客人。天使让罗德一家逃难，然后毁灭了索多玛。罗德妻子在逃跑时，回头看，变成盐柱。</li><li>上帝考验亚伯拉罕，亚拿儿子献祭，上帝及时制止，并送了只羊羔。</li><li>以撒母亲帮儿子从她的族人中，选取了妻子利百加。</li><li>利百加也不能生，于是上帝让她怀上了双胞胎，分别是以扫和雅各。雅各骗取了哥哥以扫的长子权，骗取了父亲本应该给以扫的祝福。以扫恨之入骨，雅各逃往舅舅拉班家。</li><li>拉班有两个女儿，小女儿好看。雅各给舅舅放羊，舅答应七年之后把好看的小女儿嫁给雅各。七年之后，过完新婚之夜，雅各发现嫁给她的时大女儿。因为按照当地习俗，妹妹不能比姐姐先嫁。于是雅各又答应给拉班放七年羊，然后和妹妹结婚。</li><li>婚后雅各只喜欢妹妹，冷落姐姐，于是上帝让姐姐怀孕。反正后来姐妹互相争宠，给雅各生了一堆孩子。雅各放羊放着放着就变得很富有，拉班及其子妒嫉，于是上帝让雅各回到故乡。</li><li>好长好啰嗦，后面慢慢更。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>奇异值分解</title>
      <link href="/2018/01/30/%E5%A5%87%E5%BC%82%E5%80%BC%E5%88%86%E8%A7%A3/"/>
      <url>/2018/01/30/%E5%A5%87%E5%BC%82%E5%80%BC%E5%88%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="1-基本定义"><a href="#1-基本定义" class="headerlink" title="1. 基本定义"></a>1. 基本定义</h3><p>特征值分解</p><script type="math/tex; mode=display">A = \boldsymbol{V}diag(\lambda)\boldsymbol{V}^{-1}</script><p>奇异值分解类似，但不要求A是方阵</p><script type="math/tex; mode=display">A = \boldsymbol{UDV}^T</script><p>假设$A$是(m,n)，那么$\boldsymbol{U}$是(m,m)，$\boldsymbol{D}$是(m,n)，$\boldsymbol{V}$是(n,n)。$\boldsymbol{U}$、$\boldsymbol{V}$均为对称矩阵，分别称为左奇异向量，右奇异向量，$D$是对角矩阵，其对角元素称为奇异值。<br>两者关系<br>$A$的左奇异向量，是$AA^T$的特征向量，$A$的右奇异向量，是$A^TA$的特征向量。$A$的非零奇异值，是$AA^T$和$A^TA$的特征值的平方根。</p><h3 id="2-待续吧"><a href="#2-待续吧" class="headerlink" title="2. 待续吧"></a>2. 待续吧</h3><p>等我知道了SVD怎么算之后再写。</p>]]></content>
      
      
      <categories>
          
          <category> 数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阅读更多</title>
      <link href="/2018/01/30/%E9%98%85%E8%AF%BB%E6%9B%B4%E5%A4%9A/"/>
      <url>/2018/01/30/%E9%98%85%E8%AF%BB%E6%9B%B4%E5%A4%9A/</url>
      
        <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap&#123;&#123; subject.id &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span>&#123;&#123; subject.about_subject | safe &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"read-more&#123;&#123; subject.id &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"read-more"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-class">.wrap</span>&#123;<span class="attribute">position</span>: relative;<span class="attribute">overflow</span>: hidden;&#125;</span><br><span class="line"><span class="selector-class">.read-more</span> <span class="selector-tag">a</span>&#123;<span class="attribute">padding-right</span>: <span class="number">22px</span>;<span class="attribute">background</span>: <span class="built_in">url</span>() no-repeat <span class="number">100%</span> <span class="number">50%</span>;<span class="attribute">font-weight</span>: bold;<span class="attribute">text-decoration</span>: none;&#125;</span><br><span class="line"><span class="selector-class">.read-more</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>: <span class="number">#000</span>;&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">&#123;% <span class="keyword">for</span> subject <span class="keyword">in</span> subjects %&#125;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> slideHeight = <span class="number">300</span>; <span class="comment">// px</span></span><br><span class="line"> <span class="keyword">var</span> defHeight = $(<span class="string">'#wrap&#123;&#123; subject.id &#125;&#125;'</span>).height();</span><br><span class="line"> <span class="keyword">if</span>(defHeight &gt;= slideHeight)&#123;</span><br><span class="line">  $(<span class="string">'#wrap&#123;&#123; subject.id &#125;&#125;'</span>).css(<span class="string">'height'</span> , slideHeight + <span class="string">'px'</span>);</span><br><span class="line">  $(<span class="string">'#read-more&#123;&#123; subject.id &#125;&#125;'</span>).append(<span class="string">'&lt;a href="#"&gt;查看更多&lt;/a&gt;'</span>);</span><br><span class="line">  $(<span class="string">'#read-more&#123;&#123; subject.id &#125;&#125; a'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> curHeight = $(<span class="string">'#wrap&#123;&#123; subject.id &#125;&#125;'</span>).height();</span><br><span class="line">   <span class="keyword">if</span>(curHeight == slideHeight)&#123;</span><br><span class="line">    $(<span class="string">'#wrap&#123;&#123; subject.id &#125;&#125;'</span>).animate(&#123;</span><br><span class="line">     height: defHeight</span><br><span class="line">    &#125;, <span class="string">"normal"</span>);</span><br><span class="line">    $(<span class="string">'#read-more&#123;&#123; subject.id &#125;&#125; a'</span>).html(<span class="string">'隐藏'</span>);</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $(<span class="string">'#wrap&#123;&#123; subject.id &#125;&#125;'</span>).animate(&#123;</span><br><span class="line">     height: slideHeight</span><br><span class="line">    &#125;, <span class="string">"normal"</span>);</span><br><span class="line">    $(<span class="string">'#read-more&#123;&#123; subject.id &#125;&#125; a'</span>).html(<span class="string">'查看更多'</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> flask网站总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>css 浮动塌陷</title>
      <link href="/2018/01/30/css-%E6%B5%AE%E5%8A%A8%E5%A1%8C%E9%99%B7/"/>
      <url>/2018/01/30/css-%E6%B5%AE%E5%8A%A8%E5%A1%8C%E9%99%B7/</url>
      
        <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/chris_z_0622/article/details/65442975" target="_blank" rel="noopener">来自这里</a><br>css 子元素设置为float之后，脱离文件流，导致父元素撑不起来，解决办法</p><ol><li>父元素也设置为float（不推荐，会影响父元素后面都元素）</li><li>父元素添加 overflow:hidden（诡异的css）</li><li>建立一个空的子div <code>&lt;div style=&quot;clear: both&quot;&gt;&lt;/div&gt;</code></li><li>通过伪类:after清除浮动，具体如下<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span>子元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.son &#123;</span><br><span class="line">    float: left;</span><br><span class="line">&#125;</span><br><span class="line">.father:after &#123;</span><br><span class="line">    content: &quot;&quot;;</span><br><span class="line">    height: 0;</span><br><span class="line">    width: 0;</span><br><span class="line">    visibility: hidden;</span><br><span class="line">    clear: both;</span><br><span class="line">    display: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> flask网站总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>application/x-www-form-urlencoded和multipart/form-data</title>
      <link href="/2018/01/30/application-x-www-form-urlencoded%E5%92%8Cmultipart-form-data/"/>
      <url>/2018/01/30/application-x-www-form-urlencoded%E5%92%8Cmultipart-form-data/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/taoys/archive/2010/12/30/1922186.html" target="_blank" rel="noopener">抄自这里</a></p><blockquote><p>form的enctype属性为编码方式，常用有两种：<code>application/x-www-form-urlencoded</code>和<code>multipart/form-data</code>。</p><p>默认为<code>application/x-www-form-urlencoded</code>。 当action为get时候，浏览器用x-www-form-urlencoded的编码方式把form数据转换成一个字串（name1=value1&amp;name2=value2…），然后把这个字串append到url后面，用?分割，加载这个新的url。 当action为post时候，浏览器把form数据封装到http body中，然后发送到server。 </p><p>如果没有type=file的控件，用默认的<code>application/x-www-form-urlencoded</code>就可以了。 但是如果有type=file的话，就要用到<code>multipart/form-data</code>了。浏览器会把整个表单以控件为单位分割，并为每个部分加上Content-Disposition(form-data或者file),Content-Type(默认为text/plain),name(控件name)等信息，并加上分割符(boundary)。</p></blockquote><p><a href="http://blog.csdn.net/xiaojianpitt/article/details/6856536" target="_blank" rel="noopener">更详细的</a></p>]]></content>
      
      
      <categories>
          
          <category> flask网站总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sqlite 常用命令</title>
      <link href="/2018/01/22/sqlite-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/01/22/sqlite-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="dump-database"><a href="#dump-database" class="headerlink" title="dump database"></a>dump database</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sqlite3 &lt;database_file&gt;</span><br><span class="line">.output &lt;dump_text_file&gt;</span><br><span class="line">.dump</span><br><span class="line">.exit</span><br></pre></td></tr></table></figure><h3 id="dump-table"><a href="#dump-table" class="headerlink" title="dump table"></a>dump table</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.output &lt;dump_text_file&gt;</span><br><span class="line">.dump &lt;table_name&gt;</span><br><span class="line">.exit</span><br></pre></td></tr></table></figure><h3 id="dump-table-structure"><a href="#dump-table-structure" class="headerlink" title="dump table structure"></a>dump table structure</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.output &lt;dump_text_file&gt;</span><br><span class="line">.schema</span><br><span class="line">.exit</span><br></pre></td></tr></table></figure><h3 id="dump-data-of-a-table-into-a-text"><a href="#dump-data-of-a-table-into-a-text" class="headerlink" title="dump data of a table into a text"></a>dump data of a table into a text</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.mode insert</span><br><span class="line">.output &lt;dump_text_file&gt;</span><br><span class="line">.dump &lt;table_name&gt;</span><br><span class="line">.exit</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.read &lt;dump_text_file&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> flask网站总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqlite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>吴恩达deeplearning.ai课程学习笔记</title>
      <link href="/2018/01/16/%E5%90%B4%E6%81%A9%E8%BE%BEdeeplearning-ai%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/01/16/%E5%90%B4%E6%81%A9%E8%BE%BEdeeplearning-ai%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h3><p><a href="https://github.com/zjyfdu/deeplearning.ai" target="_blank" rel="noopener">作业在这里</a><br>原仓库被coursera要求删掉了，多亏我及时folk/斜眼笑</p><p><a href="https://mooc.study.163.com/smartSpec/detail/1001319001.htm" target="_blank" rel="noopener">视频可以直接在网易上看</a></p><h3 id="1-神经网络前馈和后馈"><a href="#1-神经网络前馈和后馈" class="headerlink" title="1. 神经网络前馈和后馈"></a>1. 神经网络前馈和后馈</h3><p><img src="/images/89948814.jpg" alt title="前馈"><br><img src="/images/41005456.jpg" alt title="后馈"><br>如果没有激活函数的话，多层的神经网络仍然是个线性的模型。<br><img src="/images/73637538.jpg" alt title="激活函数"></p><h3 id="2-超参数、正则化、优化算法等"><a href="#2-超参数、正则化、优化算法等" class="headerlink" title="2. 超参数、正则化、优化算法等"></a>2. 超参数、正则化、优化算法等</h3><p>L2正则化相当于是w权重减小， weight decay<br><img src="/images/69146591.jpg" alt><br>后面等这些是用在mini-batch中的，当训练数据量太大，需要对训练数据分割为mini-batch。但这样会造成收敛方向波动，为了减小这种波动，引入Adam优化算法。<br><img src="/images/27110293.jpg" alt title="指数加权平均"><br><img src="/images/27110293.jpg" alt><br><img src="/images/47657351.jpg" alt><br><img src="/images/306118.jpg" alt><br>batch norm<br><img src="/images/49641113.jpg" alt><br><img src="/images/54964765.jpg" alt></p><h3 id="3-CNN"><a href="#3-CNN" class="headerlink" title="3. CNN"></a>3. CNN</h3><p><del>待续</del></p><p><a href="https://mp.weixin.qq.com/s/kvbDQ2d7iZ2cur2CQ_e-1Q" target="_blank" rel="noopener">感觉这篇已经总结得很好了</a></p>]]></content>
      
      
      <categories>
          
          <category> caffe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask部署：gunicorn和nginx安装记录</title>
      <link href="/2018/01/14/flask%E9%83%A8%E7%BD%B2%EF%BC%9Agunicorn%E5%92%8Cnginx%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"/>
      <url>/2018/01/14/flask%E9%83%A8%E7%BD%B2%EF%BC%9Agunicorn%E5%92%8Cnginx%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="1-gunicorn"><a href="#1-gunicorn" class="headerlink" title="1. gunicorn"></a>1. gunicorn</h3><p>python用的是anaconda 2.7，首先安装虚拟环境<br>好像是anaconda下用virtualenv会有点问题<br>gunicorn的w表示开启进程数<br>PS: <a href="http://www.ruanyifeng.com/blog/2016/02/linux-daemon.html" target="_blank" rel="noopener">nohup的详细解释</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">conda create -n newenv python=2.7 </span><br><span class="line">source activate newenv //启用python 虚拟环境</span><br><span class="line">pip install gunicorn //安装gunicorn</span><br><span class="line">nohup gunicorn -w 4 --access-logfile access.log --error-logfile error.log -b 127.0.0.1:8080 manage:app&amp;</span><br><span class="line">app_file_name:app_name &amp;</span><br></pre></td></tr></table></figure></p><p>gunicorn更改log的输出，<a href="http://docs.gunicorn.org/en/latest/settings.html#logging" target="_blank" rel="noopener">详细说明</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--access-logfile FILE</span><br><span class="line">--error-logfile FILE, --log-file FILE</span><br></pre></td></tr></table></figure></p><h3 id="2-nginx"><a href="#2-nginx" class="headerlink" title="2. nginx"></a>2. nginx</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure><p>然后修改nginx配置，转发至localhost的端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    server_name  _;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8080;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>检查nginx config，重启nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br><span class="line">service naginx restart</span><br></pre></td></tr></table></figure></p><h3 id="3-nginx反向代理和防盗链"><a href="#3-nginx反向代理和防盗链" class="headerlink" title="3.nginx反向代理和防盗链"></a>3.nginx反向代理和防盗链</h3><p>为了防止静态资源被其他站点请求，改为<code>return 403</code>。<br>但这样一来，本站请求的静态资源在经过static后，不再做转发，所以又把转发重复了一遍。<br>不知道有没有更优雅的写法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    server_name  _;</span><br><span class="line"></span><br><span class="line">    location /static/ &#123;</span><br><span class="line">        valid_referers 47.95.193.53;</span><br><span class="line">        if ($invalid_referer) &#123;</span><br><span class="line">            return 403;</span><br><span class="line">        &#125;</span><br><span class="line">        proxy_pass http://127.0.0.1:8080;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8080;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>反爬虫<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">       if ($http_user_agent ~* &quot;python|curl|java|wget|httpclient|okhttp&quot;) &#123;</span><br><span class="line">           return 503; #service unavaiable</span><br><span class="line">       &#125;</span><br><span class="line">       # 正常处理</span><br><span class="line">       ...</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h3 id="4-坑比阿里云的smtp端口"><a href="#4-坑比阿里云的smtp端口" class="headerlink" title="4.坑比阿里云的smtp端口"></a>4.坑比阿里云的smtp端口</h3><p>阿里云默默地把smtp的25端口禁掉了，要使用ssl的465端口<br>使用<code>flask-mail</code>需要在<code>config.py</code>中配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MAIL_SERVER = &apos;smtp.163.com&apos;</span><br><span class="line">MAIL_PORT = 465</span><br><span class="line">MAIL_USE_SSL = True</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> flask网站总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>https原理和使用流程</title>
      <link href="/2018/01/14/https%E5%8E%9F%E7%90%86%E5%92%8C%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B/"/>
      <url>/2018/01/14/https%E5%8E%9F%E7%90%86%E5%92%8C%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="http原理"><a href="#http原理" class="headerlink" title="http原理"></a>http原理</h3><p>看<a href="https://www.cnblogs.com/xinzhao/p/4949344.html" target="_blank" rel="noopener">这里</a></p><h3 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h3><ol><li>上<a href="https://www.aliyun.com/product/cas" target="_blank" rel="noopener">阿里云</a>或七牛云的免费ssl服务，阿里云不用填什么资料直接就审核了，七牛云好像麻烦一点。</li><li>配置DNS</li><li>审核通过之后，下载证书文件，将证书文件放在Nginx安装目录cert中，一般为<code>/etc/nginx</code></li><li>配置nginx，主要是将http重定向到https上<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  _;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        rewrite ^/(.*)$ https://yongxinxue.xin/$1 permanent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443;</span><br><span class="line">    server_name _;</span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate   cert/214462643660969.pem;</span><br><span class="line">    ssl_certificate_key  cert/214462643660969.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    location / &#123;</span><br><span class="line">        if ( $host != &apos;yongxinxue.xin&apos; )&#123;</span><br><span class="line">            rewrite ^/(.*)$ https://yongxinxue.xin/$1 permanent;</span><br><span class="line">        &#125;</span><br><span class="line">        proxy_pass http://127.0.0.1:8080;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> flask网站总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>caffe 学习笔记</title>
      <link href="/2018/01/11/caffe-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/01/11/caffe-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h2><p>直接看官网的安装有点抓不住要点，有一篇博客介绍得很详细，<a href="http://akmetiuk.com/posts/2016-03-29-compiling-caffe.html" target="_blank" rel="noopener">点这里</a>。是针对MAC下caffe及其python模块的安装，包括有哪些依赖、怎么编译，会遇到哪些坑，以及怎么解决坑等等。感谢作者！ </p><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><p>docker就方便多了，需要先安装docker，centos照着<a href="https://www.liquidweb.com/kb/how-to-install-docker-on-centos-6/" target="_blank" rel="noopener">这一篇</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rpm -iUvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</span><br><span class="line">yum update -y</span><br><span class="line">yum -y install docker-io</span><br><span class="line">service docker start</span><br><span class="line">chkconfig docker on</span><br></pre></td></tr></table></figure><p>至此docker安装完毕，然后搜索caffe的镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search caffe</span><br></pre></td></tr></table></figure><p>然后会搜到一堆镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NAME                                DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">tleyden5iwx/caffe-cpu-master                                                        48                   [OK]</span><br><span class="line">bvlc/caffe                          Official Caffe images                           42                   [OK]</span><br><span class="line">kaixhin/caffe                       Ubuntu Core 14.04 + Caffe.                      38                   [OK]</span><br><span class="line">kaixhin/cuda-caffe                  Ubuntu Core 14.04 + CUDA + Caffe.               38                   [OK]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>其中就有官方的docker，也不知道为什么，我就用了<code>kaixhin/caffe</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull kaixhin/caffe</span><br></pre></td></tr></table></figure><p>这个名字太丑了，我们改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag kaixhin/caffe caffe</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -i -t caffe /bin/bash</span><br></pre></td></tr></table></figure><p>然后就你直接用现成的caffe了。<code>exit</code>退出后，需要保存容器，不然下次还是会打开全新的容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker ps -l</span><br><span class="line"><span class="comment"># CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span></span><br><span class="line"><span class="comment"># c8f1d7bcb4f2        caffe               "/bin/bash"         8 minutes ago       Exited (0) 7 minutes ago                       boring_turing</span></span><br><span class="line">docker commit c8f caffe</span><br></pre></td></tr></table></figure><p>还有其余一些docker命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker stop $(docker ps -a -q) #停用所有容器</span><br><span class="line">docker rm $(docker ps -a -q) #删除所有容器</span><br><span class="line">docker rmi &lt;image id&gt; #删除image</span><br></pre></td></tr></table></figure><h1 id="MNIS"><a href="#MNIS" class="headerlink" title="MNIS"></a>MNIS</h1><p>基本全是照着<a href="https://zhuanlan.zhihu.com/p/24110318" target="_blank" rel="noopener">这里</a>，一知半解地做</p><p>训练时，报错<code>Unknown database backend</code>，需要在<code>Makefile.config</code>中，修改<code>USE_LMDB := 1</code>，然后重新<code>make clean</code>，<code>make all -j4</code>等等</p>]]></content>
      
      
      <categories>
          
          <category> caffe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> caffe </tag>
            
            <tag> docker </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx 开启gzip</title>
      <link href="/2018/01/09/nginx-%E5%BC%80%E5%90%AFgzip/"/>
      <url>/2018/01/09/nginx-%E5%BC%80%E5%90%AFgzip/</url>
      
        <content type="html"><![CDATA[<h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    ...</span><br><span class="line">    gzip on;</span><br><span class="line">    </span><br><span class="line">    gzip_min_length 1k;</span><br><span class="line">    # 启用gzip压缩的最小文件，小于设置值的文件将不会压缩</span><br><span class="line"></span><br><span class="line">    gzip_buffers 16 64k;</span><br><span class="line"></span><br><span class="line">    gzip_http_version 1.1;</span><br><span class="line"></span><br><span class="line">    gzip_comp_level 6;</span><br><span class="line">    # gzip 压缩级别，1-10，数字越大压缩的越好，也越占用CPU时间</span><br><span class="line">    </span><br><span class="line">    gzip_types text/plain application/x-javascript text/css application/xml application/javascript application/json;</span><br><span class="line">    # 进行压缩的文件类型。</span><br><span class="line"></span><br><span class="line">    gzip_vary on;</span><br><span class="line">    # 是否在http header中添加Vary: Accept-Encoding</span><br><span class="line"></span><br><span class="line">    gzip_disable &quot;MSIE [1-6]\.&quot;;</span><br><span class="line">    # 禁用IE 6 gzip</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="效果拔群"><a href="#效果拔群" class="headerlink" title="效果拔群"></a>效果拔群</h2><p>百度统计的测试结果，从12s提高到6s</p><p><img src="/images/94641900.jpg" alt title="-6s, excited!"> </p>]]></content>
      
      
      <categories>
          
          <category> flask网站总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask-migrate No support for ALTER of constraints in SQLite dialect</title>
      <link href="/2018/01/08/Flask-migrate-No-support-for-ALTER-of-constraints-in-SQLite-dialect/"/>
      <url>/2018/01/08/Flask-migrate-No-support-for-ALTER-of-constraints-in-SQLite-dialect/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>由于sqlite不支持<code>DROP COLUMN</code>、<code>ALTER COLUMN</code>、<code>ADD CONSTRAINT</code>等操作，如果flask使用了sqlite做数据库，flask-migrate不能自动迁移</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>两种途径，都来自<a href="https://github.com/miguelgrinberg/Flask-Migrate/issues/61" target="_blank" rel="noopener">这里</a></p><h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><p>换MySql或者Postgres，也是flask-migrate作者的建议。</p><h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><p>在创建db的地方<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> MetaData</span><br><span class="line"></span><br><span class="line">naming_convention = &#123;</span><br><span class="line">    <span class="string">"ix"</span>: <span class="string">'ix_%(column_0_label)s'</span>,</span><br><span class="line">    <span class="string">"uq"</span>: <span class="string">"uq_%(table_name)s_%(column_0_name)s"</span>,</span><br><span class="line">    <span class="string">"ck"</span>: <span class="string">"ck_%(table_name)s_%(column_0_name)s"</span>,</span><br><span class="line">    <span class="string">"fk"</span>: <span class="string">"fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s"</span>,</span><br><span class="line">    <span class="string">"pk"</span>: <span class="string">"pk_%(table_name)s"</span></span><br><span class="line">&#125;</span><br><span class="line">db = SQLAlchemy(metadata=MetaData(naming_convention=naming_convention))</span><br></pre></td></tr></table></figure></p><p>enabled batch mode for auto-generated migrations by adding a <code>render_as_batch=config.get_main_option(&#39;sqlalchemy.url&#39;).startswith(&#39;sqlite:&#39;)</code> argument to <code>context.configure()</code> in <code>run_migrations_online()</code> in <code>migrations/env.py</code>.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_migrations_online</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Run migrations in 'online' mode.</span></span><br><span class="line"><span class="string">    In this scenario we need to create an Engine</span></span><br><span class="line"><span class="string">    and associate a connection with the context.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    engine = engine_from_config(</span><br><span class="line">                config.get_section(config.config_ini_section),</span><br><span class="line">                prefix=<span class="string">'sqlalchemy.'</span>,</span><br><span class="line">                poolclass=pool.NullPool)</span><br><span class="line"></span><br><span class="line">    connection = engine.connect()</span><br><span class="line">    context.configure(</span><br><span class="line">                connection=connection,</span><br><span class="line">                target_metadata=target_metadata,</span><br><span class="line">                render_as_batch=config.get_main_option(<span class="string">'sqlalchemy.url'</span>).startswith(<span class="string">'sqlite:///'</span>)</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> context.begin_transaction():</span><br><span class="line">            context.run_migrations()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        connection.close()</span><br></pre></td></tr></table></figure></p><p>方法2试用到现在修改column和foreign-key没遇到什么问题，但是作者不推荐，用得很心虚（sadly）</p>]]></content>
      
      
      <categories>
          
          <category> flask网站总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS复习笔记</title>
      <link href="/2018/01/01/JS%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/01/01/JS%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<ol><li>有两种比较运算符：<br>==，自动转换数据类型再比较，会得到非常诡异的结果<br>===，如果数据类型不一致，返回false，如果一致，再比较</li><li><code>NaN === NaN; // false</code><br>唯一能判断NaN的方法是通过isNaN()函数<br><code>isNaN(NaN); // true</code></li><li>浮点数比较要这样<br><code>Math.abs(1 / 3 - (1 - 2 / 3)) &lt; 0.0000001; // true</code></li><li>并如果一个变量没有通过var申明就被使用，就自动被申明为全局变量<br>ECMA在后续规范中推出了strict模式，需要在第一行加入<br><code>&#39;use strict&#39;;</code></li><li><p>最新的ES6标准新增了一种多行字符串的表示方法，用反引号 ` … ` 表示：<br>还有模版字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var name = &apos;小明&apos;;</span><br><span class="line">var age = 20;</span><br><span class="line">var message = `你好, $&#123;name&#125;, 你今年$&#123;age&#125;岁了!`;</span><br><span class="line">alert(message);</span><br></pre></td></tr></table></figure></li><li><p><code>for ... of</code>ES6引入<br><code>for ... in</code>循环由于历史遗留问题，它遍历的实际上是对象的属性名称。<br>更推荐用<code>forEach</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">array1.forEach(function (element, index, array) &#123;</span><br><span class="line">    // element: 指向当前元素的值</span><br><span class="line">    // index: 指向当前索引</span><br><span class="line">    // array: 指向Array对象本身</span><br><span class="line">    console.log(element + &apos;, index = &apos; + index);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">set1.forEach(function (element, sameElement, set) &#123;</span><br><span class="line">map1.forEach(function (value, key, map) &#123;</span><br></pre></td></tr></table></figure></li><li><p><code>augments</code>和<code>rest</code>（ES6引入）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">function foo(a, b) &#123;</span><br><span class="line">    var i, rest = [];</span><br><span class="line">    if (arguments.length &gt; 2) &#123;</span><br><span class="line">        for (i = 2; i&lt;arguments.length; i++) &#123;</span><br><span class="line">            rest.push(arguments[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&apos;a = &apos; + a);</span><br><span class="line">    console.log(&apos;b = &apos; + b);</span><br><span class="line">    console.log(rest);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function foo(a, b, ...rest) &#123;</span><br><span class="line">    console.log(&apos;a = &apos; + a);</span><br><span class="line">    console.log(&apos;b = &apos; + b);</span><br><span class="line">    console.log(rest);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(1, 2, 3, 4, 5);</span><br><span class="line">// 结果:</span><br><span class="line">// a = 1</span><br><span class="line">// b = 2</span><br><span class="line">// Array [ 3, 4, 5 ]</span><br><span class="line"></span><br><span class="line">foo(1);</span><br><span class="line">// 结果:</span><br><span class="line">// a = 1</span><br><span class="line">// b = undefined</span><br><span class="line">// Array []</span><br></pre></td></tr></table></figure></li><li><p>变量提升<br>JavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function foo() &#123;</span><br><span class="line">    var</span><br><span class="line">        x = 1, // x初始化为1</span><br><span class="line">        y = x + 1, // y初始化为2</span><br><span class="line">        z, i; // z和i为undefined</span><br><span class="line">    // 其他语句:</span><br><span class="line">    for (i=0; i&lt;100; i++) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性</p></li><li><p>为了解决块级作用域，ES6引入了新的关键字let，用let替代var可以申明一个块级作用域的变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">function foo() &#123;</span><br><span class="line">    var sum = 0;</span><br><span class="line">    for (let i=0; i&lt;100; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    // SyntaxError:</span><br><span class="line">    i += 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ES6标准引入了新的关键字const来定义常量，const与let都具有块级作用域</p></li><li><p>要保证<code>this</code>指向正确，必须用<code>obj.xxx()</code>的形式调用！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var xiaoming = &#123;</span><br><span class="line">    name: &apos;小明&apos;,</span><br><span class="line">    birth: 1990,</span><br><span class="line">    age: function () &#123;</span><br><span class="line">        var that = this; // 在方法内部一开始就捕获this</span><br><span class="line">        function getAgeFromBirth() &#123;</span><br><span class="line">            var y = new Date().getFullYear();</span><br><span class="line">            return y - that.birth; // 用that而不是this</span><br><span class="line">        &#125;</span><br><span class="line">        return getAgeFromBirth();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xiaoming.age(); // 25</span><br><span class="line">var tmp = xiaoming.age;</span><br><span class="line">tmp(); //NaN</span><br></pre></td></tr></table></figure></li><li><p>用 <code>apply</code>或<code>call</code>传<code>this</code><br>call和apply作用是一样的，都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部this的指向<br>从<a href="https://www.jianshu.com/p/aa2eeecd8b4f" target="_blank" rel="noopener">这里</a>抄的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Math.max.apply(null, [3, 5, 4]); // 5</span><br><span class="line">Math.max.call(null, 3, 5, 4); // 5</span><br></pre></td></tr></table></figure></li><li><p>名字空间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 唯一的全局变量MYAPP:</span><br><span class="line">var MYAPP = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">// 其他变量:</span><br><span class="line">MYAPP.name = &apos;myapp&apos;;</span><br><span class="line">MYAPP.version = 1.0;</span><br><span class="line"></span><br><span class="line">// 其他函数:</span><br><span class="line">MYAPP.foo = function () &#123;</span><br><span class="line">    return &apos;foo&apos;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>服务器在设置Cookie时可以使用<code>httpOnly</code>，设定了<code>httpOnly</code>的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持<code>httpOnly</code>选项，IE从IE6 SP1开始支持。</p></li><li><p>原生js获取children</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 获取节点test下的所有直属子节点:</span><br><span class="line">var cs = test.children;</span><br><span class="line"></span><br><span class="line">// 获取节点test下第一个、最后一个子节点：</span><br><span class="line">var first = test.firstElementChild;</span><br><span class="line">var last = test.lastElementChild;</span><br></pre></td></tr></table></figure></li><li><p>CSS允许<code>font-size</code>这样的名称，但它并非JavaScript有效的属性名，所以需要在JavaScript中改写为驼峰式命名<code>fontSize</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 获取&lt;p id=&quot;p-id&quot;&gt;...&lt;/p&gt;</span><br><span class="line">var p = document.getElementById(&apos;p-id&apos;);</span><br><span class="line">// 设置CSS:</span><br><span class="line">p.style.color = &apos;#ff0000&apos;;</span><br><span class="line">p.style.fontSize = &apos;20px&apos;;</span><br><span class="line">p.style.paddingTop = &apos;2em&apos;;</span><br></pre></td></tr></table></figure></li><li><p>一种是修改<code>innerHTML</code>属性，这个方式非常强大，不但可以修改一个DOM节点的文本内容，还可以直接通过HTML片段修改DOM节点内部的子树。<br>修改<code>innerText</code>或<code>textContent</code>属性，这样可以自动对字符串进行HTML编码，保证无法设置任何HTML标签。两者的区别在于读取属性时，innerText不返回隐藏元素的文本，而textContent返回所有文本。<br>innerHtml</p></li><li><p>没有name属性的<code>&lt;input&gt;</code>的数据不会被提交。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- HTML --&gt;</span><br><span class="line">&lt;form id=&quot;login-form&quot; method=&quot;post&quot; onsubmit=&quot;return checkForm()&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;password&quot; id=&quot;input-password&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;hidden&quot; id=&quot;md5-password&quot; name=&quot;password&quot;&gt;</span><br><span class="line">    &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">function checkForm() &#123;</span><br><span class="line">    var input_pwd = document.getElementById(&apos;input-password&apos;);</span><br><span class="line">    var md5_pwd = document.getElementById(&apos;md5-password&apos;);</span><br><span class="line">    // 把用户输入的明文变为MD5:</span><br><span class="line">    md5_pwd.value = toMD5(input_pwd.value);</span><br><span class="line">    // 继续下一步:</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>这是因为浏览器的同源策略导致的。默认情况下，JavaScript在发送AJAX请求时，URL的域名必须和当前页面完全一致。<br>完全一致的意思是，域名要相同（www.example.com和example.com不同），协议要相同（http和https不同），端口号要相同（默认是:80端口，它和:8080就不同）。有的浏览器口子松一点，允许端口不同，大多数浏览器都会严格遵守这个限制。</p></li><li>解决跨域请求的几种方法：Flash、同源服务器转发、JSONP、CORS<br>下面谈的都是CORS。跨域能否成功，取决于对方服务器是否愿意给你设置一个正确的Access-Control-Allow-Origin，决定权始终在对方手中<br>上面这种跨域请求，称之为“简单请求”。简单请求包括GET、HEAD和POST（POST的Content-Type类型<br>仅限application/x-www-form-urlencoded、multipart/form-data和text/plain），并且不能出现任何自定义头（例如，X-Custom: 12345），通常能满足90%的需求。<br>对于PUT、DELETE以及其他类型如application/json的POST请求，在发送AJAX请求之前，浏览器会先发送一个OPTIONS请求（称为preflighted请求）到这个URL上，询问目标服务器是否接受。</li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getElementById</span><br><span class="line">getElementsByTagName</span><br><span class="line">getElementsByClassName</span><br><span class="line"></span><br><span class="line">innerHTML //可以插入DOM</span><br><span class="line">innerText //会HTML编码</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> flask网站总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> 复习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
