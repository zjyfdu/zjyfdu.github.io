{"meta":{"version":1,"warehouse":"5.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"source/images/10535321.jpg","path":"images/10535321.jpg","modified":0,"renderable":0},{"_id":"source/images/11989810.jpg","path":"images/11989810.jpg","modified":0,"renderable":0},{"_id":"source/images/14151415.jpg","path":"images/14151415.jpg","modified":0,"renderable":0},{"_id":"source/images/20180930151428623.png","path":"images/20180930151428623.png","modified":0,"renderable":0},{"_id":"source/images/25005397.jpg","path":"images/25005397.jpg","modified":0,"renderable":0},{"_id":"source/images/26480255.jpg","path":"images/26480255.jpg","modified":0,"renderable":0},{"_id":"source/images/27110293.jpg","path":"images/27110293.jpg","modified":0,"renderable":0},{"_id":"source/images/29282650.jpg","path":"images/29282650.jpg","modified":0,"renderable":0},{"_id":"source/images/306118.jpg","path":"images/306118.jpg","modified":0,"renderable":0},{"_id":"source/images/32435128.jpg","path":"images/32435128.jpg","modified":0,"renderable":0},{"_id":"source/images/39223823.jpg","path":"images/39223823.jpg","modified":0,"renderable":0},{"_id":"source/images/41005456.jpg","path":"images/41005456.jpg","modified":0,"renderable":0},{"_id":"source/images/4478311.jpg","path":"images/4478311.jpg","modified":0,"renderable":0},{"_id":"source/images/47657351.jpg","path":"images/47657351.jpg","modified":0,"renderable":0},{"_id":"source/images/48652183.jpg","path":"images/48652183.jpg","modified":0,"renderable":0},{"_id":"source/images/49641113.jpg","path":"images/49641113.jpg","modified":0,"renderable":0},{"_id":"source/images/51626114.jpg","path":"images/51626114.jpg","modified":0,"renderable":0},{"_id":"source/images/54964765.jpg","path":"images/54964765.jpg","modified":0,"renderable":0},{"_id":"source/images/5689847.jpg","path":"images/5689847.jpg","modified":0,"renderable":0},{"_id":"source/images/56909416.jpg","path":"images/56909416.jpg","modified":0,"renderable":0},{"_id":"source/images/62552972.jpg","path":"images/62552972.jpg","modified":0,"renderable":0},{"_id":"source/images/69146591.jpg","path":"images/69146591.jpg","modified":0,"renderable":0},{"_id":"source/images/70081567.jpg","path":"images/70081567.jpg","modified":0,"renderable":0},{"_id":"source/images/73637538.jpg","path":"images/73637538.jpg","modified":0,"renderable":0},{"_id":"source/images/77705439.jpg","path":"images/77705439.jpg","modified":0,"renderable":0},{"_id":"source/images/8709950.jpg","path":"images/8709950.jpg","modified":0,"renderable":0},{"_id":"source/images/89948814.jpg","path":"images/89948814.jpg","modified":0,"renderable":0},{"_id":"source/images/9235447.jpg","path":"images/9235447.jpg","modified":0,"renderable":0},{"_id":"source/images/94641900.jpg","path":"images/94641900.jpg","modified":0,"renderable":0},{"_id":"source/images/98241099.jpg","path":"images/98241099.jpg","modified":0,"renderable":0},{"_id":"source/images/98459920.jpg","path":"images/98459920.jpg","modified":0,"renderable":0},{"_id":"source/images/U.jpg","path":"images/U.jpg","modified":0,"renderable":0},{"_id":"source/images/V.jpg","path":"images/V.jpg","modified":0,"renderable":0},{"_id":"source/images/Y.jpg","path":"images/Y.jpg","modified":0,"renderable":0},{"_id":"source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":0},{"_id":"source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":0},{"_id":"source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":0},{"_id":"source/images/caffe_conv.jpg","path":"images/caffe_conv.jpg","modified":0,"renderable":0},{"_id":"source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":0},{"_id":"source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":0},{"_id":"source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":0},{"_id":"source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":0},{"_id":"source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":0},{"_id":"source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":0},{"_id":"source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":0},{"_id":"source/images/cgan.jpg","path":"images/cgan.jpg","modified":0,"renderable":0},{"_id":"source/images/cgan_d.jpg","path":"images/cgan_d.jpg","modified":0,"renderable":0},{"_id":"source/images/ctc.jpg","path":"images/ctc.jpg","modified":0,"renderable":0},{"_id":"source/images/cycle_gan.jpg","path":"images/cycle_gan.jpg","modified":0,"renderable":0},{"_id":"source/images/direct_trans.jpg","path":"images/direct_trans.jpg","modified":0,"renderable":0},{"_id":"source/images/direct_trans2.jpg","path":"images/direct_trans2.jpg","modified":0,"renderable":0},{"_id":"source/images/favicon-16x16-next.ico","path":"images/favicon-16x16-next.ico","modified":0,"renderable":0},{"_id":"source/images/favicon-32x32-next.ico","path":"images/favicon-32x32-next.ico","modified":0,"renderable":0},{"_id":"source/images/image-20190714094504609.png","path":"images/image-20190714094504609.png","modified":0,"renderable":0},{"_id":"source/images/image-20190714094525575.png","path":"images/image-20190714094525575.png","modified":0,"renderable":0},{"_id":"source/images/image-20200919223818373.png","path":"images/image-20200919223818373.png","modified":0,"renderable":0},{"_id":"source/images/img2img.jpg","path":"images/img2img.jpg","modified":0,"renderable":0},{"_id":"source/images/jiangxun.png","path":"images/jiangxun.png","modified":0,"renderable":0},{"_id":"source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":0},{"_id":"source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":0},{"_id":"source/images/mle_equals_kl.jpg","path":"images/mle_equals_kl.jpg","modified":0,"renderable":0},{"_id":"source/images/origin_gan.jpg","path":"images/origin_gan.jpg","modified":0,"renderable":0},{"_id":"source/images/origin_gan2.jpg","path":"images/origin_gan2.jpg","modified":0,"renderable":0},{"_id":"source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":0},{"_id":"source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":0},{"_id":"source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":0},{"_id":"source/images/rotImageBGR.jpg","path":"images/rotImageBGR.jpg","modified":0,"renderable":0},{"_id":"source/images/rotU.jpg","path":"images/rotU.jpg","modified":0,"renderable":0},{"_id":"source/images/rotV.jpg","path":"images/rotV.jpg","modified":0,"renderable":0},{"_id":"source/images/rotY.jpg","path":"images/rotY.jpg","modified":0,"renderable":0},{"_id":"source/images/screencapture-192-168-1-104-8088-onlyoffice-1-2020-05-11-22_28_35.png","path":"images/screencapture-192-168-1-104-8088-onlyoffice-1-2020-05-11-22_28_35.png","modified":0,"renderable":0},{"_id":"source/images/screencapture-192-168-1-104-8088-onlyoffice-2020-05-11-22_27_51.png","path":"images/screencapture-192-168-1-104-8088-onlyoffice-2020-05-11-22_27_51.png","modified":0,"renderable":0},{"_id":"source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":0},{"_id":"source/images/speach.jpg","path":"images/speach.jpg","modified":0,"renderable":0},{"_id":"source/images/stack_gan.jpg","path":"images/stack_gan.jpg","modified":0,"renderable":0},{"_id":"source/images/star_gan.jpg","path":"images/star_gan.jpg","modified":0,"renderable":0},{"_id":"source/images/test2.png","path":"images/test2.png","modified":0,"renderable":0},{"_id":"source/images/v2-45795a63cdbaac8c05d875dfb6fcfb5a_r.jpg","path":"images/v2-45795a63cdbaac8c05d875dfb6fcfb5a_r.jpg","modified":0,"renderable":0},{"_id":"source/images/v2-8630f8d3dbe3634f124eaf82f222ca94_r.jpg","path":"images/v2-8630f8d3dbe3634f124eaf82f222ca94_r.jpg","modified":0,"renderable":0},{"_id":"source/images/屏幕快照 2019-07-14 上午1.15.21-3039456.png","path":"images/屏幕快照 2019-07-14 上午1.15.21-3039456.png","modified":0,"renderable":0},{"_id":"source/images/屏幕快照 2019-07-15 下午11.26.42.png","path":"images/屏幕快照 2019-07-15 下午11.26.42.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/package.json","hash":"dfbdeb51389ad48d72e728f3a157565423e92804","modified":1699184553975},{"_id":"source/_drafts/ceshi.md","hash":"dff91ada41f3c3b0cf356882165ca37c2774305a","modified":1699184553902},{"_id":"source/_drafts/20210806.md","hash":"b51c6c43f7abb63b706d0f486c9321ddc4903f05","modified":1699184553902},{"_id":"source/_drafts/想想最近的TODO.md","hash":"5e70e0776fe26f7776552e5ee60fc6592193ff17","modified":1699184553902},{"_id":"source/_drafts/word2vec.md","hash":"f7189fcb74299f8c53e4c1b159b4c759deb7f71e","modified":1699184553902},{"_id":"source/_drafts/要2019年了.md","hash":"a39d1c5418f55ddde0bda0618224d9f26c610283","modified":1699184553902},{"_id":"source/_posts/Attention.md","hash":"6d03a91e81d7ccabf0efe0582695fff4019deeb6","modified":1699184553902},{"_id":"source/_posts/CTC.md","hash":"51bf366e5792b88f6181d74ec529bfe29dc41f6a","modified":1699184553903},{"_id":"source/_posts/CPU历史考古.md","hash":"59c119413ff404ff556bb98cf678bee64926d8a4","modified":1699184553902},{"_id":"source/_posts/C宏函数重载.md","hash":"4487d1ceb3bcf70bd7bd4eab7535469aebd8798f","modified":1699184553903},{"_id":"source/_posts/GAN总结.md","hash":"111312422440151d1d2748d5f3a5271d4cf09a63","modified":1699184553903},{"_id":"source/_posts/Flask-migrate-No-support-for-ALTER-of-constraints-in-SQLite-dialect.md","hash":"03e458dec53cb40a92994bdf19c2ee16aa1ddec8","modified":1699184553903},{"_id":"source/_posts/JS复习笔记.md","hash":"f4dc203cc6b979840f1e8b7497b58e7e86a41ee4","modified":1699184553903},{"_id":"source/_posts/Joint-Attention-CTC.md","hash":"10affa4ad8fbd86d4dead1f43e6e54145f52821f","modified":1699184553903},{"_id":"source/_posts/RGB和YUV.md","hash":"c9f77cd1faf585ce9e4965311ba2c0c91de4b7a7","modified":1699184553903},{"_id":"source/_posts/YOLO2.md","hash":"c5fa8963afe5a29882c6d7442ccfdc57702bef1a","modified":1748760629327},{"_id":"source/_posts/caffe-学习笔记.md","hash":"f148a0a8241c6baa1db2dd322154e948c1053738","modified":1699184553903},{"_id":"source/_posts/application-x-www-form-urlencoded和multipart-form-data.md","hash":"54863127537e86dd1812e47f9e39c4b490bb8b66","modified":1699184553903},{"_id":"source/_posts/c-文件复制.md","hash":"991a9c43423ab993f46b3e6c1652c09d18adf5ca","modified":1699184553903},{"_id":"source/_posts/caffe运行顺序.md","hash":"abd1d23b29b9b7c8a6a069bb2621c30b026bd892","modified":1699184553903},{"_id":"source/_posts/conda-常用命令.md","hash":"df1373e82468b84863d918c38563b4c49b91355d","modified":1699184553903},{"_id":"source/_posts/c复习笔记.md","hash":"923903cd6fab0923ef5192e5ce74a321a0354508","modified":1699184553904},{"_id":"source/_posts/css-浮动塌陷.md","hash":"03e6593cf5690f4a0ec5aaae2f2b402e78a2829b","modified":1699184553903},{"_id":"source/_posts/deeplab.md","hash":"f892198e0c5942a19541afa5f3746cfcc50a8ca8","modified":1699184553904},{"_id":"source/_posts/grep中的正则表达式.md","hash":"52383d618e20117875d7219d19e4fdddc7eee511","modified":1699184553904},{"_id":"source/_posts/flask部署：gunicorn和nginx安装记录.md","hash":"092321dc421e3d0e4b513daca87ef5a442a72c5d","modified":1699184553904},{"_id":"source/_posts/https原理和使用流程.md","hash":"1b4068c61ed2959f429c8f840eb3328bd6090897","modified":1699184553904},{"_id":"source/_posts/jQuery笔记.md","hash":"f5e7593a1d6cdad4bfc1481f1930d4894ebc8a50","modified":1699184553904},{"_id":"source/_posts/mobileNet和shuffleNet.md","hash":"748f9be1bf886f9691877acebe21cd8c7695f989","modified":1699184553904},{"_id":"source/_posts/nginx-开启gzip.md","hash":"7a7f4651085fa401b0c30625a7574ceff5059a00","modified":1699184553904},{"_id":"source/_posts/mt19937.md","hash":"861f476554d8fa3e03f1eabc4c50f8cca7d98c60","modified":1699184553904},{"_id":"source/_posts/onlyoffice文档在线编辑.md","hash":"06b523d99a11a450f294636bf7bf908d40a4348d","modified":1699184553904},{"_id":"source/_posts/openCV-总结.md","hash":"d44807a4bae7622ec97c7a0e9136f2e385b20991","modified":1699184553904},{"_id":"source/_posts/python-里的字符串编码问题.md","hash":"814a926f45ac68dadd43d25628b8a2b12408d12c","modified":1699184553904},{"_id":"source/_posts/npm、webpack和vue.md","hash":"0fc14cd875a2d878b616f99efc5af3bed5fd8cdc","modified":1699184553904},{"_id":"source/_posts/scrapy-爬虫.md","hash":"01ef50df69edf42f965def64b56d63052ea8f04d","modified":1699184553905},{"_id":"source/_posts/unix和linux历史考古.md","hash":"a2f29e3545354fcd515c6b2122fca0a0dcc53be0","modified":1699184553905},{"_id":"source/_posts/sqlite-常用命令.md","hash":"8ae25e6e62519f52da5d0421b88f32081ec78c52","modified":1699184553905},{"_id":"source/_posts/python把bmp转换成jpg.md","hash":"7bb211e8be0e975be1f53b838138d0547055050e","modified":1699184553904},{"_id":"source/_posts/visual-studio-13使用boost.md","hash":"f6ffab482bfa0486a3af83c3bf72cf5bc47b0da8","modified":1699184553905},{"_id":"source/_posts/write-a-shell-in-c.md","hash":"4706c8d748d238764bc132ee1b5430dcc4aaec92","modified":1699184553905},{"_id":"source/_posts/一些shell命令.md","hash":"f5eddb8e73730cfe79deea2aba99de69a751b831","modified":1699184553905},{"_id":"source/_posts/优秀的Typora.md","hash":"34881677167d4e11c6e07653cc94e2a0fa0a792a","modified":1699184553905},{"_id":"source/_posts/前端历史.md","hash":"46c43bfe427e7514d606a79b9f9b96c65b32f903","modified":1699184553905},{"_id":"source/_posts/卷积的实现.md","hash":"9dcdb529cc714ba3419c78b83f31148434d56a8e","modified":1699184553905},{"_id":"source/_posts/又是火车上的博客.md","hash":"dff4447b9d7fe2229bccd1beabe8fe8b02420edd","modified":1699184553905},{"_id":"source/_posts/大数乘法.md","hash":"eddec1ad38c123b9c226212a6c5ec9d8dcf519a4","modified":1699184553905},{"_id":"source/_posts/奇异值分解.md","hash":"e8c6c398378645f9b92a34d629712a855404e9fc","modified":1699184553905},{"_id":"source/_posts/如何优雅地排人才公寓.md","hash":"7012f95e72b5da2bfd24808b344565a791fe4e6e","modified":1699184553906},{"_id":"source/_posts/吴恩达deeplearning-ai课程学习笔记.md","hash":"eef7deeb426fc01ba68e38406201415e9a414a63","modified":1699184553905},{"_id":"source/_posts/服务器端口记录.md","hash":"7356ae5fc89c5bf330ba016c18dff3d74ea625ba","modified":1699184553906},{"_id":"source/_posts/百度真香.md","hash":"49c91a79ff92f341214ec788b6dffcea659791e7","modified":1699184553906},{"_id":"source/_posts/正则.md","hash":"9e95afd1316f3cb2849981e7fc223276811b41bb","modified":1699184553906},{"_id":"source/_posts/微信公众号机器人.md","hash":"f341c0001afdf338dbf76e17e6925d8fc9ed2b25","modified":1699184553906},{"_id":"source/_posts/看过的论文汇总.md","hash":"190b2b6bdf2136d0c4841570d15cf030920ba798","modified":1699184553906},{"_id":"source/_posts/老子在火车上写博客.md","hash":"7bb9d14edae3021f1d056dd44d00bf7cc418c050","modified":1699184553906},{"_id":"source/_posts/蒋勋的红楼梦.md","hash":"2427ee06d7605b84307cabb677c37ef05f53bf07","modified":1699184553906},{"_id":"source/_posts/视频防盗啊啊.md","hash":"f0ab820da1d222446cbeb70c8833c89156a1ea9b","modified":1699184553906},{"_id":"source/_posts/记录一个vscode的bug.md","hash":"0a493fbf5b02c7357a3ee93dd0926550158eb0e6","modified":1699184553906},{"_id":"source/_posts/计算感受野.md","hash":"45aaa0583605dd6dfec5b0f24615ff77596b987b","modified":1699184553906},{"_id":"source/_posts/这也太破了.md","hash":"55be16cc7966be07259706fa59f98a4322d787f5","modified":1699184553906},{"_id":"source/_posts/贪吃蛇AI.md","hash":"9e9b6dc13d57ad67250a6fbbaae9942187d40a39","modified":1699184553906},{"_id":"source/_posts/配置评论、搜索和代码.md","hash":"66c09f498781c9672ebe0c8eab6090b3637c2d97","modified":1699184553907},{"_id":"source/_posts/阅读更多.md","hash":"abf4fad05463c81cce935ee420ea17e2be8d5331","modified":1699184553907},{"_id":"source/_posts/随便写点什么吧.md","hash":"87d0b48ffc0badbbf129928f9ad73acaa646d5eb","modified":1699184553907},{"_id":"source/about/index.md","hash":"a6aacf239f73ecc616a7f3d744e93b3ac3b710dc","modified":1699184553907},{"_id":"source/categories/index.md","hash":"2dc4597e7e7ae4352bd5de268b0d9404fe80edc5","modified":1699184553907},{"_id":"source/images/11989810.jpg","hash":"f72d27abfcfa9f758ef36d64d35bb0b6dad448a0","modified":1699184553908},{"_id":"source/images/14151415.jpg","hash":"81579350c1ac96ff97def2fe40cfd53d20fd2d29","modified":1699184553908},{"_id":"source/images/20180930151428623.png","hash":"d99e99ee36bd9e0be7b8f9168ea746dde67fbee8","modified":1699184553909},{"_id":"source/images/25005397.jpg","hash":"a10ff200bf42131c1cd997e06bdb5acd76a224b2","modified":1699184553909},{"_id":"source/images/29282650.jpg","hash":"81579350c1ac96ff97def2fe40cfd53d20fd2d29","modified":1699184553911},{"_id":"source/images/306118.jpg","hash":"1a17f1f980c89b80efcb895373c2ad4101a152ad","modified":1699184553912},{"_id":"source/images/32435128.jpg","hash":"17f1de503b7a82eae4bdfc79d82540b76b22ef6f","modified":1699184553912},{"_id":"source/images/77705439.jpg","hash":"26e4dde4e8536a196b8d58e4041be07e96f3a06c","modified":1699184553938},{"_id":"source/images/8709950.jpg","hash":"86ea3bad3c6e238f5b255042a70ca631204d711b","modified":1699184553939},{"_id":"source/images/9235447.jpg","hash":"1cd7e43e54ff47bfc7ff1bff50fe3274d1dfdd57","modified":1699184553939},{"_id":"source/images/94641900.jpg","hash":"2904ed9cd39a90ddd647848fe5433554b23f05d3","modified":1699184553940},{"_id":"source/images/U.jpg","hash":"42643f130c44592f8648d99a32124c1143f9c58d","modified":1699184553945},{"_id":"source/images/V.jpg","hash":"af112e55e7998a581e2a20aba05e754417bb825c","modified":1699184553945},{"_id":"source/images/Y.jpg","hash":"1483ec0c9bf5323b6fb29e5c30d2c8a69cb4a54a","modified":1699184553945},{"_id":"source/images/98459920.jpg","hash":"1cd7e43e54ff47bfc7ff1bff50fe3274d1dfdd57","modified":1699184553945},{"_id":"source/images/algolia_logo.svg","hash":"278ffcea4876b37657f2e192bda48c6bc7dd8784","modified":1699184553945},{"_id":"source/images/avatar.gif","hash":"469716daaca42686e95d713c640cd9d89e9a08c9","modified":1699184553946},{"_id":"source/images/apple-touch-icon-next.png","hash":"b972160c147e9bec3a0f7432e6e80dfa92581b0b","modified":1699184553946},{"_id":"source/images/caffe_conv.jpg","hash":"5e20d254262aa34508b9ef64b3cdf9f35060bd30","modified":1699184553946},{"_id":"source/images/cc-by-nc-nd.svg","hash":"fb0137e7df47a0c6c15641a1b38e7df78aaafd72","modified":1699184553946},{"_id":"source/images/cc-by-nc-sa.svg","hash":"50a8ecb71c8051d44dff4a6ef477e23520a90af3","modified":1699184553946},{"_id":"source/images/cc-by-nc.svg","hash":"85c2d9a4d2a5342085ec759b135cec251dd7f538","modified":1699184553946},{"_id":"source/images/cc-by-nd.svg","hash":"3c57ccdb3762c8d6eb2669a65bbbc18c7bbd46a7","modified":1699184553946},{"_id":"source/images/cc-by-sa.svg","hash":"268986682e7e2a2c85053f696007942e0fc43853","modified":1699184553946},{"_id":"source/images/cc-by.svg","hash":"c72feca504a517f6f5aaade0205a0c1b71f16c5a","modified":1699184553946},{"_id":"source/images/cc-zero.svg","hash":"b83fd950c6bffebb4fdc8d8ff9c0cea3c2ebfa8e","modified":1699184553946},{"_id":"source/images/cgan.jpg","hash":"46bdb34c8a18f5f72cc9b3d640b9d78eb5ca411f","modified":1699184553947},{"_id":"source/images/cgan_d.jpg","hash":"99bf28c4245ff2a85390e8baea3cf83334e1bd3c","modified":1699184553947},{"_id":"source/images/favicon-32x32-next.ico","hash":"74369ddcfb0dbb21ca1c9fd7c166b330baab331a","modified":1699184553952},{"_id":"source/images/favicon-16x16-next.ico","hash":"3d11ec96a00a451f9cef73b293f6b2eae8f9bc3a","modified":1699184553952},{"_id":"source/images/image-20200919223818373.png","hash":"205e1283e6ab418761818613bf7d35d640cb0b7f","modified":1699184553957},{"_id":"source/images/logo.svg","hash":"029e38efc56a793da1a650418bc715185bb5a2c7","modified":1699184553960},{"_id":"source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1699184553960},{"_id":"source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1699184553963},{"_id":"source/images/quote-l.svg","hash":"1708b1c302c85dad66ada25bdb5b560861a007d3","modified":1699184553963},{"_id":"source/images/origin_gan2.jpg","hash":"c6ae2f3f9cf00c5725b0002963e13e2b5e63e93f","modified":1699184553963},{"_id":"source/images/quote-r.svg","hash":"b2251283267cab9186a437cded16a1b929b81097","modified":1699184553963},{"_id":"source/images/rotImageBGR.jpg","hash":"e00669b787536597a69bed491cb9f383ca3ab72b","modified":1699184553963},{"_id":"source/images/rotY.jpg","hash":"499185ed7d4111c2728b0908dbdb502ba4553527","modified":1699184553964},{"_id":"source/images/rotV.jpg","hash":"dedeb316c80aec7bdfa4668ffa5bf64e0ff225bb","modified":1699184553963},{"_id":"source/images/rotU.jpg","hash":"021cfa5e8107aa3af28bac28a3faad9781310443","modified":1699184553963},{"_id":"source/images/searchicon.png","hash":"00eed611c73d736ddea861a92d8c91d44aefef5c","modified":1699184553965},{"_id":"source/tags/index.md","hash":"409bbac78eefdae2625780e01216268f0dc2bd9a","modified":1699184553975},{"_id":"source/images/10535321.jpg","hash":"b42db9d20f3eb9faa8a21dfaff9d081116e6d4b9","modified":1699184553908},{"_id":"source/images/51626114.jpg","hash":"381ccd352b189bcdbc9d3e203843c1c04aa57d20","modified":1699184553919},{"_id":"source/images/62552972.jpg","hash":"9cf19de63b4d9dc28178e1b285733bfa55e68bb1","modified":1699184553935},{"_id":"source/images/70081567.jpg","hash":"2a015b15c5be11d3c6cf4a8f9a80c808278b825b","modified":1699184553937},{"_id":"source/images/89948814.jpg","hash":"963bf8ac0932675b8220a61e1b1d46ed22f7b184","modified":1699184553939},{"_id":"source/images/ctc.jpg","hash":"3d74095c12135564575bf9abf67e22197e443a50","modified":1699184553948},{"_id":"source/images/v2-45795a63cdbaac8c05d875dfb6fcfb5a_r.jpg","hash":"2728336c5538c2a71858f0ef124b023c38720ba8","modified":1699184553970},{"_id":"source/images/26480255.jpg","hash":"0991a00a5941a314d42efb574414dcfacc111e8c","modified":1699184553910},{"_id":"source/images/41005456.jpg","hash":"d25046ab961dafc744e87e06c6463dbb69ee0fb8","modified":1699184553914},{"_id":"source/images/39223823.jpg","hash":"677c8200c76464fe3fabe622f419ade050ee70b8","modified":1699184553913},{"_id":"source/images/49641113.jpg","hash":"1ca6ee4e3b77ba478dd773e862bb41e0918113ae","modified":1699184553918},{"_id":"source/images/48652183.jpg","hash":"9b4e2c51b6ffc866125ea79007b17801edcd92df","modified":1699184553917},{"_id":"source/images/47657351.jpg","hash":"60c41100fce01c068a957df964a50bf9ad2d4faa","modified":1699184553916},{"_id":"source/images/69146591.jpg","hash":"59711d919565de9e878a2d350d23ba1391d4d5c8","modified":1699184553937},{"_id":"source/images/73637538.jpg","hash":"045e3a3873e08d673f749c9b686f4735b40487ba","modified":1699184553938},{"_id":"source/images/jiangxun.png","hash":"44a80dd76d5be902a4cf7a9bf4665391f1698aff","modified":1699184553960},{"_id":"source/images/mle_equals_kl.jpg","hash":"ece5657254d82479b23f26deb0bca3dbbda25cdd","modified":1699184553960},{"_id":"source/images/screencapture-192-168-1-104-8088-onlyoffice-2020-05-11-22_27_51.png","hash":"459ccb4dec2272198b30dc2d156897958aa6f13d","modified":1699184553965},{"_id":"source/images/star_gan.jpg","hash":"34ddba249a4b5b9b22da12cae42b47298a031f73","modified":1699184553968},{"_id":"source/images/speach.jpg","hash":"bbf6891d9c880a6f0064c81ff6e68637d9dfd980","modified":1699184553966},{"_id":"source/images/v2-8630f8d3dbe3634f124eaf82f222ca94_r.jpg","hash":"b966413a83ca664f62d70c612b092c8cfbeb8eb3","modified":1699184553970},{"_id":"source/images/27110293.jpg","hash":"b4cd305345e335f94067b7cd89550e53137685c9","modified":1699184553911},{"_id":"source/images/cycle_gan.jpg","hash":"8d619de312431fb39edd88473d7be82223d0facb","modified":1699184553949},{"_id":"source/images/direct_trans.jpg","hash":"6ee0cd088aac73ef32a345d32405ebcdc6b755ec","modified":1699184553950},{"_id":"source/images/direct_trans2.jpg","hash":"77214a068b6f3efa9d827910a6ae9a38b699f4dc","modified":1699184553952},{"_id":"source/images/img2img.jpg","hash":"05b4189eeb58a19e467dc09b3bc949ec1b07b123","modified":1699184553959},{"_id":"source/images/screencapture-192-168-1-104-8088-onlyoffice-1-2020-05-11-22_28_35.png","hash":"7398ede5b664b92a18180e6848566bdd8d22d2f4","modified":1699184553964},{"_id":"source/images/stack_gan.jpg","hash":"2891941d13202a3d3c5a96ee290c6482cd06c2f7","modified":1699184553968},{"_id":"source/images/test2.png","hash":"e844dacfe03ce035eab8b221e688f6e4257b1d7f","modified":1699184553969},{"_id":"source/images/屏幕快照 2019-07-15 下午11.26.42.png","hash":"fc852149ed145382a14be7bc759fd67e22bde518","modified":1699184553975},{"_id":"source/images/4478311.jpg","hash":"c7e71196865f9770f262f05d3f717687a830d5c2","modified":1699184553915},{"_id":"source/images/origin_gan.jpg","hash":"389c41becf24dab65dd570b3a1e4f94304ad69a2","modified":1699184553962},{"_id":"source/images/image-20190714094525575.png","hash":"52e60b51c43448539bda401b3bcca3e2aad2be6e","modified":1699184553956},{"_id":"source/images/image-20190714094504609.png","hash":"ceb492b16982d4f86067b8803604bb9756064f9e","modified":1699184553954},{"_id":"source/images/屏幕快照 2019-07-14 上午1.15.21-3039456.png","hash":"5eb1b242836a24b1ebfa4d2ef876c9b199f91c3e","modified":1699184553974},{"_id":"source/images/54964765.jpg","hash":"54f9f8a1e34e8ca9aa310a3317ad3cf148381592","modified":1699184553922},{"_id":"source/images/5689847.jpg","hash":"8144de3bf675e9118fd37f832095891136ca2f8e","modified":1699184553928},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"bf0142e3cdb4c8da06e9aa971bc0bdf230f5db45","modified":1699184831076},{"_id":"node_modules/hexo-theme-next/package.json","hash":"282d6226513c39ad97793596922da638475a5f66","modified":1699184830976},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1699184830986},{"_id":"node_modules/hexo-theme-next/README.md","hash":"d6820f46d03a93bd6dc8b10f49f58aec82ad2b06","modified":1699184830991},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"7d0f39e8684284a04bb9808521c87fecda8bd131","modified":1699184831076},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"dae3faa04648aeb0fd91961843a15122dcc73299","modified":1699184831076},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"79b37df731c29665dee6cd7c90d278e1edfb6e24","modified":1699184831077},{"_id":"node_modules/hexo-theme-next/languages/bn.yml","hash":"564bed75da6e05b11dce6164508f97a15e2fb6c2","modified":1699184831077},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"dffc63ef42e1266b88e0acf08994fd17a9908d53","modified":1699184831095},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"8ac44e58f71a38b7697a2f7f98a6971ed818cb5b","modified":1699184831095},{"_id":"node_modules/hexo-theme-next/languages/eo.yml","hash":"e34bb33ae827bf2f0727088599a73bc64bdad1b0","modified":1699184831095},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1699184831094},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"f3ffc444599f4ac92d62e9ed00a1490ebc277d70","modified":1699184831095},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1699184830990},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"543222bfc516aab6c33e8534f807972ecb8943a9","modified":1699184831096},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"16d716ecfd748def2f6486ef5a82d0ab7ceb4890","modified":1699184831096},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"d345a303310c8a5f4836c3683f3580f861ebd1b4","modified":1699184831097},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"929df147f4f17d638b07de5fe52ca13e2549ab1c","modified":1699184831096},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"3cb3687696635ec71b4ca40c5fc43b56acc8843e","modified":1699184831097},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"76b8576ce228d540a16b1f0af5af2cce20923194","modified":1699184831098},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"c6d8de0ff7d8148d09993257cfd3b7aca755696c","modified":1699184831098},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"70de366e10ea584ba039d40d6b35ac97f93454ad","modified":1699184831098},{"_id":"node_modules/hexo-theme-next/languages/th.yml","hash":"6829e998b39f8f143e20b276bb1f62d95a29de58","modified":1699184831099},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"511726054873f6f8d7ce0d2e803f6731de0ddbe7","modified":1699184831099},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"2d712eedf3f60d04d36c3108cf5a12e2a52e875c","modified":1699184831098},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"a57e4ed089b893a95f5e1ecff17ce625165f4d46","modified":1699184831099},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"ff537047b4b4c3ca9a7b64fa7f428a9942751eeb","modified":1699184831099},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"7ebcba5e1128784195e4681dffc9d34c4e873fec","modified":1699184831100},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"88ea50eeb9097ab4a87a44981a102d8594feb064","modified":1699184831101},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1699184831075},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1699184830983},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1699184830981},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"fc0a45112f2dcfc2642404e8934ea32a793c3bd7","modified":1699184830992},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"741d7efe0262c9cdc2c648014b55599665d90f6b","modified":1699184831101},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1699184830996},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1699184831003},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1699184831012},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1699184831022},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"b0660b2af0ac7d3fda14ca4d9f2c9e79ef06c6f9","modified":1699184831018},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"4695c87d6b81b3a23d16ad6513d9eaa925f8d8ad","modified":1699184831101},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1699184830894},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1699184830929},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"12a6631617695504d5cf2a94b57d87bd331bef6f","modified":1699184830984},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"447db39d17775b2bd18d8af9c9d65b7b8449f751","modified":1699184830945},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1699184830985},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1699184830964},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1699184830941},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"12a3e96581964a22b474cc739675d52ef93ff932","modified":1699184830989},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1699184831024},{"_id":"node_modules/hexo-theme-next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1699184830951},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"ead37e9167b682f1fa34b5401c3050e18c7ee4a3","modified":1699184830957},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"6281d47c1de98eb38f3aa0f6df29bbb19d412173","modified":1699184830959},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"957241c28796ff352de7f4cffba7bb289b043586","modified":1699184830961},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1699184830846},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1699184830845},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1699184830958},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1699184830847},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"1f6aba7820f1fb58b61969485148db21846e1aa9","modified":1699184830930},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":1699184830913},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1699184830924},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1699184830938},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1699184830943},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1699184830961},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1699184830920},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1699184830963},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1699184830968},{"_id":"node_modules/hexo-theme-next/scripts/tags/wavedrom.js","hash":"b44dfeeb58b41945d469141787f3dbce4b117d08","modified":1699184830974},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"29c89a41b371f893e56c87ea61adabc444ec58cc","modified":1699184830987},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1699184830937},{"_id":"node_modules/hexo-theme-next/layout/_third-party/addtoany.njk","hash":"ef64c6bfb8540cd874701236b9be47db2496e98e","modified":1699184830993},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"dfd7cdd6ba89f8c3deabc27726c7a350cadafd11","modified":1699184831011},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1699184831007},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1699184831017},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1699184831022},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"65e9112fb7eb26d2880db624554a99aca028140b","modified":1699184831022},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1699184831023},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"6fca18ed4234cf54146c2b3b97b0a6a3606ab33d","modified":1699184831008},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"abda600685ee972e1f6b7a2dcc56f13e2daa6263","modified":1699184831020},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1699184831006},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1699184831013},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1699184831018},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1699184831025},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"e7f988ecddb2159313699a00827a45eca5622bd4","modified":1699184831026},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1699184831028},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1699184831026},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1699184831065},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1699184831010},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1699184831027},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1699184830974},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1699184830734},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"83647a6207333b9609ba90b0946b3fa9548e6381","modified":1699184831036},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1699184831061},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1699184831074},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1699184830872},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1699184831027},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1699184830836},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1699184831074},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1699184830873},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1699184830884},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"745bd828205da7e5fbd3f860cc3697097630f5f3","modified":1699184830952},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1699184830859},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1699184830875},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1699184830885},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1699184830902},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1699184830897},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1699184830964},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1699184830931},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1699184830922},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1699184830939},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1699184830882},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1699184830972},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1699184830925},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1699184830930},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1699184830951},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"6853e5433e3eaa19ea43fa20b08d956ba4cec4ac","modified":1699184830969},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"464db1e7182e5b9cdbd32e8b5368d5e683b1d9c7","modified":1699184830973},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1699184831024},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1699184830946},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1699184830996},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1699184830966},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"d775148c2bf20c028622af5609a788167352bf1e","modified":1699184830970},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1699184831005},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1699184831005},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1699184831016},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1699184831011},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1699184831004},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/umami.njk","hash":"3343750682fbd8535e50f8129be3003ad26015b4","modified":1699184831024},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1699184831008},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1699184831015},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1699184831019},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1699184831009},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1699184831024},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1699184831007},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1699184831007},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1699184831011},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1699184831012},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1699184831013},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1699184831012},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1699184831002},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1699184831013},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1699184831015},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1699184831008},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1699184830995},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1699184831011},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1699184831008},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1699184831016},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1699184831015},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/wavedrom.njk","hash":"02202bf563fb5eedde2ccad4d6c5b9109d30a703","modified":1699184831025},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1699184831009},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1699184831010},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1699184830999},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1699184831009},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1699184831019},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1699184831016},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1699184831021},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1699184831020},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1699184831021},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1699184831015},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1699184831021},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-share.njk","hash":"16696990e4ce65fc8db18c4635082a5d5d06ff07","modified":1699184831021},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1699184831010},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1699184831014},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"bfff923526d6800218f08dba6ce0bbf5c17755fd","modified":1699184831020},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1699184830994},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1699184831024},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1699184831003},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1699184831022},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1699184831001},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"bc5708e38b6070dff0cab6bf9480971017ce4dda","modified":1699184831023},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1699184831023},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1699184831049},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1699184831064},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"48f4f277946a168d0db1ea02804e85c22ca2c7db","modified":1699184831065},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"c4fc4e862d09221265ab1466085f057be2ad2e4d","modified":1699184831040},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1699184830950},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1699184830763},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1699184831017},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1699184830962},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1699184830914},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1699184830965},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1699184831050},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1699184831034},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"7664491542046df9a3887cf40a06e00c0b4086a9","modified":1699184831038},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"a1418c9dc8c0f1a0ad4ded0f4627c45bf0db1a10","modified":1699184831062},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"dafc6d23c80d6fe3e55a7711e94210d2479b629a","modified":1699184831030},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1699184831036},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"1dbf2c339adcd27026c3a2ded32ee91ce08cea26","modified":1699184831064},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1699184831055},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1699184831068},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1699184831039},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1699184831045},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1699184831045},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1699184831064},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1699184831034},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"9dfe853c901bdc52fc950bacdf15484dbb9bf140","modified":1699184831060},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1699184831057},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1699184831065},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"3fbfab591f280e2e7f3b0265901c93bc4bd137ed","modified":1699184831032},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"6569a6640f79d247a8235b3914772c0e2f99ead2","modified":1699184831034},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1699184831072},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"782ee1fc5e669d3ddbfeb82b73ad7fe561f1a4fb","modified":1699184831074},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"547c0b5cd5e7ea10d21863d13a6b16579a49396c","modified":1699184831036},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"26a0cba1eee5de45a45a5e14e17707f905390512","modified":1699184831034},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"ac2dc0ce9c775a83ef7132ae957b54539366ac9c","modified":1699184831033},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1699184831037},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1699184831035},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1699184831060},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1699184831037},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1699184830923},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"82cda756f5b7092df2eee6641b9786df71623bdb","modified":1699184831035},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1699184831061},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1699184830824},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1699184830924},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1699184831060},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1699184830942},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1699184830968},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1699184830867},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1699184830901},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1699184830904},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1699184830922},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1699184830931},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1699184830972},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"91dbf3ca5c3a613d4e30618c120da535bf2d0336","modified":1699184831036},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1699184830939},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1699184830940},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1699184830919},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1699184830941},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1699184830802},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1699184830937},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1699184830936},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"6bf821310342c5b87a631873e7650a475a0765f1","modified":1699184830945},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1699184831045},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1699184830975},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1699184831045},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1699184830963},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1699184831073},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1699184830871},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1699184831051},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1699184831068},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1699184831052},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"56d5b7ff73f466c9ae54f7204ae899281295d749","modified":1699184831066},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1699184831066},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1699184831067},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"1191f1bfa5c43e54be8e5b3cc0d802984e161747","modified":1699184831067},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"7369928305330c73ae0b3f063a681a8384d8fde4","modified":1699184831066},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1699184831067},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"04cf4a69537fc14d3b8904f965d283356853847f","modified":1699184831067},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"ebfba158a0a4af3d1dabcacbc58986664de52140","modified":1699184831067},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1699184831066},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1699184831049},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1699184831054},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1699184831049},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"bbbc40b03cb299d2a6a568f329b2ce98e1cdc430","modified":1699184831062},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1699184831043},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1699184831049},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1699184831071},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"54d12e2c5d9982f7b9e5b23be5133954a8514e9d","modified":1699184831052},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1699184831068},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1699184831072},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1699184831074},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1699184831061},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f634f94828620e88c3f5a8db56f7944f6ba232b0","modified":1699184831047},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/fold.styl","hash":"42a0b65491ad85438596b3fe0b7f23973e4cef34","modified":1699184831049},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"0847400d8579b0a2dd1bf662c78954c10adf2680","modified":1699184831070},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"138f78147bc6bd6005f329ada34dc79b7625542d","modified":1699184831057},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1699184831071},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"da5e88f8debd5ac8d7af5c6ba6240df66104955f","modified":1699184831057},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1699184831053},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1699184831070},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"46eece42510c2c89bb9209afb0262ad76a4b0b36","modified":1699184831070},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"c6a27beb3f741211a14576026f3b4cfc44cc6407","modified":1699184831070},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1699184831071},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1699184831072},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1699184831061},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"22cd37bd5df9972d5074710896aba4424ad5161c","modified":1699184831058},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1699184831068},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1699184831042},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1699184831061},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1699184831062},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1699184831050},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"9a7c71560fbdc936ad4e736fe15063ea3e8a644b","modified":1699184831071},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"98d4c20aff0f0fcfe1824017fb06ab21ef0d218e","modified":1699184831065},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1699184831065},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"33dd6ad015dde65fd46f34961655442e8e82b52e","modified":1699184831073},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/wavedrom.styl","hash":"af113411ad9cca7674177be36af8dd399680834d","modified":1699184831074},{"_id":"source/images/98241099.jpg","hash":"4dd5da10922d7128c7068d217e9d81ae0ac4c0bb","modified":1699184553945},{"_id":"source/images/56909416.jpg","hash":"ae2a88877b54a15f459d9bf5af350f16f626227a","modified":1699184553934},{"_id":"source/_posts/记一点推荐的基础知识.md","hash":"09e507494d6466b048f11e24b3698716e1fffea8","modified":1748765808287},{"_id":"public/package.json","hash":"e5bd34562429e8046942444c5b9a87954573347b","modified":1748760307220},{"_id":"public/search.xml","hash":"4f1816c054449d77e3f57b86d5aa3012c3d5b285","modified":1748765796544},{"_id":"public/categories/index.html","hash":"97396f43f6e4ee13d19c46043a7cc40feea25931","modified":1748760307220},{"_id":"public/tags/index.html","hash":"9744704b4646f5399ffc714bbd4795e2818c4c37","modified":1748760307220},{"_id":"public/about/index.html","hash":"2b148081d305a0b0547ea9ce4279168893ac582c","modified":1748760307220},{"_id":"public/2023/11/11/记一点推荐的基础知识/index.html","hash":"9ba56db642ad833a7b3b90a7d27e0f13d2d38956","modified":1748760307220},{"_id":"public/2023/11/05/这也太破了/index.html","hash":"1161b741f6559edea1915b7fafaa69d0ef033716","modified":1748760307220},{"_id":"public/2020/03/29/onlyoffice文档在线编辑/index.html","hash":"2570f98ce5debdbc9530bf03788d6dd7e05328aa","modified":1748760307220},{"_id":"public/2019/12/15/百度真香/index.html","hash":"377f8eea416e11387de9758ff329357a81e93579","modified":1748760307220},{"_id":"public/2020/02/21/服务器端口记录/index.html","hash":"bf0d5ac7c104b0f1c4c83658484757645b6c96e8","modified":1748760307220},{"_id":"public/2019/12/01/CPU历史考古/index.html","hash":"63e917bac5bc59552d232c3c4e7cbee55efc5bed","modified":1748760307220},{"_id":"public/2019/10/20/YOLO2/index.html","hash":"b589f5a13c4263816f93de0738afcc8580ccff11","modified":1748765796544},{"_id":"public/2019/07/15/贪吃蛇AI/index.html","hash":"e619726402d3ce7a85a42245fb4986a3b4235e67","modified":1748760307220},{"_id":"public/2019/07/14/前端历史/index.html","hash":"e10cf19a076c5ff5e28ac716c89384ab9d33c4fa","modified":1748760307220},{"_id":"public/2019/07/14/优秀的Typora/index.html","hash":"594a75b4a01121099500780e826386df4850b755","modified":1748760307220},{"_id":"public/2019/07/13/Joint-Attention-CTC/index.html","hash":"708c6b283742b2f23fbc133e544d19e3423e70a4","modified":1748760307220},{"_id":"public/2019/10/20/RGB和YUV/index.html","hash":"1f657e6424d0a7d085bc00ce25cf95dc23e88649","modified":1748760307220},{"_id":"public/2019/06/16/蒋勋的红楼梦/index.html","hash":"f2e534b6e942d263f0efa3a8cc7f467adca6355e","modified":1748760307220},{"_id":"public/2019/06/16/随便写点什么吧/index.html","hash":"f7c86f942f674ff2516ac230eee46caa7c6876a0","modified":1748760307220},{"_id":"public/2019/05/26/npm、webpack和vue/index.html","hash":"8d08028f6eda59d2b47a0dedbaaa600c3f05c050","modified":1748760307220},{"_id":"public/2019/03/08/正则/index.html","hash":"a19c814c6da01a45930904feca721002c7300eda","modified":1748760307220},{"_id":"public/2019/12/01/unix和linux历史考古/index.html","hash":"1f54ba32a2419d5c1c9d1b2016a7aaf4bc5a7fde","modified":1748760307220},{"_id":"public/2019/03/04/Attention/index.html","hash":"508eb3554173736972e8e402b5de9e9ec5c49f6e","modified":1748760307220},{"_id":"public/2019/02/14/C宏函数重载/index.html","hash":"063521b334dff95a24ef6a78b7bf521c6a0642da","modified":1748760307220},{"_id":"public/2019/02/09/卷积的实现/index.html","hash":"74c8d6d53680dc463dd94b6689036088387f58c2","modified":1748760307220},{"_id":"public/2019/02/09/caffe运行顺序/index.html","hash":"6f8e8e5cbd1d337edd28b3a8af7c1a404f59a98a","modified":1748760307220},{"_id":"public/2019/01/27/GAN总结/index.html","hash":"d7c196901ef197b6c5d5929d2e4bb96c6b1e8c24","modified":1748760307220},{"_id":"public/2019/01/23/一些shell命令/index.html","hash":"1b14b6ec6c8c2a3161a7fe265cc421fe728b3359","modified":1748760307220},{"_id":"public/2018/11/27/如何优雅地排人才公寓/index.html","hash":"7e304333e89549ca655627abecb93f3403ad789c","modified":1748760307220},{"_id":"public/2018/11/20/grep中的正则表达式/index.html","hash":"7aab8e20c46d2902044a402c8ec9f9af8de08197","modified":1748760307220},{"_id":"public/2018/11/19/conda-常用命令/index.html","hash":"f7e47710280fb710a5427ab4cc9fafebc0e4a6ac","modified":1748760307220},{"_id":"public/2018/10/06/微信公众号机器人/index.html","hash":"efccc975f5809afbcf8adc38bda9568dfa1f64d9","modified":1748760307220},{"_id":"public/2018/08/16/python把bmp转换成jpg/index.html","hash":"de48cf3fdca44fb95c5e6872ada2565c78a4960b","modified":1748760307220},{"_id":"public/2018/08/08/记录一个vscode的bug/index.html","hash":"7ff58705552a217ea421a4e986c8043ae01edc3e","modified":1748760307220},{"_id":"public/2018/08/03/python-里的字符串编码问题/index.html","hash":"7561f26f46212e9adc4a997b482a80128f48f109","modified":1748760307220},{"_id":"public/2018/07/17/看过的论文汇总/index.html","hash":"415f26d693ccce5c33ad31a160eaec976bb08aa1","modified":1748760307220},{"_id":"public/2018/07/16/write-a-shell-in-c/index.html","hash":"bf7ee91d823d6ae46f4cf21c74af703e34d88ac0","modified":1748760307220},{"_id":"public/2018/07/06/配置评论、搜索和代码/index.html","hash":"da34d25a5861ad1fc5fbdfe4718de9698d283898","modified":1748760307220},{"_id":"public/2018/07/04/openCV-总结/index.html","hash":"021851175787ad2208556a33b5ce1da62e5d3013","modified":1748760307220},{"_id":"public/2018/07/03/c-文件复制/index.html","hash":"2fb4dce9b64ebcdbe9db52e4731ddbaa0dd97969","modified":1748760307220},{"_id":"public/2018/06/22/visual-studio-13使用boost/index.html","hash":"9d2393f8af72510a8d71aa30eedab5eec50ef876","modified":1748760307220},{"_id":"public/2018/06/20/计算感受野/index.html","hash":"efc1bb807f4eb2e9c392e54d48685675aa14be62","modified":1748760307220},{"_id":"public/2018/06/19/deeplab/index.html","hash":"562d7edba4c0a97e553bb9197cca004b0fcb4041","modified":1748760307220},{"_id":"public/2018/06/12/mt19937/index.html","hash":"2691722042146f2ae251e0d91a4b7f5dfc99d37e","modified":1748760307220},{"_id":"public/2018/06/12/大数乘法/index.html","hash":"845a62f22fdfd6c792bda37db1b221d5839c79fe","modified":1748760307220},{"_id":"public/2018/05/13/mobileNet和shuffleNet/index.html","hash":"ba959b6b53bd638e3123f975878039da2b4eb59f","modified":1748760307220},{"_id":"public/2018/03/20/CTC/index.html","hash":"aaec8824d324ac49d2e527707de1d35fb1e5b163","modified":1748760307220},{"_id":"public/2018/03/11/c复习笔记/index.html","hash":"a9e0bb7d5e87867cb51d89fe51eecc852d15d4d3","modified":1748760307220},{"_id":"public/2018/02/26/又是火车上的博客/index.html","hash":"5a670ffb6557916de10b89e892894495e69547c1","modified":1748760307220},{"_id":"public/2018/02/25/jQuery笔记/index.html","hash":"4ec5125cabfe23285d959cf108c2d64ac4581a31","modified":1748760307220},{"_id":"public/2018/02/12/scrapy-爬虫/index.html","hash":"764e6699066e07089c9ea3229f21088d37d4d43d","modified":1748760307220},{"_id":"public/2018/02/12/视频防盗啊啊/index.html","hash":"9d2540aa0fe5ded842756d262c9953ed12dc96a6","modified":1748760307220},{"_id":"public/2018/02/04/老子在火车上写博客/index.html","hash":"9ef4f31e1e792dd94a8c0341c612b3aaa5e80a16","modified":1748760307220},{"_id":"public/2018/01/30/奇异值分解/index.html","hash":"585087edd7e13e6a45d54d4055410b38164bafea","modified":1748760307220},{"_id":"public/2018/01/30/阅读更多/index.html","hash":"f5e87bba48f2ba1f2d5ca41352ee5d0dbacaf9ae","modified":1748760307220},{"_id":"public/2018/01/30/css-浮动塌陷/index.html","hash":"be87fe5cf8782b6b77821ad7236e7c8dc7f9ad4b","modified":1748760307220},{"_id":"public/2018/01/30/application-x-www-form-urlencoded和multipart-form-data/index.html","hash":"76eae9343e6a93bf462bcf31a826bb64d42be86e","modified":1748760307220},{"_id":"public/2018/01/22/sqlite-常用命令/index.html","hash":"03bd9198db8561af6a8fbc585ab4eadbee1beb25","modified":1748760307220},{"_id":"public/2018/01/16/吴恩达deeplearning-ai课程学习笔记/index.html","hash":"f94345b4aed0b5205231d277194e220639a9d659","modified":1748760307220},{"_id":"public/2018/01/14/flask部署：gunicorn和nginx安装记录/index.html","hash":"731e99117ac99134ae29ba8a35e527b15fc92e86","modified":1748760307220},{"_id":"public/2018/01/14/https原理和使用流程/index.html","hash":"25dd0a668eee85c10cb666292f06320305e8bc32","modified":1748760307220},{"_id":"public/2018/01/11/caffe-学习笔记/index.html","hash":"1ac595881a909754fa96eab2a65b5c072dabb6eb","modified":1748760307220},{"_id":"public/2018/01/09/nginx-开启gzip/index.html","hash":"432bf4b4cf7054dcc60048b153dd6e9d0403faab","modified":1748760307220},{"_id":"public/2018/01/08/Flask-migrate-No-support-for-ALTER-of-constraints-in-SQLite-dialect/index.html","hash":"8728ed136426555868e7794621b661e1d16c6edb","modified":1748760307220},{"_id":"public/2018/01/01/JS复习笔记/index.html","hash":"a264fa315a06a8e717a81ef66599abea8fb99057","modified":1748760307220},{"_id":"public/archives/index.html","hash":"359b60ea6d52e8682f6b0153081bb18aa037d8fe","modified":1748760307220},{"_id":"public/archives/page/2/index.html","hash":"6e2180332979eb383d9b4faf509080be3eb395bf","modified":1748760307220},{"_id":"public/archives/page/3/index.html","hash":"756eb6ce5f767c0f573f19639c1c159f57faa4b5","modified":1748760307220},{"_id":"public/archives/page/4/index.html","hash":"e0a4192335a97ff8a37b3c9ccbea5e932800f81c","modified":1748760307220},{"_id":"public/archives/page/5/index.html","hash":"4343ae8ed30eca16b0b4de8c814305f02937bd81","modified":1748760307220},{"_id":"public/archives/page/6/index.html","hash":"fd885d5e24b5eace43d34a91df1563f429d4e2ad","modified":1748760307220},{"_id":"public/archives/2018/index.html","hash":"96238f6bcbe3d6059d920645fb0f1db344ebcdf0","modified":1748760307220},{"_id":"public/archives/2018/page/2/index.html","hash":"01eca13bfc0b6c271f309128c8657eb2748f0834","modified":1748760307220},{"_id":"public/archives/2018/page/3/index.html","hash":"91c6e815b4ed953091b28e366ab98e704e1d8b80","modified":1748760307220},{"_id":"public/archives/2018/01/index.html","hash":"b4cc629c9752346922657148bdd3b3386ec75fb1","modified":1748760307220},{"_id":"public/archives/2018/page/4/index.html","hash":"86fff5cd1aa8444e18a8da738d8179a4b5ac88fe","modified":1748760307220},{"_id":"public/archives/2018/01/page/2/index.html","hash":"226c6dffc4e15a46eb054b2e35977c1d6dbb066e","modified":1748760307220},{"_id":"public/archives/2018/02/index.html","hash":"ec4f3c9b18ebe291f7f7d35d22e42ee10e0a57ed","modified":1748760307220},{"_id":"public/archives/2018/03/index.html","hash":"f23e28b7964b995fcc8cfa4ad526b89feb8caf74","modified":1748760307220},{"_id":"public/archives/2018/05/index.html","hash":"99f41ae46f28c2e78c83eaf889f0c10dc657becf","modified":1748760307220},{"_id":"public/archives/2018/06/index.html","hash":"7ef46e7a180536672db35eca961bf70c7d984c0d","modified":1748760307220},{"_id":"public/archives/2018/07/index.html","hash":"a42f308e936a6621271ce4a855b8c61df4bfcd3f","modified":1748760307220},{"_id":"public/archives/2018/08/index.html","hash":"9d1b14a4d67dc5c0232bed3f966d58aac17047d0","modified":1748760307220},{"_id":"public/archives/2018/10/index.html","hash":"373b6ad300ba56e87a99779aca9a916e48771cba","modified":1748760307220},{"_id":"public/archives/2018/11/index.html","hash":"8352f047fe3d7680e3c1b39f3f77aae99e0f9304","modified":1748760307220},{"_id":"public/archives/2019/index.html","hash":"d5b257acb4afc54fa006dc3aa32477c2ae12a9ad","modified":1748760307220},{"_id":"public/archives/2019/page/2/index.html","hash":"0f91a32af1f043ec99ecf69f6d77583a0a911e86","modified":1748760307220},{"_id":"public/archives/2019/01/index.html","hash":"2bd32ed4834a2212087c3bde5afd751aafd77c2e","modified":1748760307220},{"_id":"public/archives/2019/02/index.html","hash":"3bbb5f9d817b57dcbbd8ba46eae175628f9fb11f","modified":1748760307220},{"_id":"public/archives/2019/03/index.html","hash":"56d89e992f2d9a30320999b267ac27fd29df6e40","modified":1748760307220},{"_id":"public/archives/2019/05/index.html","hash":"3c3afbcf5b95a992f508c7cdee9242d923e9664c","modified":1748760307220},{"_id":"public/archives/2019/06/index.html","hash":"30ae44dcf736e46998906cf5b0227d0528d71f7a","modified":1748760307220},{"_id":"public/archives/2019/07/index.html","hash":"de9756ff7304327c28ba0f859084821a9228b7e3","modified":1748760307220},{"_id":"public/archives/2019/10/index.html","hash":"7d4998cf3c4120e629e6aa75c0083a64927c716f","modified":1748760307220},{"_id":"public/archives/2019/12/index.html","hash":"6a67e3727a4c5f8088fc245ae94c1e77c82ebd2e","modified":1748760307220},{"_id":"public/archives/2020/index.html","hash":"aabcea8d50cde1691024a0b42a107e832486da23","modified":1748760307220},{"_id":"public/archives/2020/02/index.html","hash":"921e694b8b242747d28a6a438c165d90e3804718","modified":1748760307220},{"_id":"public/archives/2020/03/index.html","hash":"1f0571725883c8ee07b99ac0ff36da4747affe55","modified":1748760307220},{"_id":"public/archives/2023/index.html","hash":"04d3f9ca162f76f5c92b6013ae488098a15966f7","modified":1748760307220},{"_id":"public/archives/2023/11/index.html","hash":"1e56fbacc217218a4e0218cf10508429fa3ba15c","modified":1748760307220},{"_id":"public/categories/caffe/index.html","hash":"7c0415f65409b30db9ad35379de9d585603d8ed7","modified":1748760307220},{"_id":"public/categories/cpp/index.html","hash":"ac03a50cc088646e21ba2169b2f3d6e1cd3d6b65","modified":1748760307220},{"_id":"public/categories/cpp/page/2/index.html","hash":"3908241773afe1f63fa6ed162dad43d49ebe7d21","modified":1748760307220},{"_id":"public/categories/GAN/index.html","hash":"063321f84ae0be2f190da920ece91c7c9385a295","modified":1748760307220},{"_id":"public/categories/flask网站总结/index.html","hash":"380965ab47c71dace2133510634d63791d6c0e7a","modified":1748760307220},{"_id":"public/categories/flask网站总结/page/2/index.html","hash":"8962f3278dd82b3cdb0aa0e2e43a514ebed13a2c","modified":1748760307220},{"_id":"public/categories/python/index.html","hash":"b5dd5ac6f1ba892fe7661ea9d29276d1e45d73f6","modified":1748760307220},{"_id":"public/categories/javascript/index.html","hash":"60e5b0623fed9d1cb3a1065c8dfaf632d8f2320f","modified":1748760307220},{"_id":"public/categories/scrapy/index.html","hash":"ce763523b0c6ec84b58e0365b3860691074ff7fd","modified":1748760307220},{"_id":"public/categories/shell/index.html","hash":"d09897ca4e2ae76a7d806e9df7fde4fab1d73583","modified":1748760307220},{"_id":"public/categories/数学基础/index.html","hash":"0c5ec0b0ad1ae4e706e9caac3a6bb1bed4f2afe2","modified":1748760307220},{"_id":"public/categories/flask/index.html","hash":"433c5ef2d408c84c7dd8a92392d0a33dcbe71386","modified":1748760307220},{"_id":"public/categories/发疯文学/index.html","hash":"0bd74a1a65c77e12d30096a73f6b0473134c6fbc","modified":1748760307220},{"_id":"public/categories/hexo-next/index.html","hash":"807679b087d15a6ed76a65403e8f31eb9c634c37","modified":1748760307220},{"_id":"public/categories/推荐/index.html","hash":"1721412411893447b72c2d1d13c62624b72c5aa6","modified":1748760307220},{"_id":"public/index.html","hash":"1a2bd699641a1c979d3da975cf4956256fe6a057","modified":1748765796544},{"_id":"public/page/2/index.html","hash":"65a631e484b999924be1625491df0542339c0181","modified":1748760307220},{"_id":"public/page/3/index.html","hash":"40b4f0c9a41ac3d8d836a9cbd00528a4a14014ef","modified":1748760307220},{"_id":"public/page/4/index.html","hash":"2875464775abbef894bc314828797f597cf1dc69","modified":1748760307220},{"_id":"public/page/5/index.html","hash":"9687aa8e9f94bb8969accceab57761d77d069eb1","modified":1748760307220},{"_id":"public/page/6/index.html","hash":"e6d6ff1ccd129bbb56e65e326b69e04b10fadbe4","modified":1748760307220},{"_id":"public/tags/Attention/index.html","hash":"109f2f012bde37f76897f5ed55ff21781bf52400","modified":1748760307220},{"_id":"public/tags/CTC/index.html","hash":"ec3d2da2e2fe4605d0d79871a51b0375a3a0001e","modified":1748760307220},{"_id":"public/tags/cpp/index.html","hash":"f4c633c0adf0f74a0b5844f6e056dc13fd5fc4dc","modified":1748760307220},{"_id":"public/tags/GAN/index.html","hash":"41f100894f46b9af2faeb5f5bdb78b413c581ff9","modified":1748760307220},{"_id":"public/tags/flask/index.html","hash":"98b652c9a1dd479f98708a2c9089ffeb05da245a","modified":1748760307220},{"_id":"public/tags/javaScript/index.html","hash":"9f418eb78cd2982c7f980933bf4c7bd60e223fa2","modified":1748760307220},{"_id":"public/tags/复习笔记/index.html","hash":"521e10710a675e55cd2f25899051a907503c3edf","modified":1748760307220},{"_id":"public/tags/opencv/index.html","hash":"3e396ebe7f548107abc956b433ac33261d8f238c","modified":1748760307220},{"_id":"public/tags/YUV/index.html","hash":"bc0d15fda9832018b281285b32c64b43e01d9914","modified":1748760307220},{"_id":"public/tags/caffe/index.html","hash":"a25bc018bc4f4c92ed89998e28bf22e96da64e9d","modified":1748760307220},{"_id":"public/tags/docker/index.html","hash":"22e582c8f587d25cdb954290b75f1ad1fa276973","modified":1748760307220},{"_id":"public/tags/yolo/index.html","hash":"9d3b492392ae40942de7e66b2cf3225c64913303","modified":1748760307220},{"_id":"public/tags/学习笔记/index.html","hash":"f5a285c39c644eb002014c77e082825556ecfe05","modified":1748760307220},{"_id":"public/tags/conda/index.html","hash":"64380182f604fbb2b817d33b5adc7fb5bf2d6e5e","modified":1748760307220},{"_id":"public/tags/python/index.html","hash":"1b077a0a7866c644980c50e45777e9263ccea53b","modified":1748760307220},{"_id":"public/tags/cin-cout/index.html","hash":"3f68f07e69698588458bfcee90db715204b60f89","modified":1748760307220},{"_id":"public/tags/lambda/index.html","hash":"1e51403f3eef8ce27489b9c658d8c77480005b35","modified":1748760307220},{"_id":"public/tags/正则/index.html","hash":"b227a7354087e11d1f493b4f57eefd41257e5d8d","modified":1748760307220},{"_id":"public/tags/grep/index.html","hash":"9de79f5e832fbd3ffc7d44dab203e9116af5131d","modified":1748760307220},{"_id":"public/tags/https/index.html","hash":"1f4f3628c1c195432b3e334ea30da2ea1d851056","modified":1748760307220},{"_id":"public/tags/nginx配置/index.html","hash":"ec9e6450ef62a21f374c34b59abb3b2960bf481e","modified":1748760307220},{"_id":"public/tags/webpack/index.html","hash":"3a649c606143536349adde0ddaac9b1c29c10cc8","modified":1748760307220},{"_id":"public/tags/构造函数/index.html","hash":"7701e40fe3ffd54235a22e50fe393b36af329f6f","modified":1748760307220},{"_id":"public/tags/npm/index.html","hash":"6b9d1426f57660178736735404ff88893e6dc131","modified":1748760307220},{"_id":"public/tags/vue/index.html","hash":"2ed395046c1fd5b49bdaa0a9b427e9880b4492bc","modified":1748760307220},{"_id":"public/tags/onlyoffice/index.html","hash":"02e060fa7743b45dcf3005a2e50e1f5cfccd12c5","modified":1748760307220},{"_id":"public/tags/beego/index.html","hash":"8feb01f65ae690c40d5ec0aed461886da471e483","modified":1748760307220},{"_id":"public/tags/openCV/index.html","hash":"9a1d3f698cffc43be28ed04dc0eda81709c2d5b3","modified":1748760307220},{"_id":"public/tags/编码/index.html","hash":"a08746c6b332db8200416dcb05318c124793b098","modified":1748760307220},{"_id":"public/tags/字符串/index.html","hash":"a78479bc461deff0aba01684c2f6aa628f3b9352","modified":1748760307220},{"_id":"public/tags/unicode/index.html","hash":"cab0edc9dbf656b138fb7f6a95a80401c3d27e97","modified":1748760307220},{"_id":"public/tags/sqlite/index.html","hash":"d1102c88451645df44461052a3a7b4fb2a37aa0a","modified":1748760307220},{"_id":"public/tags/shell/index.html","hash":"6d86ecb43fa370f931c32c74c1ce17bfed42dcfc","modified":1748760307220},{"_id":"public/tags/机器学习/index.html","hash":"b71ac94cdadf9d999cec1d9cf223b043a96c0c4e","modified":1748760307220},{"_id":"public/tags/微信/index.html","hash":"3bac66f87127e59bedd7c1b78efa3530974fa2fd","modified":1748760307220},{"_id":"public/tags/公众号/index.html","hash":"d4afbee9fcb82e331ba8e8ff8179bbc8279c404b","modified":1748760307220},{"_id":"public/tags/感受野/index.html","hash":"ec51897de915d2e10e9ec44a430107b94e36105c","modified":1748760307220},{"_id":"public/tags/还债/index.html","hash":"a9da738d773200c00c1072708ab51d4102630804","modified":1748760307220},{"_id":"public/tags/vscode/index.html","hash":"7a2dfabf8dc9b1aae21459672980a8e3fecc2660","modified":1748760307220},{"_id":"public/tags/乱感叹/index.html","hash":"cd152ab4f452a4c9bf1aa30629b428b4535f51a9","modified":1748760307220},{"_id":"public/tags/hexo/index.html","hash":"64e2bd02f64fd04c0ff6aac4d214bf1260963f4e","modified":1748760307220},{"_id":"public/tags/next/index.html","hash":"6506936e32bf35594e6c6da669e99b91d3a6c62c","modified":1748760307220},{"_id":"public/tags/股票/index.html","hash":"37738f175b01e4ca3fde4bee38e07b079fc8f248","modified":1748760307220},{"_id":"public/tags/蒋勋/index.html","hash":"a6324c2701b0471d394821a44b540aea2a2008bc","modified":1748760307220},{"_id":"public/tags/红楼梦/index.html","hash":"d1ee4202684dca1e50653c9e02b37fc398d52e45","modified":1748760307220},{"_id":"public/tags/推荐/index.html","hash":"4102387dc770e582a3e82388c5c0c6d043979d45","modified":1748760307220},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1748760307220},{"_id":"public/images/apple-touch-icon-next.png","hash":"b972160c147e9bec3a0f7432e6e80dfa92581b0b","modified":1748760307220},{"_id":"public/images/avatar.gif","hash":"469716daaca42686e95d713c640cd9d89e9a08c9","modified":1748760307220},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1748760307220},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1748760307220},{"_id":"public/images/logo.svg","hash":"029e38efc56a793da1a650418bc715185bb5a2c7","modified":1748760307220},{"_id":"public/images/20180930151428623.png","hash":"d99e99ee36bd9e0be7b8f9168ea746dde67fbee8","modified":1748760307220},{"_id":"public/images/11989810.jpg","hash":"f72d27abfcfa9f758ef36d64d35bb0b6dad448a0","modified":1748760307220},{"_id":"public/images/14151415.jpg","hash":"81579350c1ac96ff97def2fe40cfd53d20fd2d29","modified":1748760307220},{"_id":"public/images/25005397.jpg","hash":"a10ff200bf42131c1cd997e06bdb5acd76a224b2","modified":1748760307220},{"_id":"public/images/306118.jpg","hash":"1a17f1f980c89b80efcb895373c2ad4101a152ad","modified":1748760307220},{"_id":"public/images/32435128.jpg","hash":"17f1de503b7a82eae4bdfc79d82540b76b22ef6f","modified":1748760307220},{"_id":"public/images/29282650.jpg","hash":"81579350c1ac96ff97def2fe40cfd53d20fd2d29","modified":1748760307220},{"_id":"public/images/77705439.jpg","hash":"26e4dde4e8536a196b8d58e4041be07e96f3a06c","modified":1748760307220},{"_id":"public/images/8709950.jpg","hash":"86ea3bad3c6e238f5b255042a70ca631204d711b","modified":1748760307220},{"_id":"public/images/9235447.jpg","hash":"1cd7e43e54ff47bfc7ff1bff50fe3274d1dfdd57","modified":1748760307220},{"_id":"public/images/94641900.jpg","hash":"2904ed9cd39a90ddd647848fe5433554b23f05d3","modified":1748760307220},{"_id":"public/images/98459920.jpg","hash":"1cd7e43e54ff47bfc7ff1bff50fe3274d1dfdd57","modified":1748760307220},{"_id":"public/images/U.jpg","hash":"42643f130c44592f8648d99a32124c1143f9c58d","modified":1748760307220},{"_id":"public/images/algolia_logo.svg","hash":"278ffcea4876b37657f2e192bda48c6bc7dd8784","modified":1748760307220},{"_id":"public/images/V.jpg","hash":"af112e55e7998a581e2a20aba05e754417bb825c","modified":1748760307220},{"_id":"public/images/caffe_conv.jpg","hash":"5e20d254262aa34508b9ef64b3cdf9f35060bd30","modified":1748760307220},{"_id":"public/images/Y.jpg","hash":"1483ec0c9bf5323b6fb29e5c30d2c8a69cb4a54a","modified":1748760307220},{"_id":"public/images/cc-by-nc-nd.svg","hash":"fb0137e7df47a0c6c15641a1b38e7df78aaafd72","modified":1748760307220},{"_id":"public/images/cc-by-nc-sa.svg","hash":"50a8ecb71c8051d44dff4a6ef477e23520a90af3","modified":1748760307220},{"_id":"public/images/cc-by-nc.svg","hash":"85c2d9a4d2a5342085ec759b135cec251dd7f538","modified":1748760307220},{"_id":"public/images/cc-by-nd.svg","hash":"3c57ccdb3762c8d6eb2669a65bbbc18c7bbd46a7","modified":1748760307220},{"_id":"public/images/cc-by.svg","hash":"c72feca504a517f6f5aaade0205a0c1b71f16c5a","modified":1748760307220},{"_id":"public/images/cc-by-sa.svg","hash":"268986682e7e2a2c85053f696007942e0fc43853","modified":1748760307220},{"_id":"public/images/cgan.jpg","hash":"46bdb34c8a18f5f72cc9b3d640b9d78eb5ca411f","modified":1748760307220},{"_id":"public/images/cc-zero.svg","hash":"b83fd950c6bffebb4fdc8d8ff9c0cea3c2ebfa8e","modified":1748760307220},{"_id":"public/images/cgan_d.jpg","hash":"99bf28c4245ff2a85390e8baea3cf83334e1bd3c","modified":1748760307220},{"_id":"public/images/favicon-16x16-next.ico","hash":"3d11ec96a00a451f9cef73b293f6b2eae8f9bc3a","modified":1748760307220},{"_id":"public/images/favicon-32x32-next.ico","hash":"74369ddcfb0dbb21ca1c9fd7c166b330baab331a","modified":1748760307220},{"_id":"public/images/image-20200919223818373.png","hash":"205e1283e6ab418761818613bf7d35d640cb0b7f","modified":1748760307220},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1748760307220},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1748760307220},{"_id":"public/images/origin_gan2.jpg","hash":"c6ae2f3f9cf00c5725b0002963e13e2b5e63e93f","modified":1748760307220},{"_id":"public/images/quote-l.svg","hash":"1708b1c302c85dad66ada25bdb5b560861a007d3","modified":1748760307220},{"_id":"public/images/quote-r.svg","hash":"b2251283267cab9186a437cded16a1b929b81097","modified":1748760307220},{"_id":"public/images/rotU.jpg","hash":"021cfa5e8107aa3af28bac28a3faad9781310443","modified":1748760307220},{"_id":"public/images/rotImageBGR.jpg","hash":"e00669b787536597a69bed491cb9f383ca3ab72b","modified":1748760307220},{"_id":"public/images/rotV.jpg","hash":"dedeb316c80aec7bdfa4668ffa5bf64e0ff225bb","modified":1748760307220},{"_id":"public/images/rotY.jpg","hash":"499185ed7d4111c2728b0908dbdb502ba4553527","modified":1748760307220},{"_id":"public/images/searchicon.png","hash":"00eed611c73d736ddea861a92d8c91d44aefef5c","modified":1748760307220},{"_id":"public/css/main.css","hash":"2555598db3863eb63594523e7b80cd566bde1a46","modified":1748760307220},{"_id":"public/images/10535321.jpg","hash":"b42db9d20f3eb9faa8a21dfaff9d081116e6d4b9","modified":1748760307220},{"_id":"public/images/51626114.jpg","hash":"381ccd352b189bcdbc9d3e203843c1c04aa57d20","modified":1748760307220},{"_id":"public/images/70081567.jpg","hash":"2a015b15c5be11d3c6cf4a8f9a80c808278b825b","modified":1748760307220},{"_id":"public/images/62552972.jpg","hash":"9cf19de63b4d9dc28178e1b285733bfa55e68bb1","modified":1748760307220},{"_id":"public/images/89948814.jpg","hash":"963bf8ac0932675b8220a61e1b1d46ed22f7b184","modified":1748760307220},{"_id":"public/images/ctc.jpg","hash":"3d74095c12135564575bf9abf67e22197e443a50","modified":1748760307220},{"_id":"public/css/noscript.css","hash":"7a71aa0a25cb21127fff8b6155beebba28b4c028","modified":1748760307220},{"_id":"public/images/v2-45795a63cdbaac8c05d875dfb6fcfb5a_r.jpg","hash":"2728336c5538c2a71858f0ef124b023c38720ba8","modified":1748760307220},{"_id":"public/images/26480255.jpg","hash":"0991a00a5941a314d42efb574414dcfacc111e8c","modified":1748760307220},{"_id":"public/images/39223823.jpg","hash":"677c8200c76464fe3fabe622f419ade050ee70b8","modified":1748760307220},{"_id":"public/images/41005456.jpg","hash":"d25046ab961dafc744e87e06c6463dbb69ee0fb8","modified":1748760307220},{"_id":"public/images/47657351.jpg","hash":"60c41100fce01c068a957df964a50bf9ad2d4faa","modified":1748760307220},{"_id":"public/images/48652183.jpg","hash":"9b4e2c51b6ffc866125ea79007b17801edcd92df","modified":1748760307220},{"_id":"public/images/49641113.jpg","hash":"1ca6ee4e3b77ba478dd773e862bb41e0918113ae","modified":1748760307220},{"_id":"public/images/73637538.jpg","hash":"045e3a3873e08d673f749c9b686f4735b40487ba","modified":1748760307220},{"_id":"public/images/69146591.jpg","hash":"59711d919565de9e878a2d350d23ba1391d4d5c8","modified":1748760307220},{"_id":"public/images/jiangxun.png","hash":"44a80dd76d5be902a4cf7a9bf4665391f1698aff","modified":1748760307220},{"_id":"public/images/mle_equals_kl.jpg","hash":"ece5657254d82479b23f26deb0bca3dbbda25cdd","modified":1748760307220},{"_id":"public/images/screencapture-192-168-1-104-8088-onlyoffice-2020-05-11-22_27_51.png","hash":"459ccb4dec2272198b30dc2d156897958aa6f13d","modified":1748760307220},{"_id":"public/images/speach.jpg","hash":"bbf6891d9c880a6f0064c81ff6e68637d9dfd980","modified":1748760307220},{"_id":"public/js/comments-buttons.js","hash":"f22afcaa43ba8074c2595cc6c776ddf2a24b95b4","modified":1748760307220},{"_id":"public/js/bookmark.js","hash":"5b9f4ebf69d05752e78b19db1a0c7f89bd1533d1","modified":1748760307220},{"_id":"public/js/config.js","hash":"2d5c339290be79554497b63174d37597fc413e24","modified":1748760307220},{"_id":"public/js/comments.js","hash":"906ab926862a954a5279595c0ad7b54773755201","modified":1748760307220},{"_id":"public/js/motion.js","hash":"61195081d8acb940dc5b9a2785dca79351d20764","modified":1748760307220},{"_id":"public/js/next-boot.js","hash":"1bbb2a45eb18e7a76507b84edcb4d3b3b25b0b6d","modified":1748760307220},{"_id":"public/js/pjax.js","hash":"4daec407e46485b71c300b174556744bb73151c3","modified":1748760307220},{"_id":"public/js/third-party/addtoany.js","hash":"62ab7c25cb012e5985c27360d4dae8a4144b459f","modified":1748760307220},{"_id":"public/js/schedule.js","hash":"33ff9d17e6228df64a75a991bf794b10faafc722","modified":1748760307220},{"_id":"public/js/schemes/muse.js","hash":"83cda0bf1aa67a5bd0571723e436de9e59a73c93","modified":1748760307220},{"_id":"public/js/third-party/quicklink.js","hash":"19da35b6529d3e4f05def6fcc5385ea7da95fc3a","modified":1748760307220},{"_id":"public/js/utils.js","hash":"b986e975f2d977d0841515a3824efb0a17638e3a","modified":1748760307220},{"_id":"public/js/third-party/fancybox.js","hash":"aab8cd4023a3db90a8376c5581ef74039f3046fe","modified":1748760307220},{"_id":"public/js/third-party/pace.js","hash":"91f63aeee362d7cca33a5a98f20600f78fd3088f","modified":1748760307220},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"6d701873d1c771c2e8d54130ba9e3633b2169e37","modified":1748760307220},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"90e79e3437d9214b0466d32da582fd77777d3958","modified":1748760307220},{"_id":"public/js/third-party/analytics/matomo.js","hash":"bb923f7f79dd3a2716c491effc36140b671c33c2","modified":1748760307220},{"_id":"public/js/third-party/analytics/growingio.js","hash":"e3a55a7d1ea95344e0afdaafe26aceef973822ea","modified":1748760307220},{"_id":"public/js/third-party/chat/chatra.js","hash":"100570851291f0db0a6708336cc78338dfbdc303","modified":1748760307220},{"_id":"public/js/third-party/comments/changyan.js","hash":"34bc953a05b49a7091114b02cee8159ddcbb8e5a","modified":1748760307220},{"_id":"public/js/third-party/chat/tidio.js","hash":"8b91f21d2c4ba27cf4e3cc95e8d36b875f48cbc2","modified":1748760307220},{"_id":"public/js/third-party/comments/disqus.js","hash":"a31b83c313904f1229165d455893d8b93c5d0396","modified":1748760307220},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"1b3869c3e5eb02d1198d34914e55ca2ae18c15d2","modified":1748760307220},{"_id":"public/js/third-party/comments/gitalk.js","hash":"bba4262d629088d868dcc3da3f8917a8388403cc","modified":1748760307220},{"_id":"public/js/third-party/comments/isso.js","hash":"26d51ee0d5c4cb0cb3be12147d6ba6b58f07adf0","modified":1748760307220},{"_id":"public/js/third-party/comments/livere.js","hash":"0bd0a2dd167bdd1f55c7f40e79ba4e2df226fd68","modified":1748760307220},{"_id":"public/js/third-party/comments/utterances.js","hash":"9284fab669b6311faae7bb1218752a3ba51da186","modified":1748760307220},{"_id":"public/js/third-party/math/katex.js","hash":"6c8acd33743d36eb0ef743407bfb658a53a84e56","modified":1748760307220},{"_id":"public/js/third-party/search/algolia-search.js","hash":"d302e6bd7fa054776c3b8df731af4c7930af8eea","modified":1748760307220},{"_id":"public/js/third-party/search/local-search.js","hash":"c0ce49f1e89b44818f049064829253f79114b4f6","modified":1748760307220},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"a6067f510dc95f827cd717f887eb4817d6edfacd","modified":1748760307220},{"_id":"public/js/third-party/statistics/firestore.js","hash":"b721b20c1cc3e4994305911808dc41638f17df55","modified":1748760307220},{"_id":"public/js/third-party/math/mathjax.js","hash":"9775a81fd069b23fbd81005fb359768f209993d0","modified":1748760307220},{"_id":"public/js/third-party/tags/wavedrom.js","hash":"a56a938b515119e7026764ca5858335180486104","modified":1748760307220},{"_id":"public/js/third-party/tags/mermaid.js","hash":"1770aeb76a85ca0ab6542a6de48bbcaf888f333b","modified":1748760307220},{"_id":"public/js/third-party/tags/pdf.js","hash":"eaebff4d5c18a0f6805d48806bf5e9dae5de230d","modified":1748760307220},{"_id":"public/images/star_gan.jpg","hash":"34ddba249a4b5b9b22da12cae42b47298a031f73","modified":1748760307220},{"_id":"public/images/v2-8630f8d3dbe3634f124eaf82f222ca94_r.jpg","hash":"b966413a83ca664f62d70c612b092c8cfbeb8eb3","modified":1748760307220},{"_id":"public/images/27110293.jpg","hash":"b4cd305345e335f94067b7cd89550e53137685c9","modified":1748760307220},{"_id":"public/images/direct_trans.jpg","hash":"6ee0cd088aac73ef32a345d32405ebcdc6b755ec","modified":1748760307220},{"_id":"public/images/cycle_gan.jpg","hash":"8d619de312431fb39edd88473d7be82223d0facb","modified":1748760307220},{"_id":"public/images/img2img.jpg","hash":"05b4189eeb58a19e467dc09b3bc949ec1b07b123","modified":1748760307220},{"_id":"public/images/direct_trans2.jpg","hash":"77214a068b6f3efa9d827910a6ae9a38b699f4dc","modified":1748760307220},{"_id":"public/images/screencapture-192-168-1-104-8088-onlyoffice-1-2020-05-11-22_28_35.png","hash":"7398ede5b664b92a18180e6848566bdd8d22d2f4","modified":1748760307220},{"_id":"public/images/test2.png","hash":"e844dacfe03ce035eab8b221e688f6e4257b1d7f","modified":1748760307220},{"_id":"public/images/stack_gan.jpg","hash":"2891941d13202a3d3c5a96ee290c6482cd06c2f7","modified":1748760307220},{"_id":"public/images/4478311.jpg","hash":"c7e71196865f9770f262f05d3f717687a830d5c2","modified":1748760307220},{"_id":"public/images/屏幕快照 2019-07-15 下午11.26.42.png","hash":"fc852149ed145382a14be7bc759fd67e22bde518","modified":1748760307220},{"_id":"public/images/origin_gan.jpg","hash":"389c41becf24dab65dd570b3a1e4f94304ad69a2","modified":1748760307220},{"_id":"public/images/image-20190714094525575.png","hash":"52e60b51c43448539bda401b3bcca3e2aad2be6e","modified":1748760307220},{"_id":"public/images/image-20190714094504609.png","hash":"ceb492b16982d4f86067b8803604bb9756064f9e","modified":1748760307220},{"_id":"public/images/屏幕快照 2019-07-14 上午1.15.21-3039456.png","hash":"5eb1b242836a24b1ebfa4d2ef876c9b199f91c3e","modified":1748760307220},{"_id":"public/images/54964765.jpg","hash":"54f9f8a1e34e8ca9aa310a3317ad3cf148381592","modified":1748760307220},{"_id":"public/images/5689847.jpg","hash":"8144de3bf675e9118fd37f832095891136ca2f8e","modified":1748760307220},{"_id":"public/images/98241099.jpg","hash":"4dd5da10922d7128c7068d217e9d81ae0ac4c0bb","modified":1748760307220},{"_id":"public/images/56909416.jpg","hash":"ae2a88877b54a15f459d9bf5af350f16f626227a","modified":1748760307220}],"Category":[{"name":"caffe","_id":"clolf0lhw000bs2kz9hsw3tyw"},{"name":"cpp","_id":"clolf0lhz000ls2kzczv03jcc"},{"name":"GAN","_id":"clolf0lhz000ss2kz9mk7dljt"},{"name":"flask网站总结","_id":"clolf0li0000ys2kz005fe6ii"},{"name":"python","_id":"clolf0li1001is2kz2ht3f3ou"},{"name":"javascript","_id":"clolf0li4002as2kzd9hugm22"},{"name":"scrapy","_id":"clolf0li5002ts2kz8jhzdbl3"},{"name":"shell","_id":"clolf0li60036s2kzcpjxeo6i"},{"name":"数学基础","_id":"clolf0li9003ts2kzeelchoeb"},{"name":"flask","_id":"clolf0lia0042s2kz6an5exql"},{"name":"发疯文学","_id":"clolf0lif005ts2kz6aek8kpz"},{"name":"hexo-next","_id":"clolf0lif0060s2kzflyq4ef4"},{"name":"推荐","_id":"cmbdaqhb70001sakzf11makam"}],"Data":[],"Page":[{"_content":"{\n  \"dependencies\": {\n    \"gulp\": \"^4.0.2\",\n    \"gulp-htmlclean\": \"^2.7.22\",\n    \"gulp-htmlmin\": \"^5.0.1\",\n    \"gulp-minify-css\": \"^1.2.4\",\n    \"gulp-uglify\": \"^3.0.2\"\n  }\n}\n","source":"package.json","raw":"{\n  \"dependencies\": {\n    \"gulp\": \"^4.0.2\",\n    \"gulp-htmlclean\": \"^2.7.22\",\n    \"gulp-htmlmin\": \"^5.0.1\",\n    \"gulp-minify-css\": \"^1.2.4\",\n    \"gulp-uglify\": \"^3.0.2\"\n  }\n}\n","date":"2023-11-05T11:42:33.975Z","updated":"2023-11-05T11:42:33.975Z","path":"package.json","layout":"false","title":"","comments":1,"_id":"clolf0lhr0000s2kzbr07hv5l","content":"{\"dependencies\":{\"gulp\":\"^4.0.2\",\"gulp-htmlclean\":\"^2.7.22\",\"gulp-htmlmin\":\"^5.0.1\",\"gulp-minify-css\":\"^1.2.4\",\"gulp-uglify\":\"^3.0.2\"}}"},{"title":"categories","date":"2018-01-01T10:57:51.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-01-01 18:57:51\ntype: \"categories\"\n---\n","updated":"2023-11-05T11:42:33.907Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clolf0lht0002s2kz56sdfeot","content":"","excerpt":"","more":""},{"title":"tags","date":"2018-01-01T10:36:42.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-01-01 18:36:42\ntype: \"tags\"\n---\n","updated":"2023-11-05T11:42:33.975Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clolf0lhu0004s2kz717z5v9r","content":"","excerpt":"","more":""},{"title":"关于我","date":"2018-01-01T10:53:16.000Z","type":"about","_content":"\n- 翟大翟\n- 微信：zjyxjtu\n- 地址：~~复旦张江校区微电子楼306~~","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2018-01-01 18:53:16\ntype: \"about\"\n---\n\n- 翟大翟\n- 微信：zjyxjtu\n- 地址：~~复旦张江校区微电子楼306~~","updated":"2023-11-05T11:42:33.907Z","path":"about/index.html","comments":1,"layout":"page","_id":"clolf0lhv0006s2kzck3ddbzj","content":"<ul>\n<li>翟大翟</li>\n<li>微信：zjyxjtu</li>\n<li>地址：<del>复旦张江校区微电子楼306</del></li>\n</ul>\n","excerpt":"","more":"<ul>\n<li>翟大翟</li>\n<li>微信：zjyxjtu</li>\n<li>地址：<del>复旦张江校区微电子楼306</del></li>\n</ul>\n"}],"Post":[{"title":"ceshi","_content":"","source":"_drafts/ceshi.md","raw":"---\ntitle: ceshi\ntags:\n---\n","slug":"ceshi","published":0,"date":"2023-11-05T11:42:33.902Z","updated":"2023-11-05T11:42:33.902Z","comments":1,"layout":"post","photos":[],"_id":"clolf0lhs0001s2kz8wtdhh5y","content":"","excerpt":"","more":""},{"title":"20210806写给自己的话","typora-root-url":"../../source","date":"2021-08-06T10:53:46.000Z","_content":"\n\n\n时隔这么一年多，我终于又想起来我的hexo了\n\n---\n\n18年元旦开始些，那时候这是为了记录网站开发过程中遇到的一些乱七八糟的问题\n\n现在想起来那段时间应该是我写代码最纯粹和快乐的时间（也可能是因为太久远了，所以回忆就变美好了\n\n那段时间也是这个网站最高产的时候\n\n到后来海康上班之后，更新频率就慢慢地慢了下来\n\n但那时候还是保持着比较旺盛的好奇心，还会周末瞎看瞎写，瞎挖坑，收藏夹里的链接还是一个堆一个地涨\n\n---\n\n20年是个分界线\n\n海康说了不涨薪之后，我急切地想要跳出来，我想要工资一直涨，也害怕自己被无休止的业务需求蹉跎掉\n\n就没有更了几篇，直到后来要找工作了，才假模假样的补了一些\n\n到后来我到北京之后，这里就彻底荒废了\n\n---\n\n8月7号了，等没人了我再继续写\n\n\n\n\n\n","source":"_drafts/20210806.md","raw":"---\ntitle: 20210806写给自己的话\ntypora-root-url: ../../source\ndate: 2021-08-06 18:53:46\n---\n\n\n\n时隔这么一年多，我终于又想起来我的hexo了\n\n---\n\n18年元旦开始些，那时候这是为了记录网站开发过程中遇到的一些乱七八糟的问题\n\n现在想起来那段时间应该是我写代码最纯粹和快乐的时间（也可能是因为太久远了，所以回忆就变美好了\n\n那段时间也是这个网站最高产的时候\n\n到后来海康上班之后，更新频率就慢慢地慢了下来\n\n但那时候还是保持着比较旺盛的好奇心，还会周末瞎看瞎写，瞎挖坑，收藏夹里的链接还是一个堆一个地涨\n\n---\n\n20年是个分界线\n\n海康说了不涨薪之后，我急切地想要跳出来，我想要工资一直涨，也害怕自己被无休止的业务需求蹉跎掉\n\n就没有更了几篇，直到后来要找工作了，才假模假样的补了一些\n\n到后来我到北京之后，这里就彻底荒废了\n\n---\n\n8月7号了，等没人了我再继续写\n\n\n\n\n\n","slug":"20210806","published":0,"updated":"2023-11-05T11:42:33.902Z","comments":1,"layout":"post","photos":[],"_id":"clolf0lht0003s2kzft6cfbea","content":"<p>时隔这么一年多，我终于又想起来我的hexo了</p>\n<hr>\n<p>18年元旦开始些，那时候这是为了记录网站开发过程中遇到的一些乱七八糟的问题</p>\n<p>现在想起来那段时间应该是我写代码最纯粹和快乐的时间（也可能是因为太久远了，所以回忆就变美好了</p>\n<p>那段时间也是这个网站最高产的时候</p>\n<p>到后来海康上班之后，更新频率就慢慢地慢了下来</p>\n<p>但那时候还是保持着比较旺盛的好奇心，还会周末瞎看瞎写，瞎挖坑，收藏夹里的链接还是一个堆一个地涨</p>\n<hr>\n<p>20年是个分界线</p>\n<p>海康说了不涨薪之后，我急切地想要跳出来，我想要工资一直涨，也害怕自己被无休止的业务需求蹉跎掉</p>\n<p>就没有更了几篇，直到后来要找工作了，才假模假样的补了一些</p>\n<p>到后来我到北京之后，这里就彻底荒废了</p>\n<hr>\n<p>8月7号了，等没人了我再继续写</p>\n","excerpt":"","more":"<p>时隔这么一年多，我终于又想起来我的hexo了</p>\n<hr>\n<p>18年元旦开始些，那时候这是为了记录网站开发过程中遇到的一些乱七八糟的问题</p>\n<p>现在想起来那段时间应该是我写代码最纯粹和快乐的时间（也可能是因为太久远了，所以回忆就变美好了</p>\n<p>那段时间也是这个网站最高产的时候</p>\n<p>到后来海康上班之后，更新频率就慢慢地慢了下来</p>\n<p>但那时候还是保持着比较旺盛的好奇心，还会周末瞎看瞎写，瞎挖坑，收藏夹里的链接还是一个堆一个地涨</p>\n<hr>\n<p>20年是个分界线</p>\n<p>海康说了不涨薪之后，我急切地想要跳出来，我想要工资一直涨，也害怕自己被无休止的业务需求蹉跎掉</p>\n<p>就没有更了几篇，直到后来要找工作了，才假模假样的补了一些</p>\n<p>到后来我到北京之后，这里就彻底荒废了</p>\n<hr>\n<p>8月7号了，等没人了我再继续写</p>\n"},{"title":"想想最近的TODO","typora-root-url":"../../source","date":"2018-01-31T14:59:13.000Z","_content":"\n### 机器学习\n- ~~看了吴恩达deeplearning的几门课，算法是用TF写的，没有仔细了解TF用法。结束。~~\n- ~~看了吴恩达在斯坦福的那个机器学习课，草草看了一遍，新知道了SVD、ICA和马尔可夫决策。增强学习先不打算看了，结束。~~\n- ~~深度学习那本书，有点看不进去。结束。~~\n- ~~李飞飞的课，不想看了。结束。~~\n- 西瓜书，看一下集成学习那里的boosting，SVM的推导。\n- 贝叶斯那本书，再搞清楚MCMC。\n- ~~熟悉caffe，过完年来实习吧。~~\n\n\n### 前端\n- 小程序看看能怎么做，不一定这个假期做完\n- JavaScript语言精粹看完\n- 再看node什么的\n\n\n### 真实的todo\n- 2月9号更新，按顺序来吧\n- 爬虫，完那个课程，爬个链家什么的\n- ~~网站的视频防盗，再想想怎么做啊~~\n- ~~论文写个大概啊，除了绪论其他要写好~~\n- 专利写个大概吧\n\n### 2月23晚上更新\n- 好事情是，我的论文差不多算写完了啊\n- 爬虫明天看完吧，好像什么也没讲，心疼钱\n- 专利我还不想写，其实也不急，等去了学校吧\n- 大后天就要再见了啊！**努力！奋斗！**\n- 想起来了，我把张鸣的《重说中国近代史》看完了，但是《苦难辉煌》没看啊\n\n","source":"_drafts/想想最近的TODO.md","raw":"---\ntitle: 想想最近的TODO\ntypora-root-url: ../../source\ndate: 2018-01-31 22:59:13\n---\n\n### 机器学习\n- ~~看了吴恩达deeplearning的几门课，算法是用TF写的，没有仔细了解TF用法。结束。~~\n- ~~看了吴恩达在斯坦福的那个机器学习课，草草看了一遍，新知道了SVD、ICA和马尔可夫决策。增强学习先不打算看了，结束。~~\n- ~~深度学习那本书，有点看不进去。结束。~~\n- ~~李飞飞的课，不想看了。结束。~~\n- 西瓜书，看一下集成学习那里的boosting，SVM的推导。\n- 贝叶斯那本书，再搞清楚MCMC。\n- ~~熟悉caffe，过完年来实习吧。~~\n\n\n### 前端\n- 小程序看看能怎么做，不一定这个假期做完\n- JavaScript语言精粹看完\n- 再看node什么的\n\n\n### 真实的todo\n- 2月9号更新，按顺序来吧\n- 爬虫，完那个课程，爬个链家什么的\n- ~~网站的视频防盗，再想想怎么做啊~~\n- ~~论文写个大概啊，除了绪论其他要写好~~\n- 专利写个大概吧\n\n### 2月23晚上更新\n- 好事情是，我的论文差不多算写完了啊\n- 爬虫明天看完吧，好像什么也没讲，心疼钱\n- 专利我还不想写，其实也不急，等去了学校吧\n- 大后天就要再见了啊！**努力！奋斗！**\n- 想起来了，我把张鸣的《重说中国近代史》看完了，但是《苦难辉煌》没看啊\n\n","slug":"想想最近的TODO","published":0,"updated":"2023-11-05T11:42:33.902Z","comments":1,"layout":"post","photos":[],"_id":"clolf0lhu0005s2kzg3q06j6j","content":"<h3 id=\"机器学习\"><a href=\"#机器学习\" class=\"headerlink\" title=\"机器学习\"></a>机器学习</h3><ul>\n<li><del>看了吴恩达deeplearning的几门课，算法是用TF写的，没有仔细了解TF用法。结束。</del></li>\n<li><del>看了吴恩达在斯坦福的那个机器学习课，草草看了一遍，新知道了SVD、ICA和马尔可夫决策。增强学习先不打算看了，结束。</del></li>\n<li><del>深度学习那本书，有点看不进去。结束。</del></li>\n<li><del>李飞飞的课，不想看了。结束。</del></li>\n<li>西瓜书，看一下集成学习那里的boosting，SVM的推导。</li>\n<li>贝叶斯那本书，再搞清楚MCMC。</li>\n<li><del>熟悉caffe，过完年来实习吧。</del></li>\n</ul>\n<h3 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h3><ul>\n<li>小程序看看能怎么做，不一定这个假期做完</li>\n<li>JavaScript语言精粹看完</li>\n<li>再看node什么的</li>\n</ul>\n<h3 id=\"真实的todo\"><a href=\"#真实的todo\" class=\"headerlink\" title=\"真实的todo\"></a>真实的todo</h3><ul>\n<li>2月9号更新，按顺序来吧</li>\n<li>爬虫，完那个课程，爬个链家什么的</li>\n<li><del>网站的视频防盗，再想想怎么做啊</del></li>\n<li><del>论文写个大概啊，除了绪论其他要写好</del></li>\n<li>专利写个大概吧</li>\n</ul>\n<h3 id=\"2月23晚上更新\"><a href=\"#2月23晚上更新\" class=\"headerlink\" title=\"2月23晚上更新\"></a>2月23晚上更新</h3><ul>\n<li>好事情是，我的论文差不多算写完了啊</li>\n<li>爬虫明天看完吧，好像什么也没讲，心疼钱</li>\n<li>专利我还不想写，其实也不急，等去了学校吧</li>\n<li>大后天就要再见了啊！<strong>努力！奋斗！</strong></li>\n<li>想起来了，我把张鸣的《重说中国近代史》看完了，但是《苦难辉煌》没看啊</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"机器学习\"><a href=\"#机器学习\" class=\"headerlink\" title=\"机器学习\"></a>机器学习</h3><ul>\n<li><del>看了吴恩达deeplearning的几门课，算法是用TF写的，没有仔细了解TF用法。结束。</del></li>\n<li><del>看了吴恩达在斯坦福的那个机器学习课，草草看了一遍，新知道了SVD、ICA和马尔可夫决策。增强学习先不打算看了，结束。</del></li>\n<li><del>深度学习那本书，有点看不进去。结束。</del></li>\n<li><del>李飞飞的课，不想看了。结束。</del></li>\n<li>西瓜书，看一下集成学习那里的boosting，SVM的推导。</li>\n<li>贝叶斯那本书，再搞清楚MCMC。</li>\n<li><del>熟悉caffe，过完年来实习吧。</del></li>\n</ul>\n<h3 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h3><ul>\n<li>小程序看看能怎么做，不一定这个假期做完</li>\n<li>JavaScript语言精粹看完</li>\n<li>再看node什么的</li>\n</ul>\n<h3 id=\"真实的todo\"><a href=\"#真实的todo\" class=\"headerlink\" title=\"真实的todo\"></a>真实的todo</h3><ul>\n<li>2月9号更新，按顺序来吧</li>\n<li>爬虫，完那个课程，爬个链家什么的</li>\n<li><del>网站的视频防盗，再想想怎么做啊</del></li>\n<li><del>论文写个大概啊，除了绪论其他要写好</del></li>\n<li>专利写个大概吧</li>\n</ul>\n<h3 id=\"2月23晚上更新\"><a href=\"#2月23晚上更新\" class=\"headerlink\" title=\"2月23晚上更新\"></a>2月23晚上更新</h3><ul>\n<li>好事情是，我的论文差不多算写完了啊</li>\n<li>爬虫明天看完吧，好像什么也没讲，心疼钱</li>\n<li>专利我还不想写，其实也不急，等去了学校吧</li>\n<li>大后天就要再见了啊！<strong>努力！奋斗！</strong></li>\n<li>想起来了，我把张鸣的《重说中国近代史》看完了，但是《苦难辉煌》没看啊</li>\n</ul>\n"},{"title":"要2019年了","date":"2018-12-31T13:17:09.000Z","_content":"\n# 关于博客\n\n- 如果你能看到这篇，我猜你是我几个月之后的我？几年之后的我？或者真的是一个关心我的人了吧？\n- 不管怎么样，都一律祝你们永远年轻吧！\n- 一般我是默认这个博客没人看的，所以很多文章都写的很随意，全当是个我的备注\n- 基本上都是我做网站时候记录的，那时候我还在想学JS，想学Vue，虽然我知道我大概率是不会做前端的，但我还是对JS充满了向往，包括现在也是，前段时间我还想学electron，我后来还真的做了个electron查我的人才公寓，再后来，也就忘记了\n- 我想想，可能是前端所写差不多能所见，再有可能就是，前端日新月异，一谈论前端，就满嘴术语，听起来很刺激\n- 后来上班了，基本都不更新了，经常是上班时间，想起来要写个啥，到周末，一躺一躺就结束了，总是来不及，还是加班太多吧\n- 后面我还是会继续更的，也是自己的一个督促吧，先把这几天一直在想的正则写一写，然后前面挖了那么多算法的坑，一个一个补起来\n\n# 关于2018\n\n- 18年的1月1号我在这里写了第一篇博客，那天应该会和明天一样，朋友圈都是各种总结和期待，我当然也是有期待，甚至是笃定，18年一定会比17年好很多\n- 那时候我找完工作也不久，决定了要签海康，12月论文刚刚中，担心了两年的毕业终于不用那么担心\n- 我只是急切地想要毕业，想要脱离学校，甚至后来真正要毕业的时候，我完全没有本科那时候的伤感，唯一关心的是怎么按时拿毕业证入职\n- 七月我终于入职了，然后按时打卡上班，例行加班，一下子就半年了，时间过得很快很快\n- 18年确实比17年好很多啊，我好多事情有了个结果，毕业工作落户都如我所愿，但总觉得和我想的有哪里不一样\n- 整个18年，我都急切着想从一个阶段，快进到下一个阶段，开始时想赶快毕业，到后来，想赶快升职加薪，好像生怕落后同龄人一样\n- 所以18年，成了社会人以后，心态确实不一样了很多，有好多事情，胜负心都太重了\n- 而我最近两个月确实想家了\n- 其实离上次回家也没有隔多久，但老家的感觉感觉越来越模糊了，仿佛毕业已经是很久远的事情了，而故乡，是比久远还要久远\n- 尤其是我姐时常会发一些小孩的视频，每次我都会想，如果我当时也留在太原，或者留在西安，现在又会是什么样子的呢\n- 大概率会比现在舒服很多吧，而且我爸妈也不会有压力\n- 18年，我如愿地落了户，但看着单人的户口卡，总感觉有点凄凉，就像宋冬野的那句吧 \n> 你的城市没有一扇门，为我打开啊，我终究还要回到路上\n\n# 关于2019\n- 身体要注意，该跑步就跑步，该早睡就早睡\n- 生活上要讲卫生\n- 关于其他，心态平和一点，不要那么在意，当然努力还是要努力的\n- 18年最后一篇有点丧，19年要积极一点\n","source":"_drafts/要2019年了.md","raw":"---\ntitle: 要2019年了\ntags:\n  - 2018\n  - 2019\ncategories: 感叹一下\ndate: 2018-12-31 21:17:09\n---\n\n# 关于博客\n\n- 如果你能看到这篇，我猜你是我几个月之后的我？几年之后的我？或者真的是一个关心我的人了吧？\n- 不管怎么样，都一律祝你们永远年轻吧！\n- 一般我是默认这个博客没人看的，所以很多文章都写的很随意，全当是个我的备注\n- 基本上都是我做网站时候记录的，那时候我还在想学JS，想学Vue，虽然我知道我大概率是不会做前端的，但我还是对JS充满了向往，包括现在也是，前段时间我还想学electron，我后来还真的做了个electron查我的人才公寓，再后来，也就忘记了\n- 我想想，可能是前端所写差不多能所见，再有可能就是，前端日新月异，一谈论前端，就满嘴术语，听起来很刺激\n- 后来上班了，基本都不更新了，经常是上班时间，想起来要写个啥，到周末，一躺一躺就结束了，总是来不及，还是加班太多吧\n- 后面我还是会继续更的，也是自己的一个督促吧，先把这几天一直在想的正则写一写，然后前面挖了那么多算法的坑，一个一个补起来\n\n# 关于2018\n\n- 18年的1月1号我在这里写了第一篇博客，那天应该会和明天一样，朋友圈都是各种总结和期待，我当然也是有期待，甚至是笃定，18年一定会比17年好很多\n- 那时候我找完工作也不久，决定了要签海康，12月论文刚刚中，担心了两年的毕业终于不用那么担心\n- 我只是急切地想要毕业，想要脱离学校，甚至后来真正要毕业的时候，我完全没有本科那时候的伤感，唯一关心的是怎么按时拿毕业证入职\n- 七月我终于入职了，然后按时打卡上班，例行加班，一下子就半年了，时间过得很快很快\n- 18年确实比17年好很多啊，我好多事情有了个结果，毕业工作落户都如我所愿，但总觉得和我想的有哪里不一样\n- 整个18年，我都急切着想从一个阶段，快进到下一个阶段，开始时想赶快毕业，到后来，想赶快升职加薪，好像生怕落后同龄人一样\n- 所以18年，成了社会人以后，心态确实不一样了很多，有好多事情，胜负心都太重了\n- 而我最近两个月确实想家了\n- 其实离上次回家也没有隔多久，但老家的感觉感觉越来越模糊了，仿佛毕业已经是很久远的事情了，而故乡，是比久远还要久远\n- 尤其是我姐时常会发一些小孩的视频，每次我都会想，如果我当时也留在太原，或者留在西安，现在又会是什么样子的呢\n- 大概率会比现在舒服很多吧，而且我爸妈也不会有压力\n- 18年，我如愿地落了户，但看着单人的户口卡，总感觉有点凄凉，就像宋冬野的那句吧 \n> 你的城市没有一扇门，为我打开啊，我终究还要回到路上\n\n# 关于2019\n- 身体要注意，该跑步就跑步，该早睡就早睡\n- 生活上要讲卫生\n- 关于其他，心态平和一点，不要那么在意，当然努力还是要努力的\n- 18年最后一篇有点丧，19年要积极一点\n","slug":"要2019年了","published":0,"updated":"2023-11-05T11:42:33.902Z","comments":1,"layout":"post","photos":[],"_id":"clolf0lhv0007s2kzgnu3gyiw","content":"<h1 id=\"关于博客\"><a href=\"#关于博客\" class=\"headerlink\" title=\"关于博客\"></a>关于博客</h1><ul>\n<li>如果你能看到这篇，我猜你是我几个月之后的我？几年之后的我？或者真的是一个关心我的人了吧？</li>\n<li>不管怎么样，都一律祝你们永远年轻吧！</li>\n<li>一般我是默认这个博客没人看的，所以很多文章都写的很随意，全当是个我的备注</li>\n<li>基本上都是我做网站时候记录的，那时候我还在想学JS，想学Vue，虽然我知道我大概率是不会做前端的，但我还是对JS充满了向往，包括现在也是，前段时间我还想学electron，我后来还真的做了个electron查我的人才公寓，再后来，也就忘记了</li>\n<li>我想想，可能是前端所写差不多能所见，再有可能就是，前端日新月异，一谈论前端，就满嘴术语，听起来很刺激</li>\n<li>后来上班了，基本都不更新了，经常是上班时间，想起来要写个啥，到周末，一躺一躺就结束了，总是来不及，还是加班太多吧</li>\n<li>后面我还是会继续更的，也是自己的一个督促吧，先把这几天一直在想的正则写一写，然后前面挖了那么多算法的坑，一个一个补起来</li>\n</ul>\n<h1 id=\"关于2018\"><a href=\"#关于2018\" class=\"headerlink\" title=\"关于2018\"></a>关于2018</h1><ul>\n<li>18年的1月1号我在这里写了第一篇博客，那天应该会和明天一样，朋友圈都是各种总结和期待，我当然也是有期待，甚至是笃定，18年一定会比17年好很多</li>\n<li>那时候我找完工作也不久，决定了要签海康，12月论文刚刚中，担心了两年的毕业终于不用那么担心</li>\n<li>我只是急切地想要毕业，想要脱离学校，甚至后来真正要毕业的时候，我完全没有本科那时候的伤感，唯一关心的是怎么按时拿毕业证入职</li>\n<li>七月我终于入职了，然后按时打卡上班，例行加班，一下子就半年了，时间过得很快很快</li>\n<li>18年确实比17年好很多啊，我好多事情有了个结果，毕业工作落户都如我所愿，但总觉得和我想的有哪里不一样</li>\n<li>整个18年，我都急切着想从一个阶段，快进到下一个阶段，开始时想赶快毕业，到后来，想赶快升职加薪，好像生怕落后同龄人一样</li>\n<li>所以18年，成了社会人以后，心态确实不一样了很多，有好多事情，胜负心都太重了</li>\n<li>而我最近两个月确实想家了</li>\n<li>其实离上次回家也没有隔多久，但老家的感觉感觉越来越模糊了，仿佛毕业已经是很久远的事情了，而故乡，是比久远还要久远</li>\n<li>尤其是我姐时常会发一些小孩的视频，每次我都会想，如果我当时也留在太原，或者留在西安，现在又会是什么样子的呢</li>\n<li>大概率会比现在舒服很多吧，而且我爸妈也不会有压力</li>\n<li>18年，我如愿地落了户，但看着单人的户口卡，总感觉有点凄凉，就像宋冬野的那句吧 <blockquote>\n<p>你的城市没有一扇门，为我打开啊，我终究还要回到路上</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"关于2019\"><a href=\"#关于2019\" class=\"headerlink\" title=\"关于2019\"></a>关于2019</h1><ul>\n<li>身体要注意，该跑步就跑步，该早睡就早睡</li>\n<li>生活上要讲卫生</li>\n<li>关于其他，心态平和一点，不要那么在意，当然努力还是要努力的</li>\n<li>18年最后一篇有点丧，19年要积极一点</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"关于博客\"><a href=\"#关于博客\" class=\"headerlink\" title=\"关于博客\"></a>关于博客</h1><ul>\n<li>如果你能看到这篇，我猜你是我几个月之后的我？几年之后的我？或者真的是一个关心我的人了吧？</li>\n<li>不管怎么样，都一律祝你们永远年轻吧！</li>\n<li>一般我是默认这个博客没人看的，所以很多文章都写的很随意，全当是个我的备注</li>\n<li>基本上都是我做网站时候记录的，那时候我还在想学JS，想学Vue，虽然我知道我大概率是不会做前端的，但我还是对JS充满了向往，包括现在也是，前段时间我还想学electron，我后来还真的做了个electron查我的人才公寓，再后来，也就忘记了</li>\n<li>我想想，可能是前端所写差不多能所见，再有可能就是，前端日新月异，一谈论前端，就满嘴术语，听起来很刺激</li>\n<li>后来上班了，基本都不更新了，经常是上班时间，想起来要写个啥，到周末，一躺一躺就结束了，总是来不及，还是加班太多吧</li>\n<li>后面我还是会继续更的，也是自己的一个督促吧，先把这几天一直在想的正则写一写，然后前面挖了那么多算法的坑，一个一个补起来</li>\n</ul>\n<h1 id=\"关于2018\"><a href=\"#关于2018\" class=\"headerlink\" title=\"关于2018\"></a>关于2018</h1><ul>\n<li>18年的1月1号我在这里写了第一篇博客，那天应该会和明天一样，朋友圈都是各种总结和期待，我当然也是有期待，甚至是笃定，18年一定会比17年好很多</li>\n<li>那时候我找完工作也不久，决定了要签海康，12月论文刚刚中，担心了两年的毕业终于不用那么担心</li>\n<li>我只是急切地想要毕业，想要脱离学校，甚至后来真正要毕业的时候，我完全没有本科那时候的伤感，唯一关心的是怎么按时拿毕业证入职</li>\n<li>七月我终于入职了，然后按时打卡上班，例行加班，一下子就半年了，时间过得很快很快</li>\n<li>18年确实比17年好很多啊，我好多事情有了个结果，毕业工作落户都如我所愿，但总觉得和我想的有哪里不一样</li>\n<li>整个18年，我都急切着想从一个阶段，快进到下一个阶段，开始时想赶快毕业，到后来，想赶快升职加薪，好像生怕落后同龄人一样</li>\n<li>所以18年，成了社会人以后，心态确实不一样了很多，有好多事情，胜负心都太重了</li>\n<li>而我最近两个月确实想家了</li>\n<li>其实离上次回家也没有隔多久，但老家的感觉感觉越来越模糊了，仿佛毕业已经是很久远的事情了，而故乡，是比久远还要久远</li>\n<li>尤其是我姐时常会发一些小孩的视频，每次我都会想，如果我当时也留在太原，或者留在西安，现在又会是什么样子的呢</li>\n<li>大概率会比现在舒服很多吧，而且我爸妈也不会有压力</li>\n<li>18年，我如愿地落了户，但看着单人的户口卡，总感觉有点凄凉，就像宋冬野的那句吧 <blockquote>\n<p>你的城市没有一扇门，为我打开啊，我终究还要回到路上</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"关于2019\"><a href=\"#关于2019\" class=\"headerlink\" title=\"关于2019\"></a>关于2019</h1><ul>\n<li>身体要注意，该跑步就跑步，该早睡就早睡</li>\n<li>生活上要讲卫生</li>\n<li>关于其他，心态平和一点，不要那么在意，当然努力还是要努力的</li>\n<li>18年最后一篇有点丧，19年要积极一点</li>\n</ul>\n"},{"title":"word2vec","typora-root-url":"../../source","date":"2020-09-19T14:20:16.000Z","_content":"\n想不到已经半年没有在这里写东西了，迷迷糊糊中今年就过了大半，\n但其实也没有很偷懒，我一部分记录放到github上的另外一个[repo](https://github.com/zjyfdu/leetcode-or-more)上了，用gitbook确实比hexo方便一点，能少管理一个分支，（并且刷题确实也比写博客更有意思点\n\n今天写word2vec是想一次做个了断，以后可以大方点说，nlp我也是熟悉的\n\n![image-20200919223818373](/images/image-20200919223818373.png) \n\n","source":"_drafts/word2vec.md","raw":"---\ntitle: word2vec\ntags:\n  - word2vec\ntypora-root-url: ../../source\ndate: 2020-09-19 22:20:16\n---\n\n想不到已经半年没有在这里写东西了，迷迷糊糊中今年就过了大半，\n但其实也没有很偷懒，我一部分记录放到github上的另外一个[repo](https://github.com/zjyfdu/leetcode-or-more)上了，用gitbook确实比hexo方便一点，能少管理一个分支，（并且刷题确实也比写博客更有意思点\n\n今天写word2vec是想一次做个了断，以后可以大方点说，nlp我也是熟悉的\n\n![image-20200919223818373](/images/image-20200919223818373.png) \n\n","slug":"word2vec","published":0,"updated":"2023-11-05T11:42:33.902Z","comments":1,"layout":"post","photos":[],"_id":"clolf0lhv0008s2kz6nx472p1","content":"<p>想不到已经半年没有在这里写东西了，迷迷糊糊中今年就过了大半，<br>但其实也没有很偷懒，我一部分记录放到github上的另外一个<a href=\"https://github.com/zjyfdu/leetcode-or-more\">repo</a>上了，用gitbook确实比hexo方便一点，能少管理一个分支，（并且刷题确实也比写博客更有意思点</p>\n<p>今天写word2vec是想一次做个了断，以后可以大方点说，nlp我也是熟悉的</p>\n<p><img src=\"/images/image-20200919223818373.png\" alt=\"image-20200919223818373\"> </p>\n","excerpt":"","more":"<p>想不到已经半年没有在这里写东西了，迷迷糊糊中今年就过了大半，<br>但其实也没有很偷懒，我一部分记录放到github上的另外一个<a href=\"https://github.com/zjyfdu/leetcode-or-more\">repo</a>上了，用gitbook确实比hexo方便一点，能少管理一个分支，（并且刷题确实也比写博客更有意思点</p>\n<p>今天写word2vec是想一次做个了断，以后可以大方点说，nlp我也是熟悉的</p>\n<p><img src=\"/images/image-20200919223818373.png\" alt=\"image-20200919223818373\"> </p>\n"},{"title":"Attention","typora-root-url":"../../source","date":"2019-03-04T14:31:36.000Z","_content":"\n# Content Attention\n- 假设cnn之后，feature map是$T\\times1$，用$x$表示，这里用caffe的表示方法，宽度在前，高度在后，忽略了batch size\n- Content Attention是最常见的Attention，计算权重只用到了$x$和LSTM的输出$c_{t-1}$，$c_{t-1}$和$x$都需要一个全连接\n- 其实这里的$\\hat{e}_{t,j},  j=1..T$是一起算的，$wx$的shape已经是$T\\times C$，而$wc_{t-1}$是$1\\times C$，需要扩增到$T\\times C$\n$$\n\\hat{e}_{t,j}=wc_{t-1}+wx_j \\\\\ne_{t,j}=tanh(\\hat{e}_{t,j}) \\\\\n\\alpha_{t,j}=softmax(we_{t,j})\n$$\n- $\\alpha_t$的shape是$T\\times1$，是$x$每个位置的权重，然后进行累加，$g_t$称之为glimpse向量，\n$$\ng_t=\\sum_{j=1}^{T}\\alpha_{t,j}x_j\n$$\n- 然后用LSTM解码，这里$y_{t-1}+g_t$其实是不能直接加到，shape不一致，需要先对$y_{t-1}$全连接一下\n$$\nc_t,h_t=LSTM(y_{t-1}+g_t, c_{t-1}) \\\\\ny_t=argmax(softmax(wh_t))\n$$\n\n# Hybrid Attention\n- Content有一个严重对问题是计算权重对时候，只用到了内容信息，没有用到位置信息，所以会出现对不齐对问题\n- Hybrid Attention其实是Content Attention和Locate Attention的混合，区别只是体现在$\\hat{e}_{t,j}$的计算上多了上一时刻的位置信息\n$$\n\\hat{e}_{t,j}=wc_{t-1}+wx_j+w\\alpha_{t-1,j}\n$$\n- $\\alpha_{t-1,j}$的shape是$T\\times N\\times1$，先换成$N\\times T\\times1$，然后用$1\\times1$的卷积，卷成$N\\times T\\times C$，然后可以全连接，最后再换回$T\\times N\\times C$，这样就能加起来了\n","source":"_posts/Attention.md","raw":"---\ntitle: Attention\ntypora-root-url: ../../source\ntags: Attention\ncategories: caffe\ndate: 2019-03-04 22:31:36\n---\n\n# Content Attention\n- 假设cnn之后，feature map是$T\\times1$，用$x$表示，这里用caffe的表示方法，宽度在前，高度在后，忽略了batch size\n- Content Attention是最常见的Attention，计算权重只用到了$x$和LSTM的输出$c_{t-1}$，$c_{t-1}$和$x$都需要一个全连接\n- 其实这里的$\\hat{e}_{t,j},  j=1..T$是一起算的，$wx$的shape已经是$T\\times C$，而$wc_{t-1}$是$1\\times C$，需要扩增到$T\\times C$\n$$\n\\hat{e}_{t,j}=wc_{t-1}+wx_j \\\\\ne_{t,j}=tanh(\\hat{e}_{t,j}) \\\\\n\\alpha_{t,j}=softmax(we_{t,j})\n$$\n- $\\alpha_t$的shape是$T\\times1$，是$x$每个位置的权重，然后进行累加，$g_t$称之为glimpse向量，\n$$\ng_t=\\sum_{j=1}^{T}\\alpha_{t,j}x_j\n$$\n- 然后用LSTM解码，这里$y_{t-1}+g_t$其实是不能直接加到，shape不一致，需要先对$y_{t-1}$全连接一下\n$$\nc_t,h_t=LSTM(y_{t-1}+g_t, c_{t-1}) \\\\\ny_t=argmax(softmax(wh_t))\n$$\n\n# Hybrid Attention\n- Content有一个严重对问题是计算权重对时候，只用到了内容信息，没有用到位置信息，所以会出现对不齐对问题\n- Hybrid Attention其实是Content Attention和Locate Attention的混合，区别只是体现在$\\hat{e}_{t,j}$的计算上多了上一时刻的位置信息\n$$\n\\hat{e}_{t,j}=wc_{t-1}+wx_j+w\\alpha_{t-1,j}\n$$\n- $\\alpha_{t-1,j}$的shape是$T\\times N\\times1$，先换成$N\\times T\\times1$，然后用$1\\times1$的卷积，卷成$N\\times T\\times C$，然后可以全连接，最后再换回$T\\times N\\times C$，这样就能加起来了\n","slug":"Attention","published":1,"updated":"2023-11-05T11:42:33.902Z","comments":1,"layout":"post","photos":[],"_id":"clolf0lhv0009s2kzhxhe6zsl","content":"<h1 id=\"Content-Attention\"><a href=\"#Content-Attention\" class=\"headerlink\" title=\"Content Attention\"></a>Content Attention</h1><ul>\n<li>假设cnn之后，feature map是$T\\times1$，用$x$表示，这里用caffe的表示方法，宽度在前，高度在后，忽略了batch size</li>\n<li>Content Attention是最常见的Attention，计算权重只用到了$x$和LSTM的输出$c_{t-1}$，$c_{t-1}$和$x$都需要一个全连接</li>\n<li>其实这里的$\\hat{e}<em>{t,j},  j&#x3D;1..T$是一起算的，$wx$的shape已经是$T\\times C$，而$wc</em>{t-1}$是$1\\times C$，需要扩增到$T\\times C$<br>$$<br>\\hat{e}<em>{t,j}&#x3D;wc</em>{t-1}+wx_j \\<br>e_{t,j}&#x3D;tanh(\\hat{e}<em>{t,j}) \\<br>\\alpha</em>{t,j}&#x3D;softmax(we_{t,j})<br>$$</li>\n<li>$\\alpha_t$的shape是$T\\times1$，是$x$每个位置的权重，然后进行累加，$g_t$称之为glimpse向量，<br>$$<br>g_t&#x3D;\\sum_{j&#x3D;1}^{T}\\alpha_{t,j}x_j<br>$$</li>\n<li>然后用LSTM解码，这里$y_{t-1}+g_t$其实是不能直接加到，shape不一致，需要先对$y_{t-1}$全连接一下<br>$$<br>c_t,h_t&#x3D;LSTM(y_{t-1}+g_t, c_{t-1}) \\<br>y_t&#x3D;argmax(softmax(wh_t))<br>$$</li>\n</ul>\n<h1 id=\"Hybrid-Attention\"><a href=\"#Hybrid-Attention\" class=\"headerlink\" title=\"Hybrid Attention\"></a>Hybrid Attention</h1><ul>\n<li>Content有一个严重对问题是计算权重对时候，只用到了内容信息，没有用到位置信息，所以会出现对不齐对问题</li>\n<li>Hybrid Attention其实是Content Attention和Locate Attention的混合，区别只是体现在$\\hat{e}<em>{t,j}$的计算上多了上一时刻的位置信息<br>$$<br>\\hat{e}</em>{t,j}&#x3D;wc_{t-1}+wx_j+w\\alpha_{t-1,j}<br>$$</li>\n<li>$\\alpha_{t-1,j}$的shape是$T\\times N\\times1$，先换成$N\\times T\\times1$，然后用$1\\times1$的卷积，卷成$N\\times T\\times C$，然后可以全连接，最后再换回$T\\times N\\times C$，这样就能加起来了</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Content-Attention\"><a href=\"#Content-Attention\" class=\"headerlink\" title=\"Content Attention\"></a>Content Attention</h1><ul>\n<li>假设cnn之后，feature map是$T\\times1$，用$x$表示，这里用caffe的表示方法，宽度在前，高度在后，忽略了batch size</li>\n<li>Content Attention是最常见的Attention，计算权重只用到了$x$和LSTM的输出$c_{t-1}$，$c_{t-1}$和$x$都需要一个全连接</li>\n<li>其实这里的$\\hat{e}<em>{t,j},  j&#x3D;1..T$是一起算的，$wx$的shape已经是$T\\times C$，而$wc</em>{t-1}$是$1\\times C$，需要扩增到$T\\times C$<br>$$<br>\\hat{e}<em>{t,j}&#x3D;wc</em>{t-1}+wx_j \\<br>e_{t,j}&#x3D;tanh(\\hat{e}<em>{t,j}) \\<br>\\alpha</em>{t,j}&#x3D;softmax(we_{t,j})<br>$$</li>\n<li>$\\alpha_t$的shape是$T\\times1$，是$x$每个位置的权重，然后进行累加，$g_t$称之为glimpse向量，<br>$$<br>g_t&#x3D;\\sum_{j&#x3D;1}^{T}\\alpha_{t,j}x_j<br>$$</li>\n<li>然后用LSTM解码，这里$y_{t-1}+g_t$其实是不能直接加到，shape不一致，需要先对$y_{t-1}$全连接一下<br>$$<br>c_t,h_t&#x3D;LSTM(y_{t-1}+g_t, c_{t-1}) \\<br>y_t&#x3D;argmax(softmax(wh_t))<br>$$</li>\n</ul>\n<h1 id=\"Hybrid-Attention\"><a href=\"#Hybrid-Attention\" class=\"headerlink\" title=\"Hybrid Attention\"></a>Hybrid Attention</h1><ul>\n<li>Content有一个严重对问题是计算权重对时候，只用到了内容信息，没有用到位置信息，所以会出现对不齐对问题</li>\n<li>Hybrid Attention其实是Content Attention和Locate Attention的混合，区别只是体现在$\\hat{e}<em>{t,j}$的计算上多了上一时刻的位置信息<br>$$<br>\\hat{e}</em>{t,j}&#x3D;wc_{t-1}+wx_j+w\\alpha_{t-1,j}<br>$$</li>\n<li>$\\alpha_{t-1,j}$的shape是$T\\times N\\times1$，先换成$N\\times T\\times1$，然后用$1\\times1$的卷积，卷成$N\\times T\\times C$，然后可以全连接，最后再换回$T\\times N\\times C$，这样就能加起来了</li>\n</ul>\n"},{"title":"CPU历史考古","typora-root-url":"../../source","date":"2019-12-01T12:54:22.000Z","_content":"\n- 肖克利在贝尔实验室发明了三极管，后来离开贝尔，创办肖克利半导体公司\n- 肖克利独断专行，出现了”八叛徒“叛逃，八叛徒包括摩尔、诺伊斯等人，后创立了仙童半导体\n- 在仙童，诺伊斯发明了集成电路。摩尔、诺伊斯等人继续叛逃仙童，创办了英特尔\n\n\n- 霍夫，我不想写了，看[这里](http://lao-qian.hxwk.org/2015/01/01/%e7%a1%85%e8%b0%b7%e4%bc%a0%e5%a5%87%ef%bc%9a%e5%be%ae%e5%a4%84%e7%90%86%e5%99%a8%e4%b9%8b%e7%88%b6-%e6%b3%b0%e5%be%b7%e2%80%a2%e9%9c%8d%e5%a4%abmarcian-edwardtedho/)吧\n","source":"_posts/CPU历史考古.md","raw":"---\ntitle: CPU历史考古\ntypora-root-url: ../../source\ndate: 2019-12-01 20:54:22\n---\n\n- 肖克利在贝尔实验室发明了三极管，后来离开贝尔，创办肖克利半导体公司\n- 肖克利独断专行，出现了”八叛徒“叛逃，八叛徒包括摩尔、诺伊斯等人，后创立了仙童半导体\n- 在仙童，诺伊斯发明了集成电路。摩尔、诺伊斯等人继续叛逃仙童，创办了英特尔\n\n\n- 霍夫，我不想写了，看[这里](http://lao-qian.hxwk.org/2015/01/01/%e7%a1%85%e8%b0%b7%e4%bc%a0%e5%a5%87%ef%bc%9a%e5%be%ae%e5%a4%84%e7%90%86%e5%99%a8%e4%b9%8b%e7%88%b6-%e6%b3%b0%e5%be%b7%e2%80%a2%e9%9c%8d%e5%a4%abmarcian-edwardtedho/)吧\n","slug":"CPU历史考古","published":1,"updated":"2023-11-05T11:42:33.902Z","comments":1,"layout":"post","photos":[],"_id":"clolf0lhw000as2kz9qnxd7xz","content":"<ul>\n<li><p>肖克利在贝尔实验室发明了三极管，后来离开贝尔，创办肖克利半导体公司</p>\n</li>\n<li><p>肖克利独断专行，出现了”八叛徒“叛逃，八叛徒包括摩尔、诺伊斯等人，后创立了仙童半导体</p>\n</li>\n<li><p>在仙童，诺伊斯发明了集成电路。摩尔、诺伊斯等人继续叛逃仙童，创办了英特尔</p>\n</li>\n<li><p>霍夫，我不想写了，看<a href=\"http://lao-qian.hxwk.org/2015/01/01/%e7%a1%85%e8%b0%b7%e4%bc%a0%e5%a5%87%ef%bc%9a%e5%be%ae%e5%a4%84%e7%90%86%e5%99%a8%e4%b9%8b%e7%88%b6-%e6%b3%b0%e5%be%b7%e2%80%a2%e9%9c%8d%e5%a4%abmarcian-edwardtedho/\">这里</a>吧</p>\n</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li><p>肖克利在贝尔实验室发明了三极管，后来离开贝尔，创办肖克利半导体公司</p>\n</li>\n<li><p>肖克利独断专行，出现了”八叛徒“叛逃，八叛徒包括摩尔、诺伊斯等人，后创立了仙童半导体</p>\n</li>\n<li><p>在仙童，诺伊斯发明了集成电路。摩尔、诺伊斯等人继续叛逃仙童，创办了英特尔</p>\n</li>\n<li><p>霍夫，我不想写了，看<a href=\"http://lao-qian.hxwk.org/2015/01/01/%e7%a1%85%e8%b0%b7%e4%bc%a0%e5%a5%87%ef%bc%9a%e5%be%ae%e5%a4%84%e7%90%86%e5%99%a8%e4%b9%8b%e7%88%b6-%e6%b3%b0%e5%be%b7%e2%80%a2%e9%9c%8d%e5%a4%abmarcian-edwardtedho/\">这里</a>吧</p>\n</li>\n</ul>\n"},{"title":"CTC","typora-root-url":"../../source","date":"2018-03-20T06:48:40.000Z","_content":"\n- 以OCR为例，原始图片经过CNN卷积，图片高度方向尺寸变为1\n- 图片的宽度方向即为时间序列方向\n- 在channel分享进行innerproduct，然后softmax，得到每个序列在每个字符的概率，类似于下面这张图\n\n![](/images/ctc.jpg)\n\n- 然后根据这个概率图，使用类似动态规划的思路，可以计算出ctc loss和导数\n\n- 不想写了，看下面这篇吧\n\n- [CTC讲解](http://blog.csdn.net/luodongri/article/details/77005948)\n","source":"_posts/CTC.md","raw":"---\ntitle: CTC\ntypora-root-url: ../../source\ndate: 2018-03-20 14:48:40\ntags:\n  - CTC\ncategories: caffe\n---\n\n- 以OCR为例，原始图片经过CNN卷积，图片高度方向尺寸变为1\n- 图片的宽度方向即为时间序列方向\n- 在channel分享进行innerproduct，然后softmax，得到每个序列在每个字符的概率，类似于下面这张图\n\n![](/images/ctc.jpg)\n\n- 然后根据这个概率图，使用类似动态规划的思路，可以计算出ctc loss和导数\n\n- 不想写了，看下面这篇吧\n\n- [CTC讲解](http://blog.csdn.net/luodongri/article/details/77005948)\n","slug":"CTC","published":1,"updated":"2023-11-05T11:42:33.903Z","comments":1,"layout":"post","photos":[],"_id":"clolf0lhx000ds2kz6ng565t7","content":"<ul>\n<li>以OCR为例，原始图片经过CNN卷积，图片高度方向尺寸变为1</li>\n<li>图片的宽度方向即为时间序列方向</li>\n<li>在channel分享进行innerproduct，然后softmax，得到每个序列在每个字符的概率，类似于下面这张图</li>\n</ul>\n<p><img src=\"/images/ctc.jpg\"></p>\n<ul>\n<li><p>然后根据这个概率图，使用类似动态规划的思路，可以计算出ctc loss和导数</p>\n</li>\n<li><p>不想写了，看下面这篇吧</p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/luodongri/article/details/77005948\">CTC讲解</a></p>\n</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li>以OCR为例，原始图片经过CNN卷积，图片高度方向尺寸变为1</li>\n<li>图片的宽度方向即为时间序列方向</li>\n<li>在channel分享进行innerproduct，然后softmax，得到每个序列在每个字符的概率，类似于下面这张图</li>\n</ul>\n<p><img src=\"/images/ctc.jpg\"></p>\n<ul>\n<li><p>然后根据这个概率图，使用类似动态规划的思路，可以计算出ctc loss和导数</p>\n</li>\n<li><p>不想写了，看下面这篇吧</p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/luodongri/article/details/77005948\">CTC讲解</a></p>\n</li>\n</ul>\n"},{"title":"C宏函数重载","typora-root-url":"../../source","date":"2019-02-14T09:46:37.000Z","_content":"\n- 理论上，宏函数是不能重载的，第二个宏会直接覆盖掉第一个\n- 但我今天看到了一个非常~~sao~~优雅的方法，可以功能上实现重载，原文在[这里](https://blog.csdn.net/lmhuanying1012/article/details/78715351)\n\n```cpp\n#define OneArgument(a) // ...action with one argument\n#define TwoArguments(a, b) // ...action with two arguments\n \n#define GetMacro(_1, _2, NAME, ...) NAME\n#define Macro(...) GetMacro(__VA_ARGS__, TwoArguments, OneArgument, ...)(__VA_ARGS__)\n \n// usage:\nMacro(a); // OneArument(a) is called\nMacro(a, b);  // TwoArguments(a, b) is called\n```\n- 其中，`__VA_ARGS__`是参数`...`的展开\n\n- 以此类推，三个参数的重载也是能实现的\n\n```cpp\n#define OneArgument(a) // ...action with one argument\n#define TwoArguments(a, b) // ...action with two arguments\n#define ThreeArguments(a, b, c) // ...action with three arguments\n \n#define GetMacro(_1, _2, _3, NAME, ...) NAME\n#define Macro(...) GetMacro(__VA_ARGS__, ThreeArguments, TwoArguments, OneArgument, ...)(__VA_ARGS__)\n \n// usage:\nMacro(a); // OneArument(a) is called\nMacro(a, b);  // TwoArguments(a, b) is called\nMacro(a, b, c);  // ThreeArguments(a, b, c) is called\n```\n","source":"_posts/C宏函数重载.md","raw":"---\ntitle: C宏函数重载\ntypora-root-url: ../../source\ntags: cpp\ncategories: cpp\ndate: 2019-02-14 17:46:37\n---\n\n- 理论上，宏函数是不能重载的，第二个宏会直接覆盖掉第一个\n- 但我今天看到了一个非常~~sao~~优雅的方法，可以功能上实现重载，原文在[这里](https://blog.csdn.net/lmhuanying1012/article/details/78715351)\n\n```cpp\n#define OneArgument(a) // ...action with one argument\n#define TwoArguments(a, b) // ...action with two arguments\n \n#define GetMacro(_1, _2, NAME, ...) NAME\n#define Macro(...) GetMacro(__VA_ARGS__, TwoArguments, OneArgument, ...)(__VA_ARGS__)\n \n// usage:\nMacro(a); // OneArument(a) is called\nMacro(a, b);  // TwoArguments(a, b) is called\n```\n- 其中，`__VA_ARGS__`是参数`...`的展开\n\n- 以此类推，三个参数的重载也是能实现的\n\n```cpp\n#define OneArgument(a) // ...action with one argument\n#define TwoArguments(a, b) // ...action with two arguments\n#define ThreeArguments(a, b, c) // ...action with three arguments\n \n#define GetMacro(_1, _2, _3, NAME, ...) NAME\n#define Macro(...) GetMacro(__VA_ARGS__, ThreeArguments, TwoArguments, OneArgument, ...)(__VA_ARGS__)\n \n// usage:\nMacro(a); // OneArument(a) is called\nMacro(a, b);  // TwoArguments(a, b) is called\nMacro(a, b, c);  // ThreeArguments(a, b, c) is called\n```\n","slug":"C宏函数重载","published":1,"updated":"2023-11-05T11:42:33.903Z","comments":1,"layout":"post","photos":[],"_id":"clolf0lhx000es2kz7hm4bm6c","content":"<ul>\n<li>理论上，宏函数是不能重载的，第二个宏会直接覆盖掉第一个</li>\n<li>但我今天看到了一个非常<del>sao</del>优雅的方法，可以功能上实现重载，原文在<a href=\"https://blog.csdn.net/lmhuanying1012/article/details/78715351\">这里</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> OneArgument(a) <span class=\"comment\">// ...action with one argument</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> TwoArguments(a, b) <span class=\"comment\">// ...action with two arguments</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GetMacro(_1, _2, NAME, ...) NAME</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Macro(...) GetMacro(__VA_ARGS__, TwoArguments, OneArgument, ...)(__VA_ARGS__)</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// usage:</span></span><br><span class=\"line\"><span class=\"built_in\">Macro</span>(a); <span class=\"comment\">// OneArument(a) is called</span></span><br><span class=\"line\"><span class=\"built_in\">Macro</span>(a, b);  <span class=\"comment\">// TwoArguments(a, b) is called</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>其中，<code>__VA_ARGS__</code>是参数<code>...</code>的展开</p>\n</li>\n<li><p>以此类推，三个参数的重载也是能实现的</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> OneArgument(a) <span class=\"comment\">// ...action with one argument</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> TwoArguments(a, b) <span class=\"comment\">// ...action with two arguments</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ThreeArguments(a, b, c) <span class=\"comment\">// ...action with three arguments</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GetMacro(_1, _2, _3, NAME, ...) NAME</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Macro(...) GetMacro(__VA_ARGS__, ThreeArguments, TwoArguments, OneArgument, ...)(__VA_ARGS__)</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// usage:</span></span><br><span class=\"line\"><span class=\"built_in\">Macro</span>(a); <span class=\"comment\">// OneArument(a) is called</span></span><br><span class=\"line\"><span class=\"built_in\">Macro</span>(a, b);  <span class=\"comment\">// TwoArguments(a, b) is called</span></span><br><span class=\"line\"><span class=\"built_in\">Macro</span>(a, b, c);  <span class=\"comment\">// ThreeArguments(a, b, c) is called</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<ul>\n<li>理论上，宏函数是不能重载的，第二个宏会直接覆盖掉第一个</li>\n<li>但我今天看到了一个非常<del>sao</del>优雅的方法，可以功能上实现重载，原文在<a href=\"https://blog.csdn.net/lmhuanying1012/article/details/78715351\">这里</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> OneArgument(a) <span class=\"comment\">// ...action with one argument</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> TwoArguments(a, b) <span class=\"comment\">// ...action with two arguments</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GetMacro(_1, _2, NAME, ...) NAME</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Macro(...) GetMacro(__VA_ARGS__, TwoArguments, OneArgument, ...)(__VA_ARGS__)</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// usage:</span></span><br><span class=\"line\"><span class=\"built_in\">Macro</span>(a); <span class=\"comment\">// OneArument(a) is called</span></span><br><span class=\"line\"><span class=\"built_in\">Macro</span>(a, b);  <span class=\"comment\">// TwoArguments(a, b) is called</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>其中，<code>__VA_ARGS__</code>是参数<code>...</code>的展开</p>\n</li>\n<li><p>以此类推，三个参数的重载也是能实现的</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> OneArgument(a) <span class=\"comment\">// ...action with one argument</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> TwoArguments(a, b) <span class=\"comment\">// ...action with two arguments</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ThreeArguments(a, b, c) <span class=\"comment\">// ...action with three arguments</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GetMacro(_1, _2, _3, NAME, ...) NAME</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Macro(...) GetMacro(__VA_ARGS__, ThreeArguments, TwoArguments, OneArgument, ...)(__VA_ARGS__)</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// usage:</span></span><br><span class=\"line\"><span class=\"built_in\">Macro</span>(a); <span class=\"comment\">// OneArument(a) is called</span></span><br><span class=\"line\"><span class=\"built_in\">Macro</span>(a, b);  <span class=\"comment\">// TwoArguments(a, b) is called</span></span><br><span class=\"line\"><span class=\"built_in\">Macro</span>(a, b, c);  <span class=\"comment\">// ThreeArguments(a, b, c) is called</span></span><br></pre></td></tr></table></figure>\n"},{"title":"GAN总结","typora-root-url":"../../source","date":"2019-01-27T10:32:57.000Z","_content":"\n# GAN原理\n\n- GAN的终极目的，其实是用$P_G(x)$拟合真实的$P_{data}(x)$，最直接的想法是用MLE来做，MLE实际上和最小化KL距离是等同的，证明见下张图\n\n![](/images/mle_equals_kl.jpg)\n\n- 机器之心的[这篇](https://www.jiqizhixin.com/articles/2017-10-1-1)，基本就是照着李宏毅对课件写的，可以主要看一下为什么说判别器可以衡量两个分布指尖的JS散度\n\n- GAN的过程\n\n![](/images/origin_gan.jpg)\n\n- Goodfellow说上面这种形式的判别器不好收敛，就搞成了下面这种，据李宏毅说，这个修改没啥乱用，只是Goodfellow偷懒而已\n\n![](/images/origin_gan2.jpg)\n\n# conditional GAN\n\n- 除了图片是否真实外，判别器还要区分生成的图片类别对不对\n\n![](/images/cgan.jpg)\n\n- 这种结构的判别器会好一点\n\n![](/images/cgan_d.jpg)\n\n- stack_GAN，GAN直接生成大图的话会比较模糊，所以用两阶段的方法\n\n![](/images/stack_gan.jpg)\n\n- 语音增强和image2image也都可以看作是cGAN\n\n![](/images/speach.jpg)\n![](/images/img2img.jpg)\n\n# unsupervised conditional GAN\n\n- 问题：没有监督之后，generator可能会生成很真实，但不满足条件的图片\n- 办法1，直接忽略这个问题，因为如果generator不是太深的话，生成图片和输入图片还是相关的\n- 还有一些加入consistency\n\n![](/images/direct_trans.jpg)\n![](/images/direct_trans2.jpg)\n![](/images/cycle_gan.jpg)\n![](/images/star_gan.jpg)","source":"_posts/GAN总结.md","raw":"---\ntitle: GAN总结\ntypora-root-url: ../../source\ntags: GAN\ncategories: GAN\ndate: 2019-01-27 18:32:57\n---\n\n# GAN原理\n\n- GAN的终极目的，其实是用$P_G(x)$拟合真实的$P_{data}(x)$，最直接的想法是用MLE来做，MLE实际上和最小化KL距离是等同的，证明见下张图\n\n![](/images/mle_equals_kl.jpg)\n\n- 机器之心的[这篇](https://www.jiqizhixin.com/articles/2017-10-1-1)，基本就是照着李宏毅对课件写的，可以主要看一下为什么说判别器可以衡量两个分布指尖的JS散度\n\n- GAN的过程\n\n![](/images/origin_gan.jpg)\n\n- Goodfellow说上面这种形式的判别器不好收敛，就搞成了下面这种，据李宏毅说，这个修改没啥乱用，只是Goodfellow偷懒而已\n\n![](/images/origin_gan2.jpg)\n\n# conditional GAN\n\n- 除了图片是否真实外，判别器还要区分生成的图片类别对不对\n\n![](/images/cgan.jpg)\n\n- 这种结构的判别器会好一点\n\n![](/images/cgan_d.jpg)\n\n- stack_GAN，GAN直接生成大图的话会比较模糊，所以用两阶段的方法\n\n![](/images/stack_gan.jpg)\n\n- 语音增强和image2image也都可以看作是cGAN\n\n![](/images/speach.jpg)\n![](/images/img2img.jpg)\n\n# unsupervised conditional GAN\n\n- 问题：没有监督之后，generator可能会生成很真实，但不满足条件的图片\n- 办法1，直接忽略这个问题，因为如果generator不是太深的话，生成图片和输入图片还是相关的\n- 还有一些加入consistency\n\n![](/images/direct_trans.jpg)\n![](/images/direct_trans2.jpg)\n![](/images/cycle_gan.jpg)\n![](/images/star_gan.jpg)","slug":"GAN总结","published":1,"updated":"2023-11-05T11:42:33.903Z","comments":1,"layout":"post","photos":[],"_id":"clolf0lhx000fs2kza146bgd7","content":"<h1 id=\"GAN原理\"><a href=\"#GAN原理\" class=\"headerlink\" title=\"GAN原理\"></a>GAN原理</h1><ul>\n<li>GAN的终极目的，其实是用$P_G(x)$拟合真实的$P_{data}(x)$，最直接的想法是用MLE来做，MLE实际上和最小化KL距离是等同的，证明见下张图</li>\n</ul>\n<p><img src=\"/images/mle_equals_kl.jpg\"></p>\n<ul>\n<li><p>机器之心的<a href=\"https://www.jiqizhixin.com/articles/2017-10-1-1\">这篇</a>，基本就是照着李宏毅对课件写的，可以主要看一下为什么说判别器可以衡量两个分布指尖的JS散度</p>\n</li>\n<li><p>GAN的过程</p>\n</li>\n</ul>\n<p><img src=\"/images/origin_gan.jpg\"></p>\n<ul>\n<li>Goodfellow说上面这种形式的判别器不好收敛，就搞成了下面这种，据李宏毅说，这个修改没啥乱用，只是Goodfellow偷懒而已</li>\n</ul>\n<p><img src=\"/images/origin_gan2.jpg\"></p>\n<h1 id=\"conditional-GAN\"><a href=\"#conditional-GAN\" class=\"headerlink\" title=\"conditional GAN\"></a>conditional GAN</h1><ul>\n<li>除了图片是否真实外，判别器还要区分生成的图片类别对不对</li>\n</ul>\n<p><img src=\"/images/cgan.jpg\"></p>\n<ul>\n<li>这种结构的判别器会好一点</li>\n</ul>\n<p><img src=\"/images/cgan_d.jpg\"></p>\n<ul>\n<li>stack_GAN，GAN直接生成大图的话会比较模糊，所以用两阶段的方法</li>\n</ul>\n<p><img src=\"/images/stack_gan.jpg\"></p>\n<ul>\n<li>语音增强和image2image也都可以看作是cGAN</li>\n</ul>\n<p><img src=\"/images/speach.jpg\"><br><img src=\"/images/img2img.jpg\"></p>\n<h1 id=\"unsupervised-conditional-GAN\"><a href=\"#unsupervised-conditional-GAN\" class=\"headerlink\" title=\"unsupervised conditional GAN\"></a>unsupervised conditional GAN</h1><ul>\n<li>问题：没有监督之后，generator可能会生成很真实，但不满足条件的图片</li>\n<li>办法1，直接忽略这个问题，因为如果generator不是太深的话，生成图片和输入图片还是相关的</li>\n<li>还有一些加入consistency</li>\n</ul>\n<p><img src=\"/images/direct_trans.jpg\"><br><img src=\"/images/direct_trans2.jpg\"><br><img src=\"/images/cycle_gan.jpg\"><br><img src=\"/images/star_gan.jpg\"></p>\n","excerpt":"","more":"<h1 id=\"GAN原理\"><a href=\"#GAN原理\" class=\"headerlink\" title=\"GAN原理\"></a>GAN原理</h1><ul>\n<li>GAN的终极目的，其实是用$P_G(x)$拟合真实的$P_{data}(x)$，最直接的想法是用MLE来做，MLE实际上和最小化KL距离是等同的，证明见下张图</li>\n</ul>\n<p><img src=\"/images/mle_equals_kl.jpg\"></p>\n<ul>\n<li><p>机器之心的<a href=\"https://www.jiqizhixin.com/articles/2017-10-1-1\">这篇</a>，基本就是照着李宏毅对课件写的，可以主要看一下为什么说判别器可以衡量两个分布指尖的JS散度</p>\n</li>\n<li><p>GAN的过程</p>\n</li>\n</ul>\n<p><img src=\"/images/origin_gan.jpg\"></p>\n<ul>\n<li>Goodfellow说上面这种形式的判别器不好收敛，就搞成了下面这种，据李宏毅说，这个修改没啥乱用，只是Goodfellow偷懒而已</li>\n</ul>\n<p><img src=\"/images/origin_gan2.jpg\"></p>\n<h1 id=\"conditional-GAN\"><a href=\"#conditional-GAN\" class=\"headerlink\" title=\"conditional GAN\"></a>conditional GAN</h1><ul>\n<li>除了图片是否真实外，判别器还要区分生成的图片类别对不对</li>\n</ul>\n<p><img src=\"/images/cgan.jpg\"></p>\n<ul>\n<li>这种结构的判别器会好一点</li>\n</ul>\n<p><img src=\"/images/cgan_d.jpg\"></p>\n<ul>\n<li>stack_GAN，GAN直接生成大图的话会比较模糊，所以用两阶段的方法</li>\n</ul>\n<p><img src=\"/images/stack_gan.jpg\"></p>\n<ul>\n<li>语音增强和image2image也都可以看作是cGAN</li>\n</ul>\n<p><img src=\"/images/speach.jpg\"><br><img src=\"/images/img2img.jpg\"></p>\n<h1 id=\"unsupervised-conditional-GAN\"><a href=\"#unsupervised-conditional-GAN\" class=\"headerlink\" title=\"unsupervised conditional GAN\"></a>unsupervised conditional GAN</h1><ul>\n<li>问题：没有监督之后，generator可能会生成很真实，但不满足条件的图片</li>\n<li>办法1，直接忽略这个问题，因为如果generator不是太深的话，生成图片和输入图片还是相关的</li>\n<li>还有一些加入consistency</li>\n</ul>\n<p><img src=\"/images/direct_trans.jpg\"><br><img src=\"/images/direct_trans2.jpg\"><br><img src=\"/images/cycle_gan.jpg\"><br><img src=\"/images/star_gan.jpg\"></p>\n"},{"title":"Flask-migrate No support for ALTER of constraints in SQLite dialect","typora-root-url":"../../source","date":"2018-01-08T08:39:16.000Z","_content":"\n# 问题\n由于sqlite不支持`DROP COLUMN`、`ALTER COLUMN`、`ADD CONSTRAINT`等操作，如果flask使用了sqlite做数据库，flask-migrate不能自动迁移\n\n# 解决\n两种途径，\b都来自[这里](https://github.com/miguelgrinberg/Flask-Migrate/issues/61)\n## 方法1\n换MySql或者Postgres，\b\b也是flask-migrate作者的建议。\n## 方法2\n在创建db的地方\n```python\nfrom sqlalchemy import MetaData\n\nnaming_convention = {\n    \"ix\": 'ix_%(column_0_label)s',\n    \"uq\": \"uq_%(table_name)s_%(column_0_name)s\",\n    \"ck\": \"ck_%(table_name)s_%(column_0_name)s\",\n    \"fk\": \"fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s\",\n    \"pk\": \"pk_%(table_name)s\"\n}\ndb = SQLAlchemy(metadata=MetaData(naming_convention=naming_convention))\n```\nenabled batch mode for auto-generated migrations by adding a `render_as_batch=config.get_main_option('sqlalchemy.url').startswith('sqlite:')` argument to `context.configure()` in `run_migrations_online()` in `migrations/env.py`.\n```python\ndef run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    engine = engine_from_config(\n                config.get_section(config.config_ini_section),\n                prefix='sqlalchemy.',\n                poolclass=pool.NullPool)\n\n    connection = engine.connect()\n    context.configure(\n                connection=connection,\n                target_metadata=target_metadata,\n                render_as_batch=config.get_main_option('sqlalchemy.url').startswith('sqlite:///')\n                )\n\n    try:\n        with context.begin_transaction():\n            context.run_migrations()\n    finally:\n        connection.close()\n```\n方法2试用到现在修改column和foreign-key没遇到什么问题，但是作者不推荐，用得很心虚（sadly）\n","source":"_posts/Flask-migrate-No-support-for-ALTER-of-constraints-in-SQLite-dialect.md","raw":"---\ntitle: Flask-migrate No support for ALTER of constraints in SQLite dialect\ntypora-root-url: ../../source\ndate: 2018-01-08 16:39:16\ntags: flask\ncategories: flask网站总结\n---\n\n# 问题\n由于sqlite不支持`DROP COLUMN`、`ALTER COLUMN`、`ADD CONSTRAINT`等操作，如果flask使用了sqlite做数据库，flask-migrate不能自动迁移\n\n# 解决\n两种途径，\b都来自[这里](https://github.com/miguelgrinberg/Flask-Migrate/issues/61)\n## 方法1\n换MySql或者Postgres，\b\b也是flask-migrate作者的建议。\n## 方法2\n在创建db的地方\n```python\nfrom sqlalchemy import MetaData\n\nnaming_convention = {\n    \"ix\": 'ix_%(column_0_label)s',\n    \"uq\": \"uq_%(table_name)s_%(column_0_name)s\",\n    \"ck\": \"ck_%(table_name)s_%(column_0_name)s\",\n    \"fk\": \"fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s\",\n    \"pk\": \"pk_%(table_name)s\"\n}\ndb = SQLAlchemy(metadata=MetaData(naming_convention=naming_convention))\n```\nenabled batch mode for auto-generated migrations by adding a `render_as_batch=config.get_main_option('sqlalchemy.url').startswith('sqlite:')` argument to `context.configure()` in `run_migrations_online()` in `migrations/env.py`.\n```python\ndef run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    engine = engine_from_config(\n                config.get_section(config.config_ini_section),\n                prefix='sqlalchemy.',\n                poolclass=pool.NullPool)\n\n    connection = engine.connect()\n    context.configure(\n                connection=connection,\n                target_metadata=target_metadata,\n                render_as_batch=config.get_main_option('sqlalchemy.url').startswith('sqlite:///')\n                )\n\n    try:\n        with context.begin_transaction():\n            context.run_migrations()\n    finally:\n        connection.close()\n```\n方法2试用到现在修改column和foreign-key没遇到什么问题，但是作者不推荐，用得很心虚（sadly）\n","slug":"Flask-migrate-No-support-for-ALTER-of-constraints-in-SQLite-dialect","published":1,"updated":"2023-11-05T11:42:33.903Z","comments":1,"layout":"post","photos":[],"_id":"clolf0lhy000js2kzb8enbmpq","content":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>由于sqlite不支持<code>DROP COLUMN</code>、<code>ALTER COLUMN</code>、<code>ADD CONSTRAINT</code>等操作，如果flask使用了sqlite做数据库，flask-migrate不能自动迁移</p>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><p>两种途径，\b都来自<a href=\"https://github.com/miguelgrinberg/Flask-Migrate/issues/61\">这里</a></p>\n<h2 id=\"方法1\"><a href=\"#方法1\" class=\"headerlink\" title=\"方法1\"></a>方法1</h2><p>换MySql或者Postgres，\b\b也是flask-migrate作者的建议。</p>\n<h2 id=\"方法2\"><a href=\"#方法2\" class=\"headerlink\" title=\"方法2\"></a>方法2</h2><p>在创建db的地方</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> MetaData</span><br><span class=\"line\"></span><br><span class=\"line\">naming_convention = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;ix&quot;</span>: <span class=\"string\">&#x27;ix_%(column_0_label)s&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;uq&quot;</span>: <span class=\"string\">&quot;uq_%(table_name)s_%(column_0_name)s&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;ck&quot;</span>: <span class=\"string\">&quot;ck_%(table_name)s_%(column_0_name)s&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;fk&quot;</span>: <span class=\"string\">&quot;fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;pk&quot;</span>: <span class=\"string\">&quot;pk_%(table_name)s&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db = SQLAlchemy(metadata=MetaData(naming_convention=naming_convention))</span><br></pre></td></tr></table></figure>\n<p>enabled batch mode for auto-generated migrations by adding a <code>render_as_batch=config.get_main_option(&#39;sqlalchemy.url&#39;).startswith(&#39;sqlite:&#39;)</code> argument to <code>context.configure()</code> in <code>run_migrations_online()</code> in <code>migrations/env.py</code>.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">run_migrations_online</span>():</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Run migrations in &#x27;online&#x27; mode.</span></span><br><span class=\"line\"><span class=\"string\">    In this scenario we need to create an Engine</span></span><br><span class=\"line\"><span class=\"string\">    and associate a connection with the context.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    engine = engine_from_config(</span><br><span class=\"line\">                config.get_section(config.config_ini_section),</span><br><span class=\"line\">                prefix=<span class=\"string\">&#x27;sqlalchemy.&#x27;</span>,</span><br><span class=\"line\">                poolclass=pool.NullPool)</span><br><span class=\"line\"></span><br><span class=\"line\">    connection = engine.connect()</span><br><span class=\"line\">    context.configure(</span><br><span class=\"line\">                connection=connection,</span><br><span class=\"line\">                target_metadata=target_metadata,</span><br><span class=\"line\">                render_as_batch=config.get_main_option(<span class=\"string\">&#x27;sqlalchemy.url&#x27;</span>).startswith(<span class=\"string\">&#x27;sqlite:///&#x27;</span>)</span><br><span class=\"line\">                )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">with</span> context.begin_transaction():</span><br><span class=\"line\">            context.run_migrations()</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        connection.close()</span><br></pre></td></tr></table></figure>\n<p>方法2试用到现在修改column和foreign-key没遇到什么问题，但是作者不推荐，用得很心虚（sadly）</p>\n","excerpt":"","more":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>由于sqlite不支持<code>DROP COLUMN</code>、<code>ALTER COLUMN</code>、<code>ADD CONSTRAINT</code>等操作，如果flask使用了sqlite做数据库，flask-migrate不能自动迁移</p>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><p>两种途径，\b都来自<a href=\"https://github.com/miguelgrinberg/Flask-Migrate/issues/61\">这里</a></p>\n<h2 id=\"方法1\"><a href=\"#方法1\" class=\"headerlink\" title=\"方法1\"></a>方法1</h2><p>换MySql或者Postgres，\b\b也是flask-migrate作者的建议。</p>\n<h2 id=\"方法2\"><a href=\"#方法2\" class=\"headerlink\" title=\"方法2\"></a>方法2</h2><p>在创建db的地方</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> MetaData</span><br><span class=\"line\"></span><br><span class=\"line\">naming_convention = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;ix&quot;</span>: <span class=\"string\">&#x27;ix_%(column_0_label)s&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;uq&quot;</span>: <span class=\"string\">&quot;uq_%(table_name)s_%(column_0_name)s&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;ck&quot;</span>: <span class=\"string\">&quot;ck_%(table_name)s_%(column_0_name)s&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;fk&quot;</span>: <span class=\"string\">&quot;fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;pk&quot;</span>: <span class=\"string\">&quot;pk_%(table_name)s&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db = SQLAlchemy(metadata=MetaData(naming_convention=naming_convention))</span><br></pre></td></tr></table></figure>\n<p>enabled batch mode for auto-generated migrations by adding a <code>render_as_batch=config.get_main_option(&#39;sqlalchemy.url&#39;).startswith(&#39;sqlite:&#39;)</code> argument to <code>context.configure()</code> in <code>run_migrations_online()</code> in <code>migrations/env.py</code>.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">run_migrations_online</span>():</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Run migrations in &#x27;online&#x27; mode.</span></span><br><span class=\"line\"><span class=\"string\">    In this scenario we need to create an Engine</span></span><br><span class=\"line\"><span class=\"string\">    and associate a connection with the context.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    engine = engine_from_config(</span><br><span class=\"line\">                config.get_section(config.config_ini_section),</span><br><span class=\"line\">                prefix=<span class=\"string\">&#x27;sqlalchemy.&#x27;</span>,</span><br><span class=\"line\">                poolclass=pool.NullPool)</span><br><span class=\"line\"></span><br><span class=\"line\">    connection = engine.connect()</span><br><span class=\"line\">    context.configure(</span><br><span class=\"line\">                connection=connection,</span><br><span class=\"line\">                target_metadata=target_metadata,</span><br><span class=\"line\">                render_as_batch=config.get_main_option(<span class=\"string\">&#x27;sqlalchemy.url&#x27;</span>).startswith(<span class=\"string\">&#x27;sqlite:///&#x27;</span>)</span><br><span class=\"line\">                )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">with</span> context.begin_transaction():</span><br><span class=\"line\">            context.run_migrations()</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        connection.close()</span><br></pre></td></tr></table></figure>\n<p>方法2试用到现在修改column和foreign-key没遇到什么问题，但是作者不推荐，用得很心虚（sadly）</p>\n"},{"title":"JS复习笔记","typora-root-url":"../../source","date":"2018-01-01T10:25:23.000Z","_content":"\n1. 有两种比较运算符：\n==，自动转换数据类型再比较，会得到非常诡异的结果\n===，如果数据类型不一致，返回false，如果一致，再比较\n2. `NaN === NaN; // false`\n唯一能判断NaN的方法是通过isNaN()函数\n`isNaN(NaN); // true`\n3. 浮点数比较要这样\n`Math.abs(1 / 3 - (1 - 2 / 3)) < 0.0000001; // true`\n4. 并如果一个变量没有通过var申明就被使用，就自动被申明为全局变量\nECMA在后续规范中推出了strict模式，需要在第一行加入\n`'use strict';`\n5. 最新的ES6标准新增了一种多行字符串的表示方法，用反引号 \\` ... \\` 表示：\n还有模版字符串\n```\nvar name = '小明';\nvar age = 20;\nvar message = `你好, ${name}, 你今年${age}岁了!`;\nalert(message);\n```\n6. `for ... of`ES6引入\n`for ... in`循环由于历史遗留问题，它遍历的实际上是对象的属性名称。\n更推荐用`forEach`\n```\narray1.forEach(function (element, index, array) {\n    // element: 指向当前元素的值\n    // index: 指向当前索引\n    // array: 指向Array对象本身\n    console.log(element + ', index = ' + index);\n});\n\nset1.forEach(function (element, sameElement, set) {\nmap1.forEach(function (value, key, map) {\n```\n\n7. `augments`和`rest`（ES6引入）\n```\nfunction foo(a, b) {\n    var i, rest = [];\n    if (arguments.length > 2) {\n        for (i = 2; i<arguments.length; i++) {\n            rest.push(arguments[i]);\n        }\n    }\n    console.log('a = ' + a);\n    console.log('b = ' + b);\n    console.log(rest);\n}\n\nfunction foo(a, b, ...rest) {\n    console.log('a = ' + a);\n    console.log('b = ' + b);\n    console.log(rest);\n}\n\nfoo(1, 2, 3, 4, 5);\n// 结果:\n// a = 1\n// b = 2\n// Array [ 3, 4, 5 ]\n\nfoo(1);\n// 结果:\n// a = 1\n// b = undefined\n// Array []\n```\n8. 变量提升\nJavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部\n```\nfunction foo() {\n    var\n        x = 1, // x初始化为1\n        y = x + 1, // y初始化为2\n        z, i; // z和i为undefined\n    // 其他语句:\n    for (i=0; i<100; i++) {\n        ...\n    }\n}\n```\n1. 默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性\n2.  为了解决块级作用域，ES6引入了新的关键字let，用let替代var可以申明一个块级作用域的变量：\n```\n'use strict';\n\nfunction foo() {\n    var sum = 0;\n    for (let i=0; i<100; i++) {\n        sum += i;\n    }\n    // SyntaxError:\n    i += 1;\n}\n```\n11. ES6标准引入了新的关键字const来定义常量，const与let都具有块级作用域\n12. 要保证`this`指向正确，必须用`obj.xxx()`的形式调用！\n```\n'use strict';\n\nvar xiaoming = {\n    name: '小明',\n    birth: 1990,\n    age: function () {\n        var that = this; // 在方法内部一开始就捕获this\n        function getAgeFromBirth() {\n            var y = new Date().getFullYear();\n            return y - that.birth; // 用that而不是this\n        }\n        return getAgeFromBirth();\n    }\n};\n\nxiaoming.age(); // 25\nvar tmp = xiaoming.age;\ntmp(); //NaN\n```\n13. 用 `apply`或`call`传`this`\ncall和apply作用是一样的，都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部this的指向\n从[这里](https://www.jianshu.com/p/aa2eeecd8b4f)抄的\n```\nMath.max.apply(null, [3, 5, 4]); // 5\nMath.max.call(null, 3, 5, 4); // 5\n```\n1.  名字空间\n```\n// 唯一的全局变量MYAPP:\nvar MYAPP = {};\n\n// 其他变量:\nMYAPP.name = 'myapp';\nMYAPP.version = 1.0;\n\n// 其他函数:\nMYAPP.foo = function () {\n    return 'foo';\n};\n```\n15. 服务器在设置Cookie时可以使用`httpOnly`，设定了`httpOnly`的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持`httpOnly`选项，IE从IE6 SP1开始支持。\n16. 原生js获取children\n```\n// 获取节点test下的所有直属子节点:\nvar cs = test.children;\n\n// 获取节点test下第一个、最后一个子节点：\nvar first = test.firstElementChild;\nvar last = test.lastElementChild;\n```\n17. CSS允许`font-size`这样的名称，但它并非JavaScript有效的属性名，所以需要在JavaScript中改写为驼峰式命名`fontSize`\n```\n// 获取<p id=\"p-id\">...</p>\nvar p = document.getElementById('p-id');\n// 设置CSS:\np.style.color = '#ff0000';\np.style.fontSize = '20px';\np.style.paddingTop = '2em';\n```\n18. 一种是修改`innerHTML`属性，这个方式非常强大，不但可以修改一个DOM节点的文本内容，还可以直接通过HTML片段修改DOM节点内部的子树。\n修改`innerText`或`textContent`属性，这样可以自动对字符串进行HTML编码，保证无法设置任何HTML标签。两者的区别在于读取属性时，innerText不返回隐藏元素的文本，而textContent返回所有文本。\ninnerHtml\n19. 没有name属性的`<input>`的数据不会被提交。\n```\n<!-- HTML -->\n<form id=\"login-form\" method=\"post\" onsubmit=\"return checkForm()\">\n    <input type=\"text\" id=\"username\" name=\"username\">\n    <input type=\"password\" id=\"input-password\">\n    <input type=\"hidden\" id=\"md5-password\" name=\"password\">\n    <button type=\"submit\">Submit</button>\n</form>\n\n<script>\nfunction checkForm() {\n    var input_pwd = document.getElementById('input-password');\n    var md5_pwd = document.getElementById('md5-password');\n    // 把用户输入的明文变为MD5:\n    md5_pwd.value = toMD5(input_pwd.value);\n    // 继续下一步:\n    return true;\n}\n</script>\n```\n20. 这是因为浏览器的同源策略导致的。默认情况下，JavaScript在发送AJAX请求时，URL的域名必须和当前页面完全一致。\n完全一致的意思是，域名要相同（www.example.com和example.com不同），协议要相同（http和https不同），端口号要相同（默认是:80端口，它和:8080就不同）。有的浏览器口子松一点，允许端口不同，大多数浏览器都会严格遵守这个限制。\n21. 解决跨域请求的几种方法：Flash、同源服务器转发、JSONP、CORS\n下面谈的都是CORS。跨域能否成功，取决于对方服务器是否愿意给你设置一个正确的Access-Control-Allow-Origin，决定权始终在对方手中\n上面这种跨域请求，称之为“简单请求”。简单请求包括GET、HEAD和POST（POST的Content-Type类型\n仅限application/x-www-form-urlencoded、multipart/form-data和text/plain），并且不能出现任何自定义头（例如，X-Custom: 12345），通常能满足90%的需求。\n对于PUT、DELETE以及其他类型如application/json的POST请求，在发送AJAX请求之前，浏览器会先发送一个OPTIONS请求（称为preflighted请求）到这个URL上，询问目标服务器是否接受。\n22. \n```\ngetElementById\ngetElementsByTagName\ngetElementsByClassName\n\ninnerHTML //可以插入DOM\ninnerText //会HTML编码\n```\n\n","source":"_posts/JS复习笔记.md","raw":"---\ntitle: JS复习笔记\ntypora-root-url: ../../source\ndate: 2018-01-01 18:25:23\ntags:\n  - javaScript\n  - 复习笔记\ncategories: flask网站总结\n---\n\n1. 有两种比较运算符：\n==，自动转换数据类型再比较，会得到非常诡异的结果\n===，如果数据类型不一致，返回false，如果一致，再比较\n2. `NaN === NaN; // false`\n唯一能判断NaN的方法是通过isNaN()函数\n`isNaN(NaN); // true`\n3. 浮点数比较要这样\n`Math.abs(1 / 3 - (1 - 2 / 3)) < 0.0000001; // true`\n4. 并如果一个变量没有通过var申明就被使用，就自动被申明为全局变量\nECMA在后续规范中推出了strict模式，需要在第一行加入\n`'use strict';`\n5. 最新的ES6标准新增了一种多行字符串的表示方法，用反引号 \\` ... \\` 表示：\n还有模版字符串\n```\nvar name = '小明';\nvar age = 20;\nvar message = `你好, ${name}, 你今年${age}岁了!`;\nalert(message);\n```\n6. `for ... of`ES6引入\n`for ... in`循环由于历史遗留问题，它遍历的实际上是对象的属性名称。\n更推荐用`forEach`\n```\narray1.forEach(function (element, index, array) {\n    // element: 指向当前元素的值\n    // index: 指向当前索引\n    // array: 指向Array对象本身\n    console.log(element + ', index = ' + index);\n});\n\nset1.forEach(function (element, sameElement, set) {\nmap1.forEach(function (value, key, map) {\n```\n\n7. `augments`和`rest`（ES6引入）\n```\nfunction foo(a, b) {\n    var i, rest = [];\n    if (arguments.length > 2) {\n        for (i = 2; i<arguments.length; i++) {\n            rest.push(arguments[i]);\n        }\n    }\n    console.log('a = ' + a);\n    console.log('b = ' + b);\n    console.log(rest);\n}\n\nfunction foo(a, b, ...rest) {\n    console.log('a = ' + a);\n    console.log('b = ' + b);\n    console.log(rest);\n}\n\nfoo(1, 2, 3, 4, 5);\n// 结果:\n// a = 1\n// b = 2\n// Array [ 3, 4, 5 ]\n\nfoo(1);\n// 结果:\n// a = 1\n// b = undefined\n// Array []\n```\n8. 变量提升\nJavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部\n```\nfunction foo() {\n    var\n        x = 1, // x初始化为1\n        y = x + 1, // y初始化为2\n        z, i; // z和i为undefined\n    // 其他语句:\n    for (i=0; i<100; i++) {\n        ...\n    }\n}\n```\n1. 默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性\n2.  为了解决块级作用域，ES6引入了新的关键字let，用let替代var可以申明一个块级作用域的变量：\n```\n'use strict';\n\nfunction foo() {\n    var sum = 0;\n    for (let i=0; i<100; i++) {\n        sum += i;\n    }\n    // SyntaxError:\n    i += 1;\n}\n```\n11. ES6标准引入了新的关键字const来定义常量，const与let都具有块级作用域\n12. 要保证`this`指向正确，必须用`obj.xxx()`的形式调用！\n```\n'use strict';\n\nvar xiaoming = {\n    name: '小明',\n    birth: 1990,\n    age: function () {\n        var that = this; // 在方法内部一开始就捕获this\n        function getAgeFromBirth() {\n            var y = new Date().getFullYear();\n            return y - that.birth; // 用that而不是this\n        }\n        return getAgeFromBirth();\n    }\n};\n\nxiaoming.age(); // 25\nvar tmp = xiaoming.age;\ntmp(); //NaN\n```\n13. 用 `apply`或`call`传`this`\ncall和apply作用是一样的，都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部this的指向\n从[这里](https://www.jianshu.com/p/aa2eeecd8b4f)抄的\n```\nMath.max.apply(null, [3, 5, 4]); // 5\nMath.max.call(null, 3, 5, 4); // 5\n```\n1.  名字空间\n```\n// 唯一的全局变量MYAPP:\nvar MYAPP = {};\n\n// 其他变量:\nMYAPP.name = 'myapp';\nMYAPP.version = 1.0;\n\n// 其他函数:\nMYAPP.foo = function () {\n    return 'foo';\n};\n```\n15. 服务器在设置Cookie时可以使用`httpOnly`，设定了`httpOnly`的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持`httpOnly`选项，IE从IE6 SP1开始支持。\n16. 原生js获取children\n```\n// 获取节点test下的所有直属子节点:\nvar cs = test.children;\n\n// 获取节点test下第一个、最后一个子节点：\nvar first = test.firstElementChild;\nvar last = test.lastElementChild;\n```\n17. CSS允许`font-size`这样的名称，但它并非JavaScript有效的属性名，所以需要在JavaScript中改写为驼峰式命名`fontSize`\n```\n// 获取<p id=\"p-id\">...</p>\nvar p = document.getElementById('p-id');\n// 设置CSS:\np.style.color = '#ff0000';\np.style.fontSize = '20px';\np.style.paddingTop = '2em';\n```\n18. 一种是修改`innerHTML`属性，这个方式非常强大，不但可以修改一个DOM节点的文本内容，还可以直接通过HTML片段修改DOM节点内部的子树。\n修改`innerText`或`textContent`属性，这样可以自动对字符串进行HTML编码，保证无法设置任何HTML标签。两者的区别在于读取属性时，innerText不返回隐藏元素的文本，而textContent返回所有文本。\ninnerHtml\n19. 没有name属性的`<input>`的数据不会被提交。\n```\n<!-- HTML -->\n<form id=\"login-form\" method=\"post\" onsubmit=\"return checkForm()\">\n    <input type=\"text\" id=\"username\" name=\"username\">\n    <input type=\"password\" id=\"input-password\">\n    <input type=\"hidden\" id=\"md5-password\" name=\"password\">\n    <button type=\"submit\">Submit</button>\n</form>\n\n<script>\nfunction checkForm() {\n    var input_pwd = document.getElementById('input-password');\n    var md5_pwd = document.getElementById('md5-password');\n    // 把用户输入的明文变为MD5:\n    md5_pwd.value = toMD5(input_pwd.value);\n    // 继续下一步:\n    return true;\n}\n</script>\n```\n20. 这是因为浏览器的同源策略导致的。默认情况下，JavaScript在发送AJAX请求时，URL的域名必须和当前页面完全一致。\n完全一致的意思是，域名要相同（www.example.com和example.com不同），协议要相同（http和https不同），端口号要相同（默认是:80端口，它和:8080就不同）。有的浏览器口子松一点，允许端口不同，大多数浏览器都会严格遵守这个限制。\n21. 解决跨域请求的几种方法：Flash、同源服务器转发、JSONP、CORS\n下面谈的都是CORS。跨域能否成功，取决于对方服务器是否愿意给你设置一个正确的Access-Control-Allow-Origin，决定权始终在对方手中\n上面这种跨域请求，称之为“简单请求”。简单请求包括GET、HEAD和POST（POST的Content-Type类型\n仅限application/x-www-form-urlencoded、multipart/form-data和text/plain），并且不能出现任何自定义头（例如，X-Custom: 12345），通常能满足90%的需求。\n对于PUT、DELETE以及其他类型如application/json的POST请求，在发送AJAX请求之前，浏览器会先发送一个OPTIONS请求（称为preflighted请求）到这个URL上，询问目标服务器是否接受。\n22. \n```\ngetElementById\ngetElementsByTagName\ngetElementsByClassName\n\ninnerHTML //可以插入DOM\ninnerText //会HTML编码\n```\n\n","slug":"JS复习笔记","published":1,"updated":"2023-11-05T11:42:33.903Z","comments":1,"layout":"post","photos":[],"_id":"clolf0lhy000ks2kz5zqp4zpd","content":"<ol>\n<li><p>有两种比较运算符：<br>&#x3D;&#x3D;，自动转换数据类型再比较，会得到非常诡异的结果<br>&#x3D;&#x3D;&#x3D;，如果数据类型不一致，返回false，如果一致，再比较</p>\n</li>\n<li><p><code>NaN === NaN; // false</code><br>唯一能判断NaN的方法是通过isNaN()函数<br><code>isNaN(NaN); // true</code></p>\n</li>\n<li><p>浮点数比较要这样<br><code>Math.abs(1 / 3 - (1 - 2 / 3)) &lt; 0.0000001; // true</code></p>\n</li>\n<li><p>并如果一个变量没有通过var申明就被使用，就自动被申明为全局变量<br>ECMA在后续规范中推出了strict模式，需要在第一行加入<br><code>&#39;use strict&#39;;</code></p>\n</li>\n<li><p>最新的ES6标准新增了一种多行字符串的表示方法，用反引号 ` … ` 表示：<br>还有模版字符串</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var name = &#x27;小明&#x27;;</span><br><span class=\"line\">var age = 20;</span><br><span class=\"line\">var message = `你好, $&#123;name&#125;, 你今年$&#123;age&#125;岁了!`;</span><br><span class=\"line\">alert(message);</span><br></pre></td></tr></table></figure></li>\n<li><p><code>for ... of</code>ES6引入<br><code>for ... in</code>循环由于历史遗留问题，它遍历的实际上是对象的属性名称。<br>更推荐用<code>forEach</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array1.forEach(function (element, index, array) &#123;</span><br><span class=\"line\">    // element: 指向当前元素的值</span><br><span class=\"line\">    // index: 指向当前索引</span><br><span class=\"line\">    // array: 指向Array对象本身</span><br><span class=\"line\">    console.log(element + &#x27;, index = &#x27; + index);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">set1.forEach(function (element, sameElement, set) &#123;</span><br><span class=\"line\">map1.forEach(function (value, key, map) &#123;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>augments</code>和<code>rest</code>（ES6引入）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(a, b) &#123;</span><br><span class=\"line\">    var i, rest = [];</span><br><span class=\"line\">    if (arguments.length &gt; 2) &#123;</span><br><span class=\"line\">        for (i = 2; i&lt;arguments.length; i++) &#123;</span><br><span class=\"line\">            rest.push(arguments[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&#x27;a = &#x27; + a);</span><br><span class=\"line\">    console.log(&#x27;b = &#x27; + b);</span><br><span class=\"line\">    console.log(rest);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function foo(a, b, ...rest) &#123;</span><br><span class=\"line\">    console.log(&#x27;a = &#x27; + a);</span><br><span class=\"line\">    console.log(&#x27;b = &#x27; + b);</span><br><span class=\"line\">    console.log(rest);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo(1, 2, 3, 4, 5);</span><br><span class=\"line\">// 结果:</span><br><span class=\"line\">// a = 1</span><br><span class=\"line\">// b = 2</span><br><span class=\"line\">// Array [ 3, 4, 5 ]</span><br><span class=\"line\"></span><br><span class=\"line\">foo(1);</span><br><span class=\"line\">// 结果:</span><br><span class=\"line\">// a = 1</span><br><span class=\"line\">// b = undefined</span><br><span class=\"line\">// Array []</span><br></pre></td></tr></table></figure></li>\n<li><p>变量提升<br>JavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">    var</span><br><span class=\"line\">        x = 1, // x初始化为1</span><br><span class=\"line\">        y = x + 1, // y初始化为2</span><br><span class=\"line\">        z, i; // z和i为undefined</span><br><span class=\"line\">    // 其他语句:</span><br><span class=\"line\">    for (i=0; i&lt;100; i++) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性</p>\n</li>\n<li><p>为了解决块级作用域，ES6引入了新的关键字let，用let替代var可以申明一个块级作用域的变量：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;use strict&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">    var sum = 0;</span><br><span class=\"line\">    for (let i=0; i&lt;100; i++) &#123;</span><br><span class=\"line\">        sum += i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // SyntaxError:</span><br><span class=\"line\">    i += 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>ES6标准引入了新的关键字const来定义常量，const与let都具有块级作用域</p>\n</li>\n<li><p>要保证<code>this</code>指向正确，必须用<code>obj.xxx()</code>的形式调用！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;use strict&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">var xiaoming = &#123;</span><br><span class=\"line\">    name: &#x27;小明&#x27;,</span><br><span class=\"line\">    birth: 1990,</span><br><span class=\"line\">    age: function () &#123;</span><br><span class=\"line\">        var that = this; // 在方法内部一开始就捕获this</span><br><span class=\"line\">        function getAgeFromBirth() &#123;</span><br><span class=\"line\">            var y = new Date().getFullYear();</span><br><span class=\"line\">            return y - that.birth; // 用that而不是this</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return getAgeFromBirth();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">xiaoming.age(); // 25</span><br><span class=\"line\">var tmp = xiaoming.age;</span><br><span class=\"line\">tmp(); //NaN</span><br></pre></td></tr></table></figure></li>\n<li><p>用 <code>apply</code>或<code>call</code>传<code>this</code><br>call和apply作用是一样的，都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部this的指向<br>从<a href=\"https://www.jianshu.com/p/aa2eeecd8b4f\">这里</a>抄的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Math.max.apply(null, [3, 5, 4]); // 5</span><br><span class=\"line\">Math.max.call(null, 3, 5, 4); // 5</span><br></pre></td></tr></table></figure></li>\n<li><p>名字空间</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 唯一的全局变量MYAPP:</span><br><span class=\"line\">var MYAPP = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 其他变量:</span><br><span class=\"line\">MYAPP.name = &#x27;myapp&#x27;;</span><br><span class=\"line\">MYAPP.version = 1.0;</span><br><span class=\"line\"></span><br><span class=\"line\">// 其他函数:</span><br><span class=\"line\">MYAPP.foo = function () &#123;</span><br><span class=\"line\">    return &#x27;foo&#x27;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li><p>服务器在设置Cookie时可以使用<code>httpOnly</code>，设定了<code>httpOnly</code>的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持<code>httpOnly</code>选项，IE从IE6 SP1开始支持。</p>\n</li>\n<li><p>原生js获取children</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取节点test下的所有直属子节点:</span><br><span class=\"line\">var cs = test.children;</span><br><span class=\"line\"></span><br><span class=\"line\">// 获取节点test下第一个、最后一个子节点：</span><br><span class=\"line\">var first = test.firstElementChild;</span><br><span class=\"line\">var last = test.lastElementChild;</span><br></pre></td></tr></table></figure></li>\n<li><p>CSS允许<code>font-size</code>这样的名称，但它并非JavaScript有效的属性名，所以需要在JavaScript中改写为驼峰式命名<code>fontSize</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取&lt;p id=&quot;p-id&quot;&gt;...&lt;/p&gt;</span><br><span class=\"line\">var p = document.getElementById(&#x27;p-id&#x27;);</span><br><span class=\"line\">// 设置CSS:</span><br><span class=\"line\">p.style.color = &#x27;#ff0000&#x27;;</span><br><span class=\"line\">p.style.fontSize = &#x27;20px&#x27;;</span><br><span class=\"line\">p.style.paddingTop = &#x27;2em&#x27;;</span><br></pre></td></tr></table></figure></li>\n<li><p>一种是修改<code>innerHTML</code>属性，这个方式非常强大，不但可以修改一个DOM节点的文本内容，还可以直接通过HTML片段修改DOM节点内部的子树。<br>修改<code>innerText</code>或<code>textContent</code>属性，这样可以自动对字符串进行HTML编码，保证无法设置任何HTML标签。两者的区别在于读取属性时，innerText不返回隐藏元素的文本，而textContent返回所有文本。<br>innerHtml</p>\n</li>\n<li><p>没有name属性的<code>&lt;input&gt;</code>的数据不会被提交。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- HTML --&gt;</span><br><span class=\"line\">&lt;form id=&quot;login-form&quot; method=&quot;post&quot; onsubmit=&quot;return checkForm()&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;password&quot; id=&quot;input-password&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;hidden&quot; id=&quot;md5-password&quot; name=&quot;password&quot;&gt;</span><br><span class=\"line\">    &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">function checkForm() &#123;</span><br><span class=\"line\">    var input_pwd = document.getElementById(&#x27;input-password&#x27;);</span><br><span class=\"line\">    var md5_pwd = document.getElementById(&#x27;md5-password&#x27;);</span><br><span class=\"line\">    // 把用户输入的明文变为MD5:</span><br><span class=\"line\">    md5_pwd.value = toMD5(input_pwd.value);</span><br><span class=\"line\">    // 继续下一步:</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>这是因为浏览器的同源策略导致的。默认情况下，JavaScript在发送AJAX请求时，URL的域名必须和当前页面完全一致。<br>完全一致的意思是，域名要相同（<a href=\"http://www.example.com和example.com不同），协议要相同（http和https不同），端口号要相同（默认是:80端口，它和:8080就不同）。有的浏览器口子松一点，允许端口不同，大多数浏览器都会严格遵守这个限制。\">www.example.com和example.com不同），协议要相同（http和https不同），端口号要相同（默认是:80端口，它和:8080就不同）。有的浏览器口子松一点，允许端口不同，大多数浏览器都会严格遵守这个限制。</a></p>\n</li>\n<li><p>解决跨域请求的几种方法：Flash、同源服务器转发、JSONP、CORS<br>下面谈的都是CORS。跨域能否成功，取决于对方服务器是否愿意给你设置一个正确的Access-Control-Allow-Origin，决定权始终在对方手中<br>上面这种跨域请求，称之为“简单请求”。简单请求包括GET、HEAD和POST（POST的Content-Type类型<br>仅限application&#x2F;x-www-form-urlencoded、multipart&#x2F;form-data和text&#x2F;plain），并且不能出现任何自定义头（例如，X-Custom: 12345），通常能满足90%的需求。<br>对于PUT、DELETE以及其他类型如application&#x2F;json的POST请求，在发送AJAX请求之前，浏览器会先发送一个OPTIONS请求（称为preflighted请求）到这个URL上，询问目标服务器是否接受。</p>\n</li>\n<li><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getElementById</span><br><span class=\"line\">getElementsByTagName</span><br><span class=\"line\">getElementsByClassName</span><br><span class=\"line\"></span><br><span class=\"line\">innerHTML //可以插入DOM</span><br><span class=\"line\">innerText //会HTML编码</span><br></pre></td></tr></table></figure></li>\n</ol>\n","excerpt":"","more":"<ol>\n<li><p>有两种比较运算符：<br>&#x3D;&#x3D;，自动转换数据类型再比较，会得到非常诡异的结果<br>&#x3D;&#x3D;&#x3D;，如果数据类型不一致，返回false，如果一致，再比较</p>\n</li>\n<li><p><code>NaN === NaN; // false</code><br>唯一能判断NaN的方法是通过isNaN()函数<br><code>isNaN(NaN); // true</code></p>\n</li>\n<li><p>浮点数比较要这样<br><code>Math.abs(1 / 3 - (1 - 2 / 3)) &lt; 0.0000001; // true</code></p>\n</li>\n<li><p>并如果一个变量没有通过var申明就被使用，就自动被申明为全局变量<br>ECMA在后续规范中推出了strict模式，需要在第一行加入<br><code>&#39;use strict&#39;;</code></p>\n</li>\n<li><p>最新的ES6标准新增了一种多行字符串的表示方法，用反引号 ` … ` 表示：<br>还有模版字符串</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var name = &#x27;小明&#x27;;</span><br><span class=\"line\">var age = 20;</span><br><span class=\"line\">var message = `你好, $&#123;name&#125;, 你今年$&#123;age&#125;岁了!`;</span><br><span class=\"line\">alert(message);</span><br></pre></td></tr></table></figure></li>\n<li><p><code>for ... of</code>ES6引入<br><code>for ... in</code>循环由于历史遗留问题，它遍历的实际上是对象的属性名称。<br>更推荐用<code>forEach</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array1.forEach(function (element, index, array) &#123;</span><br><span class=\"line\">    // element: 指向当前元素的值</span><br><span class=\"line\">    // index: 指向当前索引</span><br><span class=\"line\">    // array: 指向Array对象本身</span><br><span class=\"line\">    console.log(element + &#x27;, index = &#x27; + index);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">set1.forEach(function (element, sameElement, set) &#123;</span><br><span class=\"line\">map1.forEach(function (value, key, map) &#123;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>augments</code>和<code>rest</code>（ES6引入）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(a, b) &#123;</span><br><span class=\"line\">    var i, rest = [];</span><br><span class=\"line\">    if (arguments.length &gt; 2) &#123;</span><br><span class=\"line\">        for (i = 2; i&lt;arguments.length; i++) &#123;</span><br><span class=\"line\">            rest.push(arguments[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&#x27;a = &#x27; + a);</span><br><span class=\"line\">    console.log(&#x27;b = &#x27; + b);</span><br><span class=\"line\">    console.log(rest);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function foo(a, b, ...rest) &#123;</span><br><span class=\"line\">    console.log(&#x27;a = &#x27; + a);</span><br><span class=\"line\">    console.log(&#x27;b = &#x27; + b);</span><br><span class=\"line\">    console.log(rest);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo(1, 2, 3, 4, 5);</span><br><span class=\"line\">// 结果:</span><br><span class=\"line\">// a = 1</span><br><span class=\"line\">// b = 2</span><br><span class=\"line\">// Array [ 3, 4, 5 ]</span><br><span class=\"line\"></span><br><span class=\"line\">foo(1);</span><br><span class=\"line\">// 结果:</span><br><span class=\"line\">// a = 1</span><br><span class=\"line\">// b = undefined</span><br><span class=\"line\">// Array []</span><br></pre></td></tr></table></figure></li>\n<li><p>变量提升<br>JavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">    var</span><br><span class=\"line\">        x = 1, // x初始化为1</span><br><span class=\"line\">        y = x + 1, // y初始化为2</span><br><span class=\"line\">        z, i; // z和i为undefined</span><br><span class=\"line\">    // 其他语句:</span><br><span class=\"line\">    for (i=0; i&lt;100; i++) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性</p>\n</li>\n<li><p>为了解决块级作用域，ES6引入了新的关键字let，用let替代var可以申明一个块级作用域的变量：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;use strict&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">    var sum = 0;</span><br><span class=\"line\">    for (let i=0; i&lt;100; i++) &#123;</span><br><span class=\"line\">        sum += i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // SyntaxError:</span><br><span class=\"line\">    i += 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>ES6标准引入了新的关键字const来定义常量，const与let都具有块级作用域</p>\n</li>\n<li><p>要保证<code>this</code>指向正确，必须用<code>obj.xxx()</code>的形式调用！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;use strict&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">var xiaoming = &#123;</span><br><span class=\"line\">    name: &#x27;小明&#x27;,</span><br><span class=\"line\">    birth: 1990,</span><br><span class=\"line\">    age: function () &#123;</span><br><span class=\"line\">        var that = this; // 在方法内部一开始就捕获this</span><br><span class=\"line\">        function getAgeFromBirth() &#123;</span><br><span class=\"line\">            var y = new Date().getFullYear();</span><br><span class=\"line\">            return y - that.birth; // 用that而不是this</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return getAgeFromBirth();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">xiaoming.age(); // 25</span><br><span class=\"line\">var tmp = xiaoming.age;</span><br><span class=\"line\">tmp(); //NaN</span><br></pre></td></tr></table></figure></li>\n<li><p>用 <code>apply</code>或<code>call</code>传<code>this</code><br>call和apply作用是一样的，都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部this的指向<br>从<a href=\"https://www.jianshu.com/p/aa2eeecd8b4f\">这里</a>抄的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Math.max.apply(null, [3, 5, 4]); // 5</span><br><span class=\"line\">Math.max.call(null, 3, 5, 4); // 5</span><br></pre></td></tr></table></figure></li>\n<li><p>名字空间</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 唯一的全局变量MYAPP:</span><br><span class=\"line\">var MYAPP = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 其他变量:</span><br><span class=\"line\">MYAPP.name = &#x27;myapp&#x27;;</span><br><span class=\"line\">MYAPP.version = 1.0;</span><br><span class=\"line\"></span><br><span class=\"line\">// 其他函数:</span><br><span class=\"line\">MYAPP.foo = function () &#123;</span><br><span class=\"line\">    return &#x27;foo&#x27;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li><p>服务器在设置Cookie时可以使用<code>httpOnly</code>，设定了<code>httpOnly</code>的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持<code>httpOnly</code>选项，IE从IE6 SP1开始支持。</p>\n</li>\n<li><p>原生js获取children</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取节点test下的所有直属子节点:</span><br><span class=\"line\">var cs = test.children;</span><br><span class=\"line\"></span><br><span class=\"line\">// 获取节点test下第一个、最后一个子节点：</span><br><span class=\"line\">var first = test.firstElementChild;</span><br><span class=\"line\">var last = test.lastElementChild;</span><br></pre></td></tr></table></figure></li>\n<li><p>CSS允许<code>font-size</code>这样的名称，但它并非JavaScript有效的属性名，所以需要在JavaScript中改写为驼峰式命名<code>fontSize</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取&lt;p id=&quot;p-id&quot;&gt;...&lt;/p&gt;</span><br><span class=\"line\">var p = document.getElementById(&#x27;p-id&#x27;);</span><br><span class=\"line\">// 设置CSS:</span><br><span class=\"line\">p.style.color = &#x27;#ff0000&#x27;;</span><br><span class=\"line\">p.style.fontSize = &#x27;20px&#x27;;</span><br><span class=\"line\">p.style.paddingTop = &#x27;2em&#x27;;</span><br></pre></td></tr></table></figure></li>\n<li><p>一种是修改<code>innerHTML</code>属性，这个方式非常强大，不但可以修改一个DOM节点的文本内容，还可以直接通过HTML片段修改DOM节点内部的子树。<br>修改<code>innerText</code>或<code>textContent</code>属性，这样可以自动对字符串进行HTML编码，保证无法设置任何HTML标签。两者的区别在于读取属性时，innerText不返回隐藏元素的文本，而textContent返回所有文本。<br>innerHtml</p>\n</li>\n<li><p>没有name属性的<code>&lt;input&gt;</code>的数据不会被提交。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- HTML --&gt;</span><br><span class=\"line\">&lt;form id=&quot;login-form&quot; method=&quot;post&quot; onsubmit=&quot;return checkForm()&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;password&quot; id=&quot;input-password&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;hidden&quot; id=&quot;md5-password&quot; name=&quot;password&quot;&gt;</span><br><span class=\"line\">    &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">function checkForm() &#123;</span><br><span class=\"line\">    var input_pwd = document.getElementById(&#x27;input-password&#x27;);</span><br><span class=\"line\">    var md5_pwd = document.getElementById(&#x27;md5-password&#x27;);</span><br><span class=\"line\">    // 把用户输入的明文变为MD5:</span><br><span class=\"line\">    md5_pwd.value = toMD5(input_pwd.value);</span><br><span class=\"line\">    // 继续下一步:</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>这是因为浏览器的同源策略导致的。默认情况下，JavaScript在发送AJAX请求时，URL的域名必须和当前页面完全一致。<br>完全一致的意思是，域名要相同（<a href=\"http://www.example.com和example.com不同），协议要相同（http和https不同），端口号要相同（默认是:80端口，它和:8080就不同）。有的浏览器口子松一点，允许端口不同，大多数浏览器都会严格遵守这个限制。\">www.example.com和example.com不同），协议要相同（http和https不同），端口号要相同（默认是:80端口，它和:8080就不同）。有的浏览器口子松一点，允许端口不同，大多数浏览器都会严格遵守这个限制。</a></p>\n</li>\n<li><p>解决跨域请求的几种方法：Flash、同源服务器转发、JSONP、CORS<br>下面谈的都是CORS。跨域能否成功，取决于对方服务器是否愿意给你设置一个正确的Access-Control-Allow-Origin，决定权始终在对方手中<br>上面这种跨域请求，称之为“简单请求”。简单请求包括GET、HEAD和POST（POST的Content-Type类型<br>仅限application&#x2F;x-www-form-urlencoded、multipart&#x2F;form-data和text&#x2F;plain），并且不能出现任何自定义头（例如，X-Custom: 12345），通常能满足90%的需求。<br>对于PUT、DELETE以及其他类型如application&#x2F;json的POST请求，在发送AJAX请求之前，浏览器会先发送一个OPTIONS请求（称为preflighted请求）到这个URL上，询问目标服务器是否接受。</p>\n</li>\n<li><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getElementById</span><br><span class=\"line\">getElementsByTagName</span><br><span class=\"line\">getElementsByClassName</span><br><span class=\"line\"></span><br><span class=\"line\">innerHTML //可以插入DOM</span><br><span class=\"line\">innerText //会HTML编码</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"RGB和YUV","typora-root-url":"../../source","date":"2019-10-20T08:24:49.000Z","_content":"\n- 里的转图是针对RGB图片的，YUV图片没办法直接用。\n- 解决办法是分开Y、U、V三个分量，分别进行转图。\n\n```cpp\n#include <iostream>\n#include <opencv2/opencv.hpp>\n#include <cmath>\n\nusing namespace std;\nusing namespace cv;\n\nint main() {\n\n    // 原始bgr图像\n    Mat srcImage = imread(\"/Users/zhaijy/Desktop/test2.png\");\n\n    // 转到YVU（YV21）\n    Mat dstImage;\n    cvtColor(srcImage, dstImage, COLOR_BGR2YUV_YV12);\n\n    // 前 height * width 是Y分量\n    int height = srcImage.rows, width = srcImage.cols;\n    Mat dstImageY = Mat(height, width, CV_8UC1);\n    memcpy(dstImageY.data, dstImage.data, height * width);\n    imwrite(\"/Users/zhaijy/Desktop/Y.jpg\", dstImageY);\n\n    // 后面 height * witdth / 4 是V分量\n    Mat dstImageV = Mat(height / 2, width / 2, CV_8UC1);\n    memcpy(dstImageV.data, dstImage.data + height * width, height * width / 4);\n    imwrite(\"/Users/zhaijy/Desktop/V.jpg\", dstImageV);\n\n    // 后面 height * witdth / 4 是U分量\n    Mat dstImageU = Mat(height / 2, width / 2, CV_8UC1);\n    memcpy(dstImageU.data, dstImage.data + height * width * 5 / 4, height * width / 4);\n    imwrite(\"/Users/zhaijy/Desktop/U.jpg\", dstImageU);\n\n    // Y旋转\n    int rot_height = static_cast<int>(floor(sqrt(height * height + width * width) / 4)) * 4;\n    Point2f center(static_cast<float>(width / 2.), static_cast<float>(height / 2.));\n    Mat rot_mat = getRotationMatrix2D(center, 45, 1.0);\n    Mat rotImageY = Mat(rot_height, rot_height, CV_8UC1);\n    warpAffine(dstImageY, rotImageY, rot_mat, Size(rot_height, rot_height), INTER_LINEAR);\n    imwrite(\"/Users/zhaijy/Desktop/rotY.jpg\", rotImageY);\n\n    // U旋转\n    int rot_height_uv = rot_height / 2;\n    Point2f center_uv(static_cast<float>(width / 4.), static_cast<float>(height / 4.));\n    Mat rot_mat_uv = getRotationMatrix2D(center_uv, 45, 1.0);\n    Mat rotImageU = Mat(rot_height / 2, rot_height / 2, CV_8UC1);\n    warpAffine(dstImageU, rotImageU, rot_mat_uv, Size(rot_height_uv, rot_height_uv), INTER_LINEAR);\n    imwrite(\"/Users/zhaijy/Desktop/rotU.jpg\", rotImageU);\n\n    // V旋转\n    Mat rotImageV = Mat(rot_height / 2, rot_height / 2, CV_8UC1);\n    warpAffine(dstImageV, rotImageV, rot_mat_uv, Size(rot_height_uv, rot_height_uv), INTER_LINEAR);\n    imwrite(\"/Users/zhaijy/Desktop/rotV.jpg\", rotImageV);\n\n    // 拼接YVU\n    Mat rotImageYVU = Mat(rot_height * 3 / 2, rot_height, CV_8UC1);\n    memcpy(rotImageYVU.data, rotImageY.data, rot_height * rot_height);\n    memcpy(rotImageYVU.data + rot_height * rot_height, rotImageV.data, rot_height * rot_height / 4);\n    memcpy(rotImageYVU.data + rot_height * rot_height * 5 / 4, rotImageU.data, rot_height * rot_height / 4);\n\n    // 转回BGR\n    Mat rotImageBGR;\n    cvtColor(rotImageYVU, rotImageBGR, COLOR_YUV2BGR_YV12);\n    imwrite(\"/Users/zhaijy/Desktop/rotImageBGR.jpg\", rotImageBGR);\n\n    return 0;\n}\n```\n\n- 然后贴一些中间的图片\n\n![test2](/images/test2.png)\n\n<center>原始图片</center>\n![Y](/images/Y.jpg)\n\n![V](/images/V.jpg)\n\n![U](/images/U.jpg)\n\n<center>分别是YVU分量</center>\n![rotY](/images/rotY.jpg)\n\n![rotV](/images/rotV.jpg)\n\n![rotU](/images/rotU.jpg)\n\n<center>分别是旋转后的YVU分量</center>\n![rotImageBGR](/images/rotImageBGR.jpg)\n\n<center>最后拼接完的效果</center>\n- 我看YVU的解释说，$U=B-Y$，$V=R-Y$，可能是因为这个，黑边变成了绿边了吧","source":"_posts/RGB和YUV.md","raw":"---\ntitle: RGB和YUV\ntypora-root-url: ../../source\ntags:\n  - opencv\n  - YUV\ncategories: cpp\n\ndate: 2019-10-20 16:24:49\n---\n\n- 里的转图是针对RGB图片的，YUV图片没办法直接用。\n- 解决办法是分开Y、U、V三个分量，分别进行转图。\n\n```cpp\n#include <iostream>\n#include <opencv2/opencv.hpp>\n#include <cmath>\n\nusing namespace std;\nusing namespace cv;\n\nint main() {\n\n    // 原始bgr图像\n    Mat srcImage = imread(\"/Users/zhaijy/Desktop/test2.png\");\n\n    // 转到YVU（YV21）\n    Mat dstImage;\n    cvtColor(srcImage, dstImage, COLOR_BGR2YUV_YV12);\n\n    // 前 height * width 是Y分量\n    int height = srcImage.rows, width = srcImage.cols;\n    Mat dstImageY = Mat(height, width, CV_8UC1);\n    memcpy(dstImageY.data, dstImage.data, height * width);\n    imwrite(\"/Users/zhaijy/Desktop/Y.jpg\", dstImageY);\n\n    // 后面 height * witdth / 4 是V分量\n    Mat dstImageV = Mat(height / 2, width / 2, CV_8UC1);\n    memcpy(dstImageV.data, dstImage.data + height * width, height * width / 4);\n    imwrite(\"/Users/zhaijy/Desktop/V.jpg\", dstImageV);\n\n    // 后面 height * witdth / 4 是U分量\n    Mat dstImageU = Mat(height / 2, width / 2, CV_8UC1);\n    memcpy(dstImageU.data, dstImage.data + height * width * 5 / 4, height * width / 4);\n    imwrite(\"/Users/zhaijy/Desktop/U.jpg\", dstImageU);\n\n    // Y旋转\n    int rot_height = static_cast<int>(floor(sqrt(height * height + width * width) / 4)) * 4;\n    Point2f center(static_cast<float>(width / 2.), static_cast<float>(height / 2.));\n    Mat rot_mat = getRotationMatrix2D(center, 45, 1.0);\n    Mat rotImageY = Mat(rot_height, rot_height, CV_8UC1);\n    warpAffine(dstImageY, rotImageY, rot_mat, Size(rot_height, rot_height), INTER_LINEAR);\n    imwrite(\"/Users/zhaijy/Desktop/rotY.jpg\", rotImageY);\n\n    // U旋转\n    int rot_height_uv = rot_height / 2;\n    Point2f center_uv(static_cast<float>(width / 4.), static_cast<float>(height / 4.));\n    Mat rot_mat_uv = getRotationMatrix2D(center_uv, 45, 1.0);\n    Mat rotImageU = Mat(rot_height / 2, rot_height / 2, CV_8UC1);\n    warpAffine(dstImageU, rotImageU, rot_mat_uv, Size(rot_height_uv, rot_height_uv), INTER_LINEAR);\n    imwrite(\"/Users/zhaijy/Desktop/rotU.jpg\", rotImageU);\n\n    // V旋转\n    Mat rotImageV = Mat(rot_height / 2, rot_height / 2, CV_8UC1);\n    warpAffine(dstImageV, rotImageV, rot_mat_uv, Size(rot_height_uv, rot_height_uv), INTER_LINEAR);\n    imwrite(\"/Users/zhaijy/Desktop/rotV.jpg\", rotImageV);\n\n    // 拼接YVU\n    Mat rotImageYVU = Mat(rot_height * 3 / 2, rot_height, CV_8UC1);\n    memcpy(rotImageYVU.data, rotImageY.data, rot_height * rot_height);\n    memcpy(rotImageYVU.data + rot_height * rot_height, rotImageV.data, rot_height * rot_height / 4);\n    memcpy(rotImageYVU.data + rot_height * rot_height * 5 / 4, rotImageU.data, rot_height * rot_height / 4);\n\n    // 转回BGR\n    Mat rotImageBGR;\n    cvtColor(rotImageYVU, rotImageBGR, COLOR_YUV2BGR_YV12);\n    imwrite(\"/Users/zhaijy/Desktop/rotImageBGR.jpg\", rotImageBGR);\n\n    return 0;\n}\n```\n\n- 然后贴一些中间的图片\n\n![test2](/images/test2.png)\n\n<center>原始图片</center>\n![Y](/images/Y.jpg)\n\n![V](/images/V.jpg)\n\n![U](/images/U.jpg)\n\n<center>分别是YVU分量</center>\n![rotY](/images/rotY.jpg)\n\n![rotV](/images/rotV.jpg)\n\n![rotU](/images/rotU.jpg)\n\n<center>分别是旋转后的YVU分量</center>\n![rotImageBGR](/images/rotImageBGR.jpg)\n\n<center>最后拼接完的效果</center>\n- 我看YVU的解释说，$U=B-Y$，$V=R-Y$，可能是因为这个，黑边变成了绿边了吧","slug":"RGB和YUV","published":1,"updated":"2023-11-05T11:42:33.903Z","comments":1,"layout":"post","photos":[],"_id":"clolf0lhz000os2kz080jcyqs","content":"<ul>\n<li>里的转图是针对RGB图片的，YUV图片没办法直接用。</li>\n<li>解决办法是分开Y、U、V三个分量，分别进行转图。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> cv;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 原始bgr图像</span></span><br><span class=\"line\">    Mat srcImage = <span class=\"built_in\">imread</span>(<span class=\"string\">&quot;/Users/zhaijy/Desktop/test2.png&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 转到YVU（YV21）</span></span><br><span class=\"line\">    Mat dstImage;</span><br><span class=\"line\">    <span class=\"built_in\">cvtColor</span>(srcImage, dstImage, COLOR_BGR2YUV_YV12);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 前 height * width 是Y分量</span></span><br><span class=\"line\">    <span class=\"type\">int</span> height = srcImage.rows, width = srcImage.cols;</span><br><span class=\"line\">    Mat dstImageY = <span class=\"built_in\">Mat</span>(height, width, CV_8UC1);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(dstImageY.data, dstImage.data, height * width);</span><br><span class=\"line\">    <span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;/Users/zhaijy/Desktop/Y.jpg&quot;</span>, dstImageY);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 后面 height * witdth / 4 是V分量</span></span><br><span class=\"line\">    Mat dstImageV = <span class=\"built_in\">Mat</span>(height / <span class=\"number\">2</span>, width / <span class=\"number\">2</span>, CV_8UC1);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(dstImageV.data, dstImage.data + height * width, height * width / <span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;/Users/zhaijy/Desktop/V.jpg&quot;</span>, dstImageV);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 后面 height * witdth / 4 是U分量</span></span><br><span class=\"line\">    Mat dstImageU = <span class=\"built_in\">Mat</span>(height / <span class=\"number\">2</span>, width / <span class=\"number\">2</span>, CV_8UC1);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(dstImageU.data, dstImage.data + height * width * <span class=\"number\">5</span> / <span class=\"number\">4</span>, height * width / <span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;/Users/zhaijy/Desktop/U.jpg&quot;</span>, dstImageU);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Y旋转</span></span><br><span class=\"line\">    <span class=\"type\">int</span> rot_height = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">int</span>&gt;(<span class=\"built_in\">floor</span>(<span class=\"built_in\">sqrt</span>(height * height + width * width) / <span class=\"number\">4</span>)) * <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"function\">Point2f <span class=\"title\">center</span><span class=\"params\">(<span class=\"keyword\">static_cast</span>&lt;<span class=\"type\">float</span>&gt;(width / <span class=\"number\">2.</span>), <span class=\"keyword\">static_cast</span>&lt;<span class=\"type\">float</span>&gt;(height / <span class=\"number\">2.</span>))</span></span>;</span><br><span class=\"line\">    Mat rot_mat = <span class=\"built_in\">getRotationMatrix2D</span>(center, <span class=\"number\">45</span>, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">    Mat rotImageY = <span class=\"built_in\">Mat</span>(rot_height, rot_height, CV_8UC1);</span><br><span class=\"line\">    <span class=\"built_in\">warpAffine</span>(dstImageY, rotImageY, rot_mat, <span class=\"built_in\">Size</span>(rot_height, rot_height), INTER_LINEAR);</span><br><span class=\"line\">    <span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;/Users/zhaijy/Desktop/rotY.jpg&quot;</span>, rotImageY);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// U旋转</span></span><br><span class=\"line\">    <span class=\"type\">int</span> rot_height_uv = rot_height / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"function\">Point2f <span class=\"title\">center_uv</span><span class=\"params\">(<span class=\"keyword\">static_cast</span>&lt;<span class=\"type\">float</span>&gt;(width / <span class=\"number\">4.</span>), <span class=\"keyword\">static_cast</span>&lt;<span class=\"type\">float</span>&gt;(height / <span class=\"number\">4.</span>))</span></span>;</span><br><span class=\"line\">    Mat rot_mat_uv = <span class=\"built_in\">getRotationMatrix2D</span>(center_uv, <span class=\"number\">45</span>, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">    Mat rotImageU = <span class=\"built_in\">Mat</span>(rot_height / <span class=\"number\">2</span>, rot_height / <span class=\"number\">2</span>, CV_8UC1);</span><br><span class=\"line\">    <span class=\"built_in\">warpAffine</span>(dstImageU, rotImageU, rot_mat_uv, <span class=\"built_in\">Size</span>(rot_height_uv, rot_height_uv), INTER_LINEAR);</span><br><span class=\"line\">    <span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;/Users/zhaijy/Desktop/rotU.jpg&quot;</span>, rotImageU);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// V旋转</span></span><br><span class=\"line\">    Mat rotImageV = <span class=\"built_in\">Mat</span>(rot_height / <span class=\"number\">2</span>, rot_height / <span class=\"number\">2</span>, CV_8UC1);</span><br><span class=\"line\">    <span class=\"built_in\">warpAffine</span>(dstImageV, rotImageV, rot_mat_uv, <span class=\"built_in\">Size</span>(rot_height_uv, rot_height_uv), INTER_LINEAR);</span><br><span class=\"line\">    <span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;/Users/zhaijy/Desktop/rotV.jpg&quot;</span>, rotImageV);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 拼接YVU</span></span><br><span class=\"line\">    Mat rotImageYVU = <span class=\"built_in\">Mat</span>(rot_height * <span class=\"number\">3</span> / <span class=\"number\">2</span>, rot_height, CV_8UC1);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(rotImageYVU.data, rotImageY.data, rot_height * rot_height);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(rotImageYVU.data + rot_height * rot_height, rotImageV.data, rot_height * rot_height / <span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(rotImageYVU.data + rot_height * rot_height * <span class=\"number\">5</span> / <span class=\"number\">4</span>, rotImageU.data, rot_height * rot_height / <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 转回BGR</span></span><br><span class=\"line\">    Mat rotImageBGR;</span><br><span class=\"line\">    <span class=\"built_in\">cvtColor</span>(rotImageYVU, rotImageBGR, COLOR_YUV2BGR_YV12);</span><br><span class=\"line\">    <span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;/Users/zhaijy/Desktop/rotImageBGR.jpg&quot;</span>, rotImageBGR);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>然后贴一些中间的图片</li>\n</ul>\n<p><img src=\"/images/test2.png\" alt=\"test2\"></p>\n<center>原始图片</center>\n![Y](/images/Y.jpg)\n\n<p><img src=\"/images/V.jpg\" alt=\"V\"></p>\n<p><img src=\"/images/U.jpg\" alt=\"U\"></p>\n<center>分别是YVU分量</center>\n![rotY](/images/rotY.jpg)\n\n<p><img src=\"/images/rotV.jpg\" alt=\"rotV\"></p>\n<p><img src=\"/images/rotU.jpg\" alt=\"rotU\"></p>\n<center>分别是旋转后的YVU分量</center>\n![rotImageBGR](/images/rotImageBGR.jpg)\n\n<center>最后拼接完的效果</center>\n- 我看YVU的解释说，$U=B-Y$，$V=R-Y$，可能是因为这个，黑边变成了绿边了吧","excerpt":"","more":"<ul>\n<li>里的转图是针对RGB图片的，YUV图片没办法直接用。</li>\n<li>解决办法是分开Y、U、V三个分量，分别进行转图。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> cv;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 原始bgr图像</span></span><br><span class=\"line\">    Mat srcImage = <span class=\"built_in\">imread</span>(<span class=\"string\">&quot;/Users/zhaijy/Desktop/test2.png&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 转到YVU（YV21）</span></span><br><span class=\"line\">    Mat dstImage;</span><br><span class=\"line\">    <span class=\"built_in\">cvtColor</span>(srcImage, dstImage, COLOR_BGR2YUV_YV12);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 前 height * width 是Y分量</span></span><br><span class=\"line\">    <span class=\"type\">int</span> height = srcImage.rows, width = srcImage.cols;</span><br><span class=\"line\">    Mat dstImageY = <span class=\"built_in\">Mat</span>(height, width, CV_8UC1);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(dstImageY.data, dstImage.data, height * width);</span><br><span class=\"line\">    <span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;/Users/zhaijy/Desktop/Y.jpg&quot;</span>, dstImageY);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 后面 height * witdth / 4 是V分量</span></span><br><span class=\"line\">    Mat dstImageV = <span class=\"built_in\">Mat</span>(height / <span class=\"number\">2</span>, width / <span class=\"number\">2</span>, CV_8UC1);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(dstImageV.data, dstImage.data + height * width, height * width / <span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;/Users/zhaijy/Desktop/V.jpg&quot;</span>, dstImageV);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 后面 height * witdth / 4 是U分量</span></span><br><span class=\"line\">    Mat dstImageU = <span class=\"built_in\">Mat</span>(height / <span class=\"number\">2</span>, width / <span class=\"number\">2</span>, CV_8UC1);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(dstImageU.data, dstImage.data + height * width * <span class=\"number\">5</span> / <span class=\"number\">4</span>, height * width / <span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;/Users/zhaijy/Desktop/U.jpg&quot;</span>, dstImageU);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Y旋转</span></span><br><span class=\"line\">    <span class=\"type\">int</span> rot_height = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">int</span>&gt;(<span class=\"built_in\">floor</span>(<span class=\"built_in\">sqrt</span>(height * height + width * width) / <span class=\"number\">4</span>)) * <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"function\">Point2f <span class=\"title\">center</span><span class=\"params\">(<span class=\"keyword\">static_cast</span>&lt;<span class=\"type\">float</span>&gt;(width / <span class=\"number\">2.</span>), <span class=\"keyword\">static_cast</span>&lt;<span class=\"type\">float</span>&gt;(height / <span class=\"number\">2.</span>))</span></span>;</span><br><span class=\"line\">    Mat rot_mat = <span class=\"built_in\">getRotationMatrix2D</span>(center, <span class=\"number\">45</span>, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">    Mat rotImageY = <span class=\"built_in\">Mat</span>(rot_height, rot_height, CV_8UC1);</span><br><span class=\"line\">    <span class=\"built_in\">warpAffine</span>(dstImageY, rotImageY, rot_mat, <span class=\"built_in\">Size</span>(rot_height, rot_height), INTER_LINEAR);</span><br><span class=\"line\">    <span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;/Users/zhaijy/Desktop/rotY.jpg&quot;</span>, rotImageY);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// U旋转</span></span><br><span class=\"line\">    <span class=\"type\">int</span> rot_height_uv = rot_height / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"function\">Point2f <span class=\"title\">center_uv</span><span class=\"params\">(<span class=\"keyword\">static_cast</span>&lt;<span class=\"type\">float</span>&gt;(width / <span class=\"number\">4.</span>), <span class=\"keyword\">static_cast</span>&lt;<span class=\"type\">float</span>&gt;(height / <span class=\"number\">4.</span>))</span></span>;</span><br><span class=\"line\">    Mat rot_mat_uv = <span class=\"built_in\">getRotationMatrix2D</span>(center_uv, <span class=\"number\">45</span>, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">    Mat rotImageU = <span class=\"built_in\">Mat</span>(rot_height / <span class=\"number\">2</span>, rot_height / <span class=\"number\">2</span>, CV_8UC1);</span><br><span class=\"line\">    <span class=\"built_in\">warpAffine</span>(dstImageU, rotImageU, rot_mat_uv, <span class=\"built_in\">Size</span>(rot_height_uv, rot_height_uv), INTER_LINEAR);</span><br><span class=\"line\">    <span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;/Users/zhaijy/Desktop/rotU.jpg&quot;</span>, rotImageU);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// V旋转</span></span><br><span class=\"line\">    Mat rotImageV = <span class=\"built_in\">Mat</span>(rot_height / <span class=\"number\">2</span>, rot_height / <span class=\"number\">2</span>, CV_8UC1);</span><br><span class=\"line\">    <span class=\"built_in\">warpAffine</span>(dstImageV, rotImageV, rot_mat_uv, <span class=\"built_in\">Size</span>(rot_height_uv, rot_height_uv), INTER_LINEAR);</span><br><span class=\"line\">    <span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;/Users/zhaijy/Desktop/rotV.jpg&quot;</span>, rotImageV);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 拼接YVU</span></span><br><span class=\"line\">    Mat rotImageYVU = <span class=\"built_in\">Mat</span>(rot_height * <span class=\"number\">3</span> / <span class=\"number\">2</span>, rot_height, CV_8UC1);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(rotImageYVU.data, rotImageY.data, rot_height * rot_height);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(rotImageYVU.data + rot_height * rot_height, rotImageV.data, rot_height * rot_height / <span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(rotImageYVU.data + rot_height * rot_height * <span class=\"number\">5</span> / <span class=\"number\">4</span>, rotImageU.data, rot_height * rot_height / <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 转回BGR</span></span><br><span class=\"line\">    Mat rotImageBGR;</span><br><span class=\"line\">    <span class=\"built_in\">cvtColor</span>(rotImageYVU, rotImageBGR, COLOR_YUV2BGR_YV12);</span><br><span class=\"line\">    <span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;/Users/zhaijy/Desktop/rotImageBGR.jpg&quot;</span>, rotImageBGR);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>然后贴一些中间的图片</li>\n</ul>\n<p><img src=\"/images/test2.png\" alt=\"test2\"></p>\n<center>原始图片</center>\n![Y](/images/Y.jpg)\n\n<p><img src=\"/images/V.jpg\" alt=\"V\"></p>\n<p><img src=\"/images/U.jpg\" alt=\"U\"></p>\n<center>分别是YVU分量</center>\n![rotY](/images/rotY.jpg)\n\n<p><img src=\"/images/rotV.jpg\" alt=\"rotV\"></p>\n<p><img src=\"/images/rotU.jpg\" alt=\"rotU\"></p>\n<center>分别是旋转后的YVU分量</center>\n![rotImageBGR](/images/rotImageBGR.jpg)\n\n<center>最后拼接完的效果</center>\n- 我看YVU的解释说，$U=B-Y$，$V=R-Y$，可能是因为这个，黑边变成了绿边了吧"},{"title":"Joint Attention_CTC","typora-root-url":"../../source","date":"2019-07-13T14:22:05.000Z","_content":"\n# Joint CTC-Attention \n\n是一篇16年的文章，Joint CTC-Attention based End-to-End Speech Recognition using Multi-task Learning\n\n作者说Attention有个问题，没有CTC一样从左到右的限制，所以不好对齐，weak on noisy speech，也不好训练，所以在训练的时候，把CTC也加进去，$\\alpha$取0.2的时候效果最好\n$$\nL=\\alpha L_{ctc} + (1-\\alpha) L_{att}\n$$\n但是预测的时候没有ctc，还是用Attention做decoding\n\n# CTC Beam Search\n\n看的是[这里](https://medium.com/corti-ai/ctc-networks-and-language-models-prefix-beam-search-explained-c11d1ee23306)，CTC 有两种decoding的方法，一种是最简单的，直接取最大值，叫max decoding或叫greedy decoding。但是这么做有两个问题。\n\n1. 但是这么做其实已经做了近似，理论上的做法应该是这样的。遍历所有可能的路径，计算出每一条路径的概率值，然后把结果一致的路径的概率加起来，选择概率最大的那个结果，就是最终的结果。但是路径太多了，不能这么暴力。\n2. max decoding不能结合语义。\n\n主要变量是`Pb`和`Pnb`，`Pb[t][l]`, is the probability that a prefix, l, at a specific time step, t, originates from one or more paths ending in the blank token\n\nthink of a language model as a function taking a sentence as input, which is often only partly constructed, and returning the probability of the last word given all the previous words. \n\n```python\nfrom collections import defaultdict, Counter\nfrom string import ascii_lowercase\nimport re\nimport numpy as np\n\ndef prefix_beam_search(ctc, lm=None, k=25, alpha=0.30, beta=5, prune=0.001):\n\t\"\"\"\n\tPerforms prefix beam search on the output of a CTC network.\n\n\tArgs:\n\t\tctc (np.ndarray): The CTC output. Should be a 2D array (timesteps x alphabet_size)\n\t\tlm (func): Language model function. Should take as input a string and output a probability.\n\t\tk (int): The beam width. Will keep the 'k' most likely candidates at each timestep.\n\t\talpha (float): The language model weight. Should usually be between 0 and 1.\n\t\tbeta (float): The language model compensation term. The higher the 'alpha', the higher the 'beta'.\n\t\tprune (float): Only extend prefixes with chars with an emission probability higher than 'prune'.\n\n\tRetruns:\n\t\tstring: The decoded CTC output.\n\t\"\"\"\n\n\tlm = (lambda l: 1) if lm is None else lm # if no LM is provided, return 1\n\tW = lambda l: re.findall(r'\\w+[\\s|>]', l)\n\talphabet = list(ascii_lowercase) + [' ', '>', '%']\n\tF = ctc.shape[1]\n\tctc = np.vstack((np.zeros(F), ctc)) # just add an imaginative zero'th step \n\tT = ctc.shape[0]\n\n\t# STEP 1: Initiliazation\n\tO = '' # means empty\n\tPb, Pnb = defaultdict(Counter), defaultdict(Counter)\n\tPb[0][O] = 1 # balnk prob is 1\n\tPnb[0][O] = 0 # non blank prob is 0\n\tA_prev = [O]\n\t# END: STEP 1\n\n\t# STEP 2: Iterations and pruning\n\tfor t in range(1, T):\n\t\tpruned_alphabet = [alphabet[i] for i in np.where(ctc[t] > prune)[0]]\n\t\tfor l in A_prev: # A_prev is a string list\n            \n\t\t\tif len(l) > 0 and l[-1] == '>': # < means end-character\n\t\t\t\tPb[t][l] = Pb[t - 1][l]\n\t\t\t\tPnb[t][l] = Pnb[t - 1][l]\n\t\t\t\tcontinue  \n\n\t\t\tfor c in pruned_alphabet:\n\t\t\t\tc_ix = alphabet.index(c)\n\t\t\t\t# END: STEP 2\n\t\t\t\t\n\t\t\t\t# STEP 3: “Extending” with a blank\n\t\t\t\tif c == '%': # % means blank, index is -1\n\t\t\t\t\tPb[t][l] += ctc[t][-1] * (Pb[t - 1][l] + Pnb[t - 1][l])\n\t\t\t\t# END: STEP 3\n\t\t\t\t\n\t\t\t\t# STEP 4: Extending with the end character\n\t\t\t\telse:\n\t\t\t\t\tl_plus = l + c\n\t\t\t\t\tif len(l) > 0 and c == l[-1]:\n\t\t\t\t\t\tPnb[t][l_plus] += ctc[t][c_ix] * Pb[t - 1][l]\n\t\t\t\t\t\tPnb[t][l] += ctc[t][c_ix] * Pnb[t - 1][l]\n\t\t\t\t# END: STEP 4\n\n\t\t\t\t\t# STEP 5: Extending with any other non-blank character \n                    # and LM constraints\n                    #\n\t\t\t\t\telif len(l.replace(' ', '')) > 0 and c in (' ', '>'):\n\t\t\t\t\t\tlm_prob = lm(l_plus.strip(' >')) ** alpha\n\t\t\t\t\t\tPnb[t][l_plus] += lm_prob * ctc[t][c_ix] * (Pb[t - 1][l] + Pnb[t - 1][l])\n\t\t\t\t\telse:\n\t\t\t\t\t\tPnb[t][l_plus] += ctc[t][c_ix] * (Pb[t - 1][l] + Pnb[t - 1][l])\n\t\t\t\t\t# END: STEP 5\n\n\t\t\t\t\t# STEP 6: Make use of discarded prefixes\n                    # 可能l_plus已经存在过，但在上一步的时候扔掉了，这里相当于补回来\n\t\t\t\t\tif l_plus not in A_prev:\n\t\t\t\t\t\tPb[t][l_plus] += ctc[t][-1] * (Pb[t - 1][l_plus] + Pnb[t - 1][l_plus])\n\t\t\t\t\t\tPnb[t][l_plus] += ctc[t][c_ix] * Pnb[t - 1][l_plus]\n\t\t\t\t\t# END: STEP 6\n\n\t\t# STEP 7: Select most probable prefixes\n\t\tA_next = Pb[t] + Pnb[t]\n\t\tsorter = lambda l: A_next[l] * (len(W(l)) + 1) ** beta\n\t\tA_prev = sorted(A_next, key=sorter, reverse=True)[:k]\n\t\t# END: STEP 7\n\n\treturn A_prev[0].strip('>')\n```\n\n后来想起来，sequence to sequence都有beam search和 greedy search，但是只是CTC的softmax是fram synchronously，所以逻辑才比较复杂，所以Attention一样也可以用beam search。\n\n# Advanced Joint CTC-Attention\n\n还是那几个作者的文章，升级版，Advances in Joint CTC-Attention based End-to-End Speech Recognition with a Deep CNN Encoder and RNN-LM。\n\n训练的过程没有做修改，还是CTC和Attention一起训练。\n\n预测解码的时候修改了，以前是只用Attention，现在需要两个结合起来，用beam search做。但beam search有一个问题，Attention的softmax是character synchronously的，而CTC的是fram synchronously，并不是能很好地对应起来。\n$$\n\\alpha_{att}(g_l)=\\alpha_{att}(g_{l-1})+log(p(c|g_{l-1},X))\n$$\nAttention的概率这么计算，$c$ is the last character of $g_l$。\n\nCTC不能用上面这种公式计算，但是可以用CTC计算loss时的forward来计算$\\alpha_{ctc}(g_l)$，和$\\alpha_{att}(g_l)$用$\\lambda$结合起来。","source":"_posts/Joint-Attention-CTC.md","raw":"---\ntitle: Joint Attention_CTC\ntypora-root-url: ../../source\ntags:\n  - caffe\n  - docker\ncategories: cpp\ndate: 2019-07-13 22:22:05\n---\n\n# Joint CTC-Attention \n\n是一篇16年的文章，Joint CTC-Attention based End-to-End Speech Recognition using Multi-task Learning\n\n作者说Attention有个问题，没有CTC一样从左到右的限制，所以不好对齐，weak on noisy speech，也不好训练，所以在训练的时候，把CTC也加进去，$\\alpha$取0.2的时候效果最好\n$$\nL=\\alpha L_{ctc} + (1-\\alpha) L_{att}\n$$\n但是预测的时候没有ctc，还是用Attention做decoding\n\n# CTC Beam Search\n\n看的是[这里](https://medium.com/corti-ai/ctc-networks-and-language-models-prefix-beam-search-explained-c11d1ee23306)，CTC 有两种decoding的方法，一种是最简单的，直接取最大值，叫max decoding或叫greedy decoding。但是这么做有两个问题。\n\n1. 但是这么做其实已经做了近似，理论上的做法应该是这样的。遍历所有可能的路径，计算出每一条路径的概率值，然后把结果一致的路径的概率加起来，选择概率最大的那个结果，就是最终的结果。但是路径太多了，不能这么暴力。\n2. max decoding不能结合语义。\n\n主要变量是`Pb`和`Pnb`，`Pb[t][l]`, is the probability that a prefix, l, at a specific time step, t, originates from one or more paths ending in the blank token\n\nthink of a language model as a function taking a sentence as input, which is often only partly constructed, and returning the probability of the last word given all the previous words. \n\n```python\nfrom collections import defaultdict, Counter\nfrom string import ascii_lowercase\nimport re\nimport numpy as np\n\ndef prefix_beam_search(ctc, lm=None, k=25, alpha=0.30, beta=5, prune=0.001):\n\t\"\"\"\n\tPerforms prefix beam search on the output of a CTC network.\n\n\tArgs:\n\t\tctc (np.ndarray): The CTC output. Should be a 2D array (timesteps x alphabet_size)\n\t\tlm (func): Language model function. Should take as input a string and output a probability.\n\t\tk (int): The beam width. Will keep the 'k' most likely candidates at each timestep.\n\t\talpha (float): The language model weight. Should usually be between 0 and 1.\n\t\tbeta (float): The language model compensation term. The higher the 'alpha', the higher the 'beta'.\n\t\tprune (float): Only extend prefixes with chars with an emission probability higher than 'prune'.\n\n\tRetruns:\n\t\tstring: The decoded CTC output.\n\t\"\"\"\n\n\tlm = (lambda l: 1) if lm is None else lm # if no LM is provided, return 1\n\tW = lambda l: re.findall(r'\\w+[\\s|>]', l)\n\talphabet = list(ascii_lowercase) + [' ', '>', '%']\n\tF = ctc.shape[1]\n\tctc = np.vstack((np.zeros(F), ctc)) # just add an imaginative zero'th step \n\tT = ctc.shape[0]\n\n\t# STEP 1: Initiliazation\n\tO = '' # means empty\n\tPb, Pnb = defaultdict(Counter), defaultdict(Counter)\n\tPb[0][O] = 1 # balnk prob is 1\n\tPnb[0][O] = 0 # non blank prob is 0\n\tA_prev = [O]\n\t# END: STEP 1\n\n\t# STEP 2: Iterations and pruning\n\tfor t in range(1, T):\n\t\tpruned_alphabet = [alphabet[i] for i in np.where(ctc[t] > prune)[0]]\n\t\tfor l in A_prev: # A_prev is a string list\n            \n\t\t\tif len(l) > 0 and l[-1] == '>': # < means end-character\n\t\t\t\tPb[t][l] = Pb[t - 1][l]\n\t\t\t\tPnb[t][l] = Pnb[t - 1][l]\n\t\t\t\tcontinue  \n\n\t\t\tfor c in pruned_alphabet:\n\t\t\t\tc_ix = alphabet.index(c)\n\t\t\t\t# END: STEP 2\n\t\t\t\t\n\t\t\t\t# STEP 3: “Extending” with a blank\n\t\t\t\tif c == '%': # % means blank, index is -1\n\t\t\t\t\tPb[t][l] += ctc[t][-1] * (Pb[t - 1][l] + Pnb[t - 1][l])\n\t\t\t\t# END: STEP 3\n\t\t\t\t\n\t\t\t\t# STEP 4: Extending with the end character\n\t\t\t\telse:\n\t\t\t\t\tl_plus = l + c\n\t\t\t\t\tif len(l) > 0 and c == l[-1]:\n\t\t\t\t\t\tPnb[t][l_plus] += ctc[t][c_ix] * Pb[t - 1][l]\n\t\t\t\t\t\tPnb[t][l] += ctc[t][c_ix] * Pnb[t - 1][l]\n\t\t\t\t# END: STEP 4\n\n\t\t\t\t\t# STEP 5: Extending with any other non-blank character \n                    # and LM constraints\n                    #\n\t\t\t\t\telif len(l.replace(' ', '')) > 0 and c in (' ', '>'):\n\t\t\t\t\t\tlm_prob = lm(l_plus.strip(' >')) ** alpha\n\t\t\t\t\t\tPnb[t][l_plus] += lm_prob * ctc[t][c_ix] * (Pb[t - 1][l] + Pnb[t - 1][l])\n\t\t\t\t\telse:\n\t\t\t\t\t\tPnb[t][l_plus] += ctc[t][c_ix] * (Pb[t - 1][l] + Pnb[t - 1][l])\n\t\t\t\t\t# END: STEP 5\n\n\t\t\t\t\t# STEP 6: Make use of discarded prefixes\n                    # 可能l_plus已经存在过，但在上一步的时候扔掉了，这里相当于补回来\n\t\t\t\t\tif l_plus not in A_prev:\n\t\t\t\t\t\tPb[t][l_plus] += ctc[t][-1] * (Pb[t - 1][l_plus] + Pnb[t - 1][l_plus])\n\t\t\t\t\t\tPnb[t][l_plus] += ctc[t][c_ix] * Pnb[t - 1][l_plus]\n\t\t\t\t\t# END: STEP 6\n\n\t\t# STEP 7: Select most probable prefixes\n\t\tA_next = Pb[t] + Pnb[t]\n\t\tsorter = lambda l: A_next[l] * (len(W(l)) + 1) ** beta\n\t\tA_prev = sorted(A_next, key=sorter, reverse=True)[:k]\n\t\t# END: STEP 7\n\n\treturn A_prev[0].strip('>')\n```\n\n后来想起来，sequence to sequence都有beam search和 greedy search，但是只是CTC的softmax是fram synchronously，所以逻辑才比较复杂，所以Attention一样也可以用beam search。\n\n# Advanced Joint CTC-Attention\n\n还是那几个作者的文章，升级版，Advances in Joint CTC-Attention based End-to-End Speech Recognition with a Deep CNN Encoder and RNN-LM。\n\n训练的过程没有做修改，还是CTC和Attention一起训练。\n\n预测解码的时候修改了，以前是只用Attention，现在需要两个结合起来，用beam search做。但beam search有一个问题，Attention的softmax是character synchronously的，而CTC的是fram synchronously，并不是能很好地对应起来。\n$$\n\\alpha_{att}(g_l)=\\alpha_{att}(g_{l-1})+log(p(c|g_{l-1},X))\n$$\nAttention的概率这么计算，$c$ is the last character of $g_l$。\n\nCTC不能用上面这种公式计算，但是可以用CTC计算loss时的forward来计算$\\alpha_{ctc}(g_l)$，和$\\alpha_{att}(g_l)$用$\\lambda$结合起来。","slug":"Joint-Attention-CTC","published":1,"updated":"2023-11-05T11:42:33.903Z","comments":1,"layout":"post","photos":[],"_id":"clolf0lhz000qs2kz7uvd53hp","content":"<h1 id=\"Joint-CTC-Attention\"><a href=\"#Joint-CTC-Attention\" class=\"headerlink\" title=\"Joint CTC-Attention\"></a>Joint CTC-Attention</h1><p>是一篇16年的文章，Joint CTC-Attention based End-to-End Speech Recognition using Multi-task Learning</p>\n<p>作者说Attention有个问题，没有CTC一样从左到右的限制，所以不好对齐，weak on noisy speech，也不好训练，所以在训练的时候，把CTC也加进去，$\\alpha$取0.2的时候效果最好<br>$$<br>L&#x3D;\\alpha L_{ctc} + (1-\\alpha) L_{att}<br>$$<br>但是预测的时候没有ctc，还是用Attention做decoding</p>\n<h1 id=\"CTC-Beam-Search\"><a href=\"#CTC-Beam-Search\" class=\"headerlink\" title=\"CTC Beam Search\"></a>CTC Beam Search</h1><p>看的是<a href=\"https://medium.com/corti-ai/ctc-networks-and-language-models-prefix-beam-search-explained-c11d1ee23306\">这里</a>，CTC 有两种decoding的方法，一种是最简单的，直接取最大值，叫max decoding或叫greedy decoding。但是这么做有两个问题。</p>\n<ol>\n<li>但是这么做其实已经做了近似，理论上的做法应该是这样的。遍历所有可能的路径，计算出每一条路径的概率值，然后把结果一致的路径的概率加起来，选择概率最大的那个结果，就是最终的结果。但是路径太多了，不能这么暴力。</li>\n<li>max decoding不能结合语义。</li>\n</ol>\n<p>主要变量是<code>Pb</code>和<code>Pnb</code>，<code>Pb[t][l]</code>, is the probability that a prefix, l, at a specific time step, t, originates from one or more paths ending in the blank token</p>\n<p>think of a language model as a function taking a sentence as input, which is often only partly constructed, and returning the probability of the last word given all the previous words. </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> defaultdict, Counter</span><br><span class=\"line\"><span class=\"keyword\">from</span> string <span class=\"keyword\">import</span> ascii_lowercase</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">prefix_beam_search</span>(<span class=\"params\">ctc, lm=<span class=\"literal\">None</span>, k=<span class=\"number\">25</span>, alpha=<span class=\"number\">0.30</span>, beta=<span class=\"number\">5</span>, prune=<span class=\"number\">0.001</span></span>):</span><br><span class=\"line\">\t<span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">\tPerforms prefix beam search on the output of a CTC network.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\tArgs:</span></span><br><span class=\"line\"><span class=\"string\">\t\tctc (np.ndarray): The CTC output. Should be a 2D array (timesteps x alphabet_size)</span></span><br><span class=\"line\"><span class=\"string\">\t\tlm (func): Language model function. Should take as input a string and output a probability.</span></span><br><span class=\"line\"><span class=\"string\">\t\tk (int): The beam width. Will keep the &#x27;k&#x27; most likely candidates at each timestep.</span></span><br><span class=\"line\"><span class=\"string\">\t\talpha (float): The language model weight. Should usually be between 0 and 1.</span></span><br><span class=\"line\"><span class=\"string\">\t\tbeta (float): The language model compensation term. The higher the &#x27;alpha&#x27;, the higher the &#x27;beta&#x27;.</span></span><br><span class=\"line\"><span class=\"string\">\t\tprune (float): Only extend prefixes with chars with an emission probability higher than &#x27;prune&#x27;.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\tRetruns:</span></span><br><span class=\"line\"><span class=\"string\">\t\tstring: The decoded CTC output.</span></span><br><span class=\"line\"><span class=\"string\">\t&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tlm = (<span class=\"keyword\">lambda</span> l: <span class=\"number\">1</span>) <span class=\"keyword\">if</span> lm <span class=\"keyword\">is</span> <span class=\"literal\">None</span> <span class=\"keyword\">else</span> lm <span class=\"comment\"># if no LM is provided, return 1</span></span><br><span class=\"line\">\tW = <span class=\"keyword\">lambda</span> l: re.findall(<span class=\"string\">r&#x27;\\w+[\\s|&gt;]&#x27;</span>, l)</span><br><span class=\"line\">\talphabet = <span class=\"built_in\">list</span>(ascii_lowercase) + [<span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;&gt;&#x27;</span>, <span class=\"string\">&#x27;%&#x27;</span>]</span><br><span class=\"line\">\tF = ctc.shape[<span class=\"number\">1</span>]</span><br><span class=\"line\">\tctc = np.vstack((np.zeros(F), ctc)) <span class=\"comment\"># just add an imaginative zero&#x27;th step </span></span><br><span class=\"line\">\tT = ctc.shape[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\"># STEP 1: Initiliazation</span></span><br><span class=\"line\">\tO = <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\"># means empty</span></span><br><span class=\"line\">\tPb, Pnb = defaultdict(Counter), defaultdict(Counter)</span><br><span class=\"line\">\tPb[<span class=\"number\">0</span>][O] = <span class=\"number\">1</span> <span class=\"comment\"># balnk prob is 1</span></span><br><span class=\"line\">\tPnb[<span class=\"number\">0</span>][O] = <span class=\"number\">0</span> <span class=\"comment\"># non blank prob is 0</span></span><br><span class=\"line\">\tA_prev = [O]</span><br><span class=\"line\">\t<span class=\"comment\"># END: STEP 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\"># STEP 2: Iterations and pruning</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, T):</span><br><span class=\"line\">\t\tpruned_alphabet = [alphabet[i] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> np.where(ctc[t] &gt; prune)[<span class=\"number\">0</span>]]</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> A_prev: <span class=\"comment\"># A_prev is a string list</span></span><br><span class=\"line\">            </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(l) &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> l[-<span class=\"number\">1</span>] == <span class=\"string\">&#x27;&gt;&#x27;</span>: <span class=\"comment\"># &lt; means end-character</span></span><br><span class=\"line\">\t\t\t\tPb[t][l] = Pb[t - <span class=\"number\">1</span>][l]</span><br><span class=\"line\">\t\t\t\tPnb[t][l] = Pnb[t - <span class=\"number\">1</span>][l]</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> pruned_alphabet:</span><br><span class=\"line\">\t\t\t\tc_ix = alphabet.index(c)</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\"># END: STEP 2</span></span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\"># STEP 3: “Extending” with a blank</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> c == <span class=\"string\">&#x27;%&#x27;</span>: <span class=\"comment\"># % means blank, index is -1</span></span><br><span class=\"line\">\t\t\t\t\tPb[t][l] += ctc[t][-<span class=\"number\">1</span>] * (Pb[t - <span class=\"number\">1</span>][l] + Pnb[t - <span class=\"number\">1</span>][l])</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\"># END: STEP 3</span></span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\"># STEP 4: Extending with the end character</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t\t\tl_plus = l + c</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(l) &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> c == l[-<span class=\"number\">1</span>]:</span><br><span class=\"line\">\t\t\t\t\t\tPnb[t][l_plus] += ctc[t][c_ix] * Pb[t - <span class=\"number\">1</span>][l]</span><br><span class=\"line\">\t\t\t\t\t\tPnb[t][l] += ctc[t][c_ix] * Pnb[t - <span class=\"number\">1</span>][l]</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\"># END: STEP 4</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\"># STEP 5: Extending with any other non-blank character </span></span><br><span class=\"line\">                    <span class=\"comment\"># and LM constraints</span></span><br><span class=\"line\">                    <span class=\"comment\">#</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">elif</span> <span class=\"built_in\">len</span>(l.replace(<span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>)) &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> c <span class=\"keyword\">in</span> (<span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;&gt;&#x27;</span>):</span><br><span class=\"line\">\t\t\t\t\t\tlm_prob = lm(l_plus.strip(<span class=\"string\">&#x27; &gt;&#x27;</span>)) ** alpha</span><br><span class=\"line\">\t\t\t\t\t\tPnb[t][l_plus] += lm_prob * ctc[t][c_ix] * (Pb[t - <span class=\"number\">1</span>][l] + Pnb[t - <span class=\"number\">1</span>][l])</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t\t\t\tPnb[t][l_plus] += ctc[t][c_ix] * (Pb[t - <span class=\"number\">1</span>][l] + Pnb[t - <span class=\"number\">1</span>][l])</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\"># END: STEP 5</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\"># STEP 6: Make use of discarded prefixes</span></span><br><span class=\"line\">                    <span class=\"comment\"># 可能l_plus已经存在过，但在上一步的时候扔掉了，这里相当于补回来</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> l_plus <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> A_prev:</span><br><span class=\"line\">\t\t\t\t\t\tPb[t][l_plus] += ctc[t][-<span class=\"number\">1</span>] * (Pb[t - <span class=\"number\">1</span>][l_plus] + Pnb[t - <span class=\"number\">1</span>][l_plus])</span><br><span class=\"line\">\t\t\t\t\t\tPnb[t][l_plus] += ctc[t][c_ix] * Pnb[t - <span class=\"number\">1</span>][l_plus]</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\"># END: STEP 6</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\"># STEP 7: Select most probable prefixes</span></span><br><span class=\"line\">\t\tA_next = Pb[t] + Pnb[t]</span><br><span class=\"line\">\t\tsorter = <span class=\"keyword\">lambda</span> l: A_next[l] * (<span class=\"built_in\">len</span>(W(l)) + <span class=\"number\">1</span>) ** beta</span><br><span class=\"line\">\t\tA_prev = <span class=\"built_in\">sorted</span>(A_next, key=sorter, reverse=<span class=\"literal\">True</span>)[:k]</span><br><span class=\"line\">\t\t<span class=\"comment\"># END: STEP 7</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> A_prev[<span class=\"number\">0</span>].strip(<span class=\"string\">&#x27;&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>后来想起来，sequence to sequence都有beam search和 greedy search，但是只是CTC的softmax是fram synchronously，所以逻辑才比较复杂，所以Attention一样也可以用beam search。</p>\n<h1 id=\"Advanced-Joint-CTC-Attention\"><a href=\"#Advanced-Joint-CTC-Attention\" class=\"headerlink\" title=\"Advanced Joint CTC-Attention\"></a>Advanced Joint CTC-Attention</h1><p>还是那几个作者的文章，升级版，Advances in Joint CTC-Attention based End-to-End Speech Recognition with a Deep CNN Encoder and RNN-LM。</p>\n<p>训练的过程没有做修改，还是CTC和Attention一起训练。</p>\n<p>预测解码的时候修改了，以前是只用Attention，现在需要两个结合起来，用beam search做。但beam search有一个问题，Attention的softmax是character synchronously的，而CTC的是fram synchronously，并不是能很好地对应起来。<br>$$<br>\\alpha_{att}(g_l)&#x3D;\\alpha_{att}(g_{l-1})+log(p(c|g_{l-1},X))<br>$$<br>Attention的概率这么计算，$c$ is the last character of $g_l$。</p>\n<p>CTC不能用上面这种公式计算，但是可以用CTC计算loss时的forward来计算$\\alpha_{ctc}(g_l)$，和$\\alpha_{att}(g_l)$用$\\lambda$结合起来。</p>\n","excerpt":"","more":"<h1 id=\"Joint-CTC-Attention\"><a href=\"#Joint-CTC-Attention\" class=\"headerlink\" title=\"Joint CTC-Attention\"></a>Joint CTC-Attention</h1><p>是一篇16年的文章，Joint CTC-Attention based End-to-End Speech Recognition using Multi-task Learning</p>\n<p>作者说Attention有个问题，没有CTC一样从左到右的限制，所以不好对齐，weak on noisy speech，也不好训练，所以在训练的时候，把CTC也加进去，$\\alpha$取0.2的时候效果最好<br>$$<br>L&#x3D;\\alpha L_{ctc} + (1-\\alpha) L_{att}<br>$$<br>但是预测的时候没有ctc，还是用Attention做decoding</p>\n<h1 id=\"CTC-Beam-Search\"><a href=\"#CTC-Beam-Search\" class=\"headerlink\" title=\"CTC Beam Search\"></a>CTC Beam Search</h1><p>看的是<a href=\"https://medium.com/corti-ai/ctc-networks-and-language-models-prefix-beam-search-explained-c11d1ee23306\">这里</a>，CTC 有两种decoding的方法，一种是最简单的，直接取最大值，叫max decoding或叫greedy decoding。但是这么做有两个问题。</p>\n<ol>\n<li>但是这么做其实已经做了近似，理论上的做法应该是这样的。遍历所有可能的路径，计算出每一条路径的概率值，然后把结果一致的路径的概率加起来，选择概率最大的那个结果，就是最终的结果。但是路径太多了，不能这么暴力。</li>\n<li>max decoding不能结合语义。</li>\n</ol>\n<p>主要变量是<code>Pb</code>和<code>Pnb</code>，<code>Pb[t][l]</code>, is the probability that a prefix, l, at a specific time step, t, originates from one or more paths ending in the blank token</p>\n<p>think of a language model as a function taking a sentence as input, which is often only partly constructed, and returning the probability of the last word given all the previous words. </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> defaultdict, Counter</span><br><span class=\"line\"><span class=\"keyword\">from</span> string <span class=\"keyword\">import</span> ascii_lowercase</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">prefix_beam_search</span>(<span class=\"params\">ctc, lm=<span class=\"literal\">None</span>, k=<span class=\"number\">25</span>, alpha=<span class=\"number\">0.30</span>, beta=<span class=\"number\">5</span>, prune=<span class=\"number\">0.001</span></span>):</span><br><span class=\"line\">\t<span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">\tPerforms prefix beam search on the output of a CTC network.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\tArgs:</span></span><br><span class=\"line\"><span class=\"string\">\t\tctc (np.ndarray): The CTC output. Should be a 2D array (timesteps x alphabet_size)</span></span><br><span class=\"line\"><span class=\"string\">\t\tlm (func): Language model function. Should take as input a string and output a probability.</span></span><br><span class=\"line\"><span class=\"string\">\t\tk (int): The beam width. Will keep the &#x27;k&#x27; most likely candidates at each timestep.</span></span><br><span class=\"line\"><span class=\"string\">\t\talpha (float): The language model weight. Should usually be between 0 and 1.</span></span><br><span class=\"line\"><span class=\"string\">\t\tbeta (float): The language model compensation term. The higher the &#x27;alpha&#x27;, the higher the &#x27;beta&#x27;.</span></span><br><span class=\"line\"><span class=\"string\">\t\tprune (float): Only extend prefixes with chars with an emission probability higher than &#x27;prune&#x27;.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\tRetruns:</span></span><br><span class=\"line\"><span class=\"string\">\t\tstring: The decoded CTC output.</span></span><br><span class=\"line\"><span class=\"string\">\t&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tlm = (<span class=\"keyword\">lambda</span> l: <span class=\"number\">1</span>) <span class=\"keyword\">if</span> lm <span class=\"keyword\">is</span> <span class=\"literal\">None</span> <span class=\"keyword\">else</span> lm <span class=\"comment\"># if no LM is provided, return 1</span></span><br><span class=\"line\">\tW = <span class=\"keyword\">lambda</span> l: re.findall(<span class=\"string\">r&#x27;\\w+[\\s|&gt;]&#x27;</span>, l)</span><br><span class=\"line\">\talphabet = <span class=\"built_in\">list</span>(ascii_lowercase) + [<span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;&gt;&#x27;</span>, <span class=\"string\">&#x27;%&#x27;</span>]</span><br><span class=\"line\">\tF = ctc.shape[<span class=\"number\">1</span>]</span><br><span class=\"line\">\tctc = np.vstack((np.zeros(F), ctc)) <span class=\"comment\"># just add an imaginative zero&#x27;th step </span></span><br><span class=\"line\">\tT = ctc.shape[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\"># STEP 1: Initiliazation</span></span><br><span class=\"line\">\tO = <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\"># means empty</span></span><br><span class=\"line\">\tPb, Pnb = defaultdict(Counter), defaultdict(Counter)</span><br><span class=\"line\">\tPb[<span class=\"number\">0</span>][O] = <span class=\"number\">1</span> <span class=\"comment\"># balnk prob is 1</span></span><br><span class=\"line\">\tPnb[<span class=\"number\">0</span>][O] = <span class=\"number\">0</span> <span class=\"comment\"># non blank prob is 0</span></span><br><span class=\"line\">\tA_prev = [O]</span><br><span class=\"line\">\t<span class=\"comment\"># END: STEP 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\"># STEP 2: Iterations and pruning</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, T):</span><br><span class=\"line\">\t\tpruned_alphabet = [alphabet[i] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> np.where(ctc[t] &gt; prune)[<span class=\"number\">0</span>]]</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> A_prev: <span class=\"comment\"># A_prev is a string list</span></span><br><span class=\"line\">            </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(l) &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> l[-<span class=\"number\">1</span>] == <span class=\"string\">&#x27;&gt;&#x27;</span>: <span class=\"comment\"># &lt; means end-character</span></span><br><span class=\"line\">\t\t\t\tPb[t][l] = Pb[t - <span class=\"number\">1</span>][l]</span><br><span class=\"line\">\t\t\t\tPnb[t][l] = Pnb[t - <span class=\"number\">1</span>][l]</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> pruned_alphabet:</span><br><span class=\"line\">\t\t\t\tc_ix = alphabet.index(c)</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\"># END: STEP 2</span></span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\"># STEP 3: “Extending” with a blank</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> c == <span class=\"string\">&#x27;%&#x27;</span>: <span class=\"comment\"># % means blank, index is -1</span></span><br><span class=\"line\">\t\t\t\t\tPb[t][l] += ctc[t][-<span class=\"number\">1</span>] * (Pb[t - <span class=\"number\">1</span>][l] + Pnb[t - <span class=\"number\">1</span>][l])</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\"># END: STEP 3</span></span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\"># STEP 4: Extending with the end character</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t\t\tl_plus = l + c</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(l) &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> c == l[-<span class=\"number\">1</span>]:</span><br><span class=\"line\">\t\t\t\t\t\tPnb[t][l_plus] += ctc[t][c_ix] * Pb[t - <span class=\"number\">1</span>][l]</span><br><span class=\"line\">\t\t\t\t\t\tPnb[t][l] += ctc[t][c_ix] * Pnb[t - <span class=\"number\">1</span>][l]</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\"># END: STEP 4</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\"># STEP 5: Extending with any other non-blank character </span></span><br><span class=\"line\">                    <span class=\"comment\"># and LM constraints</span></span><br><span class=\"line\">                    <span class=\"comment\">#</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">elif</span> <span class=\"built_in\">len</span>(l.replace(<span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>)) &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> c <span class=\"keyword\">in</span> (<span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;&gt;&#x27;</span>):</span><br><span class=\"line\">\t\t\t\t\t\tlm_prob = lm(l_plus.strip(<span class=\"string\">&#x27; &gt;&#x27;</span>)) ** alpha</span><br><span class=\"line\">\t\t\t\t\t\tPnb[t][l_plus] += lm_prob * ctc[t][c_ix] * (Pb[t - <span class=\"number\">1</span>][l] + Pnb[t - <span class=\"number\">1</span>][l])</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t\t\t\tPnb[t][l_plus] += ctc[t][c_ix] * (Pb[t - <span class=\"number\">1</span>][l] + Pnb[t - <span class=\"number\">1</span>][l])</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\"># END: STEP 5</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\"># STEP 6: Make use of discarded prefixes</span></span><br><span class=\"line\">                    <span class=\"comment\"># 可能l_plus已经存在过，但在上一步的时候扔掉了，这里相当于补回来</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> l_plus <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> A_prev:</span><br><span class=\"line\">\t\t\t\t\t\tPb[t][l_plus] += ctc[t][-<span class=\"number\">1</span>] * (Pb[t - <span class=\"number\">1</span>][l_plus] + Pnb[t - <span class=\"number\">1</span>][l_plus])</span><br><span class=\"line\">\t\t\t\t\t\tPnb[t][l_plus] += ctc[t][c_ix] * Pnb[t - <span class=\"number\">1</span>][l_plus]</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\"># END: STEP 6</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\"># STEP 7: Select most probable prefixes</span></span><br><span class=\"line\">\t\tA_next = Pb[t] + Pnb[t]</span><br><span class=\"line\">\t\tsorter = <span class=\"keyword\">lambda</span> l: A_next[l] * (<span class=\"built_in\">len</span>(W(l)) + <span class=\"number\">1</span>) ** beta</span><br><span class=\"line\">\t\tA_prev = <span class=\"built_in\">sorted</span>(A_next, key=sorter, reverse=<span class=\"literal\">True</span>)[:k]</span><br><span class=\"line\">\t\t<span class=\"comment\"># END: STEP 7</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> A_prev[<span class=\"number\">0</span>].strip(<span class=\"string\">&#x27;&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>后来想起来，sequence to sequence都有beam search和 greedy search，但是只是CTC的softmax是fram synchronously，所以逻辑才比较复杂，所以Attention一样也可以用beam search。</p>\n<h1 id=\"Advanced-Joint-CTC-Attention\"><a href=\"#Advanced-Joint-CTC-Attention\" class=\"headerlink\" title=\"Advanced Joint CTC-Attention\"></a>Advanced Joint CTC-Attention</h1><p>还是那几个作者的文章，升级版，Advances in Joint CTC-Attention based End-to-End Speech Recognition with a Deep CNN Encoder and RNN-LM。</p>\n<p>训练的过程没有做修改，还是CTC和Attention一起训练。</p>\n<p>预测解码的时候修改了，以前是只用Attention，现在需要两个结合起来，用beam search做。但beam search有一个问题，Attention的softmax是character synchronously的，而CTC的是fram synchronously，并不是能很好地对应起来。<br>$$<br>\\alpha_{att}(g_l)&#x3D;\\alpha_{att}(g_{l-1})+log(p(c|g_{l-1},X))<br>$$<br>Attention的概率这么计算，$c$ is the last character of $g_l$。</p>\n<p>CTC不能用上面这种公式计算，但是可以用CTC计算loss时的forward来计算$\\alpha_{ctc}(g_l)$，和$\\alpha_{att}(g_l)$用$\\lambda$结合起来。</p>\n"},{"title":"YOLO2","typora-root-url":"../../source","date":"2019-10-20T13:26:31.000Z","_content":"\n#先复习一下[yolov1](https://zhuanlan.zhihu.com/p/32525231)\n\n- 输出的shape是$7\\times7\\times30$，分别是类别，置信度和坐标，虽然每个格子输出两个框，但只有一组类别\n- 坐标$x, y$是相对于每一个格的，$w, h$是相对于整个图的，这样做的好处是位置坐标的取值范围都是$[0, 1]$\n\n![preview](/images/v2-8630f8d3dbe3634f124eaf82f222ca94_r.jpg)\n\n- loss都统一认为是回归问题\n\n![preview](/images/v2-45795a63cdbaac8c05d875dfb6fcfb5a_r.jpg)","source":"_posts/YOLO2.md","raw":"---\n\ntitle: YOLO2\ntags: yolo\ntypora-root-url: ../../source\ndate: 2019-10-20 21:26:31\n---\n\n#先复习一下[yolov1](https://zhuanlan.zhihu.com/p/32525231)\n\n- 输出的shape是$7\\times7\\times30$，分别是类别，置信度和坐标，虽然每个格子输出两个框，但只有一组类别\n- 坐标$x, y$是相对于每一个格的，$w, h$是相对于整个图的，这样做的好处是位置坐标的取值范围都是$[0, 1]$\n\n![preview](/images/v2-8630f8d3dbe3634f124eaf82f222ca94_r.jpg)\n\n- loss都统一认为是回归问题\n\n![preview](/images/v2-45795a63cdbaac8c05d875dfb6fcfb5a_r.jpg)","slug":"YOLO2","published":1,"updated":"2025-06-01T06:50:29.327Z","_id":"clolf0lhz000us2kz8q4befvx","comments":1,"layout":"post","photos":[],"content":"<p>#先复习一下<a href=\"https://zhuanlan.zhihu.com/p/32525231\">yolov1</a></p>\n<ul>\n<li>输出的shape是$7\\times7\\times30$，分别是类别，置信度和坐标，虽然每个格子输出两个框，但只有一组类别</li>\n<li>坐标$x, y$是相对于每一个格的，$w, h$是相对于整个图的，这样做的好处是位置坐标的取值范围都是$[0, 1]$</li>\n</ul>\n<p><img src=\"/images/v2-8630f8d3dbe3634f124eaf82f222ca94_r.jpg\" alt=\"preview\"></p>\n<ul>\n<li>loss都统一认为是回归问题</li>\n</ul>\n<p><img src=\"/images/v2-45795a63cdbaac8c05d875dfb6fcfb5a_r.jpg\" alt=\"preview\"></p>\n","excerpt":"","more":"<p>#先复习一下<a href=\"https://zhuanlan.zhihu.com/p/32525231\">yolov1</a></p>\n<ul>\n<li>输出的shape是$7\\times7\\times30$，分别是类别，置信度和坐标，虽然每个格子输出两个框，但只有一组类别</li>\n<li>坐标$x, y$是相对于每一个格的，$w, h$是相对于整个图的，这样做的好处是位置坐标的取值范围都是$[0, 1]$</li>\n</ul>\n<p><img src=\"/images/v2-8630f8d3dbe3634f124eaf82f222ca94_r.jpg\" alt=\"preview\"></p>\n<ul>\n<li>loss都统一认为是回归问题</li>\n</ul>\n<p><img src=\"/images/v2-45795a63cdbaac8c05d875dfb6fcfb5a_r.jpg\" alt=\"preview\"></p>\n"},{"title":"application/x-www-form-urlencoded和multipart/form-data","typora-root-url":"../../source","date":"2018-01-30T06:17:47.000Z","_content":"\n[抄自这里](http://www.cnblogs.com/taoys/archive/2010/12/30/1922186.html)\n\n> form的enctype属性为编码方式，常用有两种：`application/x-www-form-urlencoded`和`multipart/form-data`。\n\n> 默认为`application/x-www-form-urlencoded`。 当action为get时候，浏览器用x-www-form-urlencoded的编码方式把form数据转换成一个字串（name1=value1&name2=value2...），然后把这个字串append到url后面，用?分割，加载这个新的url。 当action为post时候，浏览器把form数据封装到http body中，然后发送到server。 \n\n> 如果没有type=file的控件，用默认的`application/x-www-form-urlencoded`就可以了。 但是如果有type=file的话，就要用到`multipart/form-data`了。浏览器会把整个表单以控件为单位分割，并为每个部分加上Content-Disposition(form-data或者file),Content-Type(默认为text/plain),name(控件name)等信息，并加上分割符(boundary)。\n\n[更详细的](http://blog.csdn.net/xiaojianpitt/article/details/6856536)\n","source":"_posts/application-x-www-form-urlencoded和multipart-form-data.md","raw":"---\ntitle: application/x-www-form-urlencoded和multipart/form-data\ntypora-root-url: ../../source\ndate: 2018-01-30 14:17:47\ncategories: flask网站总结\n---\n\n[抄自这里](http://www.cnblogs.com/taoys/archive/2010/12/30/1922186.html)\n\n> form的enctype属性为编码方式，常用有两种：`application/x-www-form-urlencoded`和`multipart/form-data`。\n\n> 默认为`application/x-www-form-urlencoded`。 当action为get时候，浏览器用x-www-form-urlencoded的编码方式把form数据转换成一个字串（name1=value1&name2=value2...），然后把这个字串append到url后面，用?分割，加载这个新的url。 当action为post时候，浏览器把form数据封装到http body中，然后发送到server。 \n\n> 如果没有type=file的控件，用默认的`application/x-www-form-urlencoded`就可以了。 但是如果有type=file的话，就要用到`multipart/form-data`了。浏览器会把整个表单以控件为单位分割，并为每个部分加上Content-Disposition(form-data或者file),Content-Type(默认为text/plain),name(控件name)等信息，并加上分割符(boundary)。\n\n[更详细的](http://blog.csdn.net/xiaojianpitt/article/details/6856536)\n","slug":"application-x-www-form-urlencoded和multipart-form-data","published":1,"updated":"2023-11-05T11:42:33.903Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li0000ws2kz4l6xaces","content":"<p><a href=\"http://www.cnblogs.com/taoys/archive/2010/12/30/1922186.html\">抄自这里</a></p>\n<blockquote>\n<p>form的enctype属性为编码方式，常用有两种：<code>application/x-www-form-urlencoded</code>和<code>multipart/form-data</code>。</p>\n</blockquote>\n<blockquote>\n<p>默认为<code>application/x-www-form-urlencoded</code>。 当action为get时候，浏览器用x-www-form-urlencoded的编码方式把form数据转换成一个字串（name1&#x3D;value1&amp;name2&#x3D;value2…），然后把这个字串append到url后面，用?分割，加载这个新的url。 当action为post时候，浏览器把form数据封装到http body中，然后发送到server。 </p>\n</blockquote>\n<blockquote>\n<p>如果没有type&#x3D;file的控件，用默认的<code>application/x-www-form-urlencoded</code>就可以了。 但是如果有type&#x3D;file的话，就要用到<code>multipart/form-data</code>了。浏览器会把整个表单以控件为单位分割，并为每个部分加上Content-Disposition(form-data或者file),Content-Type(默认为text&#x2F;plain),name(控件name)等信息，并加上分割符(boundary)。</p>\n</blockquote>\n<p><a href=\"http://blog.csdn.net/xiaojianpitt/article/details/6856536\">更详细的</a></p>\n","excerpt":"","more":"<p><a href=\"http://www.cnblogs.com/taoys/archive/2010/12/30/1922186.html\">抄自这里</a></p>\n<blockquote>\n<p>form的enctype属性为编码方式，常用有两种：<code>application/x-www-form-urlencoded</code>和<code>multipart/form-data</code>。</p>\n</blockquote>\n<blockquote>\n<p>默认为<code>application/x-www-form-urlencoded</code>。 当action为get时候，浏览器用x-www-form-urlencoded的编码方式把form数据转换成一个字串（name1&#x3D;value1&amp;name2&#x3D;value2…），然后把这个字串append到url后面，用?分割，加载这个新的url。 当action为post时候，浏览器把form数据封装到http body中，然后发送到server。 </p>\n</blockquote>\n<blockquote>\n<p>如果没有type&#x3D;file的控件，用默认的<code>application/x-www-form-urlencoded</code>就可以了。 但是如果有type&#x3D;file的话，就要用到<code>multipart/form-data</code>了。浏览器会把整个表单以控件为单位分割，并为每个部分加上Content-Disposition(form-data或者file),Content-Type(默认为text&#x2F;plain),name(控件name)等信息，并加上分割符(boundary)。</p>\n</blockquote>\n<p><a href=\"http://blog.csdn.net/xiaojianpitt/article/details/6856536\">更详细的</a></p>\n"},{"title":"c++文件复制","typora-root-url":"../../source","date":"2018-07-03T06:24:44.000Z","_content":"\n```c\n#include<iostream>\n#include<fstream>\n#include<cstring>\n\nusing namespace std;\n\nint main(int argc, char* argv[])\n{\n\tusing namespace std;\n\tif (argc < 3){\n\t\tcout << \"filename missed\" << endl;\n\t\treturn 0;\n\t}\n\tifstream in(argv[1], ios::binary | ios::in);\n\tif (!in){\n\t\tcout << \"source file open failed\" << endl;\n\t\treturn 0;\n\t}\n\tofstream out(argv[2], ios::binary | ios::out); //打开文件用于写\n\tif (!out) {\n\t\tcout << \"New file open error.\" << endl;\n\t\tin.close(); //打开的文件一定要关闭\n\t\treturn 0;\n\t}\n\tif (strcmp(argv[1], argv[2])==0) {\n\t\tcout << \"the src file can't be same with dst file\" << endl;\n\t\texit(EXIT_FAILURE);\n\t}\n\tchar buf[2048];\n\twhile (in)\n\t{\n\t\t//read从in流中读取2048字节，放入buf数组中，同时文件指针向后移动2048字节\n\t\t//若不足2048字节遇到文件结尾，则以实际提取字节读取。\n\t\tin.read(buf, 2048);\n\t\t//gcount()用来提取读取的字节数，write将buf中的内容写入out流。\n\t\tout.write(buf, in.gcount());\n\t}\n\t//char c;\n\t//while (in.get(c)){\n\t//\tout.put(c);\n\t//}\n\tin.close();\n\tout.close();\n}\n```\n","source":"_posts/c-文件复制.md","raw":"---\ntitle: c++文件复制\ntypora-root-url: ../../source\ndate: 2018-07-03 14:24:44\ncategories: cpp\n---\n\n```c\n#include<iostream>\n#include<fstream>\n#include<cstring>\n\nusing namespace std;\n\nint main(int argc, char* argv[])\n{\n\tusing namespace std;\n\tif (argc < 3){\n\t\tcout << \"filename missed\" << endl;\n\t\treturn 0;\n\t}\n\tifstream in(argv[1], ios::binary | ios::in);\n\tif (!in){\n\t\tcout << \"source file open failed\" << endl;\n\t\treturn 0;\n\t}\n\tofstream out(argv[2], ios::binary | ios::out); //打开文件用于写\n\tif (!out) {\n\t\tcout << \"New file open error.\" << endl;\n\t\tin.close(); //打开的文件一定要关闭\n\t\treturn 0;\n\t}\n\tif (strcmp(argv[1], argv[2])==0) {\n\t\tcout << \"the src file can't be same with dst file\" << endl;\n\t\texit(EXIT_FAILURE);\n\t}\n\tchar buf[2048];\n\twhile (in)\n\t{\n\t\t//read从in流中读取2048字节，放入buf数组中，同时文件指针向后移动2048字节\n\t\t//若不足2048字节遇到文件结尾，则以实际提取字节读取。\n\t\tin.read(buf, 2048);\n\t\t//gcount()用来提取读取的字节数，write将buf中的内容写入out流。\n\t\tout.write(buf, in.gcount());\n\t}\n\t//char c;\n\t//while (in.get(c)){\n\t//\tout.put(c);\n\t//}\n\tin.close();\n\tout.close();\n}\n```\n","slug":"c-文件复制","published":1,"updated":"2023-11-05T11:42:33.903Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li00010s2kz5gb5bbkw","content":"<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tusing namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (argc &lt; <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;filename missed&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tifstream <span class=\"title function_\">in</span><span class=\"params\">(argv[<span class=\"number\">1</span>], ios::binary | ios::in)</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!in)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;source file open failed&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tofstream <span class=\"title function_\">out</span><span class=\"params\">(argv[<span class=\"number\">2</span>], ios::binary | ios::out)</span>; <span class=\"comment\">//打开文件用于写</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!out) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;New file open error.&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\tin.close(); <span class=\"comment\">//打开的文件一定要关闭</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(argv[<span class=\"number\">1</span>], argv[<span class=\"number\">2</span>])==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;the src file can&#x27;t be same with dst file&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">char</span> buf[<span class=\"number\">2048</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (in)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//read从in流中读取2048字节，放入buf数组中，同时文件指针向后移动2048字节</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//若不足2048字节遇到文件结尾，则以实际提取字节读取。</span></span><br><span class=\"line\">\t\tin.read(buf, <span class=\"number\">2048</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//gcount()用来提取读取的字节数，write将buf中的内容写入out流。</span></span><br><span class=\"line\">\t\tout.write(buf, in.gcount());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//char c;</span></span><br><span class=\"line\">\t<span class=\"comment\">//while (in.get(c))&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tout.put(c);</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\">\tin.close();</span><br><span class=\"line\">\tout.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tusing namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (argc &lt; <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;filename missed&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tifstream <span class=\"title function_\">in</span><span class=\"params\">(argv[<span class=\"number\">1</span>], ios::binary | ios::in)</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!in)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;source file open failed&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tofstream <span class=\"title function_\">out</span><span class=\"params\">(argv[<span class=\"number\">2</span>], ios::binary | ios::out)</span>; <span class=\"comment\">//打开文件用于写</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!out) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;New file open error.&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\tin.close(); <span class=\"comment\">//打开的文件一定要关闭</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(argv[<span class=\"number\">1</span>], argv[<span class=\"number\">2</span>])==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;the src file can&#x27;t be same with dst file&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">char</span> buf[<span class=\"number\">2048</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (in)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//read从in流中读取2048字节，放入buf数组中，同时文件指针向后移动2048字节</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//若不足2048字节遇到文件结尾，则以实际提取字节读取。</span></span><br><span class=\"line\">\t\tin.read(buf, <span class=\"number\">2048</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//gcount()用来提取读取的字节数，write将buf中的内容写入out流。</span></span><br><span class=\"line\">\t\tout.write(buf, in.gcount());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//char c;</span></span><br><span class=\"line\">\t<span class=\"comment\">//while (in.get(c))&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tout.put(c);</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\">\tin.close();</span><br><span class=\"line\">\tout.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"caffe 学习笔记","typora-root-url":"../../source","date":"2018-01-10T17:46:30.000Z","_content":"\n# 安装\n\n## mac\n\n直接看官网的安装有点抓不住要点，有一篇博客介绍得很详细，[点这里](http://akmetiuk.com/posts/2016-03-29-compiling-caffe.html)。是针对MAC下caffe及其python模块的安装，包括有哪些依赖、怎么编译，会遇到哪些坑，以及怎么解决坑等等。感谢作者！ \n\n## docker\n\ndocker就方便多了，需要先安装docker，centos照着[这一篇](https://www.liquidweb.com/kb/how-to-install-docker-on-centos-6/)\n\n```bash\nrpm -iUvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\nyum update -y\nyum -y install docker-io\nservice docker start\nchkconfig docker on\n```\n\n至此docker安装完毕，然后搜索caffe的镜像。\n\n```bash\ndocker search caffe\n```\n\n然后会搜到一堆镜像\n\n```\nNAME                                DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED\ntleyden5iwx/caffe-cpu-master                                                        48                   [OK]\nbvlc/caffe                          Official Caffe images                           42                   [OK]\nkaixhin/caffe                       Ubuntu Core 14.04 + Caffe.                      38                   [OK]\nkaixhin/cuda-caffe                  Ubuntu Core 14.04 + CUDA + Caffe.               38                   [OK]\n...\n```\n\n其中就有官方的docker，也不知道为什么，我就用了`kaixhin/caffe`\n\n```bash\ndocker pull kaixhin/caffe\n```\n\n这个名字太丑了，我们改为\n\n```bash\ndocker tag kaixhin/caffe caffe\n```\n\n然后\n\n```bash\ndocker run -i -t caffe /bin/bash\n```\n\n然后就你直接用现成的caffe了。`exit`退出后，需要保存容器，不然下次还是会打开全新的容器。\n\n```bash\ndocker ps -l\n# CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES\n# c8f1d7bcb4f2        caffe               \"/bin/bash\"         8 minutes ago       Exited (0) 7 minutes ago                       boring_turing\ndocker commit c8f caffe\n```\n\n还有其余一些docker命令\n\n```\ndocker stop $(docker ps -a -q) #停用所有容器\ndocker rm $(docker ps -a -q) #删除所有容器\ndocker rmi <image id> #删除image\n```\n\n# MNIS\n\n基本全是照着[这里](https://zhuanlan.zhihu.com/p/24110318)，一知半解地做\n\n训练时，报错`Unknown database backend`，需要在`Makefile.config`中，修改`USE_LMDB := 1`，然后重新`make clean`，`make all -j4`等等\n","source":"_posts/caffe-学习笔记.md","raw":"---\ntitle: caffe 学习笔记\ntypora-root-url: ../../source\ndate: 2018-01-11 01:46:30\ntags:\n  - caffe\n  - 学习笔记\n  - docker\ncategories: caffe\n---\n\n# 安装\n\n## mac\n\n直接看官网的安装有点抓不住要点，有一篇博客介绍得很详细，[点这里](http://akmetiuk.com/posts/2016-03-29-compiling-caffe.html)。是针对MAC下caffe及其python模块的安装，包括有哪些依赖、怎么编译，会遇到哪些坑，以及怎么解决坑等等。感谢作者！ \n\n## docker\n\ndocker就方便多了，需要先安装docker，centos照着[这一篇](https://www.liquidweb.com/kb/how-to-install-docker-on-centos-6/)\n\n```bash\nrpm -iUvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\nyum update -y\nyum -y install docker-io\nservice docker start\nchkconfig docker on\n```\n\n至此docker安装完毕，然后搜索caffe的镜像。\n\n```bash\ndocker search caffe\n```\n\n然后会搜到一堆镜像\n\n```\nNAME                                DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED\ntleyden5iwx/caffe-cpu-master                                                        48                   [OK]\nbvlc/caffe                          Official Caffe images                           42                   [OK]\nkaixhin/caffe                       Ubuntu Core 14.04 + Caffe.                      38                   [OK]\nkaixhin/cuda-caffe                  Ubuntu Core 14.04 + CUDA + Caffe.               38                   [OK]\n...\n```\n\n其中就有官方的docker，也不知道为什么，我就用了`kaixhin/caffe`\n\n```bash\ndocker pull kaixhin/caffe\n```\n\n这个名字太丑了，我们改为\n\n```bash\ndocker tag kaixhin/caffe caffe\n```\n\n然后\n\n```bash\ndocker run -i -t caffe /bin/bash\n```\n\n然后就你直接用现成的caffe了。`exit`退出后，需要保存容器，不然下次还是会打开全新的容器。\n\n```bash\ndocker ps -l\n# CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES\n# c8f1d7bcb4f2        caffe               \"/bin/bash\"         8 minutes ago       Exited (0) 7 minutes ago                       boring_turing\ndocker commit c8f caffe\n```\n\n还有其余一些docker命令\n\n```\ndocker stop $(docker ps -a -q) #停用所有容器\ndocker rm $(docker ps -a -q) #删除所有容器\ndocker rmi <image id> #删除image\n```\n\n# MNIS\n\n基本全是照着[这里](https://zhuanlan.zhihu.com/p/24110318)，一知半解地做\n\n训练时，报错`Unknown database backend`，需要在`Makefile.config`中，修改`USE_LMDB := 1`，然后重新`make clean`，`make all -j4`等等\n","slug":"caffe-学习笔记","published":1,"updated":"2023-11-05T11:42:33.903Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li00013s2kz30w96w6h","content":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><h2 id=\"mac\"><a href=\"#mac\" class=\"headerlink\" title=\"mac\"></a>mac</h2><p>直接看官网的安装有点抓不住要点，有一篇博客介绍得很详细，<a href=\"http://akmetiuk.com/posts/2016-03-29-compiling-caffe.html\">点这里</a>。是针对MAC下caffe及其python模块的安装，包括有哪些依赖、怎么编译，会遇到哪些坑，以及怎么解决坑等等。感谢作者！ </p>\n<h2 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h2><p>docker就方便多了，需要先安装docker，centos照着<a href=\"https://www.liquidweb.com/kb/how-to-install-docker-on-centos-6/\">这一篇</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -iUvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</span><br><span class=\"line\">yum update -y</span><br><span class=\"line\">yum -y install docker-io</span><br><span class=\"line\">service docker start</span><br><span class=\"line\">chkconfig docker on</span><br></pre></td></tr></table></figure>\n\n<p>至此docker安装完毕，然后搜索caffe的镜像。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search caffe</span><br></pre></td></tr></table></figure>\n\n<p>然后会搜到一堆镜像</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NAME                                DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class=\"line\">tleyden5iwx/caffe-cpu-master                                                        48                   [OK]</span><br><span class=\"line\">bvlc/caffe                          Official Caffe images                           42                   [OK]</span><br><span class=\"line\">kaixhin/caffe                       Ubuntu Core 14.04 + Caffe.                      38                   [OK]</span><br><span class=\"line\">kaixhin/cuda-caffe                  Ubuntu Core 14.04 + CUDA + Caffe.               38                   [OK]</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>其中就有官方的docker，也不知道为什么，我就用了<code>kaixhin/caffe</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull kaixhin/caffe</span><br></pre></td></tr></table></figure>\n\n<p>这个名字太丑了，我们改为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker tag kaixhin/caffe caffe</span><br></pre></td></tr></table></figure>\n\n<p>然后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t caffe /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>然后就你直接用现成的caffe了。<code>exit</code>退出后，需要保存容器，不然下次还是会打开全新的容器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -l</span><br><span class=\"line\"><span class=\"comment\"># CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span></span><br><span class=\"line\"><span class=\"comment\"># c8f1d7bcb4f2        caffe               &quot;/bin/bash&quot;         8 minutes ago       Exited (0) 7 minutes ago                       boring_turing</span></span><br><span class=\"line\">docker commit c8f caffe</span><br></pre></td></tr></table></figure>\n\n<p>还有其余一些docker命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop $(docker ps -a -q) #停用所有容器</span><br><span class=\"line\">docker rm $(docker ps -a -q) #删除所有容器</span><br><span class=\"line\">docker rmi &lt;image id&gt; #删除image</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"MNIS\"><a href=\"#MNIS\" class=\"headerlink\" title=\"MNIS\"></a>MNIS</h1><p>基本全是照着<a href=\"https://zhuanlan.zhihu.com/p/24110318\">这里</a>，一知半解地做</p>\n<p>训练时，报错<code>Unknown database backend</code>，需要在<code>Makefile.config</code>中，修改<code>USE_LMDB := 1</code>，然后重新<code>make clean</code>，<code>make all -j4</code>等等</p>\n","excerpt":"","more":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><h2 id=\"mac\"><a href=\"#mac\" class=\"headerlink\" title=\"mac\"></a>mac</h2><p>直接看官网的安装有点抓不住要点，有一篇博客介绍得很详细，<a href=\"http://akmetiuk.com/posts/2016-03-29-compiling-caffe.html\">点这里</a>。是针对MAC下caffe及其python模块的安装，包括有哪些依赖、怎么编译，会遇到哪些坑，以及怎么解决坑等等。感谢作者！ </p>\n<h2 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h2><p>docker就方便多了，需要先安装docker，centos照着<a href=\"https://www.liquidweb.com/kb/how-to-install-docker-on-centos-6/\">这一篇</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -iUvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</span><br><span class=\"line\">yum update -y</span><br><span class=\"line\">yum -y install docker-io</span><br><span class=\"line\">service docker start</span><br><span class=\"line\">chkconfig docker on</span><br></pre></td></tr></table></figure>\n\n<p>至此docker安装完毕，然后搜索caffe的镜像。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search caffe</span><br></pre></td></tr></table></figure>\n\n<p>然后会搜到一堆镜像</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NAME                                DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class=\"line\">tleyden5iwx/caffe-cpu-master                                                        48                   [OK]</span><br><span class=\"line\">bvlc/caffe                          Official Caffe images                           42                   [OK]</span><br><span class=\"line\">kaixhin/caffe                       Ubuntu Core 14.04 + Caffe.                      38                   [OK]</span><br><span class=\"line\">kaixhin/cuda-caffe                  Ubuntu Core 14.04 + CUDA + Caffe.               38                   [OK]</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>其中就有官方的docker，也不知道为什么，我就用了<code>kaixhin/caffe</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull kaixhin/caffe</span><br></pre></td></tr></table></figure>\n\n<p>这个名字太丑了，我们改为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker tag kaixhin/caffe caffe</span><br></pre></td></tr></table></figure>\n\n<p>然后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t caffe /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>然后就你直接用现成的caffe了。<code>exit</code>退出后，需要保存容器，不然下次还是会打开全新的容器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -l</span><br><span class=\"line\"><span class=\"comment\"># CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span></span><br><span class=\"line\"><span class=\"comment\"># c8f1d7bcb4f2        caffe               &quot;/bin/bash&quot;         8 minutes ago       Exited (0) 7 minutes ago                       boring_turing</span></span><br><span class=\"line\">docker commit c8f caffe</span><br></pre></td></tr></table></figure>\n\n<p>还有其余一些docker命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop $(docker ps -a -q) #停用所有容器</span><br><span class=\"line\">docker rm $(docker ps -a -q) #删除所有容器</span><br><span class=\"line\">docker rmi &lt;image id&gt; #删除image</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"MNIS\"><a href=\"#MNIS\" class=\"headerlink\" title=\"MNIS\"></a>MNIS</h1><p>基本全是照着<a href=\"https://zhuanlan.zhihu.com/p/24110318\">这里</a>，一知半解地做</p>\n<p>训练时，报错<code>Unknown database backend</code>，需要在<code>Makefile.config</code>中，修改<code>USE_LMDB := 1</code>，然后重新<code>make clean</code>，<code>make all -j4</code>等等</p>\n"},{"title":"caffe运行顺序","typora-root-url":"../../source","date":"2019-02-09T02:09:07.000Z","_content":"\n# blob\n- explict，显示构造函数，只对构造函数有用，用来抑制隐式转换\n```cpp\nclass String {\n    explicit String ( int n ); // 本意是预先分配n个字节给字符串，加上explicit，就抑制了String ( int n )的隐式转换，\n    String ( const char* p );  // 用C风格的字符串p作为初始化值\n}\n \nString s2 ( 10 );          //OK 分配10个字节的空字符串\nString s3 = String ( 10 ); //OK 分配10个字节的空字符串\n \nString s4 = 10;            //编译不通过，不允许隐式的转换\nString s5 = 'a';           //编译不通过，不允许隐式的转换\n\nclass A {\n    A(int a);   \n};   \nint Function(A a);   \n// 当调用Function(2)的时候，2会隐式转换为A类型\n    \nclass A {   \n    explicit   A(int   a);   \n};   \nint Function(A a);  \n// 这样，当调用Function(2)的时候，编译器会给出错误信息\n```\n\n- template\n```cpp\n// suppose I've declared\ntemplate <typename T> void foo(T& t);\n\ntemplate <> void foo<int>(int& t); \n// declares a specialization of the template, with potentially different body.\n\ntemplate void foo<int>(int& t); \n// causes an explicit instantiation of the template, but doesn't introduce a specialization. \n// It just forces the instantiation of the template for a specific type.\n```\n\n- iniline主要是将代码进行复制，扩充，会使代码总量上升，好处就是可以节省调用的开销，能提高执行效率\n\n- shared_ptr引用计数智能指，可以参考[这里](https://blog.csdn.net/Xiejingfa/article/details/50750037)\n\n# caffe.cpp\n\n- step1: 命令行下输入./build/tools/caffe train -solver xxx.prototxt 运行了程序的入口caffe.cpp main()\n- step2: caffe.cpp main()根据命令行输入的参数train 调用caffe.cpp train()\n- step3: caffe.cpp train()读取xxx.prototxt的参数 调用solver.cpp Solver()的构造函数创建Solver对象\n- step4: 创建Solver对象的时候需要调用solver.cpp Init()函数来初始化模型的网络\n- step5: solver.cpp Init()函数调用solver.cpp InitTrainNet()和InitTestNets()函数来分别初始化训练和测试网络。\n- step6: InitTrainNet() 通过xxx.prototxt 指定的xxxnet.prototxt读取net的参数，调用net.cpp Net()的构造函数，创建训练网络，\n- step7: net.cpp Net()调用net.cpp Init()函数，通过for循环来1)创建网络中每一个Layer对象，2)设置bottom和top，3）调用layer.cpp Setup()，Setup()里会调用具体layer的LayerSetUp()和Reshape()\n- step8: 调用InitTestNets()创建测试网络，与InitTrainNet(）类似\n- step9: 运行返回到caffe.cpp train()中，利用创建好的solver对象调用solver.cpp Solve()函数\n- step10: solver.cpp Solve() 调用 solver.cpp Step()函数，while循环迭代的次数，每次迭代 1）调用net.cpp ForwardBackward()来前向以及后向传播 2)solve.cpp ApplyUpdate()更新参数 3）每一定轮次运行solver.cpp TestAll()\n\n- caffe.cpp中的main()调用train()，train()中创建solver对象，solver对象初始化会调用solver.cpp中的Init()\n- Init()中，创建InitTrainNet()和InitTestNet()\n- 返回到caffe.cpp的train()中，调用Solver()来训练网络，具体过程在solver.cpp的Step()中实现\n\n- 以上抄自[这里](https://blog.csdn.net/BVL10101111/article/details/74787586 )\n\n# layer_factory\n\n- \\#表示：对应变量字符串化  \n- \\#\\#表示：把宏参数名与宏定义代码序列中的标识符连接在一起，形成一个新的标识符\n- 连接符#@：它将单字符标记符变换为单字符，即加单引号。例如`#define B(x) #@x`，则B(a)即'a'，B(1)即'1'\n```c++\n#include <cstdio>  \n#define trace(x, format) printf(#x \" = %\" #format \"\\n\", x)  \n#define trace2(i) trace(x##i, d) \n \nint main(int argc, char* argv[])\n{\n\tint i = 1;\n\tchar *s = \"three\";  \n\tfloat x = 2.0;\n \n\ttrace(i, d);    // i = 1   \n\ttrace(x, f);    // x = 2.000000\n\ttrace(s, s);    // s = three      \n\n\tint x1 = 1, x2 = 2;  \n\ttrace2(1);      // x1 = 1\n\ttrace2(2);      // x2 = 2\t\t\n \n\treturn 0;\n}\n```\n- 看[这里](https://www.jianshu.com/p/191f6cb3c102)吧，我太懒了。","source":"_posts/caffe运行顺序.md","raw":"---\ntitle: caffe运行顺序\ntypora-root-url: ../../source\ntags:\n  - caffe\ncategories: \n  - caffe\ndate: 2019-02-09 10:09:07\n---\n\n# blob\n- explict，显示构造函数，只对构造函数有用，用来抑制隐式转换\n```cpp\nclass String {\n    explicit String ( int n ); // 本意是预先分配n个字节给字符串，加上explicit，就抑制了String ( int n )的隐式转换，\n    String ( const char* p );  // 用C风格的字符串p作为初始化值\n}\n \nString s2 ( 10 );          //OK 分配10个字节的空字符串\nString s3 = String ( 10 ); //OK 分配10个字节的空字符串\n \nString s4 = 10;            //编译不通过，不允许隐式的转换\nString s5 = 'a';           //编译不通过，不允许隐式的转换\n\nclass A {\n    A(int a);   \n};   \nint Function(A a);   \n// 当调用Function(2)的时候，2会隐式转换为A类型\n    \nclass A {   \n    explicit   A(int   a);   \n};   \nint Function(A a);  \n// 这样，当调用Function(2)的时候，编译器会给出错误信息\n```\n\n- template\n```cpp\n// suppose I've declared\ntemplate <typename T> void foo(T& t);\n\ntemplate <> void foo<int>(int& t); \n// declares a specialization of the template, with potentially different body.\n\ntemplate void foo<int>(int& t); \n// causes an explicit instantiation of the template, but doesn't introduce a specialization. \n// It just forces the instantiation of the template for a specific type.\n```\n\n- iniline主要是将代码进行复制，扩充，会使代码总量上升，好处就是可以节省调用的开销，能提高执行效率\n\n- shared_ptr引用计数智能指，可以参考[这里](https://blog.csdn.net/Xiejingfa/article/details/50750037)\n\n# caffe.cpp\n\n- step1: 命令行下输入./build/tools/caffe train -solver xxx.prototxt 运行了程序的入口caffe.cpp main()\n- step2: caffe.cpp main()根据命令行输入的参数train 调用caffe.cpp train()\n- step3: caffe.cpp train()读取xxx.prototxt的参数 调用solver.cpp Solver()的构造函数创建Solver对象\n- step4: 创建Solver对象的时候需要调用solver.cpp Init()函数来初始化模型的网络\n- step5: solver.cpp Init()函数调用solver.cpp InitTrainNet()和InitTestNets()函数来分别初始化训练和测试网络。\n- step6: InitTrainNet() 通过xxx.prototxt 指定的xxxnet.prototxt读取net的参数，调用net.cpp Net()的构造函数，创建训练网络，\n- step7: net.cpp Net()调用net.cpp Init()函数，通过for循环来1)创建网络中每一个Layer对象，2)设置bottom和top，3）调用layer.cpp Setup()，Setup()里会调用具体layer的LayerSetUp()和Reshape()\n- step8: 调用InitTestNets()创建测试网络，与InitTrainNet(）类似\n- step9: 运行返回到caffe.cpp train()中，利用创建好的solver对象调用solver.cpp Solve()函数\n- step10: solver.cpp Solve() 调用 solver.cpp Step()函数，while循环迭代的次数，每次迭代 1）调用net.cpp ForwardBackward()来前向以及后向传播 2)solve.cpp ApplyUpdate()更新参数 3）每一定轮次运行solver.cpp TestAll()\n\n- caffe.cpp中的main()调用train()，train()中创建solver对象，solver对象初始化会调用solver.cpp中的Init()\n- Init()中，创建InitTrainNet()和InitTestNet()\n- 返回到caffe.cpp的train()中，调用Solver()来训练网络，具体过程在solver.cpp的Step()中实现\n\n- 以上抄自[这里](https://blog.csdn.net/BVL10101111/article/details/74787586 )\n\n# layer_factory\n\n- \\#表示：对应变量字符串化  \n- \\#\\#表示：把宏参数名与宏定义代码序列中的标识符连接在一起，形成一个新的标识符\n- 连接符#@：它将单字符标记符变换为单字符，即加单引号。例如`#define B(x) #@x`，则B(a)即'a'，B(1)即'1'\n```c++\n#include <cstdio>  \n#define trace(x, format) printf(#x \" = %\" #format \"\\n\", x)  \n#define trace2(i) trace(x##i, d) \n \nint main(int argc, char* argv[])\n{\n\tint i = 1;\n\tchar *s = \"three\";  \n\tfloat x = 2.0;\n \n\ttrace(i, d);    // i = 1   \n\ttrace(x, f);    // x = 2.000000\n\ttrace(s, s);    // s = three      \n\n\tint x1 = 1, x2 = 2;  \n\ttrace2(1);      // x1 = 1\n\ttrace2(2);      // x2 = 2\t\t\n \n\treturn 0;\n}\n```\n- 看[这里](https://www.jianshu.com/p/191f6cb3c102)吧，我太懒了。","slug":"caffe运行顺序","published":1,"updated":"2023-11-05T11:42:33.903Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li00016s2kz7s7b0rc7","content":"<h1 id=\"blob\"><a href=\"#blob\" class=\"headerlink\" title=\"blob\"></a>blob</h1><ul>\n<li><p>explict，显示构造函数，只对构造函数有用，用来抑制隐式转换</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">String</span> <span class=\"params\">( <span class=\"type\">int</span> n )</span></span>; <span class=\"comment\">// 本意是预先分配n个字节给字符串，加上explicit，就抑制了String ( int n )的隐式转换，</span></span><br><span class=\"line\">    <span class=\"built_in\">String</span> ( <span class=\"type\">const</span> <span class=\"type\">char</span>* p );  <span class=\"comment\">// 用C风格的字符串p作为初始化值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">s2</span> <span class=\"params\">( <span class=\"number\">10</span> )</span></span>;          <span class=\"comment\">//OK 分配10个字节的空字符串</span></span><br><span class=\"line\">String s3 = <span class=\"built_in\">String</span> ( <span class=\"number\">10</span> ); <span class=\"comment\">//OK 分配10个字节的空字符串</span></span><br><span class=\"line\"> </span><br><span class=\"line\">String s4 = <span class=\"number\">10</span>;            <span class=\"comment\">//编译不通过，不允许隐式的转换</span></span><br><span class=\"line\">String s5 = <span class=\"string\">&#x27;a&#x27;</span>;           <span class=\"comment\">//编译不通过，不允许隐式的转换</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">A</span>(<span class=\"type\">int</span> a);   </span><br><span class=\"line\">&#125;;   </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Function</span><span class=\"params\">(A a)</span></span>;   </span><br><span class=\"line\"><span class=\"comment\">// 当调用Function(2)的时候，2会隐式转换为A类型</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span>   <span class=\"title\">A</span><span class=\"params\">(<span class=\"type\">int</span>   a)</span></span>;   </span><br><span class=\"line\">&#125;;   </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Function</span><span class=\"params\">(A a)</span></span>;  </span><br><span class=\"line\"><span class=\"comment\">// 这样，当调用Function(2)的时候，编译器会给出错误信息</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>template</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// suppose I&#x27;ve declared</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">foo</span><span class=\"params\">(T&amp; t)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;&gt; <span class=\"type\">void</span> <span class=\"built_in\">foo</span>&lt;<span class=\"type\">int</span>&gt;(<span class=\"type\">int</span>&amp; t); </span><br><span class=\"line\"><span class=\"comment\">// declares a specialization of the template, with potentially different body.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> <span class=\"type\">void</span> <span class=\"built_in\">foo</span>&lt;<span class=\"type\">int</span>&gt;(<span class=\"type\">int</span>&amp; t); </span><br><span class=\"line\"><span class=\"comment\">// causes an explicit instantiation of the template, but doesn&#x27;t introduce a specialization. </span></span><br><span class=\"line\"><span class=\"comment\">// It just forces the instantiation of the template for a specific type.</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>iniline主要是将代码进行复制，扩充，会使代码总量上升，好处就是可以节省调用的开销，能提高执行效率</p>\n</li>\n<li><p>shared_ptr引用计数智能指，可以参考<a href=\"https://blog.csdn.net/Xiejingfa/article/details/50750037\">这里</a></p>\n</li>\n</ul>\n<h1 id=\"caffe-cpp\"><a href=\"#caffe-cpp\" class=\"headerlink\" title=\"caffe.cpp\"></a>caffe.cpp</h1><ul>\n<li><p>step1: 命令行下输入.&#x2F;build&#x2F;tools&#x2F;caffe train -solver xxx.prototxt 运行了程序的入口caffe.cpp main()</p>\n</li>\n<li><p>step2: caffe.cpp main()根据命令行输入的参数train 调用caffe.cpp train()</p>\n</li>\n<li><p>step3: caffe.cpp train()读取xxx.prototxt的参数 调用solver.cpp Solver()的构造函数创建Solver对象</p>\n</li>\n<li><p>step4: 创建Solver对象的时候需要调用solver.cpp Init()函数来初始化模型的网络</p>\n</li>\n<li><p>step5: solver.cpp Init()函数调用solver.cpp InitTrainNet()和InitTestNets()函数来分别初始化训练和测试网络。</p>\n</li>\n<li><p>step6: InitTrainNet() 通过xxx.prototxt 指定的xxxnet.prototxt读取net的参数，调用net.cpp Net()的构造函数，创建训练网络，</p>\n</li>\n<li><p>step7: net.cpp Net()调用net.cpp Init()函数，通过for循环来1)创建网络中每一个Layer对象，2)设置bottom和top，3）调用layer.cpp Setup()，Setup()里会调用具体layer的LayerSetUp()和Reshape()</p>\n</li>\n<li><p>step8: 调用InitTestNets()创建测试网络，与InitTrainNet(）类似</p>\n</li>\n<li><p>step9: 运行返回到caffe.cpp train()中，利用创建好的solver对象调用solver.cpp Solve()函数</p>\n</li>\n<li><p>step10: solver.cpp Solve() 调用 solver.cpp Step()函数，while循环迭代的次数，每次迭代 1）调用net.cpp ForwardBackward()来前向以及后向传播 2)solve.cpp ApplyUpdate()更新参数 3）每一定轮次运行solver.cpp TestAll()</p>\n</li>\n<li><p>caffe.cpp中的main()调用train()，train()中创建solver对象，solver对象初始化会调用solver.cpp中的Init()</p>\n</li>\n<li><p>Init()中，创建InitTrainNet()和InitTestNet()</p>\n</li>\n<li><p>返回到caffe.cpp的train()中，调用Solver()来训练网络，具体过程在solver.cpp的Step()中实现</p>\n</li>\n<li><p>以上抄自<a href=\"https://blog.csdn.net/BVL10101111/article/details/74787586\">这里</a></p>\n</li>\n</ul>\n<h1 id=\"layer-factory\"><a href=\"#layer-factory\" class=\"headerlink\" title=\"layer_factory\"></a>layer_factory</h1><ul>\n<li>#表示：对应变量字符串化  </li>\n<li>##表示：把宏参数名与宏定义代码序列中的标识符连接在一起，形成一个新的标识符</li>\n<li>连接符#@：它将单字符标记符变换为单字符，即加单引号。例如<code>#define B(x) #@x</code>，则B(a)即’a’，B(1)即’1’<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> trace(x, format) printf(#x <span class=\"string\">&quot; = %&quot;</span> #format <span class=\"string\">&quot;\\n&quot;</span>, x)  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> trace2(i) trace(x##i, d) </span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> *s = <span class=\"string\">&quot;three&quot;</span>;  </span><br><span class=\"line\">\t<span class=\"type\">float</span> x = <span class=\"number\">2.0</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"built_in\">trace</span>(i, d);    <span class=\"comment\">// i = 1   </span></span><br><span class=\"line\">\t<span class=\"built_in\">trace</span>(x, f);    <span class=\"comment\">// x = 2.000000</span></span><br><span class=\"line\">\t<span class=\"built_in\">trace</span>(s, s);    <span class=\"comment\">// s = three      </span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> x1 = <span class=\"number\">1</span>, x2 = <span class=\"number\">2</span>;  </span><br><span class=\"line\">\t<span class=\"built_in\">trace2</span>(<span class=\"number\">1</span>);      <span class=\"comment\">// x1 = 1</span></span><br><span class=\"line\">\t<span class=\"built_in\">trace2</span>(<span class=\"number\">2</span>);      <span class=\"comment\">// x2 = 2\t\t</span></span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>看<a href=\"https://www.jianshu.com/p/191f6cb3c102\">这里</a>吧，我太懒了。</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"blob\"><a href=\"#blob\" class=\"headerlink\" title=\"blob\"></a>blob</h1><ul>\n<li><p>explict，显示构造函数，只对构造函数有用，用来抑制隐式转换</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">String</span> <span class=\"params\">( <span class=\"type\">int</span> n )</span></span>; <span class=\"comment\">// 本意是预先分配n个字节给字符串，加上explicit，就抑制了String ( int n )的隐式转换，</span></span><br><span class=\"line\">    <span class=\"built_in\">String</span> ( <span class=\"type\">const</span> <span class=\"type\">char</span>* p );  <span class=\"comment\">// 用C风格的字符串p作为初始化值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">s2</span> <span class=\"params\">( <span class=\"number\">10</span> )</span></span>;          <span class=\"comment\">//OK 分配10个字节的空字符串</span></span><br><span class=\"line\">String s3 = <span class=\"built_in\">String</span> ( <span class=\"number\">10</span> ); <span class=\"comment\">//OK 分配10个字节的空字符串</span></span><br><span class=\"line\"> </span><br><span class=\"line\">String s4 = <span class=\"number\">10</span>;            <span class=\"comment\">//编译不通过，不允许隐式的转换</span></span><br><span class=\"line\">String s5 = <span class=\"string\">&#x27;a&#x27;</span>;           <span class=\"comment\">//编译不通过，不允许隐式的转换</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">A</span>(<span class=\"type\">int</span> a);   </span><br><span class=\"line\">&#125;;   </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Function</span><span class=\"params\">(A a)</span></span>;   </span><br><span class=\"line\"><span class=\"comment\">// 当调用Function(2)的时候，2会隐式转换为A类型</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span>   <span class=\"title\">A</span><span class=\"params\">(<span class=\"type\">int</span>   a)</span></span>;   </span><br><span class=\"line\">&#125;;   </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Function</span><span class=\"params\">(A a)</span></span>;  </span><br><span class=\"line\"><span class=\"comment\">// 这样，当调用Function(2)的时候，编译器会给出错误信息</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>template</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// suppose I&#x27;ve declared</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">foo</span><span class=\"params\">(T&amp; t)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;&gt; <span class=\"type\">void</span> <span class=\"built_in\">foo</span>&lt;<span class=\"type\">int</span>&gt;(<span class=\"type\">int</span>&amp; t); </span><br><span class=\"line\"><span class=\"comment\">// declares a specialization of the template, with potentially different body.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> <span class=\"type\">void</span> <span class=\"built_in\">foo</span>&lt;<span class=\"type\">int</span>&gt;(<span class=\"type\">int</span>&amp; t); </span><br><span class=\"line\"><span class=\"comment\">// causes an explicit instantiation of the template, but doesn&#x27;t introduce a specialization. </span></span><br><span class=\"line\"><span class=\"comment\">// It just forces the instantiation of the template for a specific type.</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>iniline主要是将代码进行复制，扩充，会使代码总量上升，好处就是可以节省调用的开销，能提高执行效率</p>\n</li>\n<li><p>shared_ptr引用计数智能指，可以参考<a href=\"https://blog.csdn.net/Xiejingfa/article/details/50750037\">这里</a></p>\n</li>\n</ul>\n<h1 id=\"caffe-cpp\"><a href=\"#caffe-cpp\" class=\"headerlink\" title=\"caffe.cpp\"></a>caffe.cpp</h1><ul>\n<li><p>step1: 命令行下输入.&#x2F;build&#x2F;tools&#x2F;caffe train -solver xxx.prototxt 运行了程序的入口caffe.cpp main()</p>\n</li>\n<li><p>step2: caffe.cpp main()根据命令行输入的参数train 调用caffe.cpp train()</p>\n</li>\n<li><p>step3: caffe.cpp train()读取xxx.prototxt的参数 调用solver.cpp Solver()的构造函数创建Solver对象</p>\n</li>\n<li><p>step4: 创建Solver对象的时候需要调用solver.cpp Init()函数来初始化模型的网络</p>\n</li>\n<li><p>step5: solver.cpp Init()函数调用solver.cpp InitTrainNet()和InitTestNets()函数来分别初始化训练和测试网络。</p>\n</li>\n<li><p>step6: InitTrainNet() 通过xxx.prototxt 指定的xxxnet.prototxt读取net的参数，调用net.cpp Net()的构造函数，创建训练网络，</p>\n</li>\n<li><p>step7: net.cpp Net()调用net.cpp Init()函数，通过for循环来1)创建网络中每一个Layer对象，2)设置bottom和top，3）调用layer.cpp Setup()，Setup()里会调用具体layer的LayerSetUp()和Reshape()</p>\n</li>\n<li><p>step8: 调用InitTestNets()创建测试网络，与InitTrainNet(）类似</p>\n</li>\n<li><p>step9: 运行返回到caffe.cpp train()中，利用创建好的solver对象调用solver.cpp Solve()函数</p>\n</li>\n<li><p>step10: solver.cpp Solve() 调用 solver.cpp Step()函数，while循环迭代的次数，每次迭代 1）调用net.cpp ForwardBackward()来前向以及后向传播 2)solve.cpp ApplyUpdate()更新参数 3）每一定轮次运行solver.cpp TestAll()</p>\n</li>\n<li><p>caffe.cpp中的main()调用train()，train()中创建solver对象，solver对象初始化会调用solver.cpp中的Init()</p>\n</li>\n<li><p>Init()中，创建InitTrainNet()和InitTestNet()</p>\n</li>\n<li><p>返回到caffe.cpp的train()中，调用Solver()来训练网络，具体过程在solver.cpp的Step()中实现</p>\n</li>\n<li><p>以上抄自<a href=\"https://blog.csdn.net/BVL10101111/article/details/74787586\">这里</a></p>\n</li>\n</ul>\n<h1 id=\"layer-factory\"><a href=\"#layer-factory\" class=\"headerlink\" title=\"layer_factory\"></a>layer_factory</h1><ul>\n<li>#表示：对应变量字符串化  </li>\n<li>##表示：把宏参数名与宏定义代码序列中的标识符连接在一起，形成一个新的标识符</li>\n<li>连接符#@：它将单字符标记符变换为单字符，即加单引号。例如<code>#define B(x) #@x</code>，则B(a)即’a’，B(1)即’1’<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> trace(x, format) printf(#x <span class=\"string\">&quot; = %&quot;</span> #format <span class=\"string\">&quot;\\n&quot;</span>, x)  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> trace2(i) trace(x##i, d) </span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> *s = <span class=\"string\">&quot;three&quot;</span>;  </span><br><span class=\"line\">\t<span class=\"type\">float</span> x = <span class=\"number\">2.0</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"built_in\">trace</span>(i, d);    <span class=\"comment\">// i = 1   </span></span><br><span class=\"line\">\t<span class=\"built_in\">trace</span>(x, f);    <span class=\"comment\">// x = 2.000000</span></span><br><span class=\"line\">\t<span class=\"built_in\">trace</span>(s, s);    <span class=\"comment\">// s = three      </span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> x1 = <span class=\"number\">1</span>, x2 = <span class=\"number\">2</span>;  </span><br><span class=\"line\">\t<span class=\"built_in\">trace2</span>(<span class=\"number\">1</span>);      <span class=\"comment\">// x1 = 1</span></span><br><span class=\"line\">\t<span class=\"built_in\">trace2</span>(<span class=\"number\">2</span>);      <span class=\"comment\">// x2 = 2\t\t</span></span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>看<a href=\"https://www.jianshu.com/p/191f6cb3c102\">这里</a>吧，我太懒了。</li>\n</ul>\n"},{"title":"conda 常用命令","typora-root-url":"../../source","date":"2018-11-19T10:52:16.000Z","_content":"\n- 创建虚拟环境\n\n```shell\nconda create -n your_env_name python=x.x anaconda\n```\n\n最后的anaconda可选，有的话，会安装很多包，numpy、sklearn等等\n- 激活\n\n```shell\nsource activate your_env_name\n```\n\n- 安装包\n\n```shell\nconda install -n your_env_name [package]\n```\n\n- 不激活\n\n```shell\nsource deactivate\n```\n\n- 已经有的虚拟环境\n\n```shell\nconda env list\n```\n\n- 删除虚拟环境\n\n```shell\nconda remove -n your_env_list -all\n```\n\n- 检查conda是否安装\n\n```shell\nconda -v\n```\n\n- 更新conda\n\n```shell\nconda update conda\n```\n","source":"_posts/conda-常用命令.md","raw":"---\ntitle: conda 常用命令\ntypora-root-url: ../../source\ntags:\n  - conda\n  - python\ncategories: python\ndate: 2018-11-19 18:52:16\n---\n\n- 创建虚拟环境\n\n```shell\nconda create -n your_env_name python=x.x anaconda\n```\n\n最后的anaconda可选，有的话，会安装很多包，numpy、sklearn等等\n- 激活\n\n```shell\nsource activate your_env_name\n```\n\n- 安装包\n\n```shell\nconda install -n your_env_name [package]\n```\n\n- 不激活\n\n```shell\nsource deactivate\n```\n\n- 已经有的虚拟环境\n\n```shell\nconda env list\n```\n\n- 删除虚拟环境\n\n```shell\nconda remove -n your_env_list -all\n```\n\n- 检查conda是否安装\n\n```shell\nconda -v\n```\n\n- 更新conda\n\n```shell\nconda update conda\n```\n","slug":"conda-常用命令","published":1,"updated":"2023-11-05T11:42:33.903Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li1001as2kzgiak71t3","content":"<ul>\n<li>创建虚拟环境</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n your_env_name python=x.x anaconda</span><br></pre></td></tr></table></figure>\n\n<p>最后的anaconda可选，有的话，会安装很多包，numpy、sklearn等等</p>\n<ul>\n<li>激活</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source activate your_env_name</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装包</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install -n your_env_name [package]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>不激活</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source deactivate</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>已经有的虚拟环境</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda env list</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除虚拟环境</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda remove -n your_env_list -all</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>检查conda是否安装</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda -v</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>更新conda</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda update conda</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<ul>\n<li>创建虚拟环境</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n your_env_name python=x.x anaconda</span><br></pre></td></tr></table></figure>\n\n<p>最后的anaconda可选，有的话，会安装很多包，numpy、sklearn等等</p>\n<ul>\n<li>激活</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source activate your_env_name</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装包</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install -n your_env_name [package]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>不激活</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source deactivate</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>已经有的虚拟环境</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda env list</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除虚拟环境</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda remove -n your_env_list -all</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>检查conda是否安装</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda -v</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>更新conda</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda update conda</span><br></pre></td></tr></table></figure>\n"},{"title":"css 浮动塌陷","typora-root-url":"../../source","date":"2018-01-30T06:25:26.000Z","_content":"\n[来自这里](http://blog.csdn.net/chris_z_0622/article/details/65442975)\ncss 子元素设置为float之后，脱离文件流，导致父元素撑不起来，解决办法\n1. 父元素也设置为float（不推荐，会影响父元素后面都元素）\n2. 父元素添加 overflow:hidden（诡异的css）\n3. 建立一个空的子div `<div style=\"clear: both\"></div>`\n4. 通过伪类:after清除浮动，具体如下\n```html\n<div class=\"father\">\n    <div class=\"son\">子元素</div>\n</div>\n```\n```\n.son {\n    float: left;\n}\n.father:after {\n    content: \"\";\n    height: 0;\n    width: 0;\n    visibility: hidden;\n    clear: both;\n    display: block;\n}\n```\n","source":"_posts/css-浮动塌陷.md","raw":"---\ntitle: css 浮动塌陷\ntypora-root-url: ../../source\ndate: 2018-01-30 14:25:26\ncategories: flask网站总结\n---\n\n[来自这里](http://blog.csdn.net/chris_z_0622/article/details/65442975)\ncss 子元素设置为float之后，脱离文件流，导致父元素撑不起来，解决办法\n1. 父元素也设置为float（不推荐，会影响父元素后面都元素）\n2. 父元素添加 overflow:hidden（诡异的css）\n3. 建立一个空的子div `<div style=\"clear: both\"></div>`\n4. 通过伪类:after清除浮动，具体如下\n```html\n<div class=\"father\">\n    <div class=\"son\">子元素</div>\n</div>\n```\n```\n.son {\n    float: left;\n}\n.father:after {\n    content: \"\";\n    height: 0;\n    width: 0;\n    visibility: hidden;\n    clear: both;\n    display: block;\n}\n```\n","slug":"css-浮动塌陷","published":1,"updated":"2023-11-05T11:42:33.903Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li1001ds2kza2de4t9z","content":"<p><a href=\"http://blog.csdn.net/chris_z_0622/article/details/65442975\">来自这里</a><br>css 子元素设置为float之后，脱离文件流，导致父元素撑不起来，解决办法</p>\n<ol>\n<li>父元素也设置为float（不推荐，会影响父元素后面都元素）</li>\n<li>父元素添加 overflow:hidden（诡异的css）</li>\n<li>建立一个空的子div <code>&lt;div style=&quot;clear: both&quot;&gt;&lt;/div&gt;</code></li>\n<li>通过伪类:after清除浮动，具体如下<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;father&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;son&quot;</span>&gt;</span>子元素<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.son &#123;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.father:after &#123;</span><br><span class=\"line\">    content: &quot;&quot;;</span><br><span class=\"line\">    height: 0;</span><br><span class=\"line\">    width: 0;</span><br><span class=\"line\">    visibility: hidden;</span><br><span class=\"line\">    clear: both;</span><br><span class=\"line\">    display: block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","excerpt":"","more":"<p><a href=\"http://blog.csdn.net/chris_z_0622/article/details/65442975\">来自这里</a><br>css 子元素设置为float之后，脱离文件流，导致父元素撑不起来，解决办法</p>\n<ol>\n<li>父元素也设置为float（不推荐，会影响父元素后面都元素）</li>\n<li>父元素添加 overflow:hidden（诡异的css）</li>\n<li>建立一个空的子div <code>&lt;div style=&quot;clear: both&quot;&gt;&lt;/div&gt;</code></li>\n<li>通过伪类:after清除浮动，具体如下<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;father&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;son&quot;</span>&gt;</span>子元素<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.son &#123;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.father:after &#123;</span><br><span class=\"line\">    content: &quot;&quot;;</span><br><span class=\"line\">    height: 0;</span><br><span class=\"line\">    width: 0;</span><br><span class=\"line\">    visibility: hidden;</span><br><span class=\"line\">    clear: both;</span><br><span class=\"line\">    display: block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"c复习笔记","typora-root-url":"../../source","date":"2018-03-11T14:09:11.000Z","_content":"\n- cin 带空格的字符串时，需要这样`cin.getline(s, 80)`，s是char数组\n- 或者也可以这样`getline(cin, str)`，原型为`istream& getline (istream& is, string& str); `，C++对每种流都定义了一个getline函数\n- 在gcc编译器中，对标准库进行了扩展，加入了一个getline函数。会自动malloc, realloc，所以用的话，需要自己手动free，好像没啥人用，参考[这里](https://www.cnblogs.com/xkfz007/archive/2012/08/01/2618366.html)\n\n- cout 控制输出精度 `cout << fixed << setprecision(2) << f`，`#include <iomanip>`\n- cout 控制输出格式`cout << setfill('0') << setw(4) << a[i][j]`\n- [更多](https://blog.csdn.net/yockie/article/details/9104899)\n\n- cin cout 重定向\n```cpp\nfreopen(\"foo.txt\",\"w\",stdout); \nfreopen(“bar.txt”,”r”,stdin);\n```\n\n- lambda表达式\n![](/images/10535321.jpg \"lambda!\") \n\n- 使用lambda对vector进行排序\n```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cstdio>\n\nusing namespace std;\n\nint main()\n{\n   int n;\n   double th;\n   cin >> n >> th;\n   vector<pair<string, double>> res;  \n   while(n--){\n        string name;\n        double score;\n        cin >> name >> score;\n        if(score > th){\n            res.push_back(pair<string, double>(name, score));\n        }\n    }\n    sort(res.begin(), res.end(), [](pair<string, double>& a, pair<string, double>& b) {return a.second > b.second;});\n    for(auto i: res){\n        printf(\"%s %.1f\\n\", i.first.c_str(), i.second);\n    }\n   return 0;\n}\n```\n\n- erase删除vector元素\n```cpp\nfor(it=iVec.begin();it!=iVec.end();){\n　　if(*it==4 || *it==5)\n　　　　it=iVec.erase(it);\n　　else\n　　　　it++;\n}\n```\n\n- `Sample a(0)`, `Sample a = 0`, 都是调用构造函数\n- `Sample a(9); a = 8` 调用两次构造函数，\n- `Sample b = a `, `Sample b(a)` 拷贝构造函数\n- 类型转换构造函数，编译系统会生成一个临时变量\n\n\n- C++编译器遵循以下优先顺序:\n> 先找参数完全匹配的普通函数(非由模板实例化而得的函数)，再找参数完全匹配的模板函数，再找实参经过自动类型转换后能够匹配的普通函数，上面的都找不到, 则报错。\n\n- 优雅的内存对齐方法\n```c\nunsigned int calc_align(unsigned int n, unsigned align)\n{\n    return ((n + align - 1) & (~(align - 1)));\n}\n```\n\n- __declspec(dllexport)是导出声明，说明这个函数要从DLL中导出给别人用。\n- __declspec(dllimport)是说这个函数是从别处导入的，不适用也能正常编译代码。\n\n- ANSI C是美国国家标准局，为C语言制定的一套国际标准语法，避免各个厂家的C语言不一致\n- include的文件可以不写到gcc里面\n\n```\n#include \"max.c\"\ngcc main.c\n```\n\n```\ngcc -c max.c -o max.o\ngcc max.o main.c\n```","source":"_posts/c复习笔记.md","raw":"---\ntitle: c复习笔记\ntypora-root-url: ../../source\ndate: 2018-03-11 22:09:11\ntags:\n  - cin/cout\n  - lambda\n  - 构造函数\ncategories: cpp\n---\n\n- cin 带空格的字符串时，需要这样`cin.getline(s, 80)`，s是char数组\n- 或者也可以这样`getline(cin, str)`，原型为`istream& getline (istream& is, string& str); `，C++对每种流都定义了一个getline函数\n- 在gcc编译器中，对标准库进行了扩展，加入了一个getline函数。会自动malloc, realloc，所以用的话，需要自己手动free，好像没啥人用，参考[这里](https://www.cnblogs.com/xkfz007/archive/2012/08/01/2618366.html)\n\n- cout 控制输出精度 `cout << fixed << setprecision(2) << f`，`#include <iomanip>`\n- cout 控制输出格式`cout << setfill('0') << setw(4) << a[i][j]`\n- [更多](https://blog.csdn.net/yockie/article/details/9104899)\n\n- cin cout 重定向\n```cpp\nfreopen(\"foo.txt\",\"w\",stdout); \nfreopen(“bar.txt”,”r”,stdin);\n```\n\n- lambda表达式\n![](/images/10535321.jpg \"lambda!\") \n\n- 使用lambda对vector进行排序\n```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cstdio>\n\nusing namespace std;\n\nint main()\n{\n   int n;\n   double th;\n   cin >> n >> th;\n   vector<pair<string, double>> res;  \n   while(n--){\n        string name;\n        double score;\n        cin >> name >> score;\n        if(score > th){\n            res.push_back(pair<string, double>(name, score));\n        }\n    }\n    sort(res.begin(), res.end(), [](pair<string, double>& a, pair<string, double>& b) {return a.second > b.second;});\n    for(auto i: res){\n        printf(\"%s %.1f\\n\", i.first.c_str(), i.second);\n    }\n   return 0;\n}\n```\n\n- erase删除vector元素\n```cpp\nfor(it=iVec.begin();it!=iVec.end();){\n　　if(*it==4 || *it==5)\n　　　　it=iVec.erase(it);\n　　else\n　　　　it++;\n}\n```\n\n- `Sample a(0)`, `Sample a = 0`, 都是调用构造函数\n- `Sample a(9); a = 8` 调用两次构造函数，\n- `Sample b = a `, `Sample b(a)` 拷贝构造函数\n- 类型转换构造函数，编译系统会生成一个临时变量\n\n\n- C++编译器遵循以下优先顺序:\n> 先找参数完全匹配的普通函数(非由模板实例化而得的函数)，再找参数完全匹配的模板函数，再找实参经过自动类型转换后能够匹配的普通函数，上面的都找不到, 则报错。\n\n- 优雅的内存对齐方法\n```c\nunsigned int calc_align(unsigned int n, unsigned align)\n{\n    return ((n + align - 1) & (~(align - 1)));\n}\n```\n\n- __declspec(dllexport)是导出声明，说明这个函数要从DLL中导出给别人用。\n- __declspec(dllimport)是说这个函数是从别处导入的，不适用也能正常编译代码。\n\n- ANSI C是美国国家标准局，为C语言制定的一套国际标准语法，避免各个厂家的C语言不一致\n- include的文件可以不写到gcc里面\n\n```\n#include \"max.c\"\ngcc main.c\n```\n\n```\ngcc -c max.c -o max.o\ngcc max.o main.c\n```","slug":"c复习笔记","published":1,"updated":"2023-11-05T11:42:33.904Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li1001gs2kz443j88hq","content":"<ul>\n<li><p>cin 带空格的字符串时，需要这样<code>cin.getline(s, 80)</code>，s是char数组</p>\n</li>\n<li><p>或者也可以这样<code>getline(cin, str)</code>，原型为<code>istream&amp; getline (istream&amp; is, string&amp; str); </code>，C++对每种流都定义了一个getline函数</p>\n</li>\n<li><p>在gcc编译器中，对标准库进行了扩展，加入了一个getline函数。会自动malloc, realloc，所以用的话，需要自己手动free，好像没啥人用，参考<a href=\"https://www.cnblogs.com/xkfz007/archive/2012/08/01/2618366.html\">这里</a></p>\n</li>\n<li><p>cout 控制输出精度 <code>cout &lt;&lt; fixed &lt;&lt; setprecision(2) &lt;&lt; f</code>，<code>#include &lt;iomanip&gt;</code></p>\n</li>\n<li><p>cout 控制输出格式<code>cout &lt;&lt; setfill(&#39;0&#39;) &lt;&lt; setw(4) &lt;&lt; a[i][j]</code></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/yockie/article/details/9104899\">更多</a></p>\n</li>\n<li><p>cin cout 重定向</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;foo.txt&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,stdout); </span><br><span class=\"line\"><span class=\"built_in\">freopen</span>(“bar.txt”,”r”,stdin);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>lambda表达式<br><img src=\"/images/10535321.jpg\" title=\"lambda!\"> </p>\n</li>\n<li><p>使用lambda对vector进行排序</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"type\">int</span> n;</span><br><span class=\"line\">   <span class=\"type\">double</span> th;</span><br><span class=\"line\">   cin &gt;&gt; n &gt;&gt; th;</span><br><span class=\"line\">   vector&lt;pair&lt;string, <span class=\"type\">double</span>&gt;&gt; res;  </span><br><span class=\"line\">   <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        string name;</span><br><span class=\"line\">        <span class=\"type\">double</span> score;</span><br><span class=\"line\">        cin &gt;&gt; name &gt;&gt; score;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(score &gt; th)&#123;</span><br><span class=\"line\">            res.<span class=\"built_in\">push_back</span>(<span class=\"built_in\">pair</span>&lt;string, <span class=\"type\">double</span>&gt;(name, score));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(res.<span class=\"built_in\">begin</span>(), res.<span class=\"built_in\">end</span>(), [](pair&lt;string, <span class=\"type\">double</span>&gt;&amp; a, pair&lt;string, <span class=\"type\">double</span>&gt;&amp; b) &#123;<span class=\"keyword\">return</span> a.second &gt; b.second;&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i: res)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s %.1f\\n&quot;</span>, i.first.<span class=\"built_in\">c_str</span>(), i.second);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>erase删除vector元素</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(it=iVec.<span class=\"built_in\">begin</span>();it!=iVec.<span class=\"built_in\">end</span>();)&#123;</span><br><span class=\"line\">　　<span class=\"keyword\">if</span>(*it==<span class=\"number\">4</span> || *it==<span class=\"number\">5</span>)</span><br><span class=\"line\">　　　　it=iVec.<span class=\"built_in\">erase</span>(it);</span><br><span class=\"line\">　　<span class=\"keyword\">else</span></span><br><span class=\"line\">　　　　it++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>Sample a(0)</code>, <code>Sample a = 0</code>, 都是调用构造函数</p>\n</li>\n<li><p><code>Sample a(9); a = 8</code> 调用两次构造函数，</p>\n</li>\n<li><p><code>Sample b = a </code>, <code>Sample b(a)</code> 拷贝构造函数</p>\n</li>\n<li><p>类型转换构造函数，编译系统会生成一个临时变量</p>\n</li>\n<li><p>C++编译器遵循以下优先顺序:</p>\n<blockquote>\n<p>先找参数完全匹配的普通函数(非由模板实例化而得的函数)，再找参数完全匹配的模板函数，再找实参经过自动类型转换后能够匹配的普通函数，上面的都找不到, 则报错。</p>\n</blockquote>\n</li>\n<li><p>优雅的内存对齐方法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">calc_align</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">int</span> n, <span class=\"type\">unsigned</span> align)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((n + align - <span class=\"number\">1</span>) &amp; (~(align - <span class=\"number\">1</span>)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>__declspec(dllexport)是导出声明，说明这个函数要从DLL中导出给别人用。</p>\n</li>\n<li><p>__declspec(dllimport)是说这个函数是从别处导入的，不适用也能正常编译代码。</p>\n</li>\n<li><p>ANSI C是美国国家标准局，为C语言制定的一套国际标准语法，避免各个厂家的C语言不一致</p>\n</li>\n<li><p>include的文件可以不写到gcc里面</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;max.c&quot;</span><br><span class=\"line\">gcc main.c</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -c max.c -o max.o</span><br><span class=\"line\">gcc max.o main.c</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<ul>\n<li><p>cin 带空格的字符串时，需要这样<code>cin.getline(s, 80)</code>，s是char数组</p>\n</li>\n<li><p>或者也可以这样<code>getline(cin, str)</code>，原型为<code>istream&amp; getline (istream&amp; is, string&amp; str); </code>，C++对每种流都定义了一个getline函数</p>\n</li>\n<li><p>在gcc编译器中，对标准库进行了扩展，加入了一个getline函数。会自动malloc, realloc，所以用的话，需要自己手动free，好像没啥人用，参考<a href=\"https://www.cnblogs.com/xkfz007/archive/2012/08/01/2618366.html\">这里</a></p>\n</li>\n<li><p>cout 控制输出精度 <code>cout &lt;&lt; fixed &lt;&lt; setprecision(2) &lt;&lt; f</code>，<code>#include &lt;iomanip&gt;</code></p>\n</li>\n<li><p>cout 控制输出格式<code>cout &lt;&lt; setfill(&#39;0&#39;) &lt;&lt; setw(4) &lt;&lt; a[i][j]</code></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/yockie/article/details/9104899\">更多</a></p>\n</li>\n<li><p>cin cout 重定向</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;foo.txt&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,stdout); </span><br><span class=\"line\"><span class=\"built_in\">freopen</span>(“bar.txt”,”r”,stdin);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>lambda表达式<br><img src=\"/images/10535321.jpg\" title=\"lambda!\"> </p>\n</li>\n<li><p>使用lambda对vector进行排序</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"type\">int</span> n;</span><br><span class=\"line\">   <span class=\"type\">double</span> th;</span><br><span class=\"line\">   cin &gt;&gt; n &gt;&gt; th;</span><br><span class=\"line\">   vector&lt;pair&lt;string, <span class=\"type\">double</span>&gt;&gt; res;  </span><br><span class=\"line\">   <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        string name;</span><br><span class=\"line\">        <span class=\"type\">double</span> score;</span><br><span class=\"line\">        cin &gt;&gt; name &gt;&gt; score;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(score &gt; th)&#123;</span><br><span class=\"line\">            res.<span class=\"built_in\">push_back</span>(<span class=\"built_in\">pair</span>&lt;string, <span class=\"type\">double</span>&gt;(name, score));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(res.<span class=\"built_in\">begin</span>(), res.<span class=\"built_in\">end</span>(), [](pair&lt;string, <span class=\"type\">double</span>&gt;&amp; a, pair&lt;string, <span class=\"type\">double</span>&gt;&amp; b) &#123;<span class=\"keyword\">return</span> a.second &gt; b.second;&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i: res)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s %.1f\\n&quot;</span>, i.first.<span class=\"built_in\">c_str</span>(), i.second);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>erase删除vector元素</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(it=iVec.<span class=\"built_in\">begin</span>();it!=iVec.<span class=\"built_in\">end</span>();)&#123;</span><br><span class=\"line\">　　<span class=\"keyword\">if</span>(*it==<span class=\"number\">4</span> || *it==<span class=\"number\">5</span>)</span><br><span class=\"line\">　　　　it=iVec.<span class=\"built_in\">erase</span>(it);</span><br><span class=\"line\">　　<span class=\"keyword\">else</span></span><br><span class=\"line\">　　　　it++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>Sample a(0)</code>, <code>Sample a = 0</code>, 都是调用构造函数</p>\n</li>\n<li><p><code>Sample a(9); a = 8</code> 调用两次构造函数，</p>\n</li>\n<li><p><code>Sample b = a </code>, <code>Sample b(a)</code> 拷贝构造函数</p>\n</li>\n<li><p>类型转换构造函数，编译系统会生成一个临时变量</p>\n</li>\n<li><p>C++编译器遵循以下优先顺序:</p>\n<blockquote>\n<p>先找参数完全匹配的普通函数(非由模板实例化而得的函数)，再找参数完全匹配的模板函数，再找实参经过自动类型转换后能够匹配的普通函数，上面的都找不到, 则报错。</p>\n</blockquote>\n</li>\n<li><p>优雅的内存对齐方法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">calc_align</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">int</span> n, <span class=\"type\">unsigned</span> align)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((n + align - <span class=\"number\">1</span>) &amp; (~(align - <span class=\"number\">1</span>)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>__declspec(dllexport)是导出声明，说明这个函数要从DLL中导出给别人用。</p>\n</li>\n<li><p>__declspec(dllimport)是说这个函数是从别处导入的，不适用也能正常编译代码。</p>\n</li>\n<li><p>ANSI C是美国国家标准局，为C语言制定的一套国际标准语法，避免各个厂家的C语言不一致</p>\n</li>\n<li><p>include的文件可以不写到gcc里面</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;max.c&quot;</span><br><span class=\"line\">gcc main.c</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -c max.c -o max.o</span><br><span class=\"line\">gcc max.o main.c</span><br></pre></td></tr></table></figure>"},{"title":"deeplab","typora-root-url":"../../source","date":"2018-06-19T13:13:20.000Z","_content":"\n# v1\n\n## Atrous algorithm\n\n- deeplab和FCN一样，也是在VGG上finetune\n- 首先要解决的问题是，如何增大最后输出的score map呢？deeplab把VGG最后的pool4和pool5的stride从2变成了1，整个VGG的stride从32变成8\n- 但是修改了stide之后，后面的conv层感受野就不一样大了，不能finetune了，所以这里引入了非常优雅的atrous algorithm\n  - feature map的感受野的计算公式为$RF_{i}=(RF_{i+1}-1)*stride+kernel$\n  - 所以在stride减小的情况下想办法增大kernel，即在kernel里面增加hole，kernel变大\n\n![deeplab](/images/70081567.jpg)\n\n## Fully connected CRF\n\n- CRF简单来说，能做到的就是在决定一个位置的像素值时（在这个paper里是label），会考虑周围邻居的像素值（label），这样能抹除一些噪音。但是通过CNN得到的feature map在一定程度上已经足够平滑了，所以short range的CRF没什么意义。于是作者采用了fully connected CRF，这样考虑的就是全局的信息了。\n- 随机变量$X_i$是像素$i$的标签，变量$X$由$X_1, X_2, ..., X_N$组成随机向量，$N$就是图像中的像素个数。\n- 在全连接CRF中，标签$x$的能量为\n\n$$\nE(x)=\\sum _i\\theta_i(x_i)+\\sum _{ij}\\theta_{ij}(x_i,x_j)\n$$\n\n- $\\theta_i(x_i)$是一元能量，表示像素$i$被分割成$x_i$的能量，二元能量$\\theta_{ij}(x_i,x_j)$像素点$i$、$j$同时分割成$x_i$、$x_j$的能量。\n- 一元能量使用FCN的输出\n\n$$\n\\theta_i(x_i) = -logP(x_i)\n$$\n\n- 二元能量表达式为\n\n$$\n\\theta_{ij}(x_i, x_j)=\\mu(x_i, x_j)[\\omega_1exp(-\\frac{\\left \\|p_i-p_j  \\right \\|^2} {2\\sigma_\\alpha^2}-\\frac{\\left \\|I_i-I_j  \\right \\|^2}{2\\sigma_\\beta^2})+\\omega_2exp(-\\frac{\\left \\|p_i-p_j  \\right \\|^2} {2\\sigma_\\gamma^2})]\n$$\n\n- 主要参考[这里](https://blog.csdn.net/junparadox/article/details/52610744)\n\n# v2\n\n- v2在v1的基础上增加了多感受野\n\n![deeplabv2](/images/4478311.jpg)\n\n- 参考[这里](https://blog.csdn.net/ming0808sun/article/details/78843471)\n","source":"_posts/deeplab.md","raw":"---\ntitle: deeplab\ntypora-root-url: ../../source\ndate: 2018-06-19 21:13:20\ncategories: caffe\n---\n\n# v1\n\n## Atrous algorithm\n\n- deeplab和FCN一样，也是在VGG上finetune\n- 首先要解决的问题是，如何增大最后输出的score map呢？deeplab把VGG最后的pool4和pool5的stride从2变成了1，整个VGG的stride从32变成8\n- 但是修改了stide之后，后面的conv层感受野就不一样大了，不能finetune了，所以这里引入了非常优雅的atrous algorithm\n  - feature map的感受野的计算公式为$RF_{i}=(RF_{i+1}-1)*stride+kernel$\n  - 所以在stride减小的情况下想办法增大kernel，即在kernel里面增加hole，kernel变大\n\n![deeplab](/images/70081567.jpg)\n\n## Fully connected CRF\n\n- CRF简单来说，能做到的就是在决定一个位置的像素值时（在这个paper里是label），会考虑周围邻居的像素值（label），这样能抹除一些噪音。但是通过CNN得到的feature map在一定程度上已经足够平滑了，所以short range的CRF没什么意义。于是作者采用了fully connected CRF，这样考虑的就是全局的信息了。\n- 随机变量$X_i$是像素$i$的标签，变量$X$由$X_1, X_2, ..., X_N$组成随机向量，$N$就是图像中的像素个数。\n- 在全连接CRF中，标签$x$的能量为\n\n$$\nE(x)=\\sum _i\\theta_i(x_i)+\\sum _{ij}\\theta_{ij}(x_i,x_j)\n$$\n\n- $\\theta_i(x_i)$是一元能量，表示像素$i$被分割成$x_i$的能量，二元能量$\\theta_{ij}(x_i,x_j)$像素点$i$、$j$同时分割成$x_i$、$x_j$的能量。\n- 一元能量使用FCN的输出\n\n$$\n\\theta_i(x_i) = -logP(x_i)\n$$\n\n- 二元能量表达式为\n\n$$\n\\theta_{ij}(x_i, x_j)=\\mu(x_i, x_j)[\\omega_1exp(-\\frac{\\left \\|p_i-p_j  \\right \\|^2} {2\\sigma_\\alpha^2}-\\frac{\\left \\|I_i-I_j  \\right \\|^2}{2\\sigma_\\beta^2})+\\omega_2exp(-\\frac{\\left \\|p_i-p_j  \\right \\|^2} {2\\sigma_\\gamma^2})]\n$$\n\n- 主要参考[这里](https://blog.csdn.net/junparadox/article/details/52610744)\n\n# v2\n\n- v2在v1的基础上增加了多感受野\n\n![deeplabv2](/images/4478311.jpg)\n\n- 参考[这里](https://blog.csdn.net/ming0808sun/article/details/78843471)\n","slug":"deeplab","published":1,"updated":"2023-11-05T11:42:33.904Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li2001js2kz9jayb2a1","content":"<h1 id=\"v1\"><a href=\"#v1\" class=\"headerlink\" title=\"v1\"></a>v1</h1><h2 id=\"Atrous-algorithm\"><a href=\"#Atrous-algorithm\" class=\"headerlink\" title=\"Atrous algorithm\"></a>Atrous algorithm</h2><ul>\n<li>deeplab和FCN一样，也是在VGG上finetune</li>\n<li>首先要解决的问题是，如何增大最后输出的score map呢？deeplab把VGG最后的pool4和pool5的stride从2变成了1，整个VGG的stride从32变成8</li>\n<li>但是修改了stide之后，后面的conv层感受野就不一样大了，不能finetune了，所以这里引入了非常优雅的atrous algorithm<ul>\n<li>feature map的感受野的计算公式为$RF_{i}&#x3D;(RF_{i+1}-1)*stride+kernel$</li>\n<li>所以在stride减小的情况下想办法增大kernel，即在kernel里面增加hole，kernel变大</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/70081567.jpg\" alt=\"deeplab\"></p>\n<h2 id=\"Fully-connected-CRF\"><a href=\"#Fully-connected-CRF\" class=\"headerlink\" title=\"Fully connected CRF\"></a>Fully connected CRF</h2><ul>\n<li>CRF简单来说，能做到的就是在决定一个位置的像素值时（在这个paper里是label），会考虑周围邻居的像素值（label），这样能抹除一些噪音。但是通过CNN得到的feature map在一定程度上已经足够平滑了，所以short range的CRF没什么意义。于是作者采用了fully connected CRF，这样考虑的就是全局的信息了。</li>\n<li>随机变量$X_i$是像素$i$的标签，变量$X$由$X_1, X_2, …, X_N$组成随机向量，$N$就是图像中的像素个数。</li>\n<li>在全连接CRF中，标签$x$的能量为</li>\n</ul>\n<p>$$<br>E(x)&#x3D;\\sum _i\\theta_i(x_i)+\\sum <em>{ij}\\theta</em>{ij}(x_i,x_j)<br>$$</p>\n<ul>\n<li>$\\theta_i(x_i)$是一元能量，表示像素$i$被分割成$x_i$的能量，二元能量$\\theta_{ij}(x_i,x_j)$像素点$i$、$j$同时分割成$x_i$、$x_j$的能量。</li>\n<li>一元能量使用FCN的输出</li>\n</ul>\n<p>$$<br>\\theta_i(x_i) &#x3D; -logP(x_i)<br>$$</p>\n<ul>\n<li>二元能量表达式为</li>\n</ul>\n<p>$$<br>\\theta_{ij}(x_i, x_j)&#x3D;\\mu(x_i, x_j)[\\omega_1exp(-\\frac{\\left |p_i-p_j  \\right |^2} {2\\sigma_\\alpha^2}-\\frac{\\left |I_i-I_j  \\right |^2}{2\\sigma_\\beta^2})+\\omega_2exp(-\\frac{\\left |p_i-p_j  \\right |^2} {2\\sigma_\\gamma^2})]<br>$$</p>\n<ul>\n<li>主要参考<a href=\"https://blog.csdn.net/junparadox/article/details/52610744\">这里</a></li>\n</ul>\n<h1 id=\"v2\"><a href=\"#v2\" class=\"headerlink\" title=\"v2\"></a>v2</h1><ul>\n<li>v2在v1的基础上增加了多感受野</li>\n</ul>\n<p><img src=\"/images/4478311.jpg\" alt=\"deeplabv2\"></p>\n<ul>\n<li>参考<a href=\"https://blog.csdn.net/ming0808sun/article/details/78843471\">这里</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"v1\"><a href=\"#v1\" class=\"headerlink\" title=\"v1\"></a>v1</h1><h2 id=\"Atrous-algorithm\"><a href=\"#Atrous-algorithm\" class=\"headerlink\" title=\"Atrous algorithm\"></a>Atrous algorithm</h2><ul>\n<li>deeplab和FCN一样，也是在VGG上finetune</li>\n<li>首先要解决的问题是，如何增大最后输出的score map呢？deeplab把VGG最后的pool4和pool5的stride从2变成了1，整个VGG的stride从32变成8</li>\n<li>但是修改了stide之后，后面的conv层感受野就不一样大了，不能finetune了，所以这里引入了非常优雅的atrous algorithm<ul>\n<li>feature map的感受野的计算公式为$RF_{i}&#x3D;(RF_{i+1}-1)*stride+kernel$</li>\n<li>所以在stride减小的情况下想办法增大kernel，即在kernel里面增加hole，kernel变大</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/70081567.jpg\" alt=\"deeplab\"></p>\n<h2 id=\"Fully-connected-CRF\"><a href=\"#Fully-connected-CRF\" class=\"headerlink\" title=\"Fully connected CRF\"></a>Fully connected CRF</h2><ul>\n<li>CRF简单来说，能做到的就是在决定一个位置的像素值时（在这个paper里是label），会考虑周围邻居的像素值（label），这样能抹除一些噪音。但是通过CNN得到的feature map在一定程度上已经足够平滑了，所以short range的CRF没什么意义。于是作者采用了fully connected CRF，这样考虑的就是全局的信息了。</li>\n<li>随机变量$X_i$是像素$i$的标签，变量$X$由$X_1, X_2, …, X_N$组成随机向量，$N$就是图像中的像素个数。</li>\n<li>在全连接CRF中，标签$x$的能量为</li>\n</ul>\n<p>$$<br>E(x)&#x3D;\\sum _i\\theta_i(x_i)+\\sum <em>{ij}\\theta</em>{ij}(x_i,x_j)<br>$$</p>\n<ul>\n<li>$\\theta_i(x_i)$是一元能量，表示像素$i$被分割成$x_i$的能量，二元能量$\\theta_{ij}(x_i,x_j)$像素点$i$、$j$同时分割成$x_i$、$x_j$的能量。</li>\n<li>一元能量使用FCN的输出</li>\n</ul>\n<p>$$<br>\\theta_i(x_i) &#x3D; -logP(x_i)<br>$$</p>\n<ul>\n<li>二元能量表达式为</li>\n</ul>\n<p>$$<br>\\theta_{ij}(x_i, x_j)&#x3D;\\mu(x_i, x_j)[\\omega_1exp(-\\frac{\\left |p_i-p_j  \\right |^2} {2\\sigma_\\alpha^2}-\\frac{\\left |I_i-I_j  \\right |^2}{2\\sigma_\\beta^2})+\\omega_2exp(-\\frac{\\left |p_i-p_j  \\right |^2} {2\\sigma_\\gamma^2})]<br>$$</p>\n<ul>\n<li>主要参考<a href=\"https://blog.csdn.net/junparadox/article/details/52610744\">这里</a></li>\n</ul>\n<h1 id=\"v2\"><a href=\"#v2\" class=\"headerlink\" title=\"v2\"></a>v2</h1><ul>\n<li>v2在v1的基础上增加了多感受野</li>\n</ul>\n<p><img src=\"/images/4478311.jpg\" alt=\"deeplabv2\"></p>\n<ul>\n<li>参考<a href=\"https://blog.csdn.net/ming0808sun/article/details/78843471\">这里</a></li>\n</ul>\n"},{"title":"grep中的正则表达式","typora-root-url":"../../source","date":"2018-11-20T11:36:53.000Z","_content":"\n照抄的[这里](https://blog.csdn.net/yufenghyc/article/details/51078107)\n\n# 正则表达式\n- 基础正则，basic regex，即bres\n- 扩展正则，extended regex，即eres\n- perl的正则，perl regex，即pres\n\n# 不同正则表达式的区别\n- bres需要多写转义\n\n```shell\n\\{n,m\\}, x\\|y #bres需要写转义，\n{n,m}, x|y    #而eres和pres不需要\n```\n- pres可以用下面这些，其它两种不可以。\n\n```\n\\d, \\D, \\S, \\s\n```\n\n# grep\n- 默认的正则为基础正则，\"-E\"表示eres，\"-P\"表示pers.\n- egrep等效于grep -E，egrep -P等效于 grep -P\n\n# sed\n- 默认是eres，-r表示要用eres，不支持pres\n- mac下到sed和linux还不太一样，写inplace替换要这样，其中，`-i`后面是\n\n```shell\nsed -i '' 's/http.*ot0uaqt93.bkt.*\\//\\/images\\//g' `ls *.md`\n```\n\n# awk\n- 厉害了，只支持eres\n","source":"_posts/grep中的正则表达式.md","raw":"---\ntitle: grep中的正则表达式\ntypora-root-url: ../../source\ntags:\n  - 正则\n  - grep\ndate: 2018-11-20 19:36:53\n---\n\n照抄的[这里](https://blog.csdn.net/yufenghyc/article/details/51078107)\n\n# 正则表达式\n- 基础正则，basic regex，即bres\n- 扩展正则，extended regex，即eres\n- perl的正则，perl regex，即pres\n\n# 不同正则表达式的区别\n- bres需要多写转义\n\n```shell\n\\{n,m\\}, x\\|y #bres需要写转义，\n{n,m}, x|y    #而eres和pres不需要\n```\n- pres可以用下面这些，其它两种不可以。\n\n```\n\\d, \\D, \\S, \\s\n```\n\n# grep\n- 默认的正则为基础正则，\"-E\"表示eres，\"-P\"表示pers.\n- egrep等效于grep -E，egrep -P等效于 grep -P\n\n# sed\n- 默认是eres，-r表示要用eres，不支持pres\n- mac下到sed和linux还不太一样，写inplace替换要这样，其中，`-i`后面是\n\n```shell\nsed -i '' 's/http.*ot0uaqt93.bkt.*\\//\\/images\\//g' `ls *.md`\n```\n\n# awk\n- 厉害了，只支持eres\n","slug":"grep中的正则表达式","published":1,"updated":"2023-11-05T11:42:33.904Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li2001ms2kzdeemaf3y","content":"<p>照抄的<a href=\"https://blog.csdn.net/yufenghyc/article/details/51078107\">这里</a></p>\n<h1 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h1><ul>\n<li>基础正则，basic regex，即bres</li>\n<li>扩展正则，extended regex，即eres</li>\n<li>perl的正则，perl regex，即pres</li>\n</ul>\n<h1 id=\"不同正则表达式的区别\"><a href=\"#不同正则表达式的区别\" class=\"headerlink\" title=\"不同正则表达式的区别\"></a>不同正则表达式的区别</h1><ul>\n<li>bres需要多写转义</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\&#123;n,m\\&#125;, x\\|y #bres需要写转义，</span><br><span class=\"line\">&#123;n,m&#125;, x|y    #而eres和pres不需要</span><br></pre></td></tr></table></figure>\n<ul>\n<li>pres可以用下面这些，其它两种不可以。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\d, \\D, \\S, \\s</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h1><ul>\n<li>默认的正则为基础正则，”-E”表示eres，”-P”表示pers.</li>\n<li>egrep等效于grep -E，egrep -P等效于 grep -P</li>\n</ul>\n<h1 id=\"sed\"><a href=\"#sed\" class=\"headerlink\" title=\"sed\"></a>sed</h1><ul>\n<li>默认是eres，-r表示要用eres，不支持pres</li>\n<li>mac下到sed和linux还不太一样，写inplace替换要这样，其中，<code>-i</code>后面是</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &#x27;&#x27; &#x27;s/http.*ot0uaqt93.bkt.*\\//\\/images\\//g&#x27; `ls *.md`</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h1><ul>\n<li>厉害了，只支持eres</li>\n</ul>\n","excerpt":"","more":"<p>照抄的<a href=\"https://blog.csdn.net/yufenghyc/article/details/51078107\">这里</a></p>\n<h1 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h1><ul>\n<li>基础正则，basic regex，即bres</li>\n<li>扩展正则，extended regex，即eres</li>\n<li>perl的正则，perl regex，即pres</li>\n</ul>\n<h1 id=\"不同正则表达式的区别\"><a href=\"#不同正则表达式的区别\" class=\"headerlink\" title=\"不同正则表达式的区别\"></a>不同正则表达式的区别</h1><ul>\n<li>bres需要多写转义</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\&#123;n,m\\&#125;, x\\|y #bres需要写转义，</span><br><span class=\"line\">&#123;n,m&#125;, x|y    #而eres和pres不需要</span><br></pre></td></tr></table></figure>\n<ul>\n<li>pres可以用下面这些，其它两种不可以。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\d, \\D, \\S, \\s</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h1><ul>\n<li>默认的正则为基础正则，”-E”表示eres，”-P”表示pers.</li>\n<li>egrep等效于grep -E，egrep -P等效于 grep -P</li>\n</ul>\n<h1 id=\"sed\"><a href=\"#sed\" class=\"headerlink\" title=\"sed\"></a>sed</h1><ul>\n<li>默认是eres，-r表示要用eres，不支持pres</li>\n<li>mac下到sed和linux还不太一样，写inplace替换要这样，其中，<code>-i</code>后面是</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &#x27;&#x27; &#x27;s/http.*ot0uaqt93.bkt.*\\//\\/images\\//g&#x27; `ls *.md`</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h1><ul>\n<li>厉害了，只支持eres</li>\n</ul>\n"},{"title":"https原理和使用流程","typora-root-url":"../../source","date":"2018-01-14T03:49:09.000Z","_content":"\n### http原理\n看[这里](https://www.cnblogs.com/xinzhao/p/4949344.html)\n\n### 使用流程\n1. 上[阿里云](https://www.aliyun.com/product/cas)或七牛云的免费ssl服务，阿里云不用填什么资料直接就审核了，七牛云好像麻烦一点。\n2. 配置DNS\n3. 审核通过之后，下载证书文件，将证书文件放在Nginx安装目录cert中，一般为`/etc/nginx`\n4. 配置nginx，主要是将http重定向到https上\n```\nserver {\n    listen       80;\n    server_name  _;\n\n    location / {\n        rewrite ^/(.*)$ https://yongxinxue.xin/$1 permanent;\n    }\n}\n\nserver {\n    listen 443;\n    server_name _;\n    ssl on;\n    ssl_certificate   cert/214462643660969.pem;\n    ssl_certificate_key  cert/214462643660969.key;\n    ssl_session_timeout 5m;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    location / {\n        if ( $host != 'yongxinxue.xin' ){\n            rewrite ^/(.*)$ https://yongxinxue.xin/$1 permanent;\n        }\n        proxy_pass http://127.0.0.1:8080;\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n}\n```\n\n\n","source":"_posts/https原理和使用流程.md","raw":"---\ntitle: https原理和使用流程\ntypora-root-url: ../../source\ndate: 2018-01-14 11:49:09\ntags: https\ncategories: flask网站总结\n---\n\n### http原理\n看[这里](https://www.cnblogs.com/xinzhao/p/4949344.html)\n\n### 使用流程\n1. 上[阿里云](https://www.aliyun.com/product/cas)或七牛云的免费ssl服务，阿里云不用填什么资料直接就审核了，七牛云好像麻烦一点。\n2. 配置DNS\n3. 审核通过之后，下载证书文件，将证书文件放在Nginx安装目录cert中，一般为`/etc/nginx`\n4. 配置nginx，主要是将http重定向到https上\n```\nserver {\n    listen       80;\n    server_name  _;\n\n    location / {\n        rewrite ^/(.*)$ https://yongxinxue.xin/$1 permanent;\n    }\n}\n\nserver {\n    listen 443;\n    server_name _;\n    ssl on;\n    ssl_certificate   cert/214462643660969.pem;\n    ssl_certificate_key  cert/214462643660969.key;\n    ssl_session_timeout 5m;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    location / {\n        if ( $host != 'yongxinxue.xin' ){\n            rewrite ^/(.*)$ https://yongxinxue.xin/$1 permanent;\n        }\n        proxy_pass http://127.0.0.1:8080;\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n}\n```\n\n\n","slug":"https原理和使用流程","published":1,"updated":"2023-11-05T11:42:33.904Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li2001ps2kzenvw5evi","content":"<h3 id=\"http原理\"><a href=\"#http原理\" class=\"headerlink\" title=\"http原理\"></a>http原理</h3><p>看<a href=\"https://www.cnblogs.com/xinzhao/p/4949344.html\">这里</a></p>\n<h3 id=\"使用流程\"><a href=\"#使用流程\" class=\"headerlink\" title=\"使用流程\"></a>使用流程</h3><ol>\n<li>上<a href=\"https://www.aliyun.com/product/cas\">阿里云</a>或七牛云的免费ssl服务，阿里云不用填什么资料直接就审核了，七牛云好像麻烦一点。</li>\n<li>配置DNS</li>\n<li>审核通过之后，下载证书文件，将证书文件放在Nginx安装目录cert中，一般为<code>/etc/nginx</code></li>\n<li>配置nginx，主要是将http重定向到https上<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  _;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        rewrite ^/(.*)$ https://yongxinxue.xin/$1 permanent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443;</span><br><span class=\"line\">    server_name _;</span><br><span class=\"line\">    ssl on;</span><br><span class=\"line\">    ssl_certificate   cert/214462643660969.pem;</span><br><span class=\"line\">    ssl_certificate_key  cert/214462643660969.key;</span><br><span class=\"line\">    ssl_session_timeout 5m;</span><br><span class=\"line\">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        if ( $host != &#x27;yongxinxue.xin&#x27; )&#123;</span><br><span class=\"line\">            rewrite ^/(.*)$ https://yongxinxue.xin/$1 permanent;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:8080;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","excerpt":"","more":"<h3 id=\"http原理\"><a href=\"#http原理\" class=\"headerlink\" title=\"http原理\"></a>http原理</h3><p>看<a href=\"https://www.cnblogs.com/xinzhao/p/4949344.html\">这里</a></p>\n<h3 id=\"使用流程\"><a href=\"#使用流程\" class=\"headerlink\" title=\"使用流程\"></a>使用流程</h3><ol>\n<li>上<a href=\"https://www.aliyun.com/product/cas\">阿里云</a>或七牛云的免费ssl服务，阿里云不用填什么资料直接就审核了，七牛云好像麻烦一点。</li>\n<li>配置DNS</li>\n<li>审核通过之后，下载证书文件，将证书文件放在Nginx安装目录cert中，一般为<code>/etc/nginx</code></li>\n<li>配置nginx，主要是将http重定向到https上<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  _;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        rewrite ^/(.*)$ https://yongxinxue.xin/$1 permanent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443;</span><br><span class=\"line\">    server_name _;</span><br><span class=\"line\">    ssl on;</span><br><span class=\"line\">    ssl_certificate   cert/214462643660969.pem;</span><br><span class=\"line\">    ssl_certificate_key  cert/214462643660969.key;</span><br><span class=\"line\">    ssl_session_timeout 5m;</span><br><span class=\"line\">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        if ( $host != &#x27;yongxinxue.xin&#x27; )&#123;</span><br><span class=\"line\">            rewrite ^/(.*)$ https://yongxinxue.xin/$1 permanent;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:8080;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"jQuery笔记","typora-root-url":"../../source","date":"2018-02-25T03:29:08.000Z","_content":"\n1. 按属性选取`var email = $('[name=email]');`\n2. jQuery对象和DOM对象之间可以互相转化：\n```\nvar div = $('#abc'); // jQuery对象\nvar divDom = div.get(0); // 假设存在div，获取第1个DOM元素\nvar another = $(divDom); // 重新把DOM包装为jQuery对象\n```\n3. 过滤器\n```\n$('ul.lang li'); // 选出JavaScript、Python和Lua 3个节点\n\n$('ul.lang li:first-child'); // 仅选出JavaScript\n$('ul.lang li:last-child'); // 仅选出Lua\n$('ul.lang li:nth-child(2)'); // 选出第N个元素，N从1开始\n$('ul.lang li:nth-child(even)'); // 选出序号为偶数的元素\n$('ul.lang li:nth-child(odd)'); // 选出序号为奇数的元素\n```\ncss selector, `element element`是后代就可以，`element>element`必须是父子\n4. ajax jsonp\n```\n    $.ajax({\n      type: 'get',\n      url: \"http://api.money.126.net/data/feed/0000001,1399001\",\n      dataType: 'jsonp',\n      success: function(data) {\n            var str = '当前价格：' +\n                data['0000001'].name + ': ' +\n                data['0000001'].price + '；' +\n                data['1399001'].name + ': ' +\n                data['1399001'].price;\n            alert(str);\n        },\n      error: function() {\n            alert('出错了');\n        }\n    });\n\n```\njQuery的jqXHR对象类似一个Promise对象，我们可以用链式写法来处理各种回调\n```\n$.ajax({\n      type: 'get',\n      url: \"http://api.money.126.net/data/feed/0000001,1399001\",\n      dataType: 'jsonp'\n}).done(function (data) {\n    ajaxLog('成功, 收到的数据: ' + JSON.stringify(data));\n}).fail(function (xhr, status) {\n    ajaxLog('失败: ' + xhr.status + ', 原因: ' + status);\n}).always(function () {\n    ajaxLog('请求完成: 无论成功或失败都会调用');\n});\n```\n","source":"_posts/jQuery笔记.md","raw":"---\ntitle: jQuery笔记\ntypora-root-url: ../../source\ndate: 2018-02-25 11:29:08\ntags:\n  - javaScript\ncategories: flask网站总结\n---\n\n1. 按属性选取`var email = $('[name=email]');`\n2. jQuery对象和DOM对象之间可以互相转化：\n```\nvar div = $('#abc'); // jQuery对象\nvar divDom = div.get(0); // 假设存在div，获取第1个DOM元素\nvar another = $(divDom); // 重新把DOM包装为jQuery对象\n```\n3. 过滤器\n```\n$('ul.lang li'); // 选出JavaScript、Python和Lua 3个节点\n\n$('ul.lang li:first-child'); // 仅选出JavaScript\n$('ul.lang li:last-child'); // 仅选出Lua\n$('ul.lang li:nth-child(2)'); // 选出第N个元素，N从1开始\n$('ul.lang li:nth-child(even)'); // 选出序号为偶数的元素\n$('ul.lang li:nth-child(odd)'); // 选出序号为奇数的元素\n```\ncss selector, `element element`是后代就可以，`element>element`必须是父子\n4. ajax jsonp\n```\n    $.ajax({\n      type: 'get',\n      url: \"http://api.money.126.net/data/feed/0000001,1399001\",\n      dataType: 'jsonp',\n      success: function(data) {\n            var str = '当前价格：' +\n                data['0000001'].name + ': ' +\n                data['0000001'].price + '；' +\n                data['1399001'].name + ': ' +\n                data['1399001'].price;\n            alert(str);\n        },\n      error: function() {\n            alert('出错了');\n        }\n    });\n\n```\njQuery的jqXHR对象类似一个Promise对象，我们可以用链式写法来处理各种回调\n```\n$.ajax({\n      type: 'get',\n      url: \"http://api.money.126.net/data/feed/0000001,1399001\",\n      dataType: 'jsonp'\n}).done(function (data) {\n    ajaxLog('成功, 收到的数据: ' + JSON.stringify(data));\n}).fail(function (xhr, status) {\n    ajaxLog('失败: ' + xhr.status + ', 原因: ' + status);\n}).always(function () {\n    ajaxLog('请求完成: 无论成功或失败都会调用');\n});\n```\n","slug":"jQuery笔记","published":1,"updated":"2023-11-05T11:42:33.904Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li2001ts2kz462y1pqu","content":"<ol>\n<li>按属性选取<code>var email = $(&#39;[name=email]&#39;);</code></li>\n<li>jQuery对象和DOM对象之间可以互相转化：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var div = $(&#x27;#abc&#x27;); // jQuery对象</span><br><span class=\"line\">var divDom = div.get(0); // 假设存在div，获取第1个DOM元素</span><br><span class=\"line\">var another = $(divDom); // 重新把DOM包装为jQuery对象</span><br></pre></td></tr></table></figure></li>\n<li>过滤器<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&#x27;ul.lang li&#x27;); // 选出JavaScript、Python和Lua 3个节点</span><br><span class=\"line\"></span><br><span class=\"line\">$(&#x27;ul.lang li:first-child&#x27;); // 仅选出JavaScript</span><br><span class=\"line\">$(&#x27;ul.lang li:last-child&#x27;); // 仅选出Lua</span><br><span class=\"line\">$(&#x27;ul.lang li:nth-child(2)&#x27;); // 选出第N个元素，N从1开始</span><br><span class=\"line\">$(&#x27;ul.lang li:nth-child(even)&#x27;); // 选出序号为偶数的元素</span><br><span class=\"line\">$(&#x27;ul.lang li:nth-child(odd)&#x27;); // 选出序号为奇数的元素</span><br></pre></td></tr></table></figure>\ncss selector, <code>element element</code>是后代就可以，<code>element&gt;element</code>必须是父子</li>\n<li>ajax jsonp<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">  type: &#x27;get&#x27;,</span><br><span class=\"line\">  url: &quot;http://api.money.126.net/data/feed/0000001,1399001&quot;,</span><br><span class=\"line\">  dataType: &#x27;jsonp&#x27;,</span><br><span class=\"line\">  success: function(data) &#123;</span><br><span class=\"line\">        var str = &#x27;当前价格：&#x27; +</span><br><span class=\"line\">            data[&#x27;0000001&#x27;].name + &#x27;: &#x27; +</span><br><span class=\"line\">            data[&#x27;0000001&#x27;].price + &#x27;；&#x27; +</span><br><span class=\"line\">            data[&#x27;1399001&#x27;].name + &#x27;: &#x27; +</span><br><span class=\"line\">            data[&#x27;1399001&#x27;].price;</span><br><span class=\"line\">        alert(str);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  error: function() &#123;</span><br><span class=\"line\">        alert(&#x27;出错了&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\njQuery的jqXHR对象类似一个Promise对象，我们可以用链式写法来处理各种回调<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">      type: &#x27;get&#x27;,</span><br><span class=\"line\">      url: &quot;http://api.money.126.net/data/feed/0000001,1399001&quot;,</span><br><span class=\"line\">      dataType: &#x27;jsonp&#x27;</span><br><span class=\"line\">&#125;).done(function (data) &#123;</span><br><span class=\"line\">    ajaxLog(&#x27;成功, 收到的数据: &#x27; + JSON.stringify(data));</span><br><span class=\"line\">&#125;).fail(function (xhr, status) &#123;</span><br><span class=\"line\">    ajaxLog(&#x27;失败: &#x27; + xhr.status + &#x27;, 原因: &#x27; + status);</span><br><span class=\"line\">&#125;).always(function () &#123;</span><br><span class=\"line\">    ajaxLog(&#x27;请求完成: 无论成功或失败都会调用&#x27;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ol>\n","excerpt":"","more":"<ol>\n<li>按属性选取<code>var email = $(&#39;[name=email]&#39;);</code></li>\n<li>jQuery对象和DOM对象之间可以互相转化：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var div = $(&#x27;#abc&#x27;); // jQuery对象</span><br><span class=\"line\">var divDom = div.get(0); // 假设存在div，获取第1个DOM元素</span><br><span class=\"line\">var another = $(divDom); // 重新把DOM包装为jQuery对象</span><br></pre></td></tr></table></figure></li>\n<li>过滤器<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&#x27;ul.lang li&#x27;); // 选出JavaScript、Python和Lua 3个节点</span><br><span class=\"line\"></span><br><span class=\"line\">$(&#x27;ul.lang li:first-child&#x27;); // 仅选出JavaScript</span><br><span class=\"line\">$(&#x27;ul.lang li:last-child&#x27;); // 仅选出Lua</span><br><span class=\"line\">$(&#x27;ul.lang li:nth-child(2)&#x27;); // 选出第N个元素，N从1开始</span><br><span class=\"line\">$(&#x27;ul.lang li:nth-child(even)&#x27;); // 选出序号为偶数的元素</span><br><span class=\"line\">$(&#x27;ul.lang li:nth-child(odd)&#x27;); // 选出序号为奇数的元素</span><br></pre></td></tr></table></figure>\ncss selector, <code>element element</code>是后代就可以，<code>element&gt;element</code>必须是父子</li>\n<li>ajax jsonp<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">  type: &#x27;get&#x27;,</span><br><span class=\"line\">  url: &quot;http://api.money.126.net/data/feed/0000001,1399001&quot;,</span><br><span class=\"line\">  dataType: &#x27;jsonp&#x27;,</span><br><span class=\"line\">  success: function(data) &#123;</span><br><span class=\"line\">        var str = &#x27;当前价格：&#x27; +</span><br><span class=\"line\">            data[&#x27;0000001&#x27;].name + &#x27;: &#x27; +</span><br><span class=\"line\">            data[&#x27;0000001&#x27;].price + &#x27;；&#x27; +</span><br><span class=\"line\">            data[&#x27;1399001&#x27;].name + &#x27;: &#x27; +</span><br><span class=\"line\">            data[&#x27;1399001&#x27;].price;</span><br><span class=\"line\">        alert(str);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  error: function() &#123;</span><br><span class=\"line\">        alert(&#x27;出错了&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\njQuery的jqXHR对象类似一个Promise对象，我们可以用链式写法来处理各种回调<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">      type: &#x27;get&#x27;,</span><br><span class=\"line\">      url: &quot;http://api.money.126.net/data/feed/0000001,1399001&quot;,</span><br><span class=\"line\">      dataType: &#x27;jsonp&#x27;</span><br><span class=\"line\">&#125;).done(function (data) &#123;</span><br><span class=\"line\">    ajaxLog(&#x27;成功, 收到的数据: &#x27; + JSON.stringify(data));</span><br><span class=\"line\">&#125;).fail(function (xhr, status) &#123;</span><br><span class=\"line\">    ajaxLog(&#x27;失败: &#x27; + xhr.status + &#x27;, 原因: &#x27; + status);</span><br><span class=\"line\">&#125;).always(function () &#123;</span><br><span class=\"line\">    ajaxLog(&#x27;请求完成: 无论成功或失败都会调用&#x27;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"mobileNet和shuffleNet","typora-root-url":"../../source","date":"2018-05-13T05:05:50.000Z","_content":"\n### 先说mobileNet\n- 使用depthwise convolution和point wise(1*1) convolution代替标准的convolution\n![](/images/8709950.jpg)\n- (b)类似于group为M的卷积，m-th filter is applied to m-th channel\n- 计算量是原来的$\\frac{1}{N}+\\frac{1}{D_k^2}$，kernel一般是3，所以可以减少到1/8到1/9\n- 论文里还提出了两个控制计算量的超参数\n- width multiplier，$\\alpha$，乘在channel前面，计算量减小到$\\frac{1}{\\alpha}$\n- resolution multiplier，$\\beta$，乘在输入到尺寸前面，计算量减小到$\\frac{1}{\\beta}$\n- 好像文章里公式写错了，卷积到计算量应该是乘输出的尺寸，而不是输入到尺寸吧。。。\n\n### [shuffleNet](https://blog.csdn.net/u014380165/article/details/75137111)\n- 在resnet的基础上，用带group的1\\*1卷积代替原来的1\\*1卷积\n![](/images/32435128.jpg)\n- group操作会带来边界效应，学出来的特征会局限，所以就有了channel shuffle层\n- 随机层的caffe实现是先reshape再transpose再flatten，不是真随机，所以可以实现backward\n- 3\\*3的depth wise的卷积就是moblieNet里用到的\n- 然后用shuffleNet Unit组成shuffetNet网络\n![](/images/77705439.jpg)\n- 一个重要结论是group个数的线性增长并不会带来分类准确率的线性增长。但是发现ShuffleNet对于小的网络效果更明显，因为一般小的网络的channel个数都不多，在限定计算资源的前提下，ShuffleNet可以使用更多的feature map。\n\n","source":"_posts/mobileNet和shuffleNet.md","raw":"---\ntitle: mobileNet和shuffleNet\ntypora-root-url: ../../source\ndate: 2018-05-13 13:05:50\ncategories: caffe\n---\n\n### 先说mobileNet\n- 使用depthwise convolution和point wise(1*1) convolution代替标准的convolution\n![](/images/8709950.jpg)\n- (b)类似于group为M的卷积，m-th filter is applied to m-th channel\n- 计算量是原来的$\\frac{1}{N}+\\frac{1}{D_k^2}$，kernel一般是3，所以可以减少到1/8到1/9\n- 论文里还提出了两个控制计算量的超参数\n- width multiplier，$\\alpha$，乘在channel前面，计算量减小到$\\frac{1}{\\alpha}$\n- resolution multiplier，$\\beta$，乘在输入到尺寸前面，计算量减小到$\\frac{1}{\\beta}$\n- 好像文章里公式写错了，卷积到计算量应该是乘输出的尺寸，而不是输入到尺寸吧。。。\n\n### [shuffleNet](https://blog.csdn.net/u014380165/article/details/75137111)\n- 在resnet的基础上，用带group的1\\*1卷积代替原来的1\\*1卷积\n![](/images/32435128.jpg)\n- group操作会带来边界效应，学出来的特征会局限，所以就有了channel shuffle层\n- 随机层的caffe实现是先reshape再transpose再flatten，不是真随机，所以可以实现backward\n- 3\\*3的depth wise的卷积就是moblieNet里用到的\n- 然后用shuffleNet Unit组成shuffetNet网络\n![](/images/77705439.jpg)\n- 一个重要结论是group个数的线性增长并不会带来分类准确率的线性增长。但是发现ShuffleNet对于小的网络效果更明显，因为一般小的网络的channel个数都不多，在限定计算资源的前提下，ShuffleNet可以使用更多的feature map。\n\n","slug":"mobileNet和shuffleNet","published":1,"updated":"2023-11-05T11:42:33.904Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li3001vs2kza3u7hife","content":"<h3 id=\"先说mobileNet\"><a href=\"#先说mobileNet\" class=\"headerlink\" title=\"先说mobileNet\"></a>先说mobileNet</h3><ul>\n<li>使用depthwise convolution和point wise(1*1) convolution代替标准的convolution<br><img src=\"/images/8709950.jpg\"></li>\n<li>(b)类似于group为M的卷积，m-th filter is applied to m-th channel</li>\n<li>计算量是原来的$\\frac{1}{N}+\\frac{1}{D_k^2}$，kernel一般是3，所以可以减少到1&#x2F;8到1&#x2F;9</li>\n<li>论文里还提出了两个控制计算量的超参数</li>\n<li>width multiplier，$\\alpha$，乘在channel前面，计算量减小到$\\frac{1}{\\alpha}$</li>\n<li>resolution multiplier，$\\beta$，乘在输入到尺寸前面，计算量减小到$\\frac{1}{\\beta}$</li>\n<li>好像文章里公式写错了，卷积到计算量应该是乘输出的尺寸，而不是输入到尺寸吧。。。</li>\n</ul>\n<h3 id=\"shuffleNet\"><a href=\"#shuffleNet\" class=\"headerlink\" title=\"shuffleNet\"></a><a href=\"https://blog.csdn.net/u014380165/article/details/75137111\">shuffleNet</a></h3><ul>\n<li>在resnet的基础上，用带group的1*1卷积代替原来的1*1卷积<br><img src=\"/images/32435128.jpg\"></li>\n<li>group操作会带来边界效应，学出来的特征会局限，所以就有了channel shuffle层</li>\n<li>随机层的caffe实现是先reshape再transpose再flatten，不是真随机，所以可以实现backward</li>\n<li>3*3的depth wise的卷积就是moblieNet里用到的</li>\n<li>然后用shuffleNet Unit组成shuffetNet网络<br><img src=\"/images/77705439.jpg\"></li>\n<li>一个重要结论是group个数的线性增长并不会带来分类准确率的线性增长。但是发现ShuffleNet对于小的网络效果更明显，因为一般小的网络的channel个数都不多，在限定计算资源的前提下，ShuffleNet可以使用更多的feature map。</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"先说mobileNet\"><a href=\"#先说mobileNet\" class=\"headerlink\" title=\"先说mobileNet\"></a>先说mobileNet</h3><ul>\n<li>使用depthwise convolution和point wise(1*1) convolution代替标准的convolution<br><img src=\"/images/8709950.jpg\"></li>\n<li>(b)类似于group为M的卷积，m-th filter is applied to m-th channel</li>\n<li>计算量是原来的$\\frac{1}{N}+\\frac{1}{D_k^2}$，kernel一般是3，所以可以减少到1&#x2F;8到1&#x2F;9</li>\n<li>论文里还提出了两个控制计算量的超参数</li>\n<li>width multiplier，$\\alpha$，乘在channel前面，计算量减小到$\\frac{1}{\\alpha}$</li>\n<li>resolution multiplier，$\\beta$，乘在输入到尺寸前面，计算量减小到$\\frac{1}{\\beta}$</li>\n<li>好像文章里公式写错了，卷积到计算量应该是乘输出的尺寸，而不是输入到尺寸吧。。。</li>\n</ul>\n<h3 id=\"shuffleNet\"><a href=\"#shuffleNet\" class=\"headerlink\" title=\"shuffleNet\"></a><a href=\"https://blog.csdn.net/u014380165/article/details/75137111\">shuffleNet</a></h3><ul>\n<li>在resnet的基础上，用带group的1*1卷积代替原来的1*1卷积<br><img src=\"/images/32435128.jpg\"></li>\n<li>group操作会带来边界效应，学出来的特征会局限，所以就有了channel shuffle层</li>\n<li>随机层的caffe实现是先reshape再transpose再flatten，不是真随机，所以可以实现backward</li>\n<li>3*3的depth wise的卷积就是moblieNet里用到的</li>\n<li>然后用shuffleNet Unit组成shuffetNet网络<br><img src=\"/images/77705439.jpg\"></li>\n<li>一个重要结论是group个数的线性增长并不会带来分类准确率的线性增长。但是发现ShuffleNet对于小的网络效果更明显，因为一般小的网络的channel个数都不多，在限定计算资源的前提下，ShuffleNet可以使用更多的feature map。</li>\n</ul>\n"},{"title":"mt19937","typora-root-url":"../../source","date":"2018-06-12T11:00:46.000Z","_content":"\n### 背景\n- 你需要把原来mtalab的代码翻译为c、python等等\n- 你的代码里使用了随机数\n- 你的老板又要求你实现的方法exactly the same\n- 参考[这里](https://code.i-harness.com/zh-CN/q/11a13e1)\n\n### mt19927\n- [Mersenne Twister](https://en.wikipedia.org/wiki/Mersenne_Twister)是目前比较常用的随机数生成器\n- 周期非常长$2^{19937}-1$，速度非常快\n\n### python代码\n```\nimport numpy as np\nnp.random.seed(1337)\nA = np.random.random((5,3))\nA.T\narray([[ 0.26202468,  0.45931689,  0.26194293,  0.11527423,  0.12505793],\n       [ 0.15868397,  0.32100054,  0.97608528,  0.38627507,  0.98354861],\n       [ 0.27812652,  0.51839282,  0.73281455,  0.62850118,  0.44322487]])\n```\n\n### MATLAB代码\n```\nrand('twister', 1337);\nA = rand(3,5)\nA = \n Columns 1 through 2\n   0.262024675015582   0.459316887214567\n   0.158683972154466   0.321000540520167\n   0.278126519494360   0.518392820597537\n  Columns 3 through 4\n   0.261942925565145   0.115274226683149\n   0.976085284877434   0.386275068634359\n   0.732814552690482   0.628501179539712\n  Column 5\n   0.125057926335599\n   0.983548605143641\n   0.443224868645128\n```\n\n### c++代码\n```\n#include <iostream>\n#include <random>\n\nint main()\n{\n  unsigned seed1 = 1337;\n  std::mt19937 g1(seed1);\n  for(int i=0; i<100; i++)\n    std::cout << 1.0*g1()/g1.max() << std::endl;\n}\n```\n\n### 还有一些\n最简单的生成算法，混合同余法，可以看[这里](https://www.cnblogs.com/houkai/p/3807041.html)\n\nc++11的random库，可以参考[这里](https://www.cnblogs.com/byhj/p/4149467.html)\n","source":"_posts/mt19937.md","raw":"---\ntitle: mt19937\ntypora-root-url: ../../source\ndate: 2018-06-12 19:00:46\ntags:\n---\n\n### 背景\n- 你需要把原来mtalab的代码翻译为c、python等等\n- 你的代码里使用了随机数\n- 你的老板又要求你实现的方法exactly the same\n- 参考[这里](https://code.i-harness.com/zh-CN/q/11a13e1)\n\n### mt19927\n- [Mersenne Twister](https://en.wikipedia.org/wiki/Mersenne_Twister)是目前比较常用的随机数生成器\n- 周期非常长$2^{19937}-1$，速度非常快\n\n### python代码\n```\nimport numpy as np\nnp.random.seed(1337)\nA = np.random.random((5,3))\nA.T\narray([[ 0.26202468,  0.45931689,  0.26194293,  0.11527423,  0.12505793],\n       [ 0.15868397,  0.32100054,  0.97608528,  0.38627507,  0.98354861],\n       [ 0.27812652,  0.51839282,  0.73281455,  0.62850118,  0.44322487]])\n```\n\n### MATLAB代码\n```\nrand('twister', 1337);\nA = rand(3,5)\nA = \n Columns 1 through 2\n   0.262024675015582   0.459316887214567\n   0.158683972154466   0.321000540520167\n   0.278126519494360   0.518392820597537\n  Columns 3 through 4\n   0.261942925565145   0.115274226683149\n   0.976085284877434   0.386275068634359\n   0.732814552690482   0.628501179539712\n  Column 5\n   0.125057926335599\n   0.983548605143641\n   0.443224868645128\n```\n\n### c++代码\n```\n#include <iostream>\n#include <random>\n\nint main()\n{\n  unsigned seed1 = 1337;\n  std::mt19937 g1(seed1);\n  for(int i=0; i<100; i++)\n    std::cout << 1.0*g1()/g1.max() << std::endl;\n}\n```\n\n### 还有一些\n最简单的生成算法，混合同余法，可以看[这里](https://www.cnblogs.com/houkai/p/3807041.html)\n\nc++11的random库，可以参考[这里](https://www.cnblogs.com/byhj/p/4149467.html)\n","slug":"mt19937","published":1,"updated":"2023-11-05T11:42:33.904Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li3001ys2kz4pxq8o7j","content":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><ul>\n<li>你需要把原来mtalab的代码翻译为c、python等等</li>\n<li>你的代码里使用了随机数</li>\n<li>你的老板又要求你实现的方法exactly the same</li>\n<li>参考<a href=\"https://code.i-harness.com/zh-CN/q/11a13e1\">这里</a></li>\n</ul>\n<h3 id=\"mt19927\"><a href=\"#mt19927\" class=\"headerlink\" title=\"mt19927\"></a>mt19927</h3><ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Mersenne_Twister\">Mersenne Twister</a>是目前比较常用的随机数生成器</li>\n<li>周期非常长$2^{19937}-1$，速度非常快</li>\n</ul>\n<h3 id=\"python代码\"><a href=\"#python代码\" class=\"headerlink\" title=\"python代码\"></a>python代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import numpy as np</span><br><span class=\"line\">np.random.seed(1337)</span><br><span class=\"line\">A = np.random.random((5,3))</span><br><span class=\"line\">A.T</span><br><span class=\"line\">array([[ 0.26202468,  0.45931689,  0.26194293,  0.11527423,  0.12505793],</span><br><span class=\"line\">       [ 0.15868397,  0.32100054,  0.97608528,  0.38627507,  0.98354861],</span><br><span class=\"line\">       [ 0.27812652,  0.51839282,  0.73281455,  0.62850118,  0.44322487]])</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MATLAB代码\"><a href=\"#MATLAB代码\" class=\"headerlink\" title=\"MATLAB代码\"></a>MATLAB代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rand(&#x27;twister&#x27;, 1337);</span><br><span class=\"line\">A = rand(3,5)</span><br><span class=\"line\">A = </span><br><span class=\"line\"> Columns 1 through 2</span><br><span class=\"line\">   0.262024675015582   0.459316887214567</span><br><span class=\"line\">   0.158683972154466   0.321000540520167</span><br><span class=\"line\">   0.278126519494360   0.518392820597537</span><br><span class=\"line\">  Columns 3 through 4</span><br><span class=\"line\">   0.261942925565145   0.115274226683149</span><br><span class=\"line\">   0.976085284877434   0.386275068634359</span><br><span class=\"line\">   0.732814552690482   0.628501179539712</span><br><span class=\"line\">  Column 5</span><br><span class=\"line\">   0.125057926335599</span><br><span class=\"line\">   0.983548605143641</span><br><span class=\"line\">   0.443224868645128</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"c-代码\"><a href=\"#c-代码\" class=\"headerlink\" title=\"c++代码\"></a>c++代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;random&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  unsigned seed1 = 1337;</span><br><span class=\"line\">  std::mt19937 g1(seed1);</span><br><span class=\"line\">  for(int i=0; i&lt;100; i++)</span><br><span class=\"line\">    std::cout &lt;&lt; 1.0*g1()/g1.max() &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"还有一些\"><a href=\"#还有一些\" class=\"headerlink\" title=\"还有一些\"></a>还有一些</h3><p>最简单的生成算法，混合同余法，可以看<a href=\"https://www.cnblogs.com/houkai/p/3807041.html\">这里</a></p>\n<p>c++11的random库，可以参考<a href=\"https://www.cnblogs.com/byhj/p/4149467.html\">这里</a></p>\n","excerpt":"","more":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><ul>\n<li>你需要把原来mtalab的代码翻译为c、python等等</li>\n<li>你的代码里使用了随机数</li>\n<li>你的老板又要求你实现的方法exactly the same</li>\n<li>参考<a href=\"https://code.i-harness.com/zh-CN/q/11a13e1\">这里</a></li>\n</ul>\n<h3 id=\"mt19927\"><a href=\"#mt19927\" class=\"headerlink\" title=\"mt19927\"></a>mt19927</h3><ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Mersenne_Twister\">Mersenne Twister</a>是目前比较常用的随机数生成器</li>\n<li>周期非常长$2^{19937}-1$，速度非常快</li>\n</ul>\n<h3 id=\"python代码\"><a href=\"#python代码\" class=\"headerlink\" title=\"python代码\"></a>python代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import numpy as np</span><br><span class=\"line\">np.random.seed(1337)</span><br><span class=\"line\">A = np.random.random((5,3))</span><br><span class=\"line\">A.T</span><br><span class=\"line\">array([[ 0.26202468,  0.45931689,  0.26194293,  0.11527423,  0.12505793],</span><br><span class=\"line\">       [ 0.15868397,  0.32100054,  0.97608528,  0.38627507,  0.98354861],</span><br><span class=\"line\">       [ 0.27812652,  0.51839282,  0.73281455,  0.62850118,  0.44322487]])</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MATLAB代码\"><a href=\"#MATLAB代码\" class=\"headerlink\" title=\"MATLAB代码\"></a>MATLAB代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rand(&#x27;twister&#x27;, 1337);</span><br><span class=\"line\">A = rand(3,5)</span><br><span class=\"line\">A = </span><br><span class=\"line\"> Columns 1 through 2</span><br><span class=\"line\">   0.262024675015582   0.459316887214567</span><br><span class=\"line\">   0.158683972154466   0.321000540520167</span><br><span class=\"line\">   0.278126519494360   0.518392820597537</span><br><span class=\"line\">  Columns 3 through 4</span><br><span class=\"line\">   0.261942925565145   0.115274226683149</span><br><span class=\"line\">   0.976085284877434   0.386275068634359</span><br><span class=\"line\">   0.732814552690482   0.628501179539712</span><br><span class=\"line\">  Column 5</span><br><span class=\"line\">   0.125057926335599</span><br><span class=\"line\">   0.983548605143641</span><br><span class=\"line\">   0.443224868645128</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"c-代码\"><a href=\"#c-代码\" class=\"headerlink\" title=\"c++代码\"></a>c++代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;random&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  unsigned seed1 = 1337;</span><br><span class=\"line\">  std::mt19937 g1(seed1);</span><br><span class=\"line\">  for(int i=0; i&lt;100; i++)</span><br><span class=\"line\">    std::cout &lt;&lt; 1.0*g1()/g1.max() &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"还有一些\"><a href=\"#还有一些\" class=\"headerlink\" title=\"还有一些\"></a>还有一些</h3><p>最简单的生成算法，混合同余法，可以看<a href=\"https://www.cnblogs.com/houkai/p/3807041.html\">这里</a></p>\n<p>c++11的random库，可以参考<a href=\"https://www.cnblogs.com/byhj/p/4149467.html\">这里</a></p>\n"},{"title":"nginx 开启gzip","typora-root-url":"../../source","date":"2018-01-09T04:30:58.000Z","_content":"\n## nginx配置\n```\nhttp {\n    ...\n    gzip on;\n    \n    gzip_min_length 1k;\n    # 启用gzip压缩的最小文件，小于设置值的文件将不会压缩\n\n    gzip_buffers 16 64k;\n\n    gzip_http_version 1.1;\n\n    gzip_comp_level 6;\n    # gzip 压缩级别，1-10，数字越大压缩的越好，也越占用CPU时间\n    \n    gzip_types text/plain application/x-javascript text/css application/xml application/javascript application/json;\n    # 进行压缩的文件类型。\n\n    gzip_vary on;\n    # 是否在http header中添加Vary: Accept-Encoding\n\n    gzip_disable \"MSIE [1-6]\\.\";\n    # 禁用IE 6 gzip\n    ...\n}\n```\n## 效果拔群\n百度统计的测试结果，从12s提高到6s\n\n![](/images/94641900.jpg \"-6s, excited!\") \n","source":"_posts/nginx-开启gzip.md","raw":"---\ntitle: nginx 开启gzip\ntypora-root-url: ../../source\ndate: 2018-01-09 12:30:58\ntags: nginx配置\ncategories: flask网站总结\n---\n\n## nginx配置\n```\nhttp {\n    ...\n    gzip on;\n    \n    gzip_min_length 1k;\n    # 启用gzip压缩的最小文件，小于设置值的文件将不会压缩\n\n    gzip_buffers 16 64k;\n\n    gzip_http_version 1.1;\n\n    gzip_comp_level 6;\n    # gzip 压缩级别，1-10，数字越大压缩的越好，也越占用CPU时间\n    \n    gzip_types text/plain application/x-javascript text/css application/xml application/javascript application/json;\n    # 进行压缩的文件类型。\n\n    gzip_vary on;\n    # 是否在http header中添加Vary: Accept-Encoding\n\n    gzip_disable \"MSIE [1-6]\\.\";\n    # 禁用IE 6 gzip\n    ...\n}\n```\n## 效果拔群\n百度统计的测试结果，从12s提高到6s\n\n![](/images/94641900.jpg \"-6s, excited!\") \n","slug":"nginx-开启gzip","published":1,"updated":"2023-11-05T11:42:33.904Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li30022s2kz3trk9atl","content":"<h2 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    gzip on;</span><br><span class=\"line\">    </span><br><span class=\"line\">    gzip_min_length 1k;</span><br><span class=\"line\">    # 启用gzip压缩的最小文件，小于设置值的文件将不会压缩</span><br><span class=\"line\"></span><br><span class=\"line\">    gzip_buffers 16 64k;</span><br><span class=\"line\"></span><br><span class=\"line\">    gzip_http_version 1.1;</span><br><span class=\"line\"></span><br><span class=\"line\">    gzip_comp_level 6;</span><br><span class=\"line\">    # gzip 压缩级别，1-10，数字越大压缩的越好，也越占用CPU时间</span><br><span class=\"line\">    </span><br><span class=\"line\">    gzip_types text/plain application/x-javascript text/css application/xml application/javascript application/json;</span><br><span class=\"line\">    # 进行压缩的文件类型。</span><br><span class=\"line\"></span><br><span class=\"line\">    gzip_vary on;</span><br><span class=\"line\">    # 是否在http header中添加Vary: Accept-Encoding</span><br><span class=\"line\"></span><br><span class=\"line\">    gzip_disable &quot;MSIE [1-6]\\.&quot;;</span><br><span class=\"line\">    # 禁用IE 6 gzip</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"效果拔群\"><a href=\"#效果拔群\" class=\"headerlink\" title=\"效果拔群\"></a>效果拔群</h2><p>百度统计的测试结果，从12s提高到6s</p>\n<p><img src=\"/images/94641900.jpg\" title=\"-6s, excited!\"> </p>\n","excerpt":"","more":"<h2 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    gzip on;</span><br><span class=\"line\">    </span><br><span class=\"line\">    gzip_min_length 1k;</span><br><span class=\"line\">    # 启用gzip压缩的最小文件，小于设置值的文件将不会压缩</span><br><span class=\"line\"></span><br><span class=\"line\">    gzip_buffers 16 64k;</span><br><span class=\"line\"></span><br><span class=\"line\">    gzip_http_version 1.1;</span><br><span class=\"line\"></span><br><span class=\"line\">    gzip_comp_level 6;</span><br><span class=\"line\">    # gzip 压缩级别，1-10，数字越大压缩的越好，也越占用CPU时间</span><br><span class=\"line\">    </span><br><span class=\"line\">    gzip_types text/plain application/x-javascript text/css application/xml application/javascript application/json;</span><br><span class=\"line\">    # 进行压缩的文件类型。</span><br><span class=\"line\"></span><br><span class=\"line\">    gzip_vary on;</span><br><span class=\"line\">    # 是否在http header中添加Vary: Accept-Encoding</span><br><span class=\"line\"></span><br><span class=\"line\">    gzip_disable &quot;MSIE [1-6]\\.&quot;;</span><br><span class=\"line\">    # 禁用IE 6 gzip</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"效果拔群\"><a href=\"#效果拔群\" class=\"headerlink\" title=\"效果拔群\"></a>效果拔群</h2><p>百度统计的测试结果，从12s提高到6s</p>\n<p><img src=\"/images/94641900.jpg\" title=\"-6s, excited!\"> </p>\n"},{"title":"npm、webpack和vue","typora-root-url":"../../source","date":"2019-05-26T11:34:01.000Z","_content":"\n# 旧内容\n\n\n```\nnpm install packageName -g //全局安装，安装在Node安装目录下的node_modules下\nnpm install packageName --save //安装到项目目录下，并在package.json文件的dependencies中写入依赖，简写为-S\nnpm install packageName --save-dev //安装到项目目录下，并在package.json文件的devDependencies中写入依赖，简写为-D\n```\n\n\n[webpack](https://www.jianshu.com/p/42e11515c10f)，这个是webpack的入门教程。链接没了\n\n# 2021年追加\n\n最近在弄gitbook，发现需要node老版本，发现node也需要像python一样，搞点虚拟环境\n\n所以[卸载了node](https://stackoverflow.com/questions/11177954/how-do-i-completely-uninstall-node-js-and-reinstall-from-beginning-mac-os-x)\n\n装了nvm\n\n","source":"_posts/npm、webpack和vue.md","raw":"---\ntitle: npm、webpack和vue\ntypora-root-url: ../../source\ntags:\n  - npm\n  - webpack\n  - vue\ncategories: javascript\ndate: 2019-05-26 19:34:01\n---\n\n# 旧内容\n\n\n```\nnpm install packageName -g //全局安装，安装在Node安装目录下的node_modules下\nnpm install packageName --save //安装到项目目录下，并在package.json文件的dependencies中写入依赖，简写为-S\nnpm install packageName --save-dev //安装到项目目录下，并在package.json文件的devDependencies中写入依赖，简写为-D\n```\n\n\n[webpack](https://www.jianshu.com/p/42e11515c10f)，这个是webpack的入门教程。链接没了\n\n# 2021年追加\n\n最近在弄gitbook，发现需要node老版本，发现node也需要像python一样，搞点虚拟环境\n\n所以[卸载了node](https://stackoverflow.com/questions/11177954/how-do-i-completely-uninstall-node-js-and-reinstall-from-beginning-mac-os-x)\n\n装了nvm\n\n","slug":"npm、webpack和vue","published":1,"updated":"2023-11-05T11:42:33.904Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li30025s2kzbpoufy25","content":"<h1 id=\"旧内容\"><a href=\"#旧内容\" class=\"headerlink\" title=\"旧内容\"></a>旧内容</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install packageName -g //全局安装，安装在Node安装目录下的node_modules下</span><br><span class=\"line\">npm install packageName --save //安装到项目目录下，并在package.json文件的dependencies中写入依赖，简写为-S</span><br><span class=\"line\">npm install packageName --save-dev //安装到项目目录下，并在package.json文件的devDependencies中写入依赖，简写为-D</span><br></pre></td></tr></table></figure>\n\n\n<p><a href=\"https://www.jianshu.com/p/42e11515c10f\">webpack</a>，这个是webpack的入门教程。链接没了</p>\n<h1 id=\"2021年追加\"><a href=\"#2021年追加\" class=\"headerlink\" title=\"2021年追加\"></a>2021年追加</h1><p>最近在弄gitbook，发现需要node老版本，发现node也需要像python一样，搞点虚拟环境</p>\n<p>所以<a href=\"https://stackoverflow.com/questions/11177954/how-do-i-completely-uninstall-node-js-and-reinstall-from-beginning-mac-os-x\">卸载了node</a></p>\n<p>装了nvm</p>\n","excerpt":"","more":"<h1 id=\"旧内容\"><a href=\"#旧内容\" class=\"headerlink\" title=\"旧内容\"></a>旧内容</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install packageName -g //全局安装，安装在Node安装目录下的node_modules下</span><br><span class=\"line\">npm install packageName --save //安装到项目目录下，并在package.json文件的dependencies中写入依赖，简写为-S</span><br><span class=\"line\">npm install packageName --save-dev //安装到项目目录下，并在package.json文件的devDependencies中写入依赖，简写为-D</span><br></pre></td></tr></table></figure>\n\n\n<p><a href=\"https://www.jianshu.com/p/42e11515c10f\">webpack</a>，这个是webpack的入门教程。链接没了</p>\n<h1 id=\"2021年追加\"><a href=\"#2021年追加\" class=\"headerlink\" title=\"2021年追加\"></a>2021年追加</h1><p>最近在弄gitbook，发现需要node老版本，发现node也需要像python一样，搞点虚拟环境</p>\n<p>所以<a href=\"https://stackoverflow.com/questions/11177954/how-do-i-completely-uninstall-node-js-and-reinstall-from-beginning-mac-os-x\">卸载了node</a></p>\n<p>装了nvm</p>\n"},{"title":"flask部署：gunicorn和nginx安装记录","typora-root-url":"../../source","date":"2018-01-14T06:14:42.000Z","_content":"\n### 1. gunicorn\npython用的是anaconda 2.7，首先安装虚拟环境\n好像是anaconda下用virtualenv会有点问题\ngunicorn的w表示开启进程数\nPS: [nohup的详细解释](http://www.ruanyifeng.com/blog/2016/02/linux-daemon.html) \n```\nconda create -n newenv python=2.7 \nsource activate newenv //启用python 虚拟环境\npip install gunicorn //安装gunicorn\nnohup gunicorn -w 4 --access-logfile access.log --error-logfile error.log -b 127.0.0.1:8080 manage:app&\napp_file_name:app_name & \n```\ngunicorn更改log的输出，[详细说明](http://docs.gunicorn.org/en/latest/settings.html#logging)\n```\n--access-logfile FILE\n--error-logfile FILE, --log-file FILE\n```\n### 2. nginx\n```\nyum install nginx\n```\n然后修改nginx配置，转发至localhost的端口\n```\nserver {\n    listen       80 default_server;\n    server_name  _;\n\n    location / {\n        proxy_pass http://127.0.0.1:8080;\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n}\n```\n检查nginx config，重启nginx\n```\nnginx -t\nservice naginx restart\n```\n\n### 3.nginx反向代理和防盗链\n\n为了防止静态资源被其他站点请求，改为`return 403`。\n但这样一来，本站请求的静态资源在经过static后，不再做转发，所以又把转发重复了一遍。\n不知道有没有更优雅的写法。\n```\nserver {\n    listen       80 default_server;\n    server_name  _;\n\n    location /static/ {\n        valid_referers 47.95.193.53;\n        if ($invalid_referer) {\n            return 403;\n        }\n        proxy_pass http://127.0.0.1:8080;\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n    location / {\n        proxy_pass http://127.0.0.1:8080;\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n}\n```\n反爬虫\n```\n location / {\n        if ($http_user_agent ~* \"python|curl|java|wget|httpclient|okhttp\") {\n            return 503; #service unavaiable\n        }\n        # 正常处理\n        ...\n    }\n```\n\n### 4.坑比阿里云的\b\bsmtp端口\n\n阿里云默默地把smtp的25端口禁掉了，要使用ssl的465端口\n使用`flask-mail`需要在`config.py `中配置\n```\nMAIL_SERVER = 'smtp.163.com'\nMAIL_PORT = 465\nMAIL_USE_SSL = True\n```\n","source":"_posts/flask部署：gunicorn和nginx安装记录.md","raw":"---\ntitle: flask部署：gunicorn和nginx安装记录\ntypora-root-url: ../../source\ndate: 2018-01-14 14:14:42\ntags: flask\ncategories: flask网站总结\n---\n\n### 1. gunicorn\npython用的是anaconda 2.7，首先安装虚拟环境\n好像是anaconda下用virtualenv会有点问题\ngunicorn的w表示开启进程数\nPS: [nohup的详细解释](http://www.ruanyifeng.com/blog/2016/02/linux-daemon.html) \n```\nconda create -n newenv python=2.7 \nsource activate newenv //启用python 虚拟环境\npip install gunicorn //安装gunicorn\nnohup gunicorn -w 4 --access-logfile access.log --error-logfile error.log -b 127.0.0.1:8080 manage:app&\napp_file_name:app_name & \n```\ngunicorn更改log的输出，[详细说明](http://docs.gunicorn.org/en/latest/settings.html#logging)\n```\n--access-logfile FILE\n--error-logfile FILE, --log-file FILE\n```\n### 2. nginx\n```\nyum install nginx\n```\n然后修改nginx配置，转发至localhost的端口\n```\nserver {\n    listen       80 default_server;\n    server_name  _;\n\n    location / {\n        proxy_pass http://127.0.0.1:8080;\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n}\n```\n检查nginx config，重启nginx\n```\nnginx -t\nservice naginx restart\n```\n\n### 3.nginx反向代理和防盗链\n\n为了防止静态资源被其他站点请求，改为`return 403`。\n但这样一来，本站请求的静态资源在经过static后，不再做转发，所以又把转发重复了一遍。\n不知道有没有更优雅的写法。\n```\nserver {\n    listen       80 default_server;\n    server_name  _;\n\n    location /static/ {\n        valid_referers 47.95.193.53;\n        if ($invalid_referer) {\n            return 403;\n        }\n        proxy_pass http://127.0.0.1:8080;\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n    location / {\n        proxy_pass http://127.0.0.1:8080;\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n}\n```\n反爬虫\n```\n location / {\n        if ($http_user_agent ~* \"python|curl|java|wget|httpclient|okhttp\") {\n            return 503; #service unavaiable\n        }\n        # 正常处理\n        ...\n    }\n```\n\n### 4.坑比阿里云的\b\bsmtp端口\n\n阿里云默默地把smtp的25端口禁掉了，要使用ssl的465端口\n使用`flask-mail`需要在`config.py `中配置\n```\nMAIL_SERVER = 'smtp.163.com'\nMAIL_PORT = 465\nMAIL_USE_SSL = True\n```\n","slug":"flask部署：gunicorn和nginx安装记录","published":1,"updated":"2023-11-05T11:42:33.904Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li30028s2kzcvec8pn3","content":"<h3 id=\"1-gunicorn\"><a href=\"#1-gunicorn\" class=\"headerlink\" title=\"1. gunicorn\"></a>1. gunicorn</h3><p>python用的是anaconda 2.7，首先安装虚拟环境<br>好像是anaconda下用virtualenv会有点问题<br>gunicorn的w表示开启进程数<br>PS: <a href=\"http://www.ruanyifeng.com/blog/2016/02/linux-daemon.html\">nohup的详细解释</a> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n newenv python=2.7 </span><br><span class=\"line\">source activate newenv //启用python 虚拟环境</span><br><span class=\"line\">pip install gunicorn //安装gunicorn</span><br><span class=\"line\">nohup gunicorn -w 4 --access-logfile access.log --error-logfile error.log -b 127.0.0.1:8080 manage:app&amp;</span><br><span class=\"line\">app_file_name:app_name &amp; </span><br></pre></td></tr></table></figure>\n<p>gunicorn更改log的输出，<a href=\"http://docs.gunicorn.org/en/latest/settings.html#logging\">详细说明</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--access-logfile FILE</span><br><span class=\"line\">--error-logfile FILE, --log-file FILE</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-nginx\"><a href=\"#2-nginx\" class=\"headerlink\" title=\"2. nginx\"></a>2. nginx</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nginx</span><br></pre></td></tr></table></figure>\n<p>然后修改nginx配置，转发至localhost的端口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80 default_server;</span><br><span class=\"line\">    server_name  _;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:8080;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>检查nginx config，重启nginx</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br><span class=\"line\">service naginx restart</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-nginx反向代理和防盗链\"><a href=\"#3-nginx反向代理和防盗链\" class=\"headerlink\" title=\"3.nginx反向代理和防盗链\"></a>3.nginx反向代理和防盗链</h3><p>为了防止静态资源被其他站点请求，改为<code>return 403</code>。<br>但这样一来，本站请求的静态资源在经过static后，不再做转发，所以又把转发重复了一遍。<br>不知道有没有更优雅的写法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80 default_server;</span><br><span class=\"line\">    server_name  _;</span><br><span class=\"line\"></span><br><span class=\"line\">    location /static/ &#123;</span><br><span class=\"line\">        valid_referers 47.95.193.53;</span><br><span class=\"line\">        if ($invalid_referer) &#123;</span><br><span class=\"line\">            return 403;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:8080;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:8080;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>反爬虫</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">       if ($http_user_agent ~* &quot;python|curl|java|wget|httpclient|okhttp&quot;) &#123;</span><br><span class=\"line\">           return 503; #service unavaiable</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       # 正常处理</span><br><span class=\"line\">       ...</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-坑比阿里云的smtp端口\"><a href=\"#4-坑比阿里云的smtp端口\" class=\"headerlink\" title=\"4.坑比阿里云的\b\bsmtp端口\"></a>4.坑比阿里云的\b\bsmtp端口</h3><p>阿里云默默地把smtp的25端口禁掉了，要使用ssl的465端口<br>使用<code>flask-mail</code>需要在<code>config.py </code>中配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MAIL_SERVER = &#x27;smtp.163.com&#x27;</span><br><span class=\"line\">MAIL_PORT = 465</span><br><span class=\"line\">MAIL_USE_SSL = True</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"1-gunicorn\"><a href=\"#1-gunicorn\" class=\"headerlink\" title=\"1. gunicorn\"></a>1. gunicorn</h3><p>python用的是anaconda 2.7，首先安装虚拟环境<br>好像是anaconda下用virtualenv会有点问题<br>gunicorn的w表示开启进程数<br>PS: <a href=\"http://www.ruanyifeng.com/blog/2016/02/linux-daemon.html\">nohup的详细解释</a> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n newenv python=2.7 </span><br><span class=\"line\">source activate newenv //启用python 虚拟环境</span><br><span class=\"line\">pip install gunicorn //安装gunicorn</span><br><span class=\"line\">nohup gunicorn -w 4 --access-logfile access.log --error-logfile error.log -b 127.0.0.1:8080 manage:app&amp;</span><br><span class=\"line\">app_file_name:app_name &amp; </span><br></pre></td></tr></table></figure>\n<p>gunicorn更改log的输出，<a href=\"http://docs.gunicorn.org/en/latest/settings.html#logging\">详细说明</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--access-logfile FILE</span><br><span class=\"line\">--error-logfile FILE, --log-file FILE</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-nginx\"><a href=\"#2-nginx\" class=\"headerlink\" title=\"2. nginx\"></a>2. nginx</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nginx</span><br></pre></td></tr></table></figure>\n<p>然后修改nginx配置，转发至localhost的端口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80 default_server;</span><br><span class=\"line\">    server_name  _;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:8080;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>检查nginx config，重启nginx</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br><span class=\"line\">service naginx restart</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-nginx反向代理和防盗链\"><a href=\"#3-nginx反向代理和防盗链\" class=\"headerlink\" title=\"3.nginx反向代理和防盗链\"></a>3.nginx反向代理和防盗链</h3><p>为了防止静态资源被其他站点请求，改为<code>return 403</code>。<br>但这样一来，本站请求的静态资源在经过static后，不再做转发，所以又把转发重复了一遍。<br>不知道有没有更优雅的写法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80 default_server;</span><br><span class=\"line\">    server_name  _;</span><br><span class=\"line\"></span><br><span class=\"line\">    location /static/ &#123;</span><br><span class=\"line\">        valid_referers 47.95.193.53;</span><br><span class=\"line\">        if ($invalid_referer) &#123;</span><br><span class=\"line\">            return 403;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:8080;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:8080;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>反爬虫</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">       if ($http_user_agent ~* &quot;python|curl|java|wget|httpclient|okhttp&quot;) &#123;</span><br><span class=\"line\">           return 503; #service unavaiable</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       # 正常处理</span><br><span class=\"line\">       ...</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-坑比阿里云的smtp端口\"><a href=\"#4-坑比阿里云的smtp端口\" class=\"headerlink\" title=\"4.坑比阿里云的\b\bsmtp端口\"></a>4.坑比阿里云的\b\bsmtp端口</h3><p>阿里云默默地把smtp的25端口禁掉了，要使用ssl的465端口<br>使用<code>flask-mail</code>需要在<code>config.py </code>中配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MAIL_SERVER = &#x27;smtp.163.com&#x27;</span><br><span class=\"line\">MAIL_PORT = 465</span><br><span class=\"line\">MAIL_USE_SSL = True</span><br></pre></td></tr></table></figure>\n"},{"title":"onlyoffice文档在线编辑","typora-root-url":"../../source","date":"2020-03-29T09:36:50.000Z","_content":"\n- 文档列表页\n\n![screencapture-192-168-1-104-8088-onlyoffice-2020-05-11-22_27_51](/images/screencapture-192-168-1-104-8088-onlyoffice-2020-05-11-22_27_51.png)\n\n- 文档编辑页\n\n![screencapture-192-168-1-104-8088-onlyoffice-1-2020-05-11-22_28_35](/images/screencapture-192-168-1-104-8088-onlyoffice-1-2020-05-11-22_28_35.png)\n\n\n\n# 是什么\n- 一个文档在线编辑平台，部署在局域网，可以用作组内日报/周报系统\n- 其实是从[3xxx/engineercms](https://github.com/3xxx/engineercms) fork来的，只保留了文档编辑的功能\n\n# 怎么用\n- docker启动onlyoffice `docker run -i -t -d -p 9000:80 onlyoffice/documentserver`\n- 修改conf/app.conf中的ip配置，注意不能写localhost，不然局域网的其他用户访问不到\n```\ndocumentserverip = http://192.168.1.107:9000\nentryserverip = http://192.168.1.107:8088\n```\n- 解压main.rar，运行exe，浏览器端访问entryserverip\n\n# 代码结构\n\n- onlyoffice负责文档编辑的功能，onlyoffice的api可以参考[这里](https://www.jianshu.com/p/2d4f977ffeac)\n- 本项目负责文档的上传、删除、用户管理等，采用beego MVC架构\n\n# 相比[3xxx/engineercms](https://github.com/3xxx/engineercms)做了哪些修改\n\n修改主要是为了更适合做日报系统\n## 删除了文档编辑以外的功能\n## 文档自动上传\n\n- 日报中包含日期，如“总裁办公室20200331.xlsx”，会自动复制日期最新的一份日报，并对日报做清空后自动上传\n\n- 那些内容清空？\n\n  只保留第一个sheet，sheet命名为日期（MMdd）\n  \n  conf/app.conf中，设置那些行和列以内保留，≤rowkeep和colkeep的内容保留\n```\n#####日报清空，前多少行和列保留，固定只保留第一个sheet\nrowkeep = 1\ncolkeep = 4\n```\n\n- 什么时候上传？\n\n  每次打开文档列表也都判断是否有今天的日报，没有就自动上传\n\n  节假日没有人访问，所以避免了逻辑判断是否上传\n\n## 文档自动保存\n\n- 原来文档不会自动保存吗？\n  \n  编辑后的文档都暂时存在onlyoffice的docker中\n  \n  只有在所有人关闭文档的情况下，才会将文档内容保存到本地\n\n  做不到全部用户及时关闭文档，而如果docker崩了，文档内容就丢失了\n\n- 如何解决？\n  \n  在没有用户使用的情况下强制保存。conf/app.conf中设置了定时保存，默认设置是晚上10点，每10分钟保存一次\n\n```\n#####文档保存本地\nforcesavecron = \"0 */10 22 * * *\"\n###              秒 分  时  日 月 周\n```\n\n\n## 登录权限\n- 内网用户比较可靠，不做权限限制，不需要注册账户\n- 可以不登录用ip作为用户名\n- 可以“假登录”，直接登录，不检查用户是否存在，不检查密码","source":"_posts/onlyoffice文档在线编辑.md","raw":"---\n\ntitle: onlyoffice文档在线编辑\ntags:\n  - onlyoffice\n  - beego\ntypora-root-url: ../../source\ndate: 2020-03-29 17:36:50\n---\n\n- 文档列表页\n\n![screencapture-192-168-1-104-8088-onlyoffice-2020-05-11-22_27_51](/images/screencapture-192-168-1-104-8088-onlyoffice-2020-05-11-22_27_51.png)\n\n- 文档编辑页\n\n![screencapture-192-168-1-104-8088-onlyoffice-1-2020-05-11-22_28_35](/images/screencapture-192-168-1-104-8088-onlyoffice-1-2020-05-11-22_28_35.png)\n\n\n\n# 是什么\n- 一个文档在线编辑平台，部署在局域网，可以用作组内日报/周报系统\n- 其实是从[3xxx/engineercms](https://github.com/3xxx/engineercms) fork来的，只保留了文档编辑的功能\n\n# 怎么用\n- docker启动onlyoffice `docker run -i -t -d -p 9000:80 onlyoffice/documentserver`\n- 修改conf/app.conf中的ip配置，注意不能写localhost，不然局域网的其他用户访问不到\n```\ndocumentserverip = http://192.168.1.107:9000\nentryserverip = http://192.168.1.107:8088\n```\n- 解压main.rar，运行exe，浏览器端访问entryserverip\n\n# 代码结构\n\n- onlyoffice负责文档编辑的功能，onlyoffice的api可以参考[这里](https://www.jianshu.com/p/2d4f977ffeac)\n- 本项目负责文档的上传、删除、用户管理等，采用beego MVC架构\n\n# 相比[3xxx/engineercms](https://github.com/3xxx/engineercms)做了哪些修改\n\n修改主要是为了更适合做日报系统\n## 删除了文档编辑以外的功能\n## 文档自动上传\n\n- 日报中包含日期，如“总裁办公室20200331.xlsx”，会自动复制日期最新的一份日报，并对日报做清空后自动上传\n\n- 那些内容清空？\n\n  只保留第一个sheet，sheet命名为日期（MMdd）\n  \n  conf/app.conf中，设置那些行和列以内保留，≤rowkeep和colkeep的内容保留\n```\n#####日报清空，前多少行和列保留，固定只保留第一个sheet\nrowkeep = 1\ncolkeep = 4\n```\n\n- 什么时候上传？\n\n  每次打开文档列表也都判断是否有今天的日报，没有就自动上传\n\n  节假日没有人访问，所以避免了逻辑判断是否上传\n\n## 文档自动保存\n\n- 原来文档不会自动保存吗？\n  \n  编辑后的文档都暂时存在onlyoffice的docker中\n  \n  只有在所有人关闭文档的情况下，才会将文档内容保存到本地\n\n  做不到全部用户及时关闭文档，而如果docker崩了，文档内容就丢失了\n\n- 如何解决？\n  \n  在没有用户使用的情况下强制保存。conf/app.conf中设置了定时保存，默认设置是晚上10点，每10分钟保存一次\n\n```\n#####文档保存本地\nforcesavecron = \"0 */10 22 * * *\"\n###              秒 分  时  日 月 周\n```\n\n\n## 登录权限\n- 内网用户比较可靠，不做权限限制，不需要注册账户\n- 可以不登录用ip作为用户名\n- 可以“假登录”，直接登录，不检查用户是否存在，不检查密码","slug":"onlyoffice文档在线编辑","published":1,"updated":"2023-11-05T11:42:33.904Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li4002bs2kz3ma8d7ob","content":"<ul>\n<li>文档列表页</li>\n</ul>\n<p><img src=\"/images/screencapture-192-168-1-104-8088-onlyoffice-2020-05-11-22_27_51.png\" alt=\"screencapture-192-168-1-104-8088-onlyoffice-2020-05-11-22_27_51\"></p>\n<ul>\n<li>文档编辑页</li>\n</ul>\n<p><img src=\"/images/screencapture-192-168-1-104-8088-onlyoffice-1-2020-05-11-22_28_35.png\" alt=\"screencapture-192-168-1-104-8088-onlyoffice-1-2020-05-11-22_28_35\"></p>\n<h1 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h1><ul>\n<li>一个文档在线编辑平台，部署在局域网，可以用作组内日报&#x2F;周报系统</li>\n<li>其实是从<a href=\"https://github.com/3xxx/engineercms\">3xxx&#x2F;engineercms</a> fork来的，只保留了文档编辑的功能</li>\n</ul>\n<h1 id=\"怎么用\"><a href=\"#怎么用\" class=\"headerlink\" title=\"怎么用\"></a>怎么用</h1><ul>\n<li>docker启动onlyoffice <code>docker run -i -t -d -p 9000:80 onlyoffice/documentserver</code></li>\n<li>修改conf&#x2F;app.conf中的ip配置，注意不能写localhost，不然局域网的其他用户访问不到<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">documentserverip = http://192.168.1.107:9000</span><br><span class=\"line\">entryserverip = http://192.168.1.107:8088</span><br></pre></td></tr></table></figure></li>\n<li>解压main.rar，运行exe，浏览器端访问entryserverip</li>\n</ul>\n<h1 id=\"代码结构\"><a href=\"#代码结构\" class=\"headerlink\" title=\"代码结构\"></a>代码结构</h1><ul>\n<li>onlyoffice负责文档编辑的功能，onlyoffice的api可以参考<a href=\"https://www.jianshu.com/p/2d4f977ffeac\">这里</a></li>\n<li>本项目负责文档的上传、删除、用户管理等，采用beego MVC架构</li>\n</ul>\n<h1 id=\"相比3xxx-engineercms做了哪些修改\"><a href=\"#相比3xxx-engineercms做了哪些修改\" class=\"headerlink\" title=\"相比3xxx&#x2F;engineercms做了哪些修改\"></a>相比<a href=\"https://github.com/3xxx/engineercms\">3xxx&#x2F;engineercms</a>做了哪些修改</h1><p>修改主要是为了更适合做日报系统</p>\n<h2 id=\"删除了文档编辑以外的功能\"><a href=\"#删除了文档编辑以外的功能\" class=\"headerlink\" title=\"删除了文档编辑以外的功能\"></a>删除了文档编辑以外的功能</h2><h2 id=\"文档自动上传\"><a href=\"#文档自动上传\" class=\"headerlink\" title=\"文档自动上传\"></a>文档自动上传</h2><ul>\n<li><p>日报中包含日期，如“总裁办公室20200331.xlsx”，会自动复制日期最新的一份日报，并对日报做清空后自动上传</p>\n</li>\n<li><p>那些内容清空？</p>\n<p>只保留第一个sheet，sheet命名为日期（MMdd）</p>\n<p>conf&#x2F;app.conf中，设置那些行和列以内保留，≤rowkeep和colkeep的内容保留</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#####日报清空，前多少行和列保留，固定只保留第一个sheet</span><br><span class=\"line\">rowkeep = 1</span><br><span class=\"line\">colkeep = 4</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>什么时候上传？</p>\n<p>每次打开文档列表也都判断是否有今天的日报，没有就自动上传</p>\n<p>节假日没有人访问，所以避免了逻辑判断是否上传</p>\n</li>\n</ul>\n<h2 id=\"文档自动保存\"><a href=\"#文档自动保存\" class=\"headerlink\" title=\"文档自动保存\"></a>文档自动保存</h2><ul>\n<li><p>原来文档不会自动保存吗？</p>\n<p>编辑后的文档都暂时存在onlyoffice的docker中</p>\n<p>只有在所有人关闭文档的情况下，才会将文档内容保存到本地</p>\n<p>做不到全部用户及时关闭文档，而如果docker崩了，文档内容就丢失了</p>\n</li>\n<li><p>如何解决？</p>\n<p>在没有用户使用的情况下强制保存。conf&#x2F;app.conf中设置了定时保存，默认设置是晚上10点，每10分钟保存一次</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#####文档保存本地</span><br><span class=\"line\">forcesavecron = &quot;0 */10 22 * * *&quot;</span><br><span class=\"line\">###              秒 分  时  日 月 周</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"登录权限\"><a href=\"#登录权限\" class=\"headerlink\" title=\"登录权限\"></a>登录权限</h2><ul>\n<li>内网用户比较可靠，不做权限限制，不需要注册账户</li>\n<li>可以不登录用ip作为用户名</li>\n<li>可以“假登录”，直接登录，不检查用户是否存在，不检查密码</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li>文档列表页</li>\n</ul>\n<p><img src=\"/images/screencapture-192-168-1-104-8088-onlyoffice-2020-05-11-22_27_51.png\" alt=\"screencapture-192-168-1-104-8088-onlyoffice-2020-05-11-22_27_51\"></p>\n<ul>\n<li>文档编辑页</li>\n</ul>\n<p><img src=\"/images/screencapture-192-168-1-104-8088-onlyoffice-1-2020-05-11-22_28_35.png\" alt=\"screencapture-192-168-1-104-8088-onlyoffice-1-2020-05-11-22_28_35\"></p>\n<h1 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h1><ul>\n<li>一个文档在线编辑平台，部署在局域网，可以用作组内日报&#x2F;周报系统</li>\n<li>其实是从<a href=\"https://github.com/3xxx/engineercms\">3xxx&#x2F;engineercms</a> fork来的，只保留了文档编辑的功能</li>\n</ul>\n<h1 id=\"怎么用\"><a href=\"#怎么用\" class=\"headerlink\" title=\"怎么用\"></a>怎么用</h1><ul>\n<li>docker启动onlyoffice <code>docker run -i -t -d -p 9000:80 onlyoffice/documentserver</code></li>\n<li>修改conf&#x2F;app.conf中的ip配置，注意不能写localhost，不然局域网的其他用户访问不到<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">documentserverip = http://192.168.1.107:9000</span><br><span class=\"line\">entryserverip = http://192.168.1.107:8088</span><br></pre></td></tr></table></figure></li>\n<li>解压main.rar，运行exe，浏览器端访问entryserverip</li>\n</ul>\n<h1 id=\"代码结构\"><a href=\"#代码结构\" class=\"headerlink\" title=\"代码结构\"></a>代码结构</h1><ul>\n<li>onlyoffice负责文档编辑的功能，onlyoffice的api可以参考<a href=\"https://www.jianshu.com/p/2d4f977ffeac\">这里</a></li>\n<li>本项目负责文档的上传、删除、用户管理等，采用beego MVC架构</li>\n</ul>\n<h1 id=\"相比3xxx-engineercms做了哪些修改\"><a href=\"#相比3xxx-engineercms做了哪些修改\" class=\"headerlink\" title=\"相比3xxx&#x2F;engineercms做了哪些修改\"></a>相比<a href=\"https://github.com/3xxx/engineercms\">3xxx&#x2F;engineercms</a>做了哪些修改</h1><p>修改主要是为了更适合做日报系统</p>\n<h2 id=\"删除了文档编辑以外的功能\"><a href=\"#删除了文档编辑以外的功能\" class=\"headerlink\" title=\"删除了文档编辑以外的功能\"></a>删除了文档编辑以外的功能</h2><h2 id=\"文档自动上传\"><a href=\"#文档自动上传\" class=\"headerlink\" title=\"文档自动上传\"></a>文档自动上传</h2><ul>\n<li><p>日报中包含日期，如“总裁办公室20200331.xlsx”，会自动复制日期最新的一份日报，并对日报做清空后自动上传</p>\n</li>\n<li><p>那些内容清空？</p>\n<p>只保留第一个sheet，sheet命名为日期（MMdd）</p>\n<p>conf&#x2F;app.conf中，设置那些行和列以内保留，≤rowkeep和colkeep的内容保留</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#####日报清空，前多少行和列保留，固定只保留第一个sheet</span><br><span class=\"line\">rowkeep = 1</span><br><span class=\"line\">colkeep = 4</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>什么时候上传？</p>\n<p>每次打开文档列表也都判断是否有今天的日报，没有就自动上传</p>\n<p>节假日没有人访问，所以避免了逻辑判断是否上传</p>\n</li>\n</ul>\n<h2 id=\"文档自动保存\"><a href=\"#文档自动保存\" class=\"headerlink\" title=\"文档自动保存\"></a>文档自动保存</h2><ul>\n<li><p>原来文档不会自动保存吗？</p>\n<p>编辑后的文档都暂时存在onlyoffice的docker中</p>\n<p>只有在所有人关闭文档的情况下，才会将文档内容保存到本地</p>\n<p>做不到全部用户及时关闭文档，而如果docker崩了，文档内容就丢失了</p>\n</li>\n<li><p>如何解决？</p>\n<p>在没有用户使用的情况下强制保存。conf&#x2F;app.conf中设置了定时保存，默认设置是晚上10点，每10分钟保存一次</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#####文档保存本地</span><br><span class=\"line\">forcesavecron = &quot;0 */10 22 * * *&quot;</span><br><span class=\"line\">###              秒 分  时  日 月 周</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"登录权限\"><a href=\"#登录权限\" class=\"headerlink\" title=\"登录权限\"></a>登录权限</h2><ul>\n<li>内网用户比较可靠，不做权限限制，不需要注册账户</li>\n<li>可以不登录用ip作为用户名</li>\n<li>可以“假登录”，直接登录，不检查用户是否存在，不检查密码</li>\n</ul>\n"},{"title":"openCV 总结","typora-root-url":"../../source","date":"2018-07-04T04:19:14.000Z","_content":"# 一些图像操作\n- [腐蚀与膨胀(Eroding and Dilating)](http://www.opencv.org.cn/opencvdoc/2.3.2/html/doc/tutorials/imgproc/erosion_dilatation/erosion_dilatation.html)\n\n> 膨胀腐蚀都是针对亮色区域说的，膨胀是取最大值，腐蚀是最小值，实现的话，最直接的方法是四个for循环\n\n- **开运算**：腐蚀+膨胀，可以去除图中的小白点；**闭运算**：膨胀+腐蚀，可以去除图片中的小黑点\n\n- **top hat**：原图-开，得到的是开运算中被去掉的小白点；**black hat**：原图-闭，得到闭运算中去掉的小黑点\n\n- [霍夫线变换](https://www.cnblogs.com/skyfsm/p/6902524.html)\n\n- 直方图均衡化\n\n```cpp\ncv::equalizeHist(srcmat, dstmat);\n\ncv::Mat lookup(1, 256, CV_8U);\n// p[i] 是强度小于等于i的比例\nlookup.at<uchar>(i) = static_cast<uchar>(255.0 * p[i]);\ndstmat = applyLookUp(srcmat, lookup);\n```\n\n# C的接口\n- 字体的说明参考[这里](https://blog.csdn.net/longzaitianya1989/article/details/8121286)\n- cvReleaseImage，只是将IplImage*型的变量值赋为NULL，而这个变量本身还是存在的并且在内存中的存储位置不变\n- `iplimg->imageSize == iplimg->height * iplimg->widthStep`，而不是f`rame->height * frame->width`\n- `iplimg->imageData`是对齐的内存，[官方文档](https://docs.opencv.org/3.4/d6/d5b/structIplImage.html)说`iplimg->imageDataOrigin`是没有对齐的内存，还没有验证过\n- 默认的存储方式是BGR，不是RGB\n\n```c\n// 读图\nIplImage* iplimg = cvLoadImage(\"heels.jpg\");\n\n// 把cv::mat改为c的图\n*iplimg = IplImage(matimg);\n\n// 创建新图，最后一个参数是channel数\nIplImage* iplimg=cvCreateImage(cvSize(360, 640), IPL_DEPTH_8U, 3);\n\n// 显示图\ncvNamedWindow(\"img\", 0);  \ncvShowImage(\"img\", iplimg);  \ncvWaitKey(0);  \n\n// 打印字\nCvFont font;\ncvInitFont(&font, CV_FONT_HERSHEY_COMPLEX, 0.5, 0.5, 1, 2, 8);  \ncvPutText(iplimg, \"This is a picture named lena!\", cvPoint(50, 50), &font, CV_RGB(255,0,0));\n\n// 保存图\ncvSaveImage(\"c:\\\\test1.jpg\", iplimg);  \n```\n\n# C++的接口\n\n```c++\n// 读图\ncv::Mat matimg = cv::imread (\"heels.jpg\");\n\n// 把IplImage改为c++接口，第二个参数是需不需要拷贝，默认是false\nmatimg = cv::Mat(iplimg, false);\n\n// 创建新图，CV_8UC3是三通道，CV_8UC1是单通道\ncv::Mat matimg(2, 2, CV_8UC3, Scalar(0,255,0));\n\n// 显示图\ncv::nameWindow(\"img\");\ncv::imshow(\"img\", matimg);\ncv::waitKey(-1);  \n\n// 打印字\n// void putText(Mat& img, const string& text, Point org, int fontFace, double fontScale, Scalar color, int thickness=1, int lineType=8, bool bottomLeftOrigin=false )\ncv::putText(image, \"opencv\", Point(5,100), FONT_HERSHEY_DUPLEX, 1, Scalar(0,143,143), 2);\n\n// 保存图，后缀名决定了图片对编码格式\ncv::imwrite(\"c:\\\\test1.jpg\", matimg);\n\n// 遍历图像\n// Vec3b表示三通道usigned char类型，\n// 还可以有2通道和4通道，类型还可以有f(loat)、i(nt)、d(ouble)、s(hort)、w(unsigned short)\n// typedef Vec<float, 2> Vec2f;\nmatimg.at<cv::Vec3b>(j,i)[channel] = value;\n\n// 还可以直接取每一行对首地址\nuchar* data = matimg.ptr<uchar>(j);\n```\n\n# 头文件分析\n- 一般直接包含这三个头文件\n\n```\n#include<opencv2/core/core.hpp>\n#include<opencv2/imgproc/imgproc.hpp>\n#include<opencv2/highgui/highgui.hpp>\n```\n","source":"_posts/openCV-总结.md","raw":"---\ntitle: openCV 总结\ntypora-root-url: ../../source\ndate: 2018-07-04 12:19:14\ntags: openCV\ncategories: cpp\n---\n# 一些图像操作\n- [腐蚀与膨胀(Eroding and Dilating)](http://www.opencv.org.cn/opencvdoc/2.3.2/html/doc/tutorials/imgproc/erosion_dilatation/erosion_dilatation.html)\n\n> 膨胀腐蚀都是针对亮色区域说的，膨胀是取最大值，腐蚀是最小值，实现的话，最直接的方法是四个for循环\n\n- **开运算**：腐蚀+膨胀，可以去除图中的小白点；**闭运算**：膨胀+腐蚀，可以去除图片中的小黑点\n\n- **top hat**：原图-开，得到的是开运算中被去掉的小白点；**black hat**：原图-闭，得到闭运算中去掉的小黑点\n\n- [霍夫线变换](https://www.cnblogs.com/skyfsm/p/6902524.html)\n\n- 直方图均衡化\n\n```cpp\ncv::equalizeHist(srcmat, dstmat);\n\ncv::Mat lookup(1, 256, CV_8U);\n// p[i] 是强度小于等于i的比例\nlookup.at<uchar>(i) = static_cast<uchar>(255.0 * p[i]);\ndstmat = applyLookUp(srcmat, lookup);\n```\n\n# C的接口\n- 字体的说明参考[这里](https://blog.csdn.net/longzaitianya1989/article/details/8121286)\n- cvReleaseImage，只是将IplImage*型的变量值赋为NULL，而这个变量本身还是存在的并且在内存中的存储位置不变\n- `iplimg->imageSize == iplimg->height * iplimg->widthStep`，而不是f`rame->height * frame->width`\n- `iplimg->imageData`是对齐的内存，[官方文档](https://docs.opencv.org/3.4/d6/d5b/structIplImage.html)说`iplimg->imageDataOrigin`是没有对齐的内存，还没有验证过\n- 默认的存储方式是BGR，不是RGB\n\n```c\n// 读图\nIplImage* iplimg = cvLoadImage(\"heels.jpg\");\n\n// 把cv::mat改为c的图\n*iplimg = IplImage(matimg);\n\n// 创建新图，最后一个参数是channel数\nIplImage* iplimg=cvCreateImage(cvSize(360, 640), IPL_DEPTH_8U, 3);\n\n// 显示图\ncvNamedWindow(\"img\", 0);  \ncvShowImage(\"img\", iplimg);  \ncvWaitKey(0);  \n\n// 打印字\nCvFont font;\ncvInitFont(&font, CV_FONT_HERSHEY_COMPLEX, 0.5, 0.5, 1, 2, 8);  \ncvPutText(iplimg, \"This is a picture named lena!\", cvPoint(50, 50), &font, CV_RGB(255,0,0));\n\n// 保存图\ncvSaveImage(\"c:\\\\test1.jpg\", iplimg);  \n```\n\n# C++的接口\n\n```c++\n// 读图\ncv::Mat matimg = cv::imread (\"heels.jpg\");\n\n// 把IplImage改为c++接口，第二个参数是需不需要拷贝，默认是false\nmatimg = cv::Mat(iplimg, false);\n\n// 创建新图，CV_8UC3是三通道，CV_8UC1是单通道\ncv::Mat matimg(2, 2, CV_8UC3, Scalar(0,255,0));\n\n// 显示图\ncv::nameWindow(\"img\");\ncv::imshow(\"img\", matimg);\ncv::waitKey(-1);  \n\n// 打印字\n// void putText(Mat& img, const string& text, Point org, int fontFace, double fontScale, Scalar color, int thickness=1, int lineType=8, bool bottomLeftOrigin=false )\ncv::putText(image, \"opencv\", Point(5,100), FONT_HERSHEY_DUPLEX, 1, Scalar(0,143,143), 2);\n\n// 保存图，后缀名决定了图片对编码格式\ncv::imwrite(\"c:\\\\test1.jpg\", matimg);\n\n// 遍历图像\n// Vec3b表示三通道usigned char类型，\n// 还可以有2通道和4通道，类型还可以有f(loat)、i(nt)、d(ouble)、s(hort)、w(unsigned short)\n// typedef Vec<float, 2> Vec2f;\nmatimg.at<cv::Vec3b>(j,i)[channel] = value;\n\n// 还可以直接取每一行对首地址\nuchar* data = matimg.ptr<uchar>(j);\n```\n\n# 头文件分析\n- 一般直接包含这三个头文件\n\n```\n#include<opencv2/core/core.hpp>\n#include<opencv2/imgproc/imgproc.hpp>\n#include<opencv2/highgui/highgui.hpp>\n```\n","slug":"openCV-总结","published":1,"updated":"2023-11-05T11:42:33.904Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li4002fs2kzaw5g1afn","content":"<h1 id=\"一些图像操作\"><a href=\"#一些图像操作\" class=\"headerlink\" title=\"一些图像操作\"></a>一些图像操作</h1><ul>\n<li><a href=\"http://www.opencv.org.cn/opencvdoc/2.3.2/html/doc/tutorials/imgproc/erosion_dilatation/erosion_dilatation.html\">腐蚀与膨胀(Eroding and Dilating)</a></li>\n</ul>\n<blockquote>\n<p>膨胀腐蚀都是针对亮色区域说的，膨胀是取最大值，腐蚀是最小值，实现的话，最直接的方法是四个for循环</p>\n</blockquote>\n<ul>\n<li><p><strong>开运算</strong>：腐蚀+膨胀，可以去除图中的小白点；<strong>闭运算</strong>：膨胀+腐蚀，可以去除图片中的小黑点</p>\n</li>\n<li><p><strong>top hat</strong>：原图-开，得到的是开运算中被去掉的小白点；<strong>black hat</strong>：原图-闭，得到闭运算中去掉的小黑点</p>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/skyfsm/p/6902524.html\">霍夫线变换</a></p>\n</li>\n<li><p>直方图均衡化</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cv::<span class=\"built_in\">equalizeHist</span>(srcmat, dstmat);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">cv::Mat <span class=\"title\">lookup</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">256</span>, CV_8U)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// p[i] 是强度小于等于i的比例</span></span><br><span class=\"line\">lookup.<span class=\"built_in\">at</span>&lt;uchar&gt;(i) = <span class=\"built_in\">static_cast</span>&lt;uchar&gt;(<span class=\"number\">255.0</span> * p[i]);</span><br><span class=\"line\">dstmat = <span class=\"built_in\">applyLookUp</span>(srcmat, lookup);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"C的接口\"><a href=\"#C的接口\" class=\"headerlink\" title=\"C的接口\"></a>C的接口</h1><ul>\n<li>字体的说明参考<a href=\"https://blog.csdn.net/longzaitianya1989/article/details/8121286\">这里</a></li>\n<li>cvReleaseImage，只是将IplImage*型的变量值赋为NULL，而这个变量本身还是存在的并且在内存中的存储位置不变</li>\n<li><code>iplimg-&gt;imageSize == iplimg-&gt;height * iplimg-&gt;widthStep</code>，而不是f<code>rame-&gt;height * frame-&gt;width</code></li>\n<li><code>iplimg-&gt;imageData</code>是对齐的内存，<a href=\"https://docs.opencv.org/3.4/d6/d5b/structIplImage.html\">官方文档</a>说<code>iplimg-&gt;imageDataOrigin</code>是没有对齐的内存，还没有验证过</li>\n<li>默认的存储方式是BGR，不是RGB</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 读图</span></span><br><span class=\"line\">IplImage* iplimg = cvLoadImage(<span class=\"string\">&quot;heels.jpg&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 把cv::mat改为c的图</span></span><br><span class=\"line\">*iplimg = IplImage(matimg);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建新图，最后一个参数是channel数</span></span><br><span class=\"line\">IplImage* iplimg=cvCreateImage(cvSize(<span class=\"number\">360</span>, <span class=\"number\">640</span>), IPL_DEPTH_8U, <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 显示图</span></span><br><span class=\"line\">cvNamedWindow(<span class=\"string\">&quot;img&quot;</span>, <span class=\"number\">0</span>);  </span><br><span class=\"line\">cvShowImage(<span class=\"string\">&quot;img&quot;</span>, iplimg);  </span><br><span class=\"line\">cvWaitKey(<span class=\"number\">0</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印字</span></span><br><span class=\"line\">CvFont font;</span><br><span class=\"line\">cvInitFont(&amp;font, CV_FONT_HERSHEY_COMPLEX, <span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>);  </span><br><span class=\"line\">cvPutText(iplimg, <span class=\"string\">&quot;This is a picture named lena!&quot;</span>, cvPoint(<span class=\"number\">50</span>, <span class=\"number\">50</span>), &amp;font, CV_RGB(<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 保存图</span></span><br><span class=\"line\">cvSaveImage(<span class=\"string\">&quot;c:\\\\test1.jpg&quot;</span>, iplimg);  </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"C-的接口\"><a href=\"#C-的接口\" class=\"headerlink\" title=\"C++的接口\"></a>C++的接口</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 读图</span></span><br><span class=\"line\">cv::Mat matimg = cv::<span class=\"built_in\">imread</span> (<span class=\"string\">&quot;heels.jpg&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 把IplImage改为c++接口，第二个参数是需不需要拷贝，默认是false</span></span><br><span class=\"line\">matimg = cv::<span class=\"built_in\">Mat</span>(iplimg, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建新图，CV_8UC3是三通道，CV_8UC1是单通道</span></span><br><span class=\"line\"><span class=\"function\">cv::Mat <span class=\"title\">matimg</span><span class=\"params\">(<span class=\"number\">2</span>, <span class=\"number\">2</span>, CV_8UC3, Scalar(<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">0</span>))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 显示图</span></span><br><span class=\"line\">cv::<span class=\"built_in\">nameWindow</span>(<span class=\"string\">&quot;img&quot;</span>);</span><br><span class=\"line\">cv::<span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;img&quot;</span>, matimg);</span><br><span class=\"line\">cv::<span class=\"built_in\">waitKey</span>(<span class=\"number\">-1</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印字</span></span><br><span class=\"line\"><span class=\"comment\">// void putText(Mat&amp; img, const string&amp; text, Point org, int fontFace, double fontScale, Scalar color, int thickness=1, int lineType=8, bool bottomLeftOrigin=false )</span></span><br><span class=\"line\">cv::<span class=\"built_in\">putText</span>(image, <span class=\"string\">&quot;opencv&quot;</span>, <span class=\"built_in\">Point</span>(<span class=\"number\">5</span>,<span class=\"number\">100</span>), FONT_HERSHEY_DUPLEX, <span class=\"number\">1</span>, <span class=\"built_in\">Scalar</span>(<span class=\"number\">0</span>,<span class=\"number\">143</span>,<span class=\"number\">143</span>), <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 保存图，后缀名决定了图片对编码格式</span></span><br><span class=\"line\">cv::<span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;c:\\\\test1.jpg&quot;</span>, matimg);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历图像</span></span><br><span class=\"line\"><span class=\"comment\">// Vec3b表示三通道usigned char类型，</span></span><br><span class=\"line\"><span class=\"comment\">// 还可以有2通道和4通道，类型还可以有f(loat)、i(nt)、d(ouble)、s(hort)、w(unsigned short)</span></span><br><span class=\"line\"><span class=\"comment\">// typedef Vec&lt;float, 2&gt; Vec2f;</span></span><br><span class=\"line\">matimg.<span class=\"built_in\">at</span>&lt;cv::Vec3b&gt;(j,i)[channel] = value;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 还可以直接取每一行对首地址</span></span><br><span class=\"line\">uchar* data = matimg.<span class=\"built_in\">ptr</span>&lt;uchar&gt;(j);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"头文件分析\"><a href=\"#头文件分析\" class=\"headerlink\" title=\"头文件分析\"></a>头文件分析</h1><ul>\n<li>一般直接包含这三个头文件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;opencv2/core/core.hpp&gt;</span><br><span class=\"line\">#include&lt;opencv2/imgproc/imgproc.hpp&gt;</span><br><span class=\"line\">#include&lt;opencv2/highgui/highgui.hpp&gt;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"一些图像操作\"><a href=\"#一些图像操作\" class=\"headerlink\" title=\"一些图像操作\"></a>一些图像操作</h1><ul>\n<li><a href=\"http://www.opencv.org.cn/opencvdoc/2.3.2/html/doc/tutorials/imgproc/erosion_dilatation/erosion_dilatation.html\">腐蚀与膨胀(Eroding and Dilating)</a></li>\n</ul>\n<blockquote>\n<p>膨胀腐蚀都是针对亮色区域说的，膨胀是取最大值，腐蚀是最小值，实现的话，最直接的方法是四个for循环</p>\n</blockquote>\n<ul>\n<li><p><strong>开运算</strong>：腐蚀+膨胀，可以去除图中的小白点；<strong>闭运算</strong>：膨胀+腐蚀，可以去除图片中的小黑点</p>\n</li>\n<li><p><strong>top hat</strong>：原图-开，得到的是开运算中被去掉的小白点；<strong>black hat</strong>：原图-闭，得到闭运算中去掉的小黑点</p>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/skyfsm/p/6902524.html\">霍夫线变换</a></p>\n</li>\n<li><p>直方图均衡化</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cv::<span class=\"built_in\">equalizeHist</span>(srcmat, dstmat);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">cv::Mat <span class=\"title\">lookup</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">256</span>, CV_8U)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// p[i] 是强度小于等于i的比例</span></span><br><span class=\"line\">lookup.<span class=\"built_in\">at</span>&lt;uchar&gt;(i) = <span class=\"built_in\">static_cast</span>&lt;uchar&gt;(<span class=\"number\">255.0</span> * p[i]);</span><br><span class=\"line\">dstmat = <span class=\"built_in\">applyLookUp</span>(srcmat, lookup);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"C的接口\"><a href=\"#C的接口\" class=\"headerlink\" title=\"C的接口\"></a>C的接口</h1><ul>\n<li>字体的说明参考<a href=\"https://blog.csdn.net/longzaitianya1989/article/details/8121286\">这里</a></li>\n<li>cvReleaseImage，只是将IplImage*型的变量值赋为NULL，而这个变量本身还是存在的并且在内存中的存储位置不变</li>\n<li><code>iplimg-&gt;imageSize == iplimg-&gt;height * iplimg-&gt;widthStep</code>，而不是f<code>rame-&gt;height * frame-&gt;width</code></li>\n<li><code>iplimg-&gt;imageData</code>是对齐的内存，<a href=\"https://docs.opencv.org/3.4/d6/d5b/structIplImage.html\">官方文档</a>说<code>iplimg-&gt;imageDataOrigin</code>是没有对齐的内存，还没有验证过</li>\n<li>默认的存储方式是BGR，不是RGB</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 读图</span></span><br><span class=\"line\">IplImage* iplimg = cvLoadImage(<span class=\"string\">&quot;heels.jpg&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 把cv::mat改为c的图</span></span><br><span class=\"line\">*iplimg = IplImage(matimg);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建新图，最后一个参数是channel数</span></span><br><span class=\"line\">IplImage* iplimg=cvCreateImage(cvSize(<span class=\"number\">360</span>, <span class=\"number\">640</span>), IPL_DEPTH_8U, <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 显示图</span></span><br><span class=\"line\">cvNamedWindow(<span class=\"string\">&quot;img&quot;</span>, <span class=\"number\">0</span>);  </span><br><span class=\"line\">cvShowImage(<span class=\"string\">&quot;img&quot;</span>, iplimg);  </span><br><span class=\"line\">cvWaitKey(<span class=\"number\">0</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印字</span></span><br><span class=\"line\">CvFont font;</span><br><span class=\"line\">cvInitFont(&amp;font, CV_FONT_HERSHEY_COMPLEX, <span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>);  </span><br><span class=\"line\">cvPutText(iplimg, <span class=\"string\">&quot;This is a picture named lena!&quot;</span>, cvPoint(<span class=\"number\">50</span>, <span class=\"number\">50</span>), &amp;font, CV_RGB(<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 保存图</span></span><br><span class=\"line\">cvSaveImage(<span class=\"string\">&quot;c:\\\\test1.jpg&quot;</span>, iplimg);  </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"C-的接口\"><a href=\"#C-的接口\" class=\"headerlink\" title=\"C++的接口\"></a>C++的接口</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 读图</span></span><br><span class=\"line\">cv::Mat matimg = cv::<span class=\"built_in\">imread</span> (<span class=\"string\">&quot;heels.jpg&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 把IplImage改为c++接口，第二个参数是需不需要拷贝，默认是false</span></span><br><span class=\"line\">matimg = cv::<span class=\"built_in\">Mat</span>(iplimg, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建新图，CV_8UC3是三通道，CV_8UC1是单通道</span></span><br><span class=\"line\"><span class=\"function\">cv::Mat <span class=\"title\">matimg</span><span class=\"params\">(<span class=\"number\">2</span>, <span class=\"number\">2</span>, CV_8UC3, Scalar(<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">0</span>))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 显示图</span></span><br><span class=\"line\">cv::<span class=\"built_in\">nameWindow</span>(<span class=\"string\">&quot;img&quot;</span>);</span><br><span class=\"line\">cv::<span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;img&quot;</span>, matimg);</span><br><span class=\"line\">cv::<span class=\"built_in\">waitKey</span>(<span class=\"number\">-1</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印字</span></span><br><span class=\"line\"><span class=\"comment\">// void putText(Mat&amp; img, const string&amp; text, Point org, int fontFace, double fontScale, Scalar color, int thickness=1, int lineType=8, bool bottomLeftOrigin=false )</span></span><br><span class=\"line\">cv::<span class=\"built_in\">putText</span>(image, <span class=\"string\">&quot;opencv&quot;</span>, <span class=\"built_in\">Point</span>(<span class=\"number\">5</span>,<span class=\"number\">100</span>), FONT_HERSHEY_DUPLEX, <span class=\"number\">1</span>, <span class=\"built_in\">Scalar</span>(<span class=\"number\">0</span>,<span class=\"number\">143</span>,<span class=\"number\">143</span>), <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 保存图，后缀名决定了图片对编码格式</span></span><br><span class=\"line\">cv::<span class=\"built_in\">imwrite</span>(<span class=\"string\">&quot;c:\\\\test1.jpg&quot;</span>, matimg);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历图像</span></span><br><span class=\"line\"><span class=\"comment\">// Vec3b表示三通道usigned char类型，</span></span><br><span class=\"line\"><span class=\"comment\">// 还可以有2通道和4通道，类型还可以有f(loat)、i(nt)、d(ouble)、s(hort)、w(unsigned short)</span></span><br><span class=\"line\"><span class=\"comment\">// typedef Vec&lt;float, 2&gt; Vec2f;</span></span><br><span class=\"line\">matimg.<span class=\"built_in\">at</span>&lt;cv::Vec3b&gt;(j,i)[channel] = value;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 还可以直接取每一行对首地址</span></span><br><span class=\"line\">uchar* data = matimg.<span class=\"built_in\">ptr</span>&lt;uchar&gt;(j);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"头文件分析\"><a href=\"#头文件分析\" class=\"headerlink\" title=\"头文件分析\"></a>头文件分析</h1><ul>\n<li>一般直接包含这三个头文件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;opencv2/core/core.hpp&gt;</span><br><span class=\"line\">#include&lt;opencv2/imgproc/imgproc.hpp&gt;</span><br><span class=\"line\">#include&lt;opencv2/highgui/highgui.hpp&gt;</span><br></pre></td></tr></table></figure>\n"},{"title":"python 里的字符串编码问题","typora-root-url":"../../source","date":"2018-08-03T06:29:40.000Z","_content":"\n### 丑陋的编码\n\npython中有很多地方涉及到编码，简直丑陋\n\n- 文本编辑器可以选编码格式，一般都位于右下角\n- python文件开头有`#coding: utf-8`\n- python还有默认encoding\n```python\nimport sys\nreload(sys)\nsys.setdefaultencoding('utf-8')\n```\n- 字符串前有u和b\n\n### [一些编码知识](https://blog.ernest.me/post/python-setdefaultencoding-unicode-bytes)\n\n- unicode是个大集合，支持百万级别的字符，但unicode只是给每个字符进行了一个编码，没有给具体实现\n- utf-8是unicode的一种实现形式，除此之外还有utf-16等等\n- gb系列的编码和unicode没啥关系，GB2312 < GBK < GB18030\n- windows中文版系统的默认编码是gbk的\n\n### 一些python的知识\n\n- python里有三种string类，unicode（text string）、str（byte string）、basestring。basestring是前两个的父类\n- python里，字节串就等同于字符串\n- 在类型转换或和文本拼接时，需要确定字节串的编码，不然就不能转换。python2的年代，默认的encoding是ASCII，放现在当然是不够用的\n- python3终于把默认的编码变成unicode\n- str转换成unicode，在python里叫decode，unicode转换成str称之为encode\n- 打印unicode是不会出错的，这就是python3的厉害，打印str的话，就要看打印编码式和你显示的编码是否一致了\n\n### 这些编码的区别\n\n- 文本编码格式：只和你的编辑器有关，负责把你的python文件按这种格式保存\n- python文件开头的coding：告诉python解释器，文件是按什么格式保存的，所以要与你实际文件的保存格式一致。如果不写的话，python文件里只能有ASCII\n- 默认的encoding格式就是你要告诉系统，字节码以哪种格式转换成unicode\n- u是指后面引号里的内容是unocide，b是指引号里面的内容是str，所以python3里写u是没用的，python2里写b是没用的\n\n### 最佳实践\n\n- 换python3\n- [如果换不了python3](https://blog.ernest.me/post/python-setdefaultencoding-unicode-bytes)\n  - 所有 text string 都应该是 unicode 类型，而不是 str\n  - 在需要转换的时候，显式转换。从字节解码成文本，用 var.decode(encoding)，从文本编码成字节，用 var.encode(encoding)\n  - 从外部读取数据时，默认它是字节，然后 decode 成需要的文本；同样的，当需要向外部发送文本时，encode 成字节再发送。\n","source":"_posts/python-里的字符串编码问题.md","raw":"---\ntitle: python 里的字符串编码问题\ntypora-root-url: ../../source\ntags:\n  - 编码\n  - 字符串\n  - unicode\ncategories: python \ndate: 2018-08-03 14:29:40\n---\n\n### 丑陋的编码\n\npython中有很多地方涉及到编码，简直丑陋\n\n- 文本编辑器可以选编码格式，一般都位于右下角\n- python文件开头有`#coding: utf-8`\n- python还有默认encoding\n```python\nimport sys\nreload(sys)\nsys.setdefaultencoding('utf-8')\n```\n- 字符串前有u和b\n\n### [一些编码知识](https://blog.ernest.me/post/python-setdefaultencoding-unicode-bytes)\n\n- unicode是个大集合，支持百万级别的字符，但unicode只是给每个字符进行了一个编码，没有给具体实现\n- utf-8是unicode的一种实现形式，除此之外还有utf-16等等\n- gb系列的编码和unicode没啥关系，GB2312 < GBK < GB18030\n- windows中文版系统的默认编码是gbk的\n\n### 一些python的知识\n\n- python里有三种string类，unicode（text string）、str（byte string）、basestring。basestring是前两个的父类\n- python里，字节串就等同于字符串\n- 在类型转换或和文本拼接时，需要确定字节串的编码，不然就不能转换。python2的年代，默认的encoding是ASCII，放现在当然是不够用的\n- python3终于把默认的编码变成unicode\n- str转换成unicode，在python里叫decode，unicode转换成str称之为encode\n- 打印unicode是不会出错的，这就是python3的厉害，打印str的话，就要看打印编码式和你显示的编码是否一致了\n\n### 这些编码的区别\n\n- 文本编码格式：只和你的编辑器有关，负责把你的python文件按这种格式保存\n- python文件开头的coding：告诉python解释器，文件是按什么格式保存的，所以要与你实际文件的保存格式一致。如果不写的话，python文件里只能有ASCII\n- 默认的encoding格式就是你要告诉系统，字节码以哪种格式转换成unicode\n- u是指后面引号里的内容是unocide，b是指引号里面的内容是str，所以python3里写u是没用的，python2里写b是没用的\n\n### 最佳实践\n\n- 换python3\n- [如果换不了python3](https://blog.ernest.me/post/python-setdefaultencoding-unicode-bytes)\n  - 所有 text string 都应该是 unicode 类型，而不是 str\n  - 在需要转换的时候，显式转换。从字节解码成文本，用 var.decode(encoding)，从文本编码成字节，用 var.encode(encoding)\n  - 从外部读取数据时，默认它是字节，然后 decode 成需要的文本；同样的，当需要向外部发送文本时，encode 成字节再发送。\n","slug":"python-里的字符串编码问题","published":1,"updated":"2023-11-05T11:42:33.904Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li4002is2kzc6q8dfb8","content":"<h3 id=\"丑陋的编码\"><a href=\"#丑陋的编码\" class=\"headerlink\" title=\"丑陋的编码\"></a>丑陋的编码</h3><p>python中有很多地方涉及到编码，简直丑陋</p>\n<ul>\n<li>文本编辑器可以选编码格式，一般都位于右下角</li>\n<li>python文件开头有<code>#coding: utf-8</code></li>\n<li>python还有默认encoding<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\">reload(sys)</span><br><span class=\"line\">sys.setdefaultencoding(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure></li>\n<li>字符串前有u和b</li>\n</ul>\n<h3 id=\"一些编码知识\"><a href=\"#一些编码知识\" class=\"headerlink\" title=\"一些编码知识\"></a><a href=\"https://blog.ernest.me/post/python-setdefaultencoding-unicode-bytes\">一些编码知识</a></h3><ul>\n<li>unicode是个大集合，支持百万级别的字符，但unicode只是给每个字符进行了一个编码，没有给具体实现</li>\n<li>utf-8是unicode的一种实现形式，除此之外还有utf-16等等</li>\n<li>gb系列的编码和unicode没啥关系，GB2312 &lt; GBK &lt; GB18030</li>\n<li>windows中文版系统的默认编码是gbk的</li>\n</ul>\n<h3 id=\"一些python的知识\"><a href=\"#一些python的知识\" class=\"headerlink\" title=\"一些python的知识\"></a>一些python的知识</h3><ul>\n<li>python里有三种string类，unicode（text string）、str（byte string）、basestring。basestring是前两个的父类</li>\n<li>python里，字节串就等同于字符串</li>\n<li>在类型转换或和文本拼接时，需要确定字节串的编码，不然就不能转换。python2的年代，默认的encoding是ASCII，放现在当然是不够用的</li>\n<li>python3终于把默认的编码变成unicode</li>\n<li>str转换成unicode，在python里叫decode，unicode转换成str称之为encode</li>\n<li>打印unicode是不会出错的，这就是python3的厉害，打印str的话，就要看打印编码式和你显示的编码是否一致了</li>\n</ul>\n<h3 id=\"这些编码的区别\"><a href=\"#这些编码的区别\" class=\"headerlink\" title=\"这些编码的区别\"></a>这些编码的区别</h3><ul>\n<li>文本编码格式：只和你的编辑器有关，负责把你的python文件按这种格式保存</li>\n<li>python文件开头的coding：告诉python解释器，文件是按什么格式保存的，所以要与你实际文件的保存格式一致。如果不写的话，python文件里只能有ASCII</li>\n<li>默认的encoding格式就是你要告诉系统，字节码以哪种格式转换成unicode</li>\n<li>u是指后面引号里的内容是unocide，b是指引号里面的内容是str，所以python3里写u是没用的，python2里写b是没用的</li>\n</ul>\n<h3 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h3><ul>\n<li>换python3</li>\n<li><a href=\"https://blog.ernest.me/post/python-setdefaultencoding-unicode-bytes\">如果换不了python3</a><ul>\n<li>所有 text string 都应该是 unicode 类型，而不是 str</li>\n<li>在需要转换的时候，显式转换。从字节解码成文本，用 var.decode(encoding)，从文本编码成字节，用 var.encode(encoding)</li>\n<li>从外部读取数据时，默认它是字节，然后 decode 成需要的文本；同样的，当需要向外部发送文本时，encode 成字节再发送。</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"丑陋的编码\"><a href=\"#丑陋的编码\" class=\"headerlink\" title=\"丑陋的编码\"></a>丑陋的编码</h3><p>python中有很多地方涉及到编码，简直丑陋</p>\n<ul>\n<li>文本编辑器可以选编码格式，一般都位于右下角</li>\n<li>python文件开头有<code>#coding: utf-8</code></li>\n<li>python还有默认encoding<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\">reload(sys)</span><br><span class=\"line\">sys.setdefaultencoding(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure></li>\n<li>字符串前有u和b</li>\n</ul>\n<h3 id=\"一些编码知识\"><a href=\"#一些编码知识\" class=\"headerlink\" title=\"一些编码知识\"></a><a href=\"https://blog.ernest.me/post/python-setdefaultencoding-unicode-bytes\">一些编码知识</a></h3><ul>\n<li>unicode是个大集合，支持百万级别的字符，但unicode只是给每个字符进行了一个编码，没有给具体实现</li>\n<li>utf-8是unicode的一种实现形式，除此之外还有utf-16等等</li>\n<li>gb系列的编码和unicode没啥关系，GB2312 &lt; GBK &lt; GB18030</li>\n<li>windows中文版系统的默认编码是gbk的</li>\n</ul>\n<h3 id=\"一些python的知识\"><a href=\"#一些python的知识\" class=\"headerlink\" title=\"一些python的知识\"></a>一些python的知识</h3><ul>\n<li>python里有三种string类，unicode（text string）、str（byte string）、basestring。basestring是前两个的父类</li>\n<li>python里，字节串就等同于字符串</li>\n<li>在类型转换或和文本拼接时，需要确定字节串的编码，不然就不能转换。python2的年代，默认的encoding是ASCII，放现在当然是不够用的</li>\n<li>python3终于把默认的编码变成unicode</li>\n<li>str转换成unicode，在python里叫decode，unicode转换成str称之为encode</li>\n<li>打印unicode是不会出错的，这就是python3的厉害，打印str的话，就要看打印编码式和你显示的编码是否一致了</li>\n</ul>\n<h3 id=\"这些编码的区别\"><a href=\"#这些编码的区别\" class=\"headerlink\" title=\"这些编码的区别\"></a>这些编码的区别</h3><ul>\n<li>文本编码格式：只和你的编辑器有关，负责把你的python文件按这种格式保存</li>\n<li>python文件开头的coding：告诉python解释器，文件是按什么格式保存的，所以要与你实际文件的保存格式一致。如果不写的话，python文件里只能有ASCII</li>\n<li>默认的encoding格式就是你要告诉系统，字节码以哪种格式转换成unicode</li>\n<li>u是指后面引号里的内容是unocide，b是指引号里面的内容是str，所以python3里写u是没用的，python2里写b是没用的</li>\n</ul>\n<h3 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h3><ul>\n<li>换python3</li>\n<li><a href=\"https://blog.ernest.me/post/python-setdefaultencoding-unicode-bytes\">如果换不了python3</a><ul>\n<li>所有 text string 都应该是 unicode 类型，而不是 str</li>\n<li>在需要转换的时候，显式转换。从字节解码成文本，用 var.decode(encoding)，从文本编码成字节，用 var.encode(encoding)</li>\n<li>从外部读取数据时，默认它是字节，然后 decode 成需要的文本；同样的，当需要向外部发送文本时，encode 成字节再发送。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"python把bmp和png转换成jpg","typora-root-url":"../../source","date":"2018-08-16T13:30:50.000Z","_content":"\n- 反正已经加到这么晚了，索性再水一篇博客再走\n- 如何把bmp和png批量转换成jpg\n\n```python\nimport os\nfrom PIL import Image\n\nfor root, dirs, files in os.walk(\".\"):\n    for bmpfig in files:\n        if not bmpfig.endswith('.bmp') and not bmpfig.endswith('.png'):\n            continue\n        bmpfig = os.path.join(root, bmpfig)\n        newfigname = bmpfig[:-4] + \".jpg\"\n        print \"converting from\", bmpfig, \"to\", newfigname\n        img = Image.open(bmpfig)\n        img = img.convert('RGB')  # for png\n        img.save(newfigname, format='jpeg', quality=95)\n        img.close()\n        os.remove(bmpfig)\n```\n\n- 这段代码贴在某个文件夹下，运行之后会递归地把所有bmp转换成jpg\n- 其中，quality是生成jpg的质量，quality越大，jpg文件越大，图片细节越清晰，取值0-100","source":"_posts/python把bmp转换成jpg.md","raw":"---\ntitle: python把bmp和png转换成jpg\ntypora-root-url: ../../source\ntags: python\ncategories: python\ndate: 2018-08-16 21:30:50\n---\n\n- 反正已经加到这么晚了，索性再水一篇博客再走\n- 如何把bmp和png批量转换成jpg\n\n```python\nimport os\nfrom PIL import Image\n\nfor root, dirs, files in os.walk(\".\"):\n    for bmpfig in files:\n        if not bmpfig.endswith('.bmp') and not bmpfig.endswith('.png'):\n            continue\n        bmpfig = os.path.join(root, bmpfig)\n        newfigname = bmpfig[:-4] + \".jpg\"\n        print \"converting from\", bmpfig, \"to\", newfigname\n        img = Image.open(bmpfig)\n        img = img.convert('RGB')  # for png\n        img.save(newfigname, format='jpeg', quality=95)\n        img.close()\n        os.remove(bmpfig)\n```\n\n- 这段代码贴在某个文件夹下，运行之后会递归地把所有bmp转换成jpg\n- 其中，quality是生成jpg的质量，quality越大，jpg文件越大，图片细节越清晰，取值0-100","slug":"python把bmp转换成jpg","published":1,"updated":"2023-11-05T11:42:33.904Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li4002ms2kz5kdc1eaa","content":"<ul>\n<li>反正已经加到这么晚了，索性再水一篇博客再走</li>\n<li>如何把bmp和png批量转换成jpg</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(<span class=\"string\">&quot;.&quot;</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> bmpfig <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> bmpfig.endswith(<span class=\"string\">&#x27;.bmp&#x27;</span>) <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> bmpfig.endswith(<span class=\"string\">&#x27;.png&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        bmpfig = os.path.join(root, bmpfig)</span><br><span class=\"line\">        newfigname = bmpfig[:-<span class=\"number\">4</span>] + <span class=\"string\">&quot;.jpg&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;converting from&quot;</span>, bmpfig, <span class=\"string\">&quot;to&quot;</span>, newfigname</span><br><span class=\"line\">        img = Image.<span class=\"built_in\">open</span>(bmpfig)</span><br><span class=\"line\">        img = img.convert(<span class=\"string\">&#x27;RGB&#x27;</span>)  <span class=\"comment\"># for png</span></span><br><span class=\"line\">        img.save(newfigname, <span class=\"built_in\">format</span>=<span class=\"string\">&#x27;jpeg&#x27;</span>, quality=<span class=\"number\">95</span>)</span><br><span class=\"line\">        img.close()</span><br><span class=\"line\">        os.remove(bmpfig)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这段代码贴在某个文件夹下，运行之后会递归地把所有bmp转换成jpg</li>\n<li>其中，quality是生成jpg的质量，quality越大，jpg文件越大，图片细节越清晰，取值0-100</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li>反正已经加到这么晚了，索性再水一篇博客再走</li>\n<li>如何把bmp和png批量转换成jpg</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(<span class=\"string\">&quot;.&quot;</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> bmpfig <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> bmpfig.endswith(<span class=\"string\">&#x27;.bmp&#x27;</span>) <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> bmpfig.endswith(<span class=\"string\">&#x27;.png&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        bmpfig = os.path.join(root, bmpfig)</span><br><span class=\"line\">        newfigname = bmpfig[:-<span class=\"number\">4</span>] + <span class=\"string\">&quot;.jpg&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;converting from&quot;</span>, bmpfig, <span class=\"string\">&quot;to&quot;</span>, newfigname</span><br><span class=\"line\">        img = Image.<span class=\"built_in\">open</span>(bmpfig)</span><br><span class=\"line\">        img = img.convert(<span class=\"string\">&#x27;RGB&#x27;</span>)  <span class=\"comment\"># for png</span></span><br><span class=\"line\">        img.save(newfigname, <span class=\"built_in\">format</span>=<span class=\"string\">&#x27;jpeg&#x27;</span>, quality=<span class=\"number\">95</span>)</span><br><span class=\"line\">        img.close()</span><br><span class=\"line\">        os.remove(bmpfig)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这段代码贴在某个文件夹下，运行之后会递归地把所有bmp转换成jpg</li>\n<li>其中，quality是生成jpg的质量，quality越大，jpg文件越大，图片细节越清晰，取值0-100</li>\n</ul>\n"},{"title":"scrapy 爬虫","date":"2018-02-12T09:20:01.000Z","typora-root-url":"../../source","_content":"\n### 前言\n这是在dc学院上299买的课，也是丧心病狂啊，怀着后悔的心情上完了全部课程。\n\n### 主要截图\n![](/images/5689847.jpg \"框架图\")\n\n![](/images/56909416.jpg \"css选择器\")\n\n![](/images/98241099.jpg \"chrome的调试技巧\") \n","source":"_posts/scrapy-爬虫.md","raw":"---\ntitle: scrapy 爬虫\ndate: 2018-02-12 17:20:01\ncategories: scrapy\ntypora-root-url: ../../source\n---\n\n### 前言\n这是在dc学院上299买的课，也是丧心病狂啊，怀着后悔的心情上完了全部课程。\n\n### 主要截图\n![](/images/5689847.jpg \"框架图\")\n\n![](/images/56909416.jpg \"css选择器\")\n\n![](/images/98241099.jpg \"chrome的调试技巧\") \n","slug":"scrapy-爬虫","published":1,"updated":"2023-11-05T11:42:33.905Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li5002os2kz8so5cfqj","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>这是在dc学院上299买的课，也是丧心病狂啊，怀着后悔的心情上完了全部课程。</p>\n<h3 id=\"主要截图\"><a href=\"#主要截图\" class=\"headerlink\" title=\"主要截图\"></a>主要截图</h3><p><img src=\"/images/5689847.jpg\" title=\"框架图\"></p>\n<p><img src=\"/images/56909416.jpg\" title=\"css选择器\"></p>\n<p><img src=\"/images/98241099.jpg\" title=\"chrome的调试技巧\"> </p>\n","excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>这是在dc学院上299买的课，也是丧心病狂啊，怀着后悔的心情上完了全部课程。</p>\n<h3 id=\"主要截图\"><a href=\"#主要截图\" class=\"headerlink\" title=\"主要截图\"></a>主要截图</h3><p><img src=\"/images/5689847.jpg\" title=\"框架图\"></p>\n<p><img src=\"/images/56909416.jpg\" title=\"css选择器\"></p>\n<p><img src=\"/images/98241099.jpg\" title=\"chrome的调试技巧\"> </p>\n"},{"title":"sqlite 常用命令","typora-root-url":"../../source","date":"2018-01-22T15:49:20.000Z","_content":"\n### dump database\n```\nsqlite3 <database_file>\n.output <dump_text_file>\n.dump\n.exit\n```\n### dump table\n```\n.output <dump_text_file>\n.dump <table_name>\n.exit\n```\n### dump table structure\n```\n.output <dump_text_file>\n.schema\n.exit\n```\n### dump data of a table into a text\n```\n.mode insert\n.output <dump_text_file>\n.dump <table_name>\n.exit\n```\n```\n.read <dump_text_file>\n```\n","source":"_posts/sqlite-常用命令.md","raw":"---\ntitle: sqlite 常用命令\ntypora-root-url: ../../source\ndate: 2018-01-22 23:49:20\ntags: sqlite\ncategories: flask网站总结\n---\n\n### dump database\n```\nsqlite3 <database_file>\n.output <dump_text_file>\n.dump\n.exit\n```\n### dump table\n```\n.output <dump_text_file>\n.dump <table_name>\n.exit\n```\n### dump table structure\n```\n.output <dump_text_file>\n.schema\n.exit\n```\n### dump data of a table into a text\n```\n.mode insert\n.output <dump_text_file>\n.dump <table_name>\n.exit\n```\n```\n.read <dump_text_file>\n```\n","slug":"sqlite-常用命令","published":1,"updated":"2023-11-05T11:42:33.905Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li5002rs2kz8kztdvqi","content":"<h3 id=\"dump-database\"><a href=\"#dump-database\" class=\"headerlink\" title=\"dump database\"></a>dump database</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlite3 &lt;database_file&gt;</span><br><span class=\"line\">.output &lt;dump_text_file&gt;</span><br><span class=\"line\">.dump</span><br><span class=\"line\">.exit</span><br></pre></td></tr></table></figure>\n<h3 id=\"dump-table\"><a href=\"#dump-table\" class=\"headerlink\" title=\"dump table\"></a>dump table</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.output &lt;dump_text_file&gt;</span><br><span class=\"line\">.dump &lt;table_name&gt;</span><br><span class=\"line\">.exit</span><br></pre></td></tr></table></figure>\n<h3 id=\"dump-table-structure\"><a href=\"#dump-table-structure\" class=\"headerlink\" title=\"dump table structure\"></a>dump table structure</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.output &lt;dump_text_file&gt;</span><br><span class=\"line\">.schema</span><br><span class=\"line\">.exit</span><br></pre></td></tr></table></figure>\n<h3 id=\"dump-data-of-a-table-into-a-text\"><a href=\"#dump-data-of-a-table-into-a-text\" class=\"headerlink\" title=\"dump data of a table into a text\"></a>dump data of a table into a text</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.mode insert</span><br><span class=\"line\">.output &lt;dump_text_file&gt;</span><br><span class=\"line\">.dump &lt;table_name&gt;</span><br><span class=\"line\">.exit</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.read &lt;dump_text_file&gt;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"dump-database\"><a href=\"#dump-database\" class=\"headerlink\" title=\"dump database\"></a>dump database</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlite3 &lt;database_file&gt;</span><br><span class=\"line\">.output &lt;dump_text_file&gt;</span><br><span class=\"line\">.dump</span><br><span class=\"line\">.exit</span><br></pre></td></tr></table></figure>\n<h3 id=\"dump-table\"><a href=\"#dump-table\" class=\"headerlink\" title=\"dump table\"></a>dump table</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.output &lt;dump_text_file&gt;</span><br><span class=\"line\">.dump &lt;table_name&gt;</span><br><span class=\"line\">.exit</span><br></pre></td></tr></table></figure>\n<h3 id=\"dump-table-structure\"><a href=\"#dump-table-structure\" class=\"headerlink\" title=\"dump table structure\"></a>dump table structure</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.output &lt;dump_text_file&gt;</span><br><span class=\"line\">.schema</span><br><span class=\"line\">.exit</span><br></pre></td></tr></table></figure>\n<h3 id=\"dump-data-of-a-table-into-a-text\"><a href=\"#dump-data-of-a-table-into-a-text\" class=\"headerlink\" title=\"dump data of a table into a text\"></a>dump data of a table into a text</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.mode insert</span><br><span class=\"line\">.output &lt;dump_text_file&gt;</span><br><span class=\"line\">.dump &lt;table_name&gt;</span><br><span class=\"line\">.exit</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.read &lt;dump_text_file&gt;</span><br></pre></td></tr></table></figure>\n"},{"title":"unix和linux历史考古","typora-root-url":"../../source","date":"2019-12-01T11:22:34.000Z","_content":"\n- unix是肯·汤普森和丹尼斯·里奇在AT&T开发的\n- 里奇在创造unix的过程中，发明了C语言\n- 汤普森和里奇后来对unix不太满意，要创造一个真正的”一切都是文件“的系统，称为”Plan 9“，utf-8是这个系统的副产品\n\n\n- 80年代unix有两个主要的版本：AT&T的版本System V和伯克利的BSD（Berkeley Software Distribution）\n- 从System V衍生出了hp-ux和Solaris\n- BSD主要是比尔乔伊在上学期间开发的，他还是vi的作者\n\n\n- 90年代，因为和AT&T版权问题，BSD替换了AT&T有版权的几个文件，变成了freeBSD\n- （Linux崛起有两个历史机遇，一是Unix在打官司两年没有更新，二是英特尔发布了80386，开始了32位时代\n- 理查德·斯托曼创立了GUN计划，主要的软件有gcc、glibc，因为Linux用了许多GNU软件，他认为应该命名为GNU/Linux，但Linus不同意。斯托曼同时也是Emacs的作者\n- Minix，是一个类unix系统，由塔能鲍姆Tanenbaum为了教学创造","source":"_posts/unix和linux历史考古.md","raw":"---\ntitle: unix和linux历史考古\ntypora-root-url: ../../source\ndate: 2019-12-01 19:22:34\n---\n\n- unix是肯·汤普森和丹尼斯·里奇在AT&T开发的\n- 里奇在创造unix的过程中，发明了C语言\n- 汤普森和里奇后来对unix不太满意，要创造一个真正的”一切都是文件“的系统，称为”Plan 9“，utf-8是这个系统的副产品\n\n\n- 80年代unix有两个主要的版本：AT&T的版本System V和伯克利的BSD（Berkeley Software Distribution）\n- 从System V衍生出了hp-ux和Solaris\n- BSD主要是比尔乔伊在上学期间开发的，他还是vi的作者\n\n\n- 90年代，因为和AT&T版权问题，BSD替换了AT&T有版权的几个文件，变成了freeBSD\n- （Linux崛起有两个历史机遇，一是Unix在打官司两年没有更新，二是英特尔发布了80386，开始了32位时代\n- 理查德·斯托曼创立了GUN计划，主要的软件有gcc、glibc，因为Linux用了许多GNU软件，他认为应该命名为GNU/Linux，但Linus不同意。斯托曼同时也是Emacs的作者\n- Minix，是一个类unix系统，由塔能鲍姆Tanenbaum为了教学创造","slug":"unix和linux历史考古","published":1,"updated":"2023-11-05T11:42:33.905Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li5002us2kz1lmla5cn","content":"<ul>\n<li><p>unix是肯·汤普森和丹尼斯·里奇在AT&amp;T开发的</p>\n</li>\n<li><p>里奇在创造unix的过程中，发明了C语言</p>\n</li>\n<li><p>汤普森和里奇后来对unix不太满意，要创造一个真正的”一切都是文件“的系统，称为”Plan 9“，utf-8是这个系统的副产品</p>\n</li>\n<li><p>80年代unix有两个主要的版本：AT&amp;T的版本System V和伯克利的BSD（Berkeley Software Distribution）</p>\n</li>\n<li><p>从System V衍生出了hp-ux和Solaris</p>\n</li>\n<li><p>BSD主要是比尔乔伊在上学期间开发的，他还是vi的作者</p>\n</li>\n<li><p>90年代，因为和AT&amp;T版权问题，BSD替换了AT&amp;T有版权的几个文件，变成了freeBSD</p>\n</li>\n<li><p>（Linux崛起有两个历史机遇，一是Unix在打官司两年没有更新，二是英特尔发布了80386，开始了32位时代</p>\n</li>\n<li><p>理查德·斯托曼创立了GUN计划，主要的软件有gcc、glibc，因为Linux用了许多GNU软件，他认为应该命名为GNU&#x2F;Linux，但Linus不同意。斯托曼同时也是Emacs的作者</p>\n</li>\n<li><p>Minix，是一个类unix系统，由塔能鲍姆Tanenbaum为了教学创造</p>\n</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li><p>unix是肯·汤普森和丹尼斯·里奇在AT&amp;T开发的</p>\n</li>\n<li><p>里奇在创造unix的过程中，发明了C语言</p>\n</li>\n<li><p>汤普森和里奇后来对unix不太满意，要创造一个真正的”一切都是文件“的系统，称为”Plan 9“，utf-8是这个系统的副产品</p>\n</li>\n<li><p>80年代unix有两个主要的版本：AT&amp;T的版本System V和伯克利的BSD（Berkeley Software Distribution）</p>\n</li>\n<li><p>从System V衍生出了hp-ux和Solaris</p>\n</li>\n<li><p>BSD主要是比尔乔伊在上学期间开发的，他还是vi的作者</p>\n</li>\n<li><p>90年代，因为和AT&amp;T版权问题，BSD替换了AT&amp;T有版权的几个文件，变成了freeBSD</p>\n</li>\n<li><p>（Linux崛起有两个历史机遇，一是Unix在打官司两年没有更新，二是英特尔发布了80386，开始了32位时代</p>\n</li>\n<li><p>理查德·斯托曼创立了GUN计划，主要的软件有gcc、glibc，因为Linux用了许多GNU软件，他认为应该命名为GNU&#x2F;Linux，但Linus不同意。斯托曼同时也是Emacs的作者</p>\n</li>\n<li><p>Minix，是一个类unix系统，由塔能鲍姆Tanenbaum为了教学创造</p>\n</li>\n</ul>\n"},{"title":"visual studio 13使用boost","typora-root-url":"../../source","date":"2018-06-22T03:17:03.000Z","_content":"\n### 步骤\n- 先去[boost官方网站](http://www.boost.org/)中查看boost的最新版本，然后去相应的链接地址进行下载\n- 在你创建好的工程项目中，选择属性对话框，然后在VC++目录选项中，把boost路径添加到包含目录和库目录中\n- 首选运行bootstra.bat，如果没有cl命令的话，查看[这里](https://blog.csdn.net/zhidebushizhan/article/details/51396670)，我是这个命令`call \"%VS120COMNTOOLS%\"vsvars32.bat`解决问题\n- 生成动态链接的静态库`bjam address-model=64 link= static  threading=multi  variant=release  runtime-link=shared  stage`\n\n### 困惑的地方\n- vs里面的vc++目录和下面的c++目录、连接器目录，什么关系啊，能自动加载子目录？\n\n\n> 引用自[这里](https://www.cnblogs.com/JMLiu/p/7954630.html)，\n> VC++ Directories是一个Windows环境变量，C/C++是命令行参数，这是本质区别；\n> 但是相同的项，也就是VC++ Directories中的include directories 对应到C/C++中的addition include directories 是一样的效果，也就是说效果一样。同样是命令行参数的还有Link设置，Link设置中的 addition library directories对应到VC++ Directories 中的library directories，也就是说，效果是相同的。\n\n- bjam里面的debug release、static share是啥。。。\n\n> 编译调试版本加 debug\n\n> 编译发布版本加  release\n\n> 编译静态链接库：link=static runtime-link=static\n\n> 编译动态库：link=shared runtime-link=shared\n\n> 静态库只是需要的文件编译到exe/so中，而且shared的是否用户也要存在dll,所以static是更安全的方式；当然组件式开发和升级的软件用shared方式更加合适\n\n### 参考\n- https://blog.csdn.net/blues1021/article/details/45034133\n- https://blog.csdn.net/qingyulove/article/details/78863457\n- https://blog.csdn.net/zhidebushizhan/article/details/51396670\n","source":"_posts/visual-studio-13使用boost.md","raw":"---\ntitle: visual studio 13使用boost\ntypora-root-url: ../../source\ndate: 2018-06-22 11:17:03\ncategories: cpp\n---\n\n### 步骤\n- 先去[boost官方网站](http://www.boost.org/)中查看boost的最新版本，然后去相应的链接地址进行下载\n- 在你创建好的工程项目中，选择属性对话框，然后在VC++目录选项中，把boost路径添加到包含目录和库目录中\n- 首选运行bootstra.bat，如果没有cl命令的话，查看[这里](https://blog.csdn.net/zhidebushizhan/article/details/51396670)，我是这个命令`call \"%VS120COMNTOOLS%\"vsvars32.bat`解决问题\n- 生成动态链接的静态库`bjam address-model=64 link= static  threading=multi  variant=release  runtime-link=shared  stage`\n\n### 困惑的地方\n- vs里面的vc++目录和下面的c++目录、连接器目录，什么关系啊，能自动加载子目录？\n\n\n> 引用自[这里](https://www.cnblogs.com/JMLiu/p/7954630.html)，\n> VC++ Directories是一个Windows环境变量，C/C++是命令行参数，这是本质区别；\n> 但是相同的项，也就是VC++ Directories中的include directories 对应到C/C++中的addition include directories 是一样的效果，也就是说效果一样。同样是命令行参数的还有Link设置，Link设置中的 addition library directories对应到VC++ Directories 中的library directories，也就是说，效果是相同的。\n\n- bjam里面的debug release、static share是啥。。。\n\n> 编译调试版本加 debug\n\n> 编译发布版本加  release\n\n> 编译静态链接库：link=static runtime-link=static\n\n> 编译动态库：link=shared runtime-link=shared\n\n> 静态库只是需要的文件编译到exe/so中，而且shared的是否用户也要存在dll,所以static是更安全的方式；当然组件式开发和升级的软件用shared方式更加合适\n\n### 参考\n- https://blog.csdn.net/blues1021/article/details/45034133\n- https://blog.csdn.net/qingyulove/article/details/78863457\n- https://blog.csdn.net/zhidebushizhan/article/details/51396670\n","slug":"visual-studio-13使用boost","published":1,"updated":"2023-11-05T11:42:33.905Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li5002ws2kz0j867j0t","content":"<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ul>\n<li>先去<a href=\"http://www.boost.org/\">boost官方网站</a>中查看boost的最新版本，然后去相应的链接地址进行下载</li>\n<li>在你创建好的工程项目中，选择属性对话框，然后在VC++目录选项中，把boost路径添加到包含目录和库目录中</li>\n<li>首选运行bootstra.bat，如果没有cl命令的话，查看<a href=\"https://blog.csdn.net/zhidebushizhan/article/details/51396670\">这里</a>，我是这个命令<code>call &quot;%VS120COMNTOOLS%&quot;vsvars32.bat</code>解决问题</li>\n<li>生成动态链接的静态库<code>bjam address-model=64 link= static  threading=multi  variant=release  runtime-link=shared  stage</code></li>\n</ul>\n<h3 id=\"困惑的地方\"><a href=\"#困惑的地方\" class=\"headerlink\" title=\"困惑的地方\"></a>困惑的地方</h3><ul>\n<li>vs里面的vc++目录和下面的c++目录、连接器目录，什么关系啊，能自动加载子目录？</li>\n</ul>\n<blockquote>\n<p>引用自<a href=\"https://www.cnblogs.com/JMLiu/p/7954630.html\">这里</a>，<br>VC++ Directories是一个Windows环境变量，C&#x2F;C++是命令行参数，这是本质区别；<br>但是相同的项，也就是VC++ Directories中的include directories 对应到C&#x2F;C++中的addition include directories 是一样的效果，也就是说效果一样。同样是命令行参数的还有Link设置，Link设置中的 addition library directories对应到VC++ Directories 中的library directories，也就是说，效果是相同的。</p>\n</blockquote>\n<ul>\n<li>bjam里面的debug release、static share是啥。。。</li>\n</ul>\n<blockquote>\n<p>编译调试版本加 debug</p>\n</blockquote>\n<blockquote>\n<p>编译发布版本加  release</p>\n</blockquote>\n<blockquote>\n<p>编译静态链接库：link&#x3D;static runtime-link&#x3D;static</p>\n</blockquote>\n<blockquote>\n<p>编译动态库：link&#x3D;shared runtime-link&#x3D;shared</p>\n</blockquote>\n<blockquote>\n<p>静态库只是需要的文件编译到exe&#x2F;so中，而且shared的是否用户也要存在dll,所以static是更安全的方式；当然组件式开发和升级的软件用shared方式更加合适</p>\n</blockquote>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://blog.csdn.net/blues1021/article/details/45034133\">https://blog.csdn.net/blues1021/article/details/45034133</a></li>\n<li><a href=\"https://blog.csdn.net/qingyulove/article/details/78863457\">https://blog.csdn.net/qingyulove/article/details/78863457</a></li>\n<li><a href=\"https://blog.csdn.net/zhidebushizhan/article/details/51396670\">https://blog.csdn.net/zhidebushizhan/article/details/51396670</a></li>\n</ul>\n","excerpt":"","more":"<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ul>\n<li>先去<a href=\"http://www.boost.org/\">boost官方网站</a>中查看boost的最新版本，然后去相应的链接地址进行下载</li>\n<li>在你创建好的工程项目中，选择属性对话框，然后在VC++目录选项中，把boost路径添加到包含目录和库目录中</li>\n<li>首选运行bootstra.bat，如果没有cl命令的话，查看<a href=\"https://blog.csdn.net/zhidebushizhan/article/details/51396670\">这里</a>，我是这个命令<code>call &quot;%VS120COMNTOOLS%&quot;vsvars32.bat</code>解决问题</li>\n<li>生成动态链接的静态库<code>bjam address-model=64 link= static  threading=multi  variant=release  runtime-link=shared  stage</code></li>\n</ul>\n<h3 id=\"困惑的地方\"><a href=\"#困惑的地方\" class=\"headerlink\" title=\"困惑的地方\"></a>困惑的地方</h3><ul>\n<li>vs里面的vc++目录和下面的c++目录、连接器目录，什么关系啊，能自动加载子目录？</li>\n</ul>\n<blockquote>\n<p>引用自<a href=\"https://www.cnblogs.com/JMLiu/p/7954630.html\">这里</a>，<br>VC++ Directories是一个Windows环境变量，C&#x2F;C++是命令行参数，这是本质区别；<br>但是相同的项，也就是VC++ Directories中的include directories 对应到C&#x2F;C++中的addition include directories 是一样的效果，也就是说效果一样。同样是命令行参数的还有Link设置，Link设置中的 addition library directories对应到VC++ Directories 中的library directories，也就是说，效果是相同的。</p>\n</blockquote>\n<ul>\n<li>bjam里面的debug release、static share是啥。。。</li>\n</ul>\n<blockquote>\n<p>编译调试版本加 debug</p>\n</blockquote>\n<blockquote>\n<p>编译发布版本加  release</p>\n</blockquote>\n<blockquote>\n<p>编译静态链接库：link&#x3D;static runtime-link&#x3D;static</p>\n</blockquote>\n<blockquote>\n<p>编译动态库：link&#x3D;shared runtime-link&#x3D;shared</p>\n</blockquote>\n<blockquote>\n<p>静态库只是需要的文件编译到exe&#x2F;so中，而且shared的是否用户也要存在dll,所以static是更安全的方式；当然组件式开发和升级的软件用shared方式更加合适</p>\n</blockquote>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://blog.csdn.net/blues1021/article/details/45034133\">https://blog.csdn.net/blues1021/article/details/45034133</a></li>\n<li><a href=\"https://blog.csdn.net/qingyulove/article/details/78863457\">https://blog.csdn.net/qingyulove/article/details/78863457</a></li>\n<li><a href=\"https://blog.csdn.net/zhidebushizhan/article/details/51396670\">https://blog.csdn.net/zhidebushizhan/article/details/51396670</a></li>\n</ul>\n"},{"title":"write a shell in c","typora-root-url":"../../source","date":"2018-07-16T07:06:39.000Z","_content":"\n源文章标题取得很大，[write a shell in c](https://brennan.io/2015/01/16/write-a-shell-in-c/)。相关的内容总结如下。\n\n- fork(), exec() and waitpid() are defined by the POSIX standard, and Windows is not POSIX-compliant. In order to have POSIX compliance under Windows, you should compile under Cygwin.\n\n- fork, exec, chdir are in unistd.h(unix std); execvp is in stdlib\n\n- system命令相当于 fork + exec + waitpid\n\n- windows也提供了一个chdir函数，叫_chdir，在direct.h里\n\n- cc来自于Unix的c语言编译器，是 c compiler 的缩写。gcc来自Linux世界，是GNU compiler collection 的缩写，注意这是一个编译器集合，不仅仅是c或c++\n\n- strtok()\n```c\nchar sentence[]=\"192.168...9...14\";\nchar *token=strtok(sentence,\".\");\nwhile(token!=NULL){\n  cout<<token<<\" \";\n  token=strtok(NULL,\".\");\n}\n```\n\n- 在gcc编译器中，对标准库进行了扩展，加入了一个getline函数。会自动malloc, realloc，所以用的话，需要自己手动free，好像没啥人用，参考[这里](https://www.cnblogs.com/xkfz007/archive/2012/08/01/2618366.html)\n\n- 我用system代替了fork等，于是有了[window版](https://github.com/zjyfdu/lsh/blob/master/src/%E6%BA%90.cpp)\n","source":"_posts/write-a-shell-in-c.md","raw":"---\ntitle: write a shell in c\ntypora-root-url: ../../source\ntags:\n  - caffe\n  - docker\ncategories: cpp\ndate: 2018-07-16 15:06:39\n---\n\n源文章标题取得很大，[write a shell in c](https://brennan.io/2015/01/16/write-a-shell-in-c/)。相关的内容总结如下。\n\n- fork(), exec() and waitpid() are defined by the POSIX standard, and Windows is not POSIX-compliant. In order to have POSIX compliance under Windows, you should compile under Cygwin.\n\n- fork, exec, chdir are in unistd.h(unix std); execvp is in stdlib\n\n- system命令相当于 fork + exec + waitpid\n\n- windows也提供了一个chdir函数，叫_chdir，在direct.h里\n\n- cc来自于Unix的c语言编译器，是 c compiler 的缩写。gcc来自Linux世界，是GNU compiler collection 的缩写，注意这是一个编译器集合，不仅仅是c或c++\n\n- strtok()\n```c\nchar sentence[]=\"192.168...9...14\";\nchar *token=strtok(sentence,\".\");\nwhile(token!=NULL){\n  cout<<token<<\" \";\n  token=strtok(NULL,\".\");\n}\n```\n\n- 在gcc编译器中，对标准库进行了扩展，加入了一个getline函数。会自动malloc, realloc，所以用的话，需要自己手动free，好像没啥人用，参考[这里](https://www.cnblogs.com/xkfz007/archive/2012/08/01/2618366.html)\n\n- 我用system代替了fork等，于是有了[window版](https://github.com/zjyfdu/lsh/blob/master/src/%E6%BA%90.cpp)\n","slug":"write-a-shell-in-c","published":1,"updated":"2023-11-05T11:42:33.905Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li5002zs2kz88aodg50","content":"<p>源文章标题取得很大，<a href=\"https://brennan.io/2015/01/16/write-a-shell-in-c/\">write a shell in c</a>。相关的内容总结如下。</p>\n<ul>\n<li><p>fork(), exec() and waitpid() are defined by the POSIX standard, and Windows is not POSIX-compliant. In order to have POSIX compliance under Windows, you should compile under Cygwin.</p>\n</li>\n<li><p>fork, exec, chdir are in unistd.h(unix std); execvp is in stdlib</p>\n</li>\n<li><p>system命令相当于 fork + exec + waitpid</p>\n</li>\n<li><p>windows也提供了一个chdir函数，叫_chdir，在direct.h里</p>\n</li>\n<li><p>cc来自于Unix的c语言编译器，是 c compiler 的缩写。gcc来自Linux世界，是GNU compiler collection 的缩写，注意这是一个编译器集合，不仅仅是c或c++</p>\n</li>\n<li><p>strtok()</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> sentence[]=<span class=\"string\">&quot;192.168...9...14&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> *token=strtok(sentence,<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">while</span>(token!=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span>&lt;&lt;token&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">  token=strtok(<span class=\"literal\">NULL</span>,<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在gcc编译器中，对标准库进行了扩展，加入了一个getline函数。会自动malloc, realloc，所以用的话，需要自己手动free，好像没啥人用，参考<a href=\"https://www.cnblogs.com/xkfz007/archive/2012/08/01/2618366.html\">这里</a></p>\n</li>\n<li><p>我用system代替了fork等，于是有了<a href=\"https://github.com/zjyfdu/lsh/blob/master/src/%E6%BA%90.cpp\">window版</a></p>\n</li>\n</ul>\n","excerpt":"","more":"<p>源文章标题取得很大，<a href=\"https://brennan.io/2015/01/16/write-a-shell-in-c/\">write a shell in c</a>。相关的内容总结如下。</p>\n<ul>\n<li><p>fork(), exec() and waitpid() are defined by the POSIX standard, and Windows is not POSIX-compliant. In order to have POSIX compliance under Windows, you should compile under Cygwin.</p>\n</li>\n<li><p>fork, exec, chdir are in unistd.h(unix std); execvp is in stdlib</p>\n</li>\n<li><p>system命令相当于 fork + exec + waitpid</p>\n</li>\n<li><p>windows也提供了一个chdir函数，叫_chdir，在direct.h里</p>\n</li>\n<li><p>cc来自于Unix的c语言编译器，是 c compiler 的缩写。gcc来自Linux世界，是GNU compiler collection 的缩写，注意这是一个编译器集合，不仅仅是c或c++</p>\n</li>\n<li><p>strtok()</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> sentence[]=<span class=\"string\">&quot;192.168...9...14&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> *token=strtok(sentence,<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">while</span>(token!=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span>&lt;&lt;token&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">  token=strtok(<span class=\"literal\">NULL</span>,<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在gcc编译器中，对标准库进行了扩展，加入了一个getline函数。会自动malloc, realloc，所以用的话，需要自己手动free，好像没啥人用，参考<a href=\"https://www.cnblogs.com/xkfz007/archive/2012/08/01/2618366.html\">这里</a></p>\n</li>\n<li><p>我用system代替了fork等，于是有了<a href=\"https://github.com/zjyfdu/lsh/blob/master/src/%E6%BA%90.cpp\">window版</a></p>\n</li>\n</ul>\n"},{"title":"一些shell命令","typora-root-url":"../../source","date":"2019-01-23T11:20:03.000Z","_content":"\n- for循环\n\n```shell\nfor file in `ls /etc`\n\nfor skill in Ada Coffe Action Java; do\n    echo \"I am good at ${skill}Script\"\ndone\n\nfor (( EXP1; EXP2; EXP3 ))\ndo\n    # do something\ndone\n\nwhile condition\ndo\n    # do something\ndone\n\nuntil condition\ndo\n    # do something\ndone\n\n# while : 等效于 while true\n# There's no real difference in behavior. Both commands do nothing and exit with a successful status. : emphasizes doing nothing; true emphasizes the successful status.\n```\n\n- if\n\n```shell\nif condition\nthen\n    # do something\nelif\n    # do something\nelse\n    # do something\nfi\n\nif [ -e \"$filename\" ] # 文件是否存在，r、w、x是否可读、写、执行\n                      # d是否为目录、f是否为文件\nif [ $var -gt 0 ] # 还有lt、ge、le、eq、ne\n```\n\n- case\n\n\n ```shell\ncase \"$varname\" in\n    [a-z]) echo \"abc\";;\n    [0-9]) echo \"123\";; #还不知道为啥这么写，以后再补充吧\nesac\n ```\n\n- 文件包含\n\n```shell\nsource ./function.sh\n. ./function.sh\n```\n\n- 字符串\n\n```shell\nstring=\"abcd\"\necho ${#string} # 字符串长度\n\nstring=\"zhe pian tai shui le\"\necho ${string:13:4} # shui\n```\n\n- 数组\n\n```shell\narr=(1 2 3 4 5)\necho ${arr[3]}\n\necho ${#arr[@]} # 数组长度\necho ${arr[#arr[@]-1]} # 最后一个元素\n```\n- 问号，和C里面的问号一样\n\n```shell\na=10\n(( t=a<50?0:1 )) # t=0\n```\n\n- `/dev/null`是个空文件，清空一个文件可以用`cat /dev/null > tmp.log`，不想保存log，也不想输出到屏幕，可以`1>/dev/null 2>&1`\n- 清空一个文件也可用`: > tmp.log`，:是个内建命令，什么也不做，永远返回0\n\n```shell\n:\necho $? # 0\n ```\n\n - `cp t.{txt,back}` 文件名扩展\n - 大括号和小括号的区别\n\n\n ```shell\n a=123\n (a=321)\n echo $a # 123 在子进程中修改了a的值，对当前进程没影响\n {a=321;}\n echo $a # 321 想当于是一个匿名函数\n ```\n\n - `sudo sh -c \"...\"`，引号里的内容都会有sudo权限\n - `echo $(( 2#101011 ))`，这里是2进制的意思\n\n - `trap`\n ```shell\ntrap \"echo Booh!\" SIGINT SIGTERM\necho \"it's going to run until you hit Ctrl+Z\"\necho \"hit Ctrl+C to be blown away!\"\n\nwhile true:         \ndo\n    sleep 60       \ndone\n# “kill pid” 会发送SIGTERM到进程pid.\n# 在终端中敲入interrupt key（DELETE或ctrl+c）会产生SIGINT信号。\n# “kill -9 pid” 会发送SIGKILL到进程pid，SIGKILL不能被捕获，会直接结束\n```\n","source":"_posts/一些shell命令.md","raw":"---\ntitle: 一些shell命令\ntypora-root-url: ../../source\ntags: shell\ncategories: shell\ndate: 2019-01-23 19:20:03\n---\n\n- for循环\n\n```shell\nfor file in `ls /etc`\n\nfor skill in Ada Coffe Action Java; do\n    echo \"I am good at ${skill}Script\"\ndone\n\nfor (( EXP1; EXP2; EXP3 ))\ndo\n    # do something\ndone\n\nwhile condition\ndo\n    # do something\ndone\n\nuntil condition\ndo\n    # do something\ndone\n\n# while : 等效于 while true\n# There's no real difference in behavior. Both commands do nothing and exit with a successful status. : emphasizes doing nothing; true emphasizes the successful status.\n```\n\n- if\n\n```shell\nif condition\nthen\n    # do something\nelif\n    # do something\nelse\n    # do something\nfi\n\nif [ -e \"$filename\" ] # 文件是否存在，r、w、x是否可读、写、执行\n                      # d是否为目录、f是否为文件\nif [ $var -gt 0 ] # 还有lt、ge、le、eq、ne\n```\n\n- case\n\n\n ```shell\ncase \"$varname\" in\n    [a-z]) echo \"abc\";;\n    [0-9]) echo \"123\";; #还不知道为啥这么写，以后再补充吧\nesac\n ```\n\n- 文件包含\n\n```shell\nsource ./function.sh\n. ./function.sh\n```\n\n- 字符串\n\n```shell\nstring=\"abcd\"\necho ${#string} # 字符串长度\n\nstring=\"zhe pian tai shui le\"\necho ${string:13:4} # shui\n```\n\n- 数组\n\n```shell\narr=(1 2 3 4 5)\necho ${arr[3]}\n\necho ${#arr[@]} # 数组长度\necho ${arr[#arr[@]-1]} # 最后一个元素\n```\n- 问号，和C里面的问号一样\n\n```shell\na=10\n(( t=a<50?0:1 )) # t=0\n```\n\n- `/dev/null`是个空文件，清空一个文件可以用`cat /dev/null > tmp.log`，不想保存log，也不想输出到屏幕，可以`1>/dev/null 2>&1`\n- 清空一个文件也可用`: > tmp.log`，:是个内建命令，什么也不做，永远返回0\n\n```shell\n:\necho $? # 0\n ```\n\n - `cp t.{txt,back}` 文件名扩展\n - 大括号和小括号的区别\n\n\n ```shell\n a=123\n (a=321)\n echo $a # 123 在子进程中修改了a的值，对当前进程没影响\n {a=321;}\n echo $a # 321 想当于是一个匿名函数\n ```\n\n - `sudo sh -c \"...\"`，引号里的内容都会有sudo权限\n - `echo $(( 2#101011 ))`，这里是2进制的意思\n\n - `trap`\n ```shell\ntrap \"echo Booh!\" SIGINT SIGTERM\necho \"it's going to run until you hit Ctrl+Z\"\necho \"hit Ctrl+C to be blown away!\"\n\nwhile true:         \ndo\n    sleep 60       \ndone\n# “kill pid” 会发送SIGTERM到进程pid.\n# 在终端中敲入interrupt key（DELETE或ctrl+c）会产生SIGINT信号。\n# “kill -9 pid” 会发送SIGKILL到进程pid，SIGKILL不能被捕获，会直接结束\n```\n","slug":"一些shell命令","published":1,"updated":"2023-11-05T11:42:33.905Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li60031s2kzbh0s4dwe","content":"<ul>\n<li>for循环</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for file in `ls /etc`</span><br><span class=\"line\"></span><br><span class=\"line\">for skill in Ada Coffe Action Java; do</span><br><span class=\"line\">    echo &quot;I am good at $&#123;skill&#125;Script&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">for (( EXP1; EXP2; EXP3 ))</span><br><span class=\"line\">do</span><br><span class=\"line\">    # do something</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">while condition</span><br><span class=\"line\">do</span><br><span class=\"line\">    # do something</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">until condition</span><br><span class=\"line\">do</span><br><span class=\"line\">    # do something</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"keyword\">while</span> : 等效于 <span class=\"keyword\">while</span> <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">There<span class=\"string\">&#x27;s no real difference in behavior. Both commands do nothing and exit with a successful status. : emphasizes doing nothing; true emphasizes the successful status.</span></span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>if</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if condition</span><br><span class=\"line\">then</span><br><span class=\"line\">    # do something</span><br><span class=\"line\">elif</span><br><span class=\"line\">    # do something</span><br><span class=\"line\">else</span><br><span class=\"line\">    # do something</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -e &quot;$filename&quot; ] # 文件是否存在，r、w、x是否可读、写、执行</span><br><span class=\"line\">                      # d是否为目录、f是否为文件</span><br><span class=\"line\">if [ $var -gt 0 ] # 还有lt、ge、le、eq、ne</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>case</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case &quot;$varname&quot; in</span><br><span class=\"line\">    [a-z]) echo &quot;abc&quot;;;</span><br><span class=\"line\">    [0-9]) echo &quot;123&quot;;; #还不知道为啥这么写，以后再补充吧</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>文件包含</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ./function.sh</span><br><span class=\"line\">. ./function.sh</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>字符串</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string=&quot;abcd&quot;</span><br><span class=\"line\">echo $&#123;#string&#125; # 字符串长度</span><br><span class=\"line\"></span><br><span class=\"line\">string=&quot;zhe pian tai shui le&quot;</span><br><span class=\"line\">echo $&#123;string:13:4&#125; # shui</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>数组</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr=(1 2 3 4 5)</span><br><span class=\"line\">echo $&#123;arr[3]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">echo $&#123;#arr[@]&#125; # 数组长度</span><br><span class=\"line\">echo $&#123;arr[#arr[@]-1]&#125; # 最后一个元素</span><br></pre></td></tr></table></figure>\n<ul>\n<li>问号，和C里面的问号一样</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=10</span><br><span class=\"line\">(( t=a&lt;50?0:1 )) # t=0</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>/dev/null</code>是个空文件，清空一个文件可以用<code>cat /dev/null &gt; tmp.log</code>，不想保存log，也不想输出到屏幕，可以<code>1&gt;/dev/null 2&gt;&amp;1</code></li>\n<li>清空一个文件也可用<code>: &gt; tmp.log</code>，:是个内建命令，什么也不做，永远返回0</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:</span><br><span class=\"line\">echo $? # 0</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>cp t.&#123;txt,back&#125;</code> 文件名扩展</li>\n<li>大括号和小括号的区别</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=123</span><br><span class=\"line\">(a=321)</span><br><span class=\"line\">echo $a # 123 在子进程中修改了a的值，对当前进程没影响</span><br><span class=\"line\">&#123;a=321;&#125;</span><br><span class=\"line\">echo $a # 321 想当于是一个匿名函数</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>sudo sh -c &quot;...&quot;</code>，引号里的内容都会有sudo权限</p>\n</li>\n<li><p><code>echo $(( 2#101011 ))</code>，这里是2进制的意思</p>\n</li>\n<li><p><code>trap</code></p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trap &quot;echo Booh!&quot; SIGINT SIGTERM</span><br><span class=\"line\">echo &quot;it&#x27;s going to run until you hit Ctrl+Z&quot;</span><br><span class=\"line\">echo &quot;hit Ctrl+C to be blown away!&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">while true:         </span><br><span class=\"line\">do</span><br><span class=\"line\">    sleep 60       </span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">“<span class=\"built_in\">kill</span> pid” 会发送SIGTERM到进程pid.</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在终端中敲入interrupt key（DELETE或ctrl+c）会产生SIGINT信号。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">“<span class=\"built_in\">kill</span> -9 pid” 会发送SIGKILL到进程pid，SIGKILL不能被捕获，会直接结束</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<ul>\n<li>for循环</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for file in `ls /etc`</span><br><span class=\"line\"></span><br><span class=\"line\">for skill in Ada Coffe Action Java; do</span><br><span class=\"line\">    echo &quot;I am good at $&#123;skill&#125;Script&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">for (( EXP1; EXP2; EXP3 ))</span><br><span class=\"line\">do</span><br><span class=\"line\">    # do something</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">while condition</span><br><span class=\"line\">do</span><br><span class=\"line\">    # do something</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">until condition</span><br><span class=\"line\">do</span><br><span class=\"line\">    # do something</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"keyword\">while</span> : 等效于 <span class=\"keyword\">while</span> <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">There<span class=\"string\">&#x27;s no real difference in behavior. Both commands do nothing and exit with a successful status. : emphasizes doing nothing; true emphasizes the successful status.</span></span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>if</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if condition</span><br><span class=\"line\">then</span><br><span class=\"line\">    # do something</span><br><span class=\"line\">elif</span><br><span class=\"line\">    # do something</span><br><span class=\"line\">else</span><br><span class=\"line\">    # do something</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -e &quot;$filename&quot; ] # 文件是否存在，r、w、x是否可读、写、执行</span><br><span class=\"line\">                      # d是否为目录、f是否为文件</span><br><span class=\"line\">if [ $var -gt 0 ] # 还有lt、ge、le、eq、ne</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>case</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case &quot;$varname&quot; in</span><br><span class=\"line\">    [a-z]) echo &quot;abc&quot;;;</span><br><span class=\"line\">    [0-9]) echo &quot;123&quot;;; #还不知道为啥这么写，以后再补充吧</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>文件包含</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ./function.sh</span><br><span class=\"line\">. ./function.sh</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>字符串</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string=&quot;abcd&quot;</span><br><span class=\"line\">echo $&#123;#string&#125; # 字符串长度</span><br><span class=\"line\"></span><br><span class=\"line\">string=&quot;zhe pian tai shui le&quot;</span><br><span class=\"line\">echo $&#123;string:13:4&#125; # shui</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>数组</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr=(1 2 3 4 5)</span><br><span class=\"line\">echo $&#123;arr[3]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">echo $&#123;#arr[@]&#125; # 数组长度</span><br><span class=\"line\">echo $&#123;arr[#arr[@]-1]&#125; # 最后一个元素</span><br></pre></td></tr></table></figure>\n<ul>\n<li>问号，和C里面的问号一样</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=10</span><br><span class=\"line\">(( t=a&lt;50?0:1 )) # t=0</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>/dev/null</code>是个空文件，清空一个文件可以用<code>cat /dev/null &gt; tmp.log</code>，不想保存log，也不想输出到屏幕，可以<code>1&gt;/dev/null 2&gt;&amp;1</code></li>\n<li>清空一个文件也可用<code>: &gt; tmp.log</code>，:是个内建命令，什么也不做，永远返回0</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:</span><br><span class=\"line\">echo $? # 0</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>cp t.&#123;txt,back&#125;</code> 文件名扩展</li>\n<li>大括号和小括号的区别</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=123</span><br><span class=\"line\">(a=321)</span><br><span class=\"line\">echo $a # 123 在子进程中修改了a的值，对当前进程没影响</span><br><span class=\"line\">&#123;a=321;&#125;</span><br><span class=\"line\">echo $a # 321 想当于是一个匿名函数</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>sudo sh -c &quot;...&quot;</code>，引号里的内容都会有sudo权限</p>\n</li>\n<li><p><code>echo $(( 2#101011 ))</code>，这里是2进制的意思</p>\n</li>\n<li><p><code>trap</code></p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trap &quot;echo Booh!&quot; SIGINT SIGTERM</span><br><span class=\"line\">echo &quot;it&#x27;s going to run until you hit Ctrl+Z&quot;</span><br><span class=\"line\">echo &quot;hit Ctrl+C to be blown away!&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">while true:         </span><br><span class=\"line\">do</span><br><span class=\"line\">    sleep 60       </span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">“<span class=\"built_in\">kill</span> pid” 会发送SIGTERM到进程pid.</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在终端中敲入interrupt key（DELETE或ctrl+c）会产生SIGINT信号。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">“<span class=\"built_in\">kill</span> -9 pid” 会发送SIGKILL到进程pid，SIGKILL不能被捕获，会直接结束</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"卷积的实现","typora-root-url":"../../source","date":"2019-02-09T02:11:57.000Z","_content":"\n- [这里](https://www.cnblogs.com/louyihang-loves-baiyan/p/5154337.html)应该说的比较清楚\n- 就贴个图吧\n![](/images/caffe_conv.jpg)","source":"_posts/卷积的实现.md","raw":"---\ntitle: 卷积的实现\ntypora-root-url: ../../source\ntags:\n  - caffe\n  - docker\ncategories: cpp\ndate: 2019-02-09 10:11:57\n---\n\n- [这里](https://www.cnblogs.com/louyihang-loves-baiyan/p/5154337.html)应该说的比较清楚\n- 就贴个图吧\n![](/images/caffe_conv.jpg)","slug":"卷积的实现","published":1,"updated":"2023-11-05T11:42:33.905Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li60034s2kz51hb90or","content":"<ul>\n<li><a href=\"https://www.cnblogs.com/louyihang-loves-baiyan/p/5154337.html\">这里</a>应该说的比较清楚</li>\n<li>就贴个图吧<br><img src=\"/images/caffe_conv.jpg\"></li>\n</ul>\n","excerpt":"","more":"<ul>\n<li><a href=\"https://www.cnblogs.com/louyihang-loves-baiyan/p/5154337.html\">这里</a>应该说的比较清楚</li>\n<li>就贴个图吧<br><img src=\"/images/caffe_conv.jpg\"></li>\n</ul>\n"},{"title":"优秀的Typora","typora-root-url":"../../source","date":"2019-07-13T16:22:33.000Z","_content":"\n今天意外地发现了[Typora](https://typora.io/)，几乎解决了我关于记笔记和写博客的所有问题。\n\n# 1.日常记笔记\n\n其实我大概三个月前是用纸笔记笔记的，直到我意识到我打字已经比写字快很多了。。。\n\n然后我开始用word记事，当然是可以的，但是总觉得不够轻便\n\n然后我开始用onenote，但功能又太少了，关键时刻连个公式都没有\n\n\n\n直到今天，直到今天我发现了Typora\n\n1. 实现了markdown的所见所得，标题、加粗、插图，可以直接显示，实现了word的功能又不用频繁点鼠标。\n2. 公式可以直接用$\\LaTeX{}$打啊，而且边写边预览！\n3. 可以直接贴代码啊，直接语法高亮啊！这个用word我是不会做的。\n4. 装了pandoc之后，**能直接导出word**，而且公式还是原生的word公式，不是mathtype的！\n\n其实看了上面的功能，我就怀疑这个软件像是一个本地版的hexo，然后我在GitHub上找，没找到源码，但找到了到了Typora的组织，里面的仓库有node、有electron，emmm，我更加怀疑了🤔\n\n# 2.Hexo\n\n所以把Typora当作Hexo的客户端非常合适，好像Hexo写博客难受的几个点都可以解决了。\n\n## 2.1实时预览\n\nhexo里能实现的，Typora上也都能实现，所以其实就是实现了实时预览。\n\n虽然理论上也可以开`hexo server`，但是毕竟还是要到浏览器里刷新一下才能看到变化的，比不上直接用这个来得直接。\n\n## 2.2图片粘贴\n\n贴图简直是hexo的灾难，最早我是把图传到七牛云的，然后复制了链接再手动写到博客里。\n\n后来七牛云突然就不允许外链了，差点把我的图都搞丢，吃了教训之后，我把图都放到了`source/images`里，然后在贴图的时候用`![](/images/ctc.jpg)`，图片是要自己复制的，路径也是要自己写的。\n\n但是现在有Typora 了！可以实现图片直接粘贴了\n\n设置好图片自动复制，不管是本地图片，还是网络图片，都复制到`source/images`，显示相对路径，同时需要设置图片根目录，\n\n```yaml\ntypora-root-url: ../../source\n```\n\n这样Typora生成的相对路径才可以正常在网站上显示。\n\n![屏幕快照 2019-07-14 上午1.15.21](/images/屏幕快照 2019-07-14 上午1.15.21-3039456.png)\n\n但mac上好像不能批量设置图片根目录，所以修改默认的post配置，在`scaffolds\\post.md`里，添加上面那一句。\n\n以前写的博客没有这一句怎么办呢？我弄了半天的`sed`最终放弃了（mac的freebsd上的sed和gnu的sed不一致），还是用python一把梭\n\n```python\nimport os\n\npath_root = './_posts/'\nfiles = os.listdir(path_root)\nfiles = [path_root + x for x in files if x.endswith('.md')]\ninsert_line = 'typora-root-url: ../../source'\n\nfor file in files:\n    with open(file) as f:\n        lines = f.readlines()\n\n    if any([insert_line in x for x in lines]):\n        continue\n\n    lines.insert(2, insert_line + '\\n') // 在哪一行插入都行\n    with open(file, 'w') as f:\n        f.writelines(lines)\n```\n\n##2.3一个Typora没解决的图片问题\n\n后来想到还有一个问题没有解决，图片直接用的是原图，没有做裁剪和重命名。\n\n参考[这里](https://www.karlzhou.com/articles/compress-minify-hexo/)做的，用`gulp`压缩图片。\n\n在`package.json`的 `dependencies`里加入\n\n```json\n\"del\": \"^2.2.2\",\n\"gulp\": \"^3.9.1\",\n\"gulp-clean-css\": \"^2.3.2\",\n\"gulp-htmlclean\": \"^2.7.22\",\n\"gulp-htmlmin\": \"^3.0.0\",\n\"gulp-imagemin\": \"^3.4.0\",\n\"gulp-uglify\": \"^2.1.2\",\n```\n\n然后，\n\n```shell\ncnpm insall\ncnpm update # 直接install后报错，update之后好了\ncnpm audit fix\n```\n\n`gulpfile.js`做了一些修改，主要是压缩图片好事太长了，从部署流程里单独拉了出来\n\n```javascript\nvar gulp = require('gulp');\nvar minifycss = require('gulp-clean-css');\nvar uglify = require('gulp-uglify');\nvar htmlmin = require('gulp-htmlmin');\nvar htmlclean = require('gulp-htmlclean');\nvar imagemin = require('gulp-imagemin');\nvar del = require('del');\nvar runSequence = require('run-sequence');\nvar Hexo = require('hexo');\n\n\ngulp.task('clean', function() {\n    return del(['public/**/*']);\n});\n\n// generate html with 'hexo generate'\nvar hexo = new Hexo(process.cwd(), {});\ngulp.task('generate', function(cb) {\n    hexo.init().then(function() {\n        return hexo.call('generate', {\n            watch: false\n        });\n    }).then(function() {\n        return hexo.exit();\n    }).then(function() {\n        return cb()\n    }).catch(function(err) {\n        console.log(err);\n        hexo.exit(err);\n        return cb(err);\n    })\n})\n\ngulp.task('minify-css', function() {\n    return gulp.src('./public/**/*.css')\n        .pipe(minifycss({\n            compatibility: 'ie8'\n        }))\n        .pipe(gulp.dest('./public'));\n});\n\ngulp.task('minify-html', function() {\n    return gulp.src('./public/**/*.html')\n        .pipe(htmlclean())\n        .pipe(htmlmin({\n            removeComments: true,\n            minifyJS: true,\n            minifyCSS: true,\n            minifyURLs: true,\n        }))\n        .pipe(gulp.dest('./public'))\n});\n\ngulp.task('minify-js', function() {\n    return gulp.src('./public/**/*.js')\n        .pipe(uglify())\n        .pipe(gulp.dest('./public'));\n});\n\ngulp.task('minify-img', function() {\n    return gulp.src('./public/images/**/*.*')\n        .pipe(imagemin())\n        .pipe(gulp.dest('./public/images'))\n})\n\ngulp.task('minify-img-aggressive', function() {\n    return gulp.src('./source/images/**/*.*') //直接压缩source里的图片，public里的不管了\n        .pipe(imagemin(\n        [imagemin.gifsicle({'optimizationLevel': 3}), \n        imagemin.jpegtran({'progressive': true}), \n        imagemin.optipng({'optimizationLevel': 7}), \n        imagemin.svgo()],\n        {'verbose': true}))\n        .pipe(gulp.dest('./source/images'))\n})\n\ngulp.task('img', ['minify-img-aggressive'])\n\ngulp.task('compress', function(cb) {\n    runSequence(['minify-html', 'minify-css', 'minify-js'], cb);\n    // runSequence(['minify-html', 'minify-css', 'minify-js', 'minify-img-aggressive'], cb);\n});\n\ngulp.task('build', function(cb) {\n    runSequence('clean', 'generate', 'compress', cb)\n});\n\ngulp.task('default', ['build'])\n```\n\n压缩图片用这个\n\n```\ngulp img\n```\n\n部署用这个\n\n```\ngulp build && hexo d\n```","source":"_posts/优秀的Typora.md","raw":"---\ntitle: 优秀的Typora\ntypora-root-url: ../../source\ndate: 2019-07-14 00:22:33\n---\n\n今天意外地发现了[Typora](https://typora.io/)，几乎解决了我关于记笔记和写博客的所有问题。\n\n# 1.日常记笔记\n\n其实我大概三个月前是用纸笔记笔记的，直到我意识到我打字已经比写字快很多了。。。\n\n然后我开始用word记事，当然是可以的，但是总觉得不够轻便\n\n然后我开始用onenote，但功能又太少了，关键时刻连个公式都没有\n\n\n\n直到今天，直到今天我发现了Typora\n\n1. 实现了markdown的所见所得，标题、加粗、插图，可以直接显示，实现了word的功能又不用频繁点鼠标。\n2. 公式可以直接用$\\LaTeX{}$打啊，而且边写边预览！\n3. 可以直接贴代码啊，直接语法高亮啊！这个用word我是不会做的。\n4. 装了pandoc之后，**能直接导出word**，而且公式还是原生的word公式，不是mathtype的！\n\n其实看了上面的功能，我就怀疑这个软件像是一个本地版的hexo，然后我在GitHub上找，没找到源码，但找到了到了Typora的组织，里面的仓库有node、有electron，emmm，我更加怀疑了🤔\n\n# 2.Hexo\n\n所以把Typora当作Hexo的客户端非常合适，好像Hexo写博客难受的几个点都可以解决了。\n\n## 2.1实时预览\n\nhexo里能实现的，Typora上也都能实现，所以其实就是实现了实时预览。\n\n虽然理论上也可以开`hexo server`，但是毕竟还是要到浏览器里刷新一下才能看到变化的，比不上直接用这个来得直接。\n\n## 2.2图片粘贴\n\n贴图简直是hexo的灾难，最早我是把图传到七牛云的，然后复制了链接再手动写到博客里。\n\n后来七牛云突然就不允许外链了，差点把我的图都搞丢，吃了教训之后，我把图都放到了`source/images`里，然后在贴图的时候用`![](/images/ctc.jpg)`，图片是要自己复制的，路径也是要自己写的。\n\n但是现在有Typora 了！可以实现图片直接粘贴了\n\n设置好图片自动复制，不管是本地图片，还是网络图片，都复制到`source/images`，显示相对路径，同时需要设置图片根目录，\n\n```yaml\ntypora-root-url: ../../source\n```\n\n这样Typora生成的相对路径才可以正常在网站上显示。\n\n![屏幕快照 2019-07-14 上午1.15.21](/images/屏幕快照 2019-07-14 上午1.15.21-3039456.png)\n\n但mac上好像不能批量设置图片根目录，所以修改默认的post配置，在`scaffolds\\post.md`里，添加上面那一句。\n\n以前写的博客没有这一句怎么办呢？我弄了半天的`sed`最终放弃了（mac的freebsd上的sed和gnu的sed不一致），还是用python一把梭\n\n```python\nimport os\n\npath_root = './_posts/'\nfiles = os.listdir(path_root)\nfiles = [path_root + x for x in files if x.endswith('.md')]\ninsert_line = 'typora-root-url: ../../source'\n\nfor file in files:\n    with open(file) as f:\n        lines = f.readlines()\n\n    if any([insert_line in x for x in lines]):\n        continue\n\n    lines.insert(2, insert_line + '\\n') // 在哪一行插入都行\n    with open(file, 'w') as f:\n        f.writelines(lines)\n```\n\n##2.3一个Typora没解决的图片问题\n\n后来想到还有一个问题没有解决，图片直接用的是原图，没有做裁剪和重命名。\n\n参考[这里](https://www.karlzhou.com/articles/compress-minify-hexo/)做的，用`gulp`压缩图片。\n\n在`package.json`的 `dependencies`里加入\n\n```json\n\"del\": \"^2.2.2\",\n\"gulp\": \"^3.9.1\",\n\"gulp-clean-css\": \"^2.3.2\",\n\"gulp-htmlclean\": \"^2.7.22\",\n\"gulp-htmlmin\": \"^3.0.0\",\n\"gulp-imagemin\": \"^3.4.0\",\n\"gulp-uglify\": \"^2.1.2\",\n```\n\n然后，\n\n```shell\ncnpm insall\ncnpm update # 直接install后报错，update之后好了\ncnpm audit fix\n```\n\n`gulpfile.js`做了一些修改，主要是压缩图片好事太长了，从部署流程里单独拉了出来\n\n```javascript\nvar gulp = require('gulp');\nvar minifycss = require('gulp-clean-css');\nvar uglify = require('gulp-uglify');\nvar htmlmin = require('gulp-htmlmin');\nvar htmlclean = require('gulp-htmlclean');\nvar imagemin = require('gulp-imagemin');\nvar del = require('del');\nvar runSequence = require('run-sequence');\nvar Hexo = require('hexo');\n\n\ngulp.task('clean', function() {\n    return del(['public/**/*']);\n});\n\n// generate html with 'hexo generate'\nvar hexo = new Hexo(process.cwd(), {});\ngulp.task('generate', function(cb) {\n    hexo.init().then(function() {\n        return hexo.call('generate', {\n            watch: false\n        });\n    }).then(function() {\n        return hexo.exit();\n    }).then(function() {\n        return cb()\n    }).catch(function(err) {\n        console.log(err);\n        hexo.exit(err);\n        return cb(err);\n    })\n})\n\ngulp.task('minify-css', function() {\n    return gulp.src('./public/**/*.css')\n        .pipe(minifycss({\n            compatibility: 'ie8'\n        }))\n        .pipe(gulp.dest('./public'));\n});\n\ngulp.task('minify-html', function() {\n    return gulp.src('./public/**/*.html')\n        .pipe(htmlclean())\n        .pipe(htmlmin({\n            removeComments: true,\n            minifyJS: true,\n            minifyCSS: true,\n            minifyURLs: true,\n        }))\n        .pipe(gulp.dest('./public'))\n});\n\ngulp.task('minify-js', function() {\n    return gulp.src('./public/**/*.js')\n        .pipe(uglify())\n        .pipe(gulp.dest('./public'));\n});\n\ngulp.task('minify-img', function() {\n    return gulp.src('./public/images/**/*.*')\n        .pipe(imagemin())\n        .pipe(gulp.dest('./public/images'))\n})\n\ngulp.task('minify-img-aggressive', function() {\n    return gulp.src('./source/images/**/*.*') //直接压缩source里的图片，public里的不管了\n        .pipe(imagemin(\n        [imagemin.gifsicle({'optimizationLevel': 3}), \n        imagemin.jpegtran({'progressive': true}), \n        imagemin.optipng({'optimizationLevel': 7}), \n        imagemin.svgo()],\n        {'verbose': true}))\n        .pipe(gulp.dest('./source/images'))\n})\n\ngulp.task('img', ['minify-img-aggressive'])\n\ngulp.task('compress', function(cb) {\n    runSequence(['minify-html', 'minify-css', 'minify-js'], cb);\n    // runSequence(['minify-html', 'minify-css', 'minify-js', 'minify-img-aggressive'], cb);\n});\n\ngulp.task('build', function(cb) {\n    runSequence('clean', 'generate', 'compress', cb)\n});\n\ngulp.task('default', ['build'])\n```\n\n压缩图片用这个\n\n```\ngulp img\n```\n\n部署用这个\n\n```\ngulp build && hexo d\n```","slug":"优秀的Typora","published":1,"updated":"2023-11-05T11:42:33.905Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li60038s2kzczfzf2c6","content":"<p>今天意外地发现了<a href=\"https://typora.io/\">Typora</a>，几乎解决了我关于记笔记和写博客的所有问题。</p>\n<h1 id=\"1-日常记笔记\"><a href=\"#1-日常记笔记\" class=\"headerlink\" title=\"1.日常记笔记\"></a>1.日常记笔记</h1><p>其实我大概三个月前是用纸笔记笔记的，直到我意识到我打字已经比写字快很多了。。。</p>\n<p>然后我开始用word记事，当然是可以的，但是总觉得不够轻便</p>\n<p>然后我开始用onenote，但功能又太少了，关键时刻连个公式都没有</p>\n<p>直到今天，直到今天我发现了Typora</p>\n<ol>\n<li>实现了markdown的所见所得，标题、加粗、插图，可以直接显示，实现了word的功能又不用频繁点鼠标。</li>\n<li>公式可以直接用$\\LaTeX{}$打啊，而且边写边预览！</li>\n<li>可以直接贴代码啊，直接语法高亮啊！这个用word我是不会做的。</li>\n<li>装了pandoc之后，<strong>能直接导出word</strong>，而且公式还是原生的word公式，不是mathtype的！</li>\n</ol>\n<p>其实看了上面的功能，我就怀疑这个软件像是一个本地版的hexo，然后我在GitHub上找，没找到源码，但找到了到了Typora的组织，里面的仓库有node、有electron，emmm，我更加怀疑了🤔</p>\n<h1 id=\"2-Hexo\"><a href=\"#2-Hexo\" class=\"headerlink\" title=\"2.Hexo\"></a>2.Hexo</h1><p>所以把Typora当作Hexo的客户端非常合适，好像Hexo写博客难受的几个点都可以解决了。</p>\n<h2 id=\"2-1实时预览\"><a href=\"#2-1实时预览\" class=\"headerlink\" title=\"2.1实时预览\"></a>2.1实时预览</h2><p>hexo里能实现的，Typora上也都能实现，所以其实就是实现了实时预览。</p>\n<p>虽然理论上也可以开<code>hexo server</code>，但是毕竟还是要到浏览器里刷新一下才能看到变化的，比不上直接用这个来得直接。</p>\n<h2 id=\"2-2图片粘贴\"><a href=\"#2-2图片粘贴\" class=\"headerlink\" title=\"2.2图片粘贴\"></a>2.2图片粘贴</h2><p>贴图简直是hexo的灾难，最早我是把图传到七牛云的，然后复制了链接再手动写到博客里。</p>\n<p>后来七牛云突然就不允许外链了，差点把我的图都搞丢，吃了教训之后，我把图都放到了<code>source/images</code>里，然后在贴图的时候用<code>![](/images/ctc.jpg)</code>，图片是要自己复制的，路径也是要自己写的。</p>\n<p>但是现在有Typora 了！可以实现图片直接粘贴了</p>\n<p>设置好图片自动复制，不管是本地图片，还是网络图片，都复制到<code>source/images</code>，显示相对路径，同时需要设置图片根目录，</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">typora-root-url:</span> <span class=\"string\">../../source</span></span><br></pre></td></tr></table></figure>\n\n<p>这样Typora生成的相对路径才可以正常在网站上显示。</p>\n<p>![屏幕快照 2019-07-14 上午1.15.21](&#x2F;images&#x2F;屏幕快照 2019-07-14 上午1.15.21-3039456.png)</p>\n<p>但mac上好像不能批量设置图片根目录，所以修改默认的post配置，在<code>scaffolds\\post.md</code>里，添加上面那一句。</p>\n<p>以前写的博客没有这一句怎么办呢？我弄了半天的<code>sed</code>最终放弃了（mac的freebsd上的sed和gnu的sed不一致），还是用python一把梭</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">path_root = <span class=\"string\">&#x27;./_posts/&#x27;</span></span><br><span class=\"line\">files = os.listdir(path_root)</span><br><span class=\"line\">files = [path_root + x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> files <span class=\"keyword\">if</span> x.endswith(<span class=\"string\">&#x27;.md&#x27;</span>)]</span><br><span class=\"line\">insert_line = <span class=\"string\">&#x27;typora-root-url: ../../source&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        lines = f.readlines()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">any</span>([insert_line <span class=\"keyword\">in</span> x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> lines]):</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">    lines.insert(<span class=\"number\">2</span>, insert_line + <span class=\"string\">&#x27;\\n&#x27;</span>) // 在哪一行插入都行</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file, <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        f.writelines(lines)</span><br></pre></td></tr></table></figure>\n\n<p>##2.3一个Typora没解决的图片问题</p>\n<p>后来想到还有一个问题没有解决，图片直接用的是原图，没有做裁剪和重命名。</p>\n<p>参考<a href=\"https://www.karlzhou.com/articles/compress-minify-hexo/\">这里</a>做的，用<code>gulp</code>压缩图片。</p>\n<p>在<code>package.json</code>的 <code>dependencies</code>里加入</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;del&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^2.2.2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;gulp&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^3.9.1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;gulp-clean-css&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^2.3.2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;gulp-htmlclean&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^2.7.22&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;gulp-htmlmin&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^3.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;gulp-imagemin&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^3.4.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;gulp-uglify&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^2.1.2&quot;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<p>然后，</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm insall</span><br><span class=\"line\">cnpm update # 直接install后报错，update之后好了</span><br><span class=\"line\">cnpm audit fix</span><br></pre></td></tr></table></figure>\n\n<p><code>gulpfile.js</code>做了一些修改，主要是压缩图片好事太长了，从部署流程里单独拉了出来</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-clean-css&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-uglify&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> htmlmin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-htmlmin&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> htmlclean = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-htmlclean&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> imagemin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-imagemin&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> del = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;del&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> runSequence = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;run-sequence&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Hexo</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;hexo&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;clean&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">del</span>([<span class=\"string\">&#x27;public/**/*&#x27;</span>]);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// generate html with &#x27;hexo generate&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hexo = <span class=\"keyword\">new</span> <span class=\"title class_\">Hexo</span>(process.<span class=\"title function_\">cwd</span>(), &#123;&#125;);</span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;generate&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) &#123;</span><br><span class=\"line\">    hexo.<span class=\"title function_\">init</span>().<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hexo.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;generate&#x27;</span>, &#123;</span><br><span class=\"line\">            <span class=\"attr\">watch</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hexo.<span class=\"title function_\">exit</span>();</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">cb</span>()</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">catch</span>(<span class=\"keyword\">function</span>(<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">        hexo.<span class=\"title function_\">exit</span>(err);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">cb</span>(err);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;minify-css&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./public/**/*.css&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">minifycss</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">compatibility</span>: <span class=\"string\">&#x27;ie8&#x27;</span></span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./public&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;minify-html&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./public/**/*.html&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">htmlclean</span>())</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">htmlmin</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">removeComments</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">minifyJS</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">minifyCSS</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">minifyURLs</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./public&#x27;</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;minify-js&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./public/**/*.js&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">uglify</span>())</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./public&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;minify-img&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./public/images/**/*.*&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">imagemin</span>())</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./public/images&#x27;</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;minify-img-aggressive&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./source/images/**/*.*&#x27;</span>) <span class=\"comment\">//直接压缩source里的图片，public里的不管了</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">imagemin</span>(</span><br><span class=\"line\">        [imagemin.<span class=\"title function_\">gifsicle</span>(&#123;<span class=\"string\">&#x27;optimizationLevel&#x27;</span>: <span class=\"number\">3</span>&#125;), </span><br><span class=\"line\">        imagemin.<span class=\"title function_\">jpegtran</span>(&#123;<span class=\"string\">&#x27;progressive&#x27;</span>: <span class=\"literal\">true</span>&#125;), </span><br><span class=\"line\">        imagemin.<span class=\"title function_\">optipng</span>(&#123;<span class=\"string\">&#x27;optimizationLevel&#x27;</span>: <span class=\"number\">7</span>&#125;), </span><br><span class=\"line\">        imagemin.<span class=\"title function_\">svgo</span>()],</span><br><span class=\"line\">        &#123;<span class=\"string\">&#x27;verbose&#x27;</span>: <span class=\"literal\">true</span>&#125;))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./source/images&#x27;</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;img&#x27;</span>, [<span class=\"string\">&#x27;minify-img-aggressive&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;compress&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">runSequence</span>([<span class=\"string\">&#x27;minify-html&#x27;</span>, <span class=\"string\">&#x27;minify-css&#x27;</span>, <span class=\"string\">&#x27;minify-js&#x27;</span>], cb);</span><br><span class=\"line\">    <span class=\"comment\">// runSequence([&#x27;minify-html&#x27;, &#x27;minify-css&#x27;, &#x27;minify-js&#x27;, &#x27;minify-img-aggressive&#x27;], cb);</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;build&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">runSequence</span>(<span class=\"string\">&#x27;clean&#x27;</span>, <span class=\"string\">&#x27;generate&#x27;</span>, <span class=\"string\">&#x27;compress&#x27;</span>, cb)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;default&#x27;</span>, [<span class=\"string\">&#x27;build&#x27;</span>])</span><br></pre></td></tr></table></figure>\n\n<p>压缩图片用这个</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp img</span><br></pre></td></tr></table></figure>\n\n<p>部署用这个</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp build &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>今天意外地发现了<a href=\"https://typora.io/\">Typora</a>，几乎解决了我关于记笔记和写博客的所有问题。</p>\n<h1 id=\"1-日常记笔记\"><a href=\"#1-日常记笔记\" class=\"headerlink\" title=\"1.日常记笔记\"></a>1.日常记笔记</h1><p>其实我大概三个月前是用纸笔记笔记的，直到我意识到我打字已经比写字快很多了。。。</p>\n<p>然后我开始用word记事，当然是可以的，但是总觉得不够轻便</p>\n<p>然后我开始用onenote，但功能又太少了，关键时刻连个公式都没有</p>\n<p>直到今天，直到今天我发现了Typora</p>\n<ol>\n<li>实现了markdown的所见所得，标题、加粗、插图，可以直接显示，实现了word的功能又不用频繁点鼠标。</li>\n<li>公式可以直接用$\\LaTeX{}$打啊，而且边写边预览！</li>\n<li>可以直接贴代码啊，直接语法高亮啊！这个用word我是不会做的。</li>\n<li>装了pandoc之后，<strong>能直接导出word</strong>，而且公式还是原生的word公式，不是mathtype的！</li>\n</ol>\n<p>其实看了上面的功能，我就怀疑这个软件像是一个本地版的hexo，然后我在GitHub上找，没找到源码，但找到了到了Typora的组织，里面的仓库有node、有electron，emmm，我更加怀疑了🤔</p>\n<h1 id=\"2-Hexo\"><a href=\"#2-Hexo\" class=\"headerlink\" title=\"2.Hexo\"></a>2.Hexo</h1><p>所以把Typora当作Hexo的客户端非常合适，好像Hexo写博客难受的几个点都可以解决了。</p>\n<h2 id=\"2-1实时预览\"><a href=\"#2-1实时预览\" class=\"headerlink\" title=\"2.1实时预览\"></a>2.1实时预览</h2><p>hexo里能实现的，Typora上也都能实现，所以其实就是实现了实时预览。</p>\n<p>虽然理论上也可以开<code>hexo server</code>，但是毕竟还是要到浏览器里刷新一下才能看到变化的，比不上直接用这个来得直接。</p>\n<h2 id=\"2-2图片粘贴\"><a href=\"#2-2图片粘贴\" class=\"headerlink\" title=\"2.2图片粘贴\"></a>2.2图片粘贴</h2><p>贴图简直是hexo的灾难，最早我是把图传到七牛云的，然后复制了链接再手动写到博客里。</p>\n<p>后来七牛云突然就不允许外链了，差点把我的图都搞丢，吃了教训之后，我把图都放到了<code>source/images</code>里，然后在贴图的时候用<code>![](/images/ctc.jpg)</code>，图片是要自己复制的，路径也是要自己写的。</p>\n<p>但是现在有Typora 了！可以实现图片直接粘贴了</p>\n<p>设置好图片自动复制，不管是本地图片，还是网络图片，都复制到<code>source/images</code>，显示相对路径，同时需要设置图片根目录，</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">typora-root-url:</span> <span class=\"string\">../../source</span></span><br></pre></td></tr></table></figure>\n\n<p>这样Typora生成的相对路径才可以正常在网站上显示。</p>\n<p>![屏幕快照 2019-07-14 上午1.15.21](&#x2F;images&#x2F;屏幕快照 2019-07-14 上午1.15.21-3039456.png)</p>\n<p>但mac上好像不能批量设置图片根目录，所以修改默认的post配置，在<code>scaffolds\\post.md</code>里，添加上面那一句。</p>\n<p>以前写的博客没有这一句怎么办呢？我弄了半天的<code>sed</code>最终放弃了（mac的freebsd上的sed和gnu的sed不一致），还是用python一把梭</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">path_root = <span class=\"string\">&#x27;./_posts/&#x27;</span></span><br><span class=\"line\">files = os.listdir(path_root)</span><br><span class=\"line\">files = [path_root + x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> files <span class=\"keyword\">if</span> x.endswith(<span class=\"string\">&#x27;.md&#x27;</span>)]</span><br><span class=\"line\">insert_line = <span class=\"string\">&#x27;typora-root-url: ../../source&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        lines = f.readlines()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">any</span>([insert_line <span class=\"keyword\">in</span> x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> lines]):</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">    lines.insert(<span class=\"number\">2</span>, insert_line + <span class=\"string\">&#x27;\\n&#x27;</span>) // 在哪一行插入都行</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file, <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        f.writelines(lines)</span><br></pre></td></tr></table></figure>\n\n<p>##2.3一个Typora没解决的图片问题</p>\n<p>后来想到还有一个问题没有解决，图片直接用的是原图，没有做裁剪和重命名。</p>\n<p>参考<a href=\"https://www.karlzhou.com/articles/compress-minify-hexo/\">这里</a>做的，用<code>gulp</code>压缩图片。</p>\n<p>在<code>package.json</code>的 <code>dependencies</code>里加入</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;del&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^2.2.2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;gulp&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^3.9.1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;gulp-clean-css&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^2.3.2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;gulp-htmlclean&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^2.7.22&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;gulp-htmlmin&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^3.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;gulp-imagemin&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^3.4.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;gulp-uglify&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^2.1.2&quot;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<p>然后，</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm insall</span><br><span class=\"line\">cnpm update # 直接install后报错，update之后好了</span><br><span class=\"line\">cnpm audit fix</span><br></pre></td></tr></table></figure>\n\n<p><code>gulpfile.js</code>做了一些修改，主要是压缩图片好事太长了，从部署流程里单独拉了出来</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-clean-css&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-uglify&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> htmlmin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-htmlmin&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> htmlclean = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-htmlclean&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> imagemin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-imagemin&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> del = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;del&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> runSequence = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;run-sequence&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Hexo</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;hexo&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;clean&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">del</span>([<span class=\"string\">&#x27;public/**/*&#x27;</span>]);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// generate html with &#x27;hexo generate&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hexo = <span class=\"keyword\">new</span> <span class=\"title class_\">Hexo</span>(process.<span class=\"title function_\">cwd</span>(), &#123;&#125;);</span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;generate&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) &#123;</span><br><span class=\"line\">    hexo.<span class=\"title function_\">init</span>().<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hexo.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;generate&#x27;</span>, &#123;</span><br><span class=\"line\">            <span class=\"attr\">watch</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hexo.<span class=\"title function_\">exit</span>();</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">cb</span>()</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">catch</span>(<span class=\"keyword\">function</span>(<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">        hexo.<span class=\"title function_\">exit</span>(err);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">cb</span>(err);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;minify-css&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./public/**/*.css&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">minifycss</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">compatibility</span>: <span class=\"string\">&#x27;ie8&#x27;</span></span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./public&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;minify-html&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./public/**/*.html&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">htmlclean</span>())</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">htmlmin</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">removeComments</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">minifyJS</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">minifyCSS</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">minifyURLs</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./public&#x27;</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;minify-js&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./public/**/*.js&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">uglify</span>())</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./public&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;minify-img&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./public/images/**/*.*&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">imagemin</span>())</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./public/images&#x27;</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;minify-img-aggressive&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./source/images/**/*.*&#x27;</span>) <span class=\"comment\">//直接压缩source里的图片，public里的不管了</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">imagemin</span>(</span><br><span class=\"line\">        [imagemin.<span class=\"title function_\">gifsicle</span>(&#123;<span class=\"string\">&#x27;optimizationLevel&#x27;</span>: <span class=\"number\">3</span>&#125;), </span><br><span class=\"line\">        imagemin.<span class=\"title function_\">jpegtran</span>(&#123;<span class=\"string\">&#x27;progressive&#x27;</span>: <span class=\"literal\">true</span>&#125;), </span><br><span class=\"line\">        imagemin.<span class=\"title function_\">optipng</span>(&#123;<span class=\"string\">&#x27;optimizationLevel&#x27;</span>: <span class=\"number\">7</span>&#125;), </span><br><span class=\"line\">        imagemin.<span class=\"title function_\">svgo</span>()],</span><br><span class=\"line\">        &#123;<span class=\"string\">&#x27;verbose&#x27;</span>: <span class=\"literal\">true</span>&#125;))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./source/images&#x27;</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;img&#x27;</span>, [<span class=\"string\">&#x27;minify-img-aggressive&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;compress&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">runSequence</span>([<span class=\"string\">&#x27;minify-html&#x27;</span>, <span class=\"string\">&#x27;minify-css&#x27;</span>, <span class=\"string\">&#x27;minify-js&#x27;</span>], cb);</span><br><span class=\"line\">    <span class=\"comment\">// runSequence([&#x27;minify-html&#x27;, &#x27;minify-css&#x27;, &#x27;minify-js&#x27;, &#x27;minify-img-aggressive&#x27;], cb);</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;build&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">runSequence</span>(<span class=\"string\">&#x27;clean&#x27;</span>, <span class=\"string\">&#x27;generate&#x27;</span>, <span class=\"string\">&#x27;compress&#x27;</span>, cb)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;default&#x27;</span>, [<span class=\"string\">&#x27;build&#x27;</span>])</span><br></pre></td></tr></table></figure>\n\n<p>压缩图片用这个</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp img</span><br></pre></td></tr></table></figure>\n\n<p>部署用这个</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp build &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>"},{"title":"又是火车上的博客","typora-root-url":"../../source","date":"2018-02-26T10:44:03.000Z","_content":"\n### 还是圣经旧约\n- 雅各回乡准备见以扫，但心存芥蒂，仆人和妻子在前，他在最后，且分成两队以备不测。\n- 当天晚上，朦胧之中有人找雅各摔跤，摔到天亮未分胜负，此人即是上帝，上帝让雅各改名以色列，与上帝摔跤的人。\n- 以扫和雅各相约同去以东（也不知道是哪里），雅各仍有戒心，让以扫先走，然后掉头去了迦南的示剑城。\n- 雅各女儿底拿被示剑城太子强奸，太子来提亲，雅各和儿子们要求示剑城全城男子割礼，太子同意，然后雅各儿子们趁他们蛋疼的时候，血洗示剑城。\n- 然后雅各带所有人回家见以撒，路上底拿难产而死，产下一子。\n- 雅各的一个儿子犹大扒灰的故事，太狗血不写。\n- 后面慢慢来吧\n","source":"_posts/又是火车上的博客.md","raw":"---\ntitle: 又是火车上的博客\ntypora-root-url: ../../source\ndate: 2018-02-26 18:44:03\n---\n\n### 还是圣经旧约\n- 雅各回乡准备见以扫，但心存芥蒂，仆人和妻子在前，他在最后，且分成两队以备不测。\n- 当天晚上，朦胧之中有人找雅各摔跤，摔到天亮未分胜负，此人即是上帝，上帝让雅各改名以色列，与上帝摔跤的人。\n- 以扫和雅各相约同去以东（也不知道是哪里），雅各仍有戒心，让以扫先走，然后掉头去了迦南的示剑城。\n- 雅各女儿底拿被示剑城太子强奸，太子来提亲，雅各和儿子们要求示剑城全城男子割礼，太子同意，然后雅各儿子们趁他们蛋疼的时候，血洗示剑城。\n- 然后雅各带所有人回家见以撒，路上底拿难产而死，产下一子。\n- 雅各的一个儿子犹大扒灰的故事，太狗血不写。\n- 后面慢慢来吧\n","slug":"又是火车上的博客","published":1,"updated":"2023-11-05T11:42:33.905Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li6003cs2kz40ka4ku8","content":"<h3 id=\"还是圣经旧约\"><a href=\"#还是圣经旧约\" class=\"headerlink\" title=\"还是圣经旧约\"></a>还是圣经旧约</h3><ul>\n<li>雅各回乡准备见以扫，但心存芥蒂，仆人和妻子在前，他在最后，且分成两队以备不测。</li>\n<li>当天晚上，朦胧之中有人找雅各摔跤，摔到天亮未分胜负，此人即是上帝，上帝让雅各改名以色列，与上帝摔跤的人。</li>\n<li>以扫和雅各相约同去以东（也不知道是哪里），雅各仍有戒心，让以扫先走，然后掉头去了迦南的示剑城。</li>\n<li>雅各女儿底拿被示剑城太子强奸，太子来提亲，雅各和儿子们要求示剑城全城男子割礼，太子同意，然后雅各儿子们趁他们蛋疼的时候，血洗示剑城。</li>\n<li>然后雅各带所有人回家见以撒，路上底拿难产而死，产下一子。</li>\n<li>雅各的一个儿子犹大扒灰的故事，太狗血不写。</li>\n<li>后面慢慢来吧</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"还是圣经旧约\"><a href=\"#还是圣经旧约\" class=\"headerlink\" title=\"还是圣经旧约\"></a>还是圣经旧约</h3><ul>\n<li>雅各回乡准备见以扫，但心存芥蒂，仆人和妻子在前，他在最后，且分成两队以备不测。</li>\n<li>当天晚上，朦胧之中有人找雅各摔跤，摔到天亮未分胜负，此人即是上帝，上帝让雅各改名以色列，与上帝摔跤的人。</li>\n<li>以扫和雅各相约同去以东（也不知道是哪里），雅各仍有戒心，让以扫先走，然后掉头去了迦南的示剑城。</li>\n<li>雅各女儿底拿被示剑城太子强奸，太子来提亲，雅各和儿子们要求示剑城全城男子割礼，太子同意，然后雅各儿子们趁他们蛋疼的时候，血洗示剑城。</li>\n<li>然后雅各带所有人回家见以撒，路上底拿难产而死，产下一子。</li>\n<li>雅各的一个儿子犹大扒灰的故事，太狗血不写。</li>\n<li>后面慢慢来吧</li>\n</ul>\n"},{"title":"前端历史","typora-root-url":"../../source","date":"2019-07-14T01:41:51.000Z","_content":"\n\n\n听方应杭的知乎live记下来的，一部前端的发展史，就是一部逆袭的历史。\n\n图片是他做的，应该不会找我侵删吧，红色是重大事件，蓝色是一些工具\n\n![image-20190714094504609](/images/image-20190714094504609.png)\n\n1. **后端**：最开始没有前端，后端写页面，不太会css，用table布局\n\n2. **后端+美工**：开始出现美工，美工复制ps和css，用div布局\n\n3. **后端+美工**：2004年，gmail发布，页面功能复杂，大量应用ajax，微软ie5加入ajax\n\n   js开始受重视，后端写页面写js，美工加图片加特效\n\n4. **后端+美工+前端**：乔布斯拟物化流行，用户体验大爆发，需要有人专门用js写界面逻辑，前后端开始分离\n\n<style>\ntable th:nth-of-type(1){\nwidth: 20%;\n}\ntable th:nth-of-type(2){\nwidth: 40%\n;\n}\ntable th:nth-of-type(3){\nwidth: 40%;\n}\n</style>\n\n\n   |          | 原先                                  | 后来                     |\n   | -------- | ------------------------------------- | ------------------------ |\n   | 页面分离 | 页面由后端框架提供，前端只负责js和css | Html、css、js全部给前端  |\n   | 数据分离 | 数据隐藏到页面中                      | 以接口形式，ajax传给前端 |\n   | 人员分离 | 前后端两个部门，人员分离              |            |\n\n5. 后端数据比较重要，前端只负责界面，不好晋升，现在也没有解决，但缓解了很多。\n   1. 移动端设备兴起，2G、3G网络网络不好，页面性能优化\n   2. 响应式，不同的设备尺寸不一\n   3. 自动化、模块化怎么解决\n\n![image-20190714094525575](/images/image-20190714094525575.png)\n\n6. **js语言独立**：node.js出现，js可以脱离浏览器运行，前端程序员开始做一些其他程序员在做的事\n\n   1. 自动化和打包工具，Grunt、Gulp、Webpack\n   2. 模块化约定，CommonJS、AMD、CMD、UMD，民间方案，已经过时\n   3. rails社区技术支援，CoffeeScript、SASS、Pug（Jade），语言不行就升级\n\n7. **标准制定方语言升级**：xhtml&rarr;html5、css2&rarr;css3、ES5&rarr;ES6\n\n8. **前端框架出现**：\n\n   MVC框架出现了backbone\n\n   MVVM框架（MVVM是从C#的WPF里开始用的）出现了Angular\n\n   从Angular启发又出现了Vue\n\n   facebook推出react，Redux的思想，有游戏开发的思路\n\n9. **可以做服务端**：TJ加入了node，TJ以前写Ruby，express.js、koa.js，nodejs可以做后台应用\n\n10. **可以桌面端**：node+webkit，github写了electron，微信、vscode、叮叮\n\n11. **移动端**：react native可以做ios和android应用","source":"_posts/前端历史.md","raw":"---\ntitle: 前端历史\ntypora-root-url: ../../source\ndate: 2019-07-14 09:41:51\n---\n\n\n\n听方应杭的知乎live记下来的，一部前端的发展史，就是一部逆袭的历史。\n\n图片是他做的，应该不会找我侵删吧，红色是重大事件，蓝色是一些工具\n\n![image-20190714094504609](/images/image-20190714094504609.png)\n\n1. **后端**：最开始没有前端，后端写页面，不太会css，用table布局\n\n2. **后端+美工**：开始出现美工，美工复制ps和css，用div布局\n\n3. **后端+美工**：2004年，gmail发布，页面功能复杂，大量应用ajax，微软ie5加入ajax\n\n   js开始受重视，后端写页面写js，美工加图片加特效\n\n4. **后端+美工+前端**：乔布斯拟物化流行，用户体验大爆发，需要有人专门用js写界面逻辑，前后端开始分离\n\n<style>\ntable th:nth-of-type(1){\nwidth: 20%;\n}\ntable th:nth-of-type(2){\nwidth: 40%\n;\n}\ntable th:nth-of-type(3){\nwidth: 40%;\n}\n</style>\n\n\n   |          | 原先                                  | 后来                     |\n   | -------- | ------------------------------------- | ------------------------ |\n   | 页面分离 | 页面由后端框架提供，前端只负责js和css | Html、css、js全部给前端  |\n   | 数据分离 | 数据隐藏到页面中                      | 以接口形式，ajax传给前端 |\n   | 人员分离 | 前后端两个部门，人员分离              |            |\n\n5. 后端数据比较重要，前端只负责界面，不好晋升，现在也没有解决，但缓解了很多。\n   1. 移动端设备兴起，2G、3G网络网络不好，页面性能优化\n   2. 响应式，不同的设备尺寸不一\n   3. 自动化、模块化怎么解决\n\n![image-20190714094525575](/images/image-20190714094525575.png)\n\n6. **js语言独立**：node.js出现，js可以脱离浏览器运行，前端程序员开始做一些其他程序员在做的事\n\n   1. 自动化和打包工具，Grunt、Gulp、Webpack\n   2. 模块化约定，CommonJS、AMD、CMD、UMD，民间方案，已经过时\n   3. rails社区技术支援，CoffeeScript、SASS、Pug（Jade），语言不行就升级\n\n7. **标准制定方语言升级**：xhtml&rarr;html5、css2&rarr;css3、ES5&rarr;ES6\n\n8. **前端框架出现**：\n\n   MVC框架出现了backbone\n\n   MVVM框架（MVVM是从C#的WPF里开始用的）出现了Angular\n\n   从Angular启发又出现了Vue\n\n   facebook推出react，Redux的思想，有游戏开发的思路\n\n9. **可以做服务端**：TJ加入了node，TJ以前写Ruby，express.js、koa.js，nodejs可以做后台应用\n\n10. **可以桌面端**：node+webkit，github写了electron，微信、vscode、叮叮\n\n11. **移动端**：react native可以做ios和android应用","slug":"前端历史","published":1,"updated":"2023-11-05T11:42:33.905Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li7003fs2kzfqja8gv3","content":"<p>听方应杭的知乎live记下来的，一部前端的发展史，就是一部逆袭的历史。</p>\n<p>图片是他做的，应该不会找我侵删吧，红色是重大事件，蓝色是一些工具</p>\n<p><img src=\"/images/image-20190714094504609.png\" alt=\"image-20190714094504609\"></p>\n<ol>\n<li><p><strong>后端</strong>：最开始没有前端，后端写页面，不太会css，用table布局</p>\n</li>\n<li><p><strong>后端+美工</strong>：开始出现美工，美工复制ps和css，用div布局</p>\n</li>\n<li><p><strong>后端+美工</strong>：2004年，gmail发布，页面功能复杂，大量应用ajax，微软ie5加入ajax</p>\n<p>js开始受重视，后端写页面写js，美工加图片加特效</p>\n</li>\n<li><p><strong>后端+美工+前端</strong>：乔布斯拟物化流行，用户体验大爆发，需要有人专门用js写界面逻辑，前后端开始分离</p>\n</li>\n</ol>\n<style>\ntable th:nth-of-type(1){\nwidth: 20%;\n}\ntable th:nth-of-type(2){\nwidth: 40%\n;\n}\ntable th:nth-of-type(3){\nwidth: 40%;\n}\n</style>\n\n\n<table>\n<thead>\n<tr>\n<th></th>\n<th>原先</th>\n<th>后来</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>页面分离</td>\n<td>页面由后端框架提供，前端只负责js和css</td>\n<td>Html、css、js全部给前端</td>\n</tr>\n<tr>\n<td>数据分离</td>\n<td>数据隐藏到页面中</td>\n<td>以接口形式，ajax传给前端</td>\n</tr>\n<tr>\n<td>人员分离</td>\n<td>前后端两个部门，人员分离</td>\n<td></td>\n</tr>\n</tbody></table>\n<ol start=\"5\">\n<li>后端数据比较重要，前端只负责界面，不好晋升，现在也没有解决，但缓解了很多。<ol>\n<li>移动端设备兴起，2G、3G网络网络不好，页面性能优化</li>\n<li>响应式，不同的设备尺寸不一</li>\n<li>自动化、模块化怎么解决</li>\n</ol>\n</li>\n</ol>\n<p><img src=\"/images/image-20190714094525575.png\" alt=\"image-20190714094525575\"></p>\n<ol start=\"6\">\n<li><p><strong>js语言独立</strong>：node.js出现，js可以脱离浏览器运行，前端程序员开始做一些其他程序员在做的事</p>\n<ol>\n<li>自动化和打包工具，Grunt、Gulp、Webpack</li>\n<li>模块化约定，CommonJS、AMD、CMD、UMD，民间方案，已经过时</li>\n<li>rails社区技术支援，CoffeeScript、SASS、Pug（Jade），语言不行就升级</li>\n</ol>\n</li>\n<li><p><strong>标准制定方语言升级</strong>：xhtml&rarr;html5、css2&rarr;css3、ES5&rarr;ES6</p>\n</li>\n<li><p><strong>前端框架出现</strong>：</p>\n<p>MVC框架出现了backbone</p>\n<p>MVVM框架（MVVM是从C#的WPF里开始用的）出现了Angular</p>\n<p>从Angular启发又出现了Vue</p>\n<p>facebook推出react，Redux的思想，有游戏开发的思路</p>\n</li>\n<li><p><strong>可以做服务端</strong>：TJ加入了node，TJ以前写Ruby，express.js、koa.js，nodejs可以做后台应用</p>\n</li>\n<li><p><strong>可以桌面端</strong>：node+webkit，github写了electron，微信、vscode、叮叮</p>\n</li>\n<li><p><strong>移动端</strong>：react native可以做ios和android应用</p>\n</li>\n</ol>\n","excerpt":"","more":"<p>听方应杭的知乎live记下来的，一部前端的发展史，就是一部逆袭的历史。</p>\n<p>图片是他做的，应该不会找我侵删吧，红色是重大事件，蓝色是一些工具</p>\n<p><img src=\"/images/image-20190714094504609.png\" alt=\"image-20190714094504609\"></p>\n<ol>\n<li><p><strong>后端</strong>：最开始没有前端，后端写页面，不太会css，用table布局</p>\n</li>\n<li><p><strong>后端+美工</strong>：开始出现美工，美工复制ps和css，用div布局</p>\n</li>\n<li><p><strong>后端+美工</strong>：2004年，gmail发布，页面功能复杂，大量应用ajax，微软ie5加入ajax</p>\n<p>js开始受重视，后端写页面写js，美工加图片加特效</p>\n</li>\n<li><p><strong>后端+美工+前端</strong>：乔布斯拟物化流行，用户体验大爆发，需要有人专门用js写界面逻辑，前后端开始分离</p>\n</li>\n</ol>\n<style>\ntable th:nth-of-type(1){\nwidth: 20%;\n}\ntable th:nth-of-type(2){\nwidth: 40%\n;\n}\ntable th:nth-of-type(3){\nwidth: 40%;\n}\n</style>\n\n\n<table>\n<thead>\n<tr>\n<th></th>\n<th>原先</th>\n<th>后来</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>页面分离</td>\n<td>页面由后端框架提供，前端只负责js和css</td>\n<td>Html、css、js全部给前端</td>\n</tr>\n<tr>\n<td>数据分离</td>\n<td>数据隐藏到页面中</td>\n<td>以接口形式，ajax传给前端</td>\n</tr>\n<tr>\n<td>人员分离</td>\n<td>前后端两个部门，人员分离</td>\n<td></td>\n</tr>\n</tbody></table>\n<ol start=\"5\">\n<li>后端数据比较重要，前端只负责界面，不好晋升，现在也没有解决，但缓解了很多。<ol>\n<li>移动端设备兴起，2G、3G网络网络不好，页面性能优化</li>\n<li>响应式，不同的设备尺寸不一</li>\n<li>自动化、模块化怎么解决</li>\n</ol>\n</li>\n</ol>\n<p><img src=\"/images/image-20190714094525575.png\" alt=\"image-20190714094525575\"></p>\n<ol start=\"6\">\n<li><p><strong>js语言独立</strong>：node.js出现，js可以脱离浏览器运行，前端程序员开始做一些其他程序员在做的事</p>\n<ol>\n<li>自动化和打包工具，Grunt、Gulp、Webpack</li>\n<li>模块化约定，CommonJS、AMD、CMD、UMD，民间方案，已经过时</li>\n<li>rails社区技术支援，CoffeeScript、SASS、Pug（Jade），语言不行就升级</li>\n</ol>\n</li>\n<li><p><strong>标准制定方语言升级</strong>：xhtml&rarr;html5、css2&rarr;css3、ES5&rarr;ES6</p>\n</li>\n<li><p><strong>前端框架出现</strong>：</p>\n<p>MVC框架出现了backbone</p>\n<p>MVVM框架（MVVM是从C#的WPF里开始用的）出现了Angular</p>\n<p>从Angular启发又出现了Vue</p>\n<p>facebook推出react，Redux的思想，有游戏开发的思路</p>\n</li>\n<li><p><strong>可以做服务端</strong>：TJ加入了node，TJ以前写Ruby，express.js、koa.js，nodejs可以做后台应用</p>\n</li>\n<li><p><strong>可以桌面端</strong>：node+webkit，github写了electron，微信、vscode、叮叮</p>\n</li>\n<li><p><strong>移动端</strong>：react native可以做ios和android应用</p>\n</li>\n</ol>\n"},{"title":"吴恩达deeplearning.ai课程学习笔记","typora-root-url":"../../source","date":"2018-01-16T08:32:21.000Z","_content":"\n### 0. 前言\n\n[作业在这里](https://github.com/zjyfdu/deeplearning.ai)\n原仓库被coursera要求删掉了，多亏我及时folk/斜眼笑\n\n[视频可以直接在网易上看](https://mooc.study.163.com/smartSpec/detail/1001319001.htm)\n\n### 1. \b神经网络前馈和后馈\n\n![](/images/89948814.jpg \"前馈\")\n![](/images/41005456.jpg \"后馈\")\n如果没有激活函数的话，多层的神经网络仍然是个线性的模型。\n![](/images/73637538.jpg \"激活函数\")\n\n### 2. 超参数、正则化、优化算法等\n\nL2正则化相当于是w权重减小， weight decay\n![](/images/69146591.jpg)\n后面等这些是用在mini-batch中的，当训练数据量\b太大，需要对训练数据分割为mini-batch。但这样会造成收敛方向波动，为了减小这种波动，引入Adam优化算法。\n![](/images/27110293.jpg \"指数加权平均\")\n![](/images/27110293.jpg)\n![](/images/47657351.jpg)\n![](/images/306118.jpg)\nbatch norm\n![](/images/49641113.jpg)\n![](/images/54964765.jpg)\n\n### 3. CNN\n\n~~待续~~\n\n[感觉这篇已经总结得很好了](https://mp.weixin.qq.com/s/kvbDQ2d7iZ2cur2CQ_e-1Q)\n","source":"_posts/吴恩达deeplearning-ai课程学习笔记.md","raw":"---\ntitle: 吴恩达deeplearning.ai课程学习笔记\ntypora-root-url: ../../source\ndate: 2018-01-16 16:32:21\ntags: 学习笔记\ncategories: caffe\n---\n\n### 0. 前言\n\n[作业在这里](https://github.com/zjyfdu/deeplearning.ai)\n原仓库被coursera要求删掉了，多亏我及时folk/斜眼笑\n\n[视频可以直接在网易上看](https://mooc.study.163.com/smartSpec/detail/1001319001.htm)\n\n### 1. \b神经网络前馈和后馈\n\n![](/images/89948814.jpg \"前馈\")\n![](/images/41005456.jpg \"后馈\")\n如果没有激活函数的话，多层的神经网络仍然是个线性的模型。\n![](/images/73637538.jpg \"激活函数\")\n\n### 2. 超参数、正则化、优化算法等\n\nL2正则化相当于是w权重减小， weight decay\n![](/images/69146591.jpg)\n后面等这些是用在mini-batch中的，当训练数据量\b太大，需要对训练数据分割为mini-batch。但这样会造成收敛方向波动，为了减小这种波动，引入Adam优化算法。\n![](/images/27110293.jpg \"指数加权平均\")\n![](/images/27110293.jpg)\n![](/images/47657351.jpg)\n![](/images/306118.jpg)\nbatch norm\n![](/images/49641113.jpg)\n![](/images/54964765.jpg)\n\n### 3. CNN\n\n~~待续~~\n\n[感觉这篇已经总结得很好了](https://mp.weixin.qq.com/s/kvbDQ2d7iZ2cur2CQ_e-1Q)\n","slug":"吴恩达deeplearning-ai课程学习笔记","published":1,"updated":"2023-11-05T11:42:33.905Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li8003js2kzfguohlsy","content":"<h3 id=\"0-前言\"><a href=\"#0-前言\" class=\"headerlink\" title=\"0. 前言\"></a>0. 前言</h3><p><a href=\"https://github.com/zjyfdu/deeplearning.ai\">作业在这里</a><br>原仓库被coursera要求删掉了，多亏我及时folk&#x2F;斜眼笑</p>\n<p><a href=\"https://mooc.study.163.com/smartSpec/detail/1001319001.htm\">视频可以直接在网易上看</a></p>\n<h3 id=\"1-神经网络前馈和后馈\"><a href=\"#1-神经网络前馈和后馈\" class=\"headerlink\" title=\"1. \b神经网络前馈和后馈\"></a>1. \b神经网络前馈和后馈</h3><p><img src=\"/images/89948814.jpg\" title=\"前馈\"><br><img src=\"/images/41005456.jpg\" title=\"后馈\"><br>如果没有激活函数的话，多层的神经网络仍然是个线性的模型。<br><img src=\"/images/73637538.jpg\" title=\"激活函数\"></p>\n<h3 id=\"2-超参数、正则化、优化算法等\"><a href=\"#2-超参数、正则化、优化算法等\" class=\"headerlink\" title=\"2. 超参数、正则化、优化算法等\"></a>2. 超参数、正则化、优化算法等</h3><p>L2正则化相当于是w权重减小， weight decay<br><img src=\"/images/69146591.jpg\"><br>后面等这些是用在mini-batch中的，当训练数据量\b太大，需要对训练数据分割为mini-batch。但这样会造成收敛方向波动，为了减小这种波动，引入Adam优化算法。<br><img src=\"/images/27110293.jpg\" title=\"指数加权平均\"><br><img src=\"/images/27110293.jpg\"><br><img src=\"/images/47657351.jpg\"><br><img src=\"/images/306118.jpg\"><br>batch norm<br><img src=\"/images/49641113.jpg\"><br><img src=\"/images/54964765.jpg\"></p>\n<h3 id=\"3-CNN\"><a href=\"#3-CNN\" class=\"headerlink\" title=\"3. CNN\"></a>3. CNN</h3><p><del>待续</del></p>\n<p><a href=\"https://mp.weixin.qq.com/s/kvbDQ2d7iZ2cur2CQ_e-1Q\">感觉这篇已经总结得很好了</a></p>\n","excerpt":"","more":"<h3 id=\"0-前言\"><a href=\"#0-前言\" class=\"headerlink\" title=\"0. 前言\"></a>0. 前言</h3><p><a href=\"https://github.com/zjyfdu/deeplearning.ai\">作业在这里</a><br>原仓库被coursera要求删掉了，多亏我及时folk&#x2F;斜眼笑</p>\n<p><a href=\"https://mooc.study.163.com/smartSpec/detail/1001319001.htm\">视频可以直接在网易上看</a></p>\n<h3 id=\"1-神经网络前馈和后馈\"><a href=\"#1-神经网络前馈和后馈\" class=\"headerlink\" title=\"1. \b神经网络前馈和后馈\"></a>1. \b神经网络前馈和后馈</h3><p><img src=\"/images/89948814.jpg\" title=\"前馈\"><br><img src=\"/images/41005456.jpg\" title=\"后馈\"><br>如果没有激活函数的话，多层的神经网络仍然是个线性的模型。<br><img src=\"/images/73637538.jpg\" title=\"激活函数\"></p>\n<h3 id=\"2-超参数、正则化、优化算法等\"><a href=\"#2-超参数、正则化、优化算法等\" class=\"headerlink\" title=\"2. 超参数、正则化、优化算法等\"></a>2. 超参数、正则化、优化算法等</h3><p>L2正则化相当于是w权重减小， weight decay<br><img src=\"/images/69146591.jpg\"><br>后面等这些是用在mini-batch中的，当训练数据量\b太大，需要对训练数据分割为mini-batch。但这样会造成收敛方向波动，为了减小这种波动，引入Adam优化算法。<br><img src=\"/images/27110293.jpg\" title=\"指数加权平均\"><br><img src=\"/images/27110293.jpg\"><br><img src=\"/images/47657351.jpg\"><br><img src=\"/images/306118.jpg\"><br>batch norm<br><img src=\"/images/49641113.jpg\"><br><img src=\"/images/54964765.jpg\"></p>\n<h3 id=\"3-CNN\"><a href=\"#3-CNN\" class=\"headerlink\" title=\"3. CNN\"></a>3. CNN</h3><p><del>待续</del></p>\n<p><a href=\"https://mp.weixin.qq.com/s/kvbDQ2d7iZ2cur2CQ_e-1Q\">感觉这篇已经总结得很好了</a></p>\n"},{"title":"大数乘法","typora-root-url":"../../source","date":"2018-06-12T10:27:11.000Z","_content":"coursera北大的c++课上的一道题，本地ok，poj(pku的OJ)上ok，垃圾coursera上compile error。\n先贴在这里，我感觉写的还是很优雅的。\n\n```\n#include <iostream>  \n#include <algorithm>\n#include <string>\nusing namespace std;\n\nclass BigInt {\npublic:\n\tBigInt(){\n\t\tvalues = \"0\";\n\t\tflag = true;\n\t}\n\tBigInt(const string stringvalue){\n\t\tvalues = stringvalue;\n\t\tflag = true;\n\t}\n\tBigInt(const int intvalue){\n\t\tif (intvalue >= 0){\n\t\t\tvalues = to_string(intvalue);\n\t\t\tflag = true;\n\t\t}\n\t\telse{\n\t\t\tvalues = to_string(-intvalue);\n\t\t\tflag = false;\n\t\t}\n\t}\n\t//~BigInt();\n\tfriend ostream& operator << (ostream& out, const BigInt& b);\n\tfriend istream& operator >> (istream& in, const BigInt& b);\n\tBigInt& operator + (BigInt b);\n\tBigInt& operator - (BigInt b);\n\tBigInt& operator * (BigInt b);\n\tBigInt& operator / (BigInt b);\n\tbool operator >= (BigInt b);\n\n//private:\n\tstring values;\n\tbool flag;\n};\n\nbool BigInt::operator >= (BigInt b){\n\tint agb = 0;\n\tif (values.length() > b.values.length())\n\t{\n\t\tagb = 1;\n\t}\n\telse if (values.length() < b.values.length())\n\t{\n\t\tagb = -1;\n\t}\n\telse\n\t{\n\t\tagb = values.compare(b.values);\n\t}\n\treturn agb>=0;\n}\n\n BigInt& BigInt :: operator + (BigInt b) {\n\n\tif (flag == b.flag){\n\t\tstring res = \"\";\n\t\treverse(values.begin(), values.end());\n\t\treverse(b.values.begin(), b.values.end());\n\t\tint i = 0, carry = 0;\n\t\tfor (; i < values.length() && i < b.values.length(); ++i){\n\t\t\tint tmp = values[i] - '0' + b.values[i] - '0' + carry;\n\t\t\tcarry = tmp / 10;\n\t\t\ttmp = tmp % 10;\n\t\t\tres = (char)(tmp + '0') + res;\n\t\t}\n\t\tif (i < values.length()){\n\t\t\tfor (; i < values.length(); ++i){\n\t\t\t\tint tmp = values[i] - '0' + carry;\n\t\t\t\tcarry = tmp / 10;\n\t\t\t\ttmp = tmp % 10;\n\t\t\t\tres = (char)(tmp + '0') + res;\n\t\t\t}\n\t\t}\n\t\telse if (i < b.values.length()){\n\t\t\tfor (; i < b.values.length(); ++i){\n\t\t\t\tint tmp = b.values[i] - '0' + carry;\n\t\t\t\tcarry = tmp / 10;\n\t\t\t\ttmp = tmp % 10;\n\t\t\t\tres = (char)(tmp + '0') + res;\n\t\t\t}\n\t\t}\n\t\tif (carry == 1)\n\t\t\tres = '1' + res;\n\t\tvalues = res;\n\t}\n\telse{\n\t\tint agb = 0;\n\t\tif (values.length() > b.values.length())\n\t\t{\n\t\t\tagb = 1;\n\t\t}\n\t\telse if (values.length() < b.values.length())\n\t\t{\n\t\t\tagb = -1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tagb = values.compare(b.values);\n\t\t}\n\t\tif (0 == agb)\n\t\t{\n\t\t\tvalues = \"0\";\n\t\t\treturn *this;\n\t\t}\n\t\t\n\t\telse if (agb < 0){\n\t\t\tflag = !flag;\n\t\t\tstring tmp = values;\n\t\t\tvalues = b.values;\n\t\t\tb.values = tmp;\n\t\t}\n\t\tstring res = \"\";\n\t\treverse(values.begin(), values.end());\n\t\treverse(b.values.begin(), b.values.end());\n\t\tint i = 0;\n\t\tfor (; i < values.length() && i < b.values.length(); ++i)\n\t\t\tres.push_back(values.at(i) - b.values.at(i) + '0');\n\n\t\tif (i < values.length()) \n\t\t\tfor (; i < values.length(); ++i)\n\t\t\t\tres.push_back(values.at(i));\n\n\t\tint carry = 0;\n\t\tfor (i = 0; i < values.length(); ++i)\n\t\t{\n\t\t\tint newValue = res.at(i) - carry - '0';\n\t\t\tif (newValue < 0) carry = 1;\n\t\t\telse carry = 0;\n\t\t\tres.at(i) = newValue + carry * 10 + '0';\n\t\t}\n\t\twhile (res[res.length() - 1] == '0')\n\t\t\tres.pop_back();\n\t\treverse(res.begin(), res.end());\n\t\tvalues = res;\n\t}\n\n\treturn *this;\n}\n\n BigInt &BigInt::operator - (BigInt b)\n {\t\n\t BigInt tmp(b);\n\t tmp.flag = !tmp.flag;\n\t return *this+tmp;\n }\n\n BigInt &BigInt::operator * (BigInt b)\n {\n\t BigInt res;\n\t if (values == \"0\" || b.values == \"0\"){\n\t\t values = \"0\";\n\t\t return *this;\n\t }\n\t if (flag == b.flag)\n\t\t flag = true;\n\t else\n\t\t flag = false;\n\n\t BigInt thisbk(*this);\n\t for (int i = 0; i < b.values.length(); ++i){\n\t\t for (int j = 0; j < b.values[i] - '0'; ++j){\n\t\t\t res = res + thisbk;\n\t\t }\n\t\tres.values.push_back('0');\n\t }\n\t res.values.pop_back();\n\t values = res.values;\n\t return *this;\n }\n\n BigInt &BigInt::operator / (BigInt b)\n {\n\t if (b.values == \"0\")\n\t\t throw \"Division by zero condition!\";\n\t if (flag == b.flag)\n\t\t flag = true;\n\t else\n\t\t flag = false;\n\n\t BigInt one(1);\n\t while (*this >= b){\n\t\t b.values.push_back('0');\n\t\t one.values.push_back('0');\n\t }\n\t b.values.pop_back();\n\t one.values.pop_back();\n\n\t BigInt thisbk(*this), res(0);\n\t while (one.values.compare(\"0\") > 0){\n\t\t while (*this >= b){\n\t\t\t *this - b;\n\t\t\t res + one;\n\t\t }\n\t\t b.values.pop_back();\n\t\t one.values.pop_back();\n\t }\n\t values = res.values;\n\t return *this;\n }\n\nostream& operator << (ostream& ou, const BigInt& b)\n{\n\tif (!b.flag)\n\t\tou << '-';\n\tou << b.values;\n\treturn ou;\n}\n\nistream& operator >> (istream& in, BigInt& b)\n{\n\tstring str;\n\tin >> str;\n\tb.values = str;\n\treturn in;\n}\n\nint main()\n{\n\tBigInt b1, b2;\n\tstring str;\n\tcin >> b1 >> str >> b2;\n\n\tif (str == \"+\")\n\t{\n\t\tcout << b1 + b2 << endl;\n\t}\n\telse if (str == \"-\")\n\t{\n\t\tcout << b1 - b2 << endl;\n\t}\n\telse if (str == \"*\")\n\t{\n\t\tcout << b1 * b2 << endl;\n\t}\n\telse\n\t{\n\t\tcout << b1 / b2 << endl;\n\t}\n\treturn 0;\n}\n```\n","source":"_posts/大数乘法.md","raw":"---\ntitle: 大数乘法\ntypora-root-url: ../../source\ndate: 2018-06-12 18:27:11\ncategories: cpp\n---\ncoursera北大的c++课上的一道题，本地ok，poj(pku的OJ)上ok，垃圾coursera上compile error。\n先贴在这里，我感觉写的还是很优雅的。\n\n```\n#include <iostream>  \n#include <algorithm>\n#include <string>\nusing namespace std;\n\nclass BigInt {\npublic:\n\tBigInt(){\n\t\tvalues = \"0\";\n\t\tflag = true;\n\t}\n\tBigInt(const string stringvalue){\n\t\tvalues = stringvalue;\n\t\tflag = true;\n\t}\n\tBigInt(const int intvalue){\n\t\tif (intvalue >= 0){\n\t\t\tvalues = to_string(intvalue);\n\t\t\tflag = true;\n\t\t}\n\t\telse{\n\t\t\tvalues = to_string(-intvalue);\n\t\t\tflag = false;\n\t\t}\n\t}\n\t//~BigInt();\n\tfriend ostream& operator << (ostream& out, const BigInt& b);\n\tfriend istream& operator >> (istream& in, const BigInt& b);\n\tBigInt& operator + (BigInt b);\n\tBigInt& operator - (BigInt b);\n\tBigInt& operator * (BigInt b);\n\tBigInt& operator / (BigInt b);\n\tbool operator >= (BigInt b);\n\n//private:\n\tstring values;\n\tbool flag;\n};\n\nbool BigInt::operator >= (BigInt b){\n\tint agb = 0;\n\tif (values.length() > b.values.length())\n\t{\n\t\tagb = 1;\n\t}\n\telse if (values.length() < b.values.length())\n\t{\n\t\tagb = -1;\n\t}\n\telse\n\t{\n\t\tagb = values.compare(b.values);\n\t}\n\treturn agb>=0;\n}\n\n BigInt& BigInt :: operator + (BigInt b) {\n\n\tif (flag == b.flag){\n\t\tstring res = \"\";\n\t\treverse(values.begin(), values.end());\n\t\treverse(b.values.begin(), b.values.end());\n\t\tint i = 0, carry = 0;\n\t\tfor (; i < values.length() && i < b.values.length(); ++i){\n\t\t\tint tmp = values[i] - '0' + b.values[i] - '0' + carry;\n\t\t\tcarry = tmp / 10;\n\t\t\ttmp = tmp % 10;\n\t\t\tres = (char)(tmp + '0') + res;\n\t\t}\n\t\tif (i < values.length()){\n\t\t\tfor (; i < values.length(); ++i){\n\t\t\t\tint tmp = values[i] - '0' + carry;\n\t\t\t\tcarry = tmp / 10;\n\t\t\t\ttmp = tmp % 10;\n\t\t\t\tres = (char)(tmp + '0') + res;\n\t\t\t}\n\t\t}\n\t\telse if (i < b.values.length()){\n\t\t\tfor (; i < b.values.length(); ++i){\n\t\t\t\tint tmp = b.values[i] - '0' + carry;\n\t\t\t\tcarry = tmp / 10;\n\t\t\t\ttmp = tmp % 10;\n\t\t\t\tres = (char)(tmp + '0') + res;\n\t\t\t}\n\t\t}\n\t\tif (carry == 1)\n\t\t\tres = '1' + res;\n\t\tvalues = res;\n\t}\n\telse{\n\t\tint agb = 0;\n\t\tif (values.length() > b.values.length())\n\t\t{\n\t\t\tagb = 1;\n\t\t}\n\t\telse if (values.length() < b.values.length())\n\t\t{\n\t\t\tagb = -1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tagb = values.compare(b.values);\n\t\t}\n\t\tif (0 == agb)\n\t\t{\n\t\t\tvalues = \"0\";\n\t\t\treturn *this;\n\t\t}\n\t\t\n\t\telse if (agb < 0){\n\t\t\tflag = !flag;\n\t\t\tstring tmp = values;\n\t\t\tvalues = b.values;\n\t\t\tb.values = tmp;\n\t\t}\n\t\tstring res = \"\";\n\t\treverse(values.begin(), values.end());\n\t\treverse(b.values.begin(), b.values.end());\n\t\tint i = 0;\n\t\tfor (; i < values.length() && i < b.values.length(); ++i)\n\t\t\tres.push_back(values.at(i) - b.values.at(i) + '0');\n\n\t\tif (i < values.length()) \n\t\t\tfor (; i < values.length(); ++i)\n\t\t\t\tres.push_back(values.at(i));\n\n\t\tint carry = 0;\n\t\tfor (i = 0; i < values.length(); ++i)\n\t\t{\n\t\t\tint newValue = res.at(i) - carry - '0';\n\t\t\tif (newValue < 0) carry = 1;\n\t\t\telse carry = 0;\n\t\t\tres.at(i) = newValue + carry * 10 + '0';\n\t\t}\n\t\twhile (res[res.length() - 1] == '0')\n\t\t\tres.pop_back();\n\t\treverse(res.begin(), res.end());\n\t\tvalues = res;\n\t}\n\n\treturn *this;\n}\n\n BigInt &BigInt::operator - (BigInt b)\n {\t\n\t BigInt tmp(b);\n\t tmp.flag = !tmp.flag;\n\t return *this+tmp;\n }\n\n BigInt &BigInt::operator * (BigInt b)\n {\n\t BigInt res;\n\t if (values == \"0\" || b.values == \"0\"){\n\t\t values = \"0\";\n\t\t return *this;\n\t }\n\t if (flag == b.flag)\n\t\t flag = true;\n\t else\n\t\t flag = false;\n\n\t BigInt thisbk(*this);\n\t for (int i = 0; i < b.values.length(); ++i){\n\t\t for (int j = 0; j < b.values[i] - '0'; ++j){\n\t\t\t res = res + thisbk;\n\t\t }\n\t\tres.values.push_back('0');\n\t }\n\t res.values.pop_back();\n\t values = res.values;\n\t return *this;\n }\n\n BigInt &BigInt::operator / (BigInt b)\n {\n\t if (b.values == \"0\")\n\t\t throw \"Division by zero condition!\";\n\t if (flag == b.flag)\n\t\t flag = true;\n\t else\n\t\t flag = false;\n\n\t BigInt one(1);\n\t while (*this >= b){\n\t\t b.values.push_back('0');\n\t\t one.values.push_back('0');\n\t }\n\t b.values.pop_back();\n\t one.values.pop_back();\n\n\t BigInt thisbk(*this), res(0);\n\t while (one.values.compare(\"0\") > 0){\n\t\t while (*this >= b){\n\t\t\t *this - b;\n\t\t\t res + one;\n\t\t }\n\t\t b.values.pop_back();\n\t\t one.values.pop_back();\n\t }\n\t values = res.values;\n\t return *this;\n }\n\nostream& operator << (ostream& ou, const BigInt& b)\n{\n\tif (!b.flag)\n\t\tou << '-';\n\tou << b.values;\n\treturn ou;\n}\n\nistream& operator >> (istream& in, BigInt& b)\n{\n\tstring str;\n\tin >> str;\n\tb.values = str;\n\treturn in;\n}\n\nint main()\n{\n\tBigInt b1, b2;\n\tstring str;\n\tcin >> b1 >> str >> b2;\n\n\tif (str == \"+\")\n\t{\n\t\tcout << b1 + b2 << endl;\n\t}\n\telse if (str == \"-\")\n\t{\n\t\tcout << b1 - b2 << endl;\n\t}\n\telse if (str == \"*\")\n\t{\n\t\tcout << b1 * b2 << endl;\n\t}\n\telse\n\t{\n\t\tcout << b1 / b2 << endl;\n\t}\n\treturn 0;\n}\n```\n","slug":"大数乘法","published":1,"updated":"2023-11-05T11:42:33.905Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li9003ls2kz467s4s01","content":"<p>coursera北大的c++课上的一道题，本地ok，poj(pku的OJ)上ok，垃圾coursera上compile error。<br>先贴在这里，我感觉写的还是很优雅的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;  </span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">class BigInt &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tBigInt()&#123;</span><br><span class=\"line\">\t\tvalues = &quot;0&quot;;</span><br><span class=\"line\">\t\tflag = true;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tBigInt(const string stringvalue)&#123;</span><br><span class=\"line\">\t\tvalues = stringvalue;</span><br><span class=\"line\">\t\tflag = true;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tBigInt(const int intvalue)&#123;</span><br><span class=\"line\">\t\tif (intvalue &gt;= 0)&#123;</span><br><span class=\"line\">\t\t\tvalues = to_string(intvalue);</span><br><span class=\"line\">\t\t\tflag = true;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telse&#123;</span><br><span class=\"line\">\t\t\tvalues = to_string(-intvalue);</span><br><span class=\"line\">\t\t\tflag = false;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//~BigInt();</span><br><span class=\"line\">\tfriend ostream&amp; operator &lt;&lt; (ostream&amp; out, const BigInt&amp; b);</span><br><span class=\"line\">\tfriend istream&amp; operator &gt;&gt; (istream&amp; in, const BigInt&amp; b);</span><br><span class=\"line\">\tBigInt&amp; operator + (BigInt b);</span><br><span class=\"line\">\tBigInt&amp; operator - (BigInt b);</span><br><span class=\"line\">\tBigInt&amp; operator * (BigInt b);</span><br><span class=\"line\">\tBigInt&amp; operator / (BigInt b);</span><br><span class=\"line\">\tbool operator &gt;= (BigInt b);</span><br><span class=\"line\"></span><br><span class=\"line\">//private:</span><br><span class=\"line\">\tstring values;</span><br><span class=\"line\">\tbool flag;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">bool BigInt::operator &gt;= (BigInt b)&#123;</span><br><span class=\"line\">\tint agb = 0;</span><br><span class=\"line\">\tif (values.length() &gt; b.values.length())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tagb = 1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\telse if (values.length() &lt; b.values.length())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tagb = -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\telse</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tagb = values.compare(b.values);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn agb&gt;=0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> BigInt&amp; BigInt :: operator + (BigInt b) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif (flag == b.flag)&#123;</span><br><span class=\"line\">\t\tstring res = &quot;&quot;;</span><br><span class=\"line\">\t\treverse(values.begin(), values.end());</span><br><span class=\"line\">\t\treverse(b.values.begin(), b.values.end());</span><br><span class=\"line\">\t\tint i = 0, carry = 0;</span><br><span class=\"line\">\t\tfor (; i &lt; values.length() &amp;&amp; i &lt; b.values.length(); ++i)&#123;</span><br><span class=\"line\">\t\t\tint tmp = values[i] - &#x27;0&#x27; + b.values[i] - &#x27;0&#x27; + carry;</span><br><span class=\"line\">\t\t\tcarry = tmp / 10;</span><br><span class=\"line\">\t\t\ttmp = tmp % 10;</span><br><span class=\"line\">\t\t\tres = (char)(tmp + &#x27;0&#x27;) + res;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif (i &lt; values.length())&#123;</span><br><span class=\"line\">\t\t\tfor (; i &lt; values.length(); ++i)&#123;</span><br><span class=\"line\">\t\t\t\tint tmp = values[i] - &#x27;0&#x27; + carry;</span><br><span class=\"line\">\t\t\t\tcarry = tmp / 10;</span><br><span class=\"line\">\t\t\t\ttmp = tmp % 10;</span><br><span class=\"line\">\t\t\t\tres = (char)(tmp + &#x27;0&#x27;) + res;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telse if (i &lt; b.values.length())&#123;</span><br><span class=\"line\">\t\t\tfor (; i &lt; b.values.length(); ++i)&#123;</span><br><span class=\"line\">\t\t\t\tint tmp = b.values[i] - &#x27;0&#x27; + carry;</span><br><span class=\"line\">\t\t\t\tcarry = tmp / 10;</span><br><span class=\"line\">\t\t\t\ttmp = tmp % 10;</span><br><span class=\"line\">\t\t\t\tres = (char)(tmp + &#x27;0&#x27;) + res;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif (carry == 1)</span><br><span class=\"line\">\t\t\tres = &#x27;1&#x27; + res;</span><br><span class=\"line\">\t\tvalues = res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\telse&#123;</span><br><span class=\"line\">\t\tint agb = 0;</span><br><span class=\"line\">\t\tif (values.length() &gt; b.values.length())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tagb = 1;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telse if (values.length() &lt; b.values.length())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tagb = -1;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tagb = values.compare(b.values);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif (0 == agb)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tvalues = &quot;0&quot;;</span><br><span class=\"line\">\t\t\treturn *this;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\telse if (agb &lt; 0)&#123;</span><br><span class=\"line\">\t\t\tflag = !flag;</span><br><span class=\"line\">\t\t\tstring tmp = values;</span><br><span class=\"line\">\t\t\tvalues = b.values;</span><br><span class=\"line\">\t\t\tb.values = tmp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tstring res = &quot;&quot;;</span><br><span class=\"line\">\t\treverse(values.begin(), values.end());</span><br><span class=\"line\">\t\treverse(b.values.begin(), b.values.end());</span><br><span class=\"line\">\t\tint i = 0;</span><br><span class=\"line\">\t\tfor (; i &lt; values.length() &amp;&amp; i &lt; b.values.length(); ++i)</span><br><span class=\"line\">\t\t\tres.push_back(values.at(i) - b.values.at(i) + &#x27;0&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (i &lt; values.length()) </span><br><span class=\"line\">\t\t\tfor (; i &lt; values.length(); ++i)</span><br><span class=\"line\">\t\t\t\tres.push_back(values.at(i));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint carry = 0;</span><br><span class=\"line\">\t\tfor (i = 0; i &lt; values.length(); ++i)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tint newValue = res.at(i) - carry - &#x27;0&#x27;;</span><br><span class=\"line\">\t\t\tif (newValue &lt; 0) carry = 1;</span><br><span class=\"line\">\t\t\telse carry = 0;</span><br><span class=\"line\">\t\t\tres.at(i) = newValue + carry * 10 + &#x27;0&#x27;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\twhile (res[res.length() - 1] == &#x27;0&#x27;)</span><br><span class=\"line\">\t\t\tres.pop_back();</span><br><span class=\"line\">\t\treverse(res.begin(), res.end());</span><br><span class=\"line\">\t\tvalues = res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn *this;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> BigInt &amp;BigInt::operator - (BigInt b)</span><br><span class=\"line\"> &#123;\t</span><br><span class=\"line\">\t BigInt tmp(b);</span><br><span class=\"line\">\t tmp.flag = !tmp.flag;</span><br><span class=\"line\">\t return *this+tmp;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> BigInt &amp;BigInt::operator * (BigInt b)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">\t BigInt res;</span><br><span class=\"line\">\t if (values == &quot;0&quot; || b.values == &quot;0&quot;)&#123;</span><br><span class=\"line\">\t\t values = &quot;0&quot;;</span><br><span class=\"line\">\t\t return *this;</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\">\t if (flag == b.flag)</span><br><span class=\"line\">\t\t flag = true;</span><br><span class=\"line\">\t else</span><br><span class=\"line\">\t\t flag = false;</span><br><span class=\"line\"></span><br><span class=\"line\">\t BigInt thisbk(*this);</span><br><span class=\"line\">\t for (int i = 0; i &lt; b.values.length(); ++i)&#123;</span><br><span class=\"line\">\t\t for (int j = 0; j &lt; b.values[i] - &#x27;0&#x27;; ++j)&#123;</span><br><span class=\"line\">\t\t\t res = res + thisbk;</span><br><span class=\"line\">\t\t &#125;</span><br><span class=\"line\">\t\tres.values.push_back(&#x27;0&#x27;);</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\">\t res.values.pop_back();</span><br><span class=\"line\">\t values = res.values;</span><br><span class=\"line\">\t return *this;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> BigInt &amp;BigInt::operator / (BigInt b)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">\t if (b.values == &quot;0&quot;)</span><br><span class=\"line\">\t\t throw &quot;Division by zero condition!&quot;;</span><br><span class=\"line\">\t if (flag == b.flag)</span><br><span class=\"line\">\t\t flag = true;</span><br><span class=\"line\">\t else</span><br><span class=\"line\">\t\t flag = false;</span><br><span class=\"line\"></span><br><span class=\"line\">\t BigInt one(1);</span><br><span class=\"line\">\t while (*this &gt;= b)&#123;</span><br><span class=\"line\">\t\t b.values.push_back(&#x27;0&#x27;);</span><br><span class=\"line\">\t\t one.values.push_back(&#x27;0&#x27;);</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\">\t b.values.pop_back();</span><br><span class=\"line\">\t one.values.pop_back();</span><br><span class=\"line\"></span><br><span class=\"line\">\t BigInt thisbk(*this), res(0);</span><br><span class=\"line\">\t while (one.values.compare(&quot;0&quot;) &gt; 0)&#123;</span><br><span class=\"line\">\t\t while (*this &gt;= b)&#123;</span><br><span class=\"line\">\t\t\t *this - b;</span><br><span class=\"line\">\t\t\t res + one;</span><br><span class=\"line\">\t\t &#125;</span><br><span class=\"line\">\t\t b.values.pop_back();</span><br><span class=\"line\">\t\t one.values.pop_back();</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\">\t values = res.values;</span><br><span class=\"line\">\t return *this;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ostream&amp; operator &lt;&lt; (ostream&amp; ou, const BigInt&amp; b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tif (!b.flag)</span><br><span class=\"line\">\t\tou &lt;&lt; &#x27;-&#x27;;</span><br><span class=\"line\">\tou &lt;&lt; b.values;</span><br><span class=\"line\">\treturn ou;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">istream&amp; operator &gt;&gt; (istream&amp; in, BigInt&amp; b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tstring str;</span><br><span class=\"line\">\tin &gt;&gt; str;</span><br><span class=\"line\">\tb.values = str;</span><br><span class=\"line\">\treturn in;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tBigInt b1, b2;</span><br><span class=\"line\">\tstring str;</span><br><span class=\"line\">\tcin &gt;&gt; b1 &gt;&gt; str &gt;&gt; b2;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif (str == &quot;+&quot;)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; b1 + b2 &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\telse if (str == &quot;-&quot;)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; b1 - b2 &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\telse if (str == &quot;*&quot;)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; b1 * b2 &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\telse</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; b1 / b2 &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>coursera北大的c++课上的一道题，本地ok，poj(pku的OJ)上ok，垃圾coursera上compile error。<br>先贴在这里，我感觉写的还是很优雅的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;  </span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">class BigInt &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tBigInt()&#123;</span><br><span class=\"line\">\t\tvalues = &quot;0&quot;;</span><br><span class=\"line\">\t\tflag = true;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tBigInt(const string stringvalue)&#123;</span><br><span class=\"line\">\t\tvalues = stringvalue;</span><br><span class=\"line\">\t\tflag = true;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tBigInt(const int intvalue)&#123;</span><br><span class=\"line\">\t\tif (intvalue &gt;= 0)&#123;</span><br><span class=\"line\">\t\t\tvalues = to_string(intvalue);</span><br><span class=\"line\">\t\t\tflag = true;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telse&#123;</span><br><span class=\"line\">\t\t\tvalues = to_string(-intvalue);</span><br><span class=\"line\">\t\t\tflag = false;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//~BigInt();</span><br><span class=\"line\">\tfriend ostream&amp; operator &lt;&lt; (ostream&amp; out, const BigInt&amp; b);</span><br><span class=\"line\">\tfriend istream&amp; operator &gt;&gt; (istream&amp; in, const BigInt&amp; b);</span><br><span class=\"line\">\tBigInt&amp; operator + (BigInt b);</span><br><span class=\"line\">\tBigInt&amp; operator - (BigInt b);</span><br><span class=\"line\">\tBigInt&amp; operator * (BigInt b);</span><br><span class=\"line\">\tBigInt&amp; operator / (BigInt b);</span><br><span class=\"line\">\tbool operator &gt;= (BigInt b);</span><br><span class=\"line\"></span><br><span class=\"line\">//private:</span><br><span class=\"line\">\tstring values;</span><br><span class=\"line\">\tbool flag;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">bool BigInt::operator &gt;= (BigInt b)&#123;</span><br><span class=\"line\">\tint agb = 0;</span><br><span class=\"line\">\tif (values.length() &gt; b.values.length())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tagb = 1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\telse if (values.length() &lt; b.values.length())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tagb = -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\telse</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tagb = values.compare(b.values);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn agb&gt;=0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> BigInt&amp; BigInt :: operator + (BigInt b) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif (flag == b.flag)&#123;</span><br><span class=\"line\">\t\tstring res = &quot;&quot;;</span><br><span class=\"line\">\t\treverse(values.begin(), values.end());</span><br><span class=\"line\">\t\treverse(b.values.begin(), b.values.end());</span><br><span class=\"line\">\t\tint i = 0, carry = 0;</span><br><span class=\"line\">\t\tfor (; i &lt; values.length() &amp;&amp; i &lt; b.values.length(); ++i)&#123;</span><br><span class=\"line\">\t\t\tint tmp = values[i] - &#x27;0&#x27; + b.values[i] - &#x27;0&#x27; + carry;</span><br><span class=\"line\">\t\t\tcarry = tmp / 10;</span><br><span class=\"line\">\t\t\ttmp = tmp % 10;</span><br><span class=\"line\">\t\t\tres = (char)(tmp + &#x27;0&#x27;) + res;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif (i &lt; values.length())&#123;</span><br><span class=\"line\">\t\t\tfor (; i &lt; values.length(); ++i)&#123;</span><br><span class=\"line\">\t\t\t\tint tmp = values[i] - &#x27;0&#x27; + carry;</span><br><span class=\"line\">\t\t\t\tcarry = tmp / 10;</span><br><span class=\"line\">\t\t\t\ttmp = tmp % 10;</span><br><span class=\"line\">\t\t\t\tres = (char)(tmp + &#x27;0&#x27;) + res;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telse if (i &lt; b.values.length())&#123;</span><br><span class=\"line\">\t\t\tfor (; i &lt; b.values.length(); ++i)&#123;</span><br><span class=\"line\">\t\t\t\tint tmp = b.values[i] - &#x27;0&#x27; + carry;</span><br><span class=\"line\">\t\t\t\tcarry = tmp / 10;</span><br><span class=\"line\">\t\t\t\ttmp = tmp % 10;</span><br><span class=\"line\">\t\t\t\tres = (char)(tmp + &#x27;0&#x27;) + res;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif (carry == 1)</span><br><span class=\"line\">\t\t\tres = &#x27;1&#x27; + res;</span><br><span class=\"line\">\t\tvalues = res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\telse&#123;</span><br><span class=\"line\">\t\tint agb = 0;</span><br><span class=\"line\">\t\tif (values.length() &gt; b.values.length())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tagb = 1;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telse if (values.length() &lt; b.values.length())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tagb = -1;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tagb = values.compare(b.values);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif (0 == agb)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tvalues = &quot;0&quot;;</span><br><span class=\"line\">\t\t\treturn *this;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\telse if (agb &lt; 0)&#123;</span><br><span class=\"line\">\t\t\tflag = !flag;</span><br><span class=\"line\">\t\t\tstring tmp = values;</span><br><span class=\"line\">\t\t\tvalues = b.values;</span><br><span class=\"line\">\t\t\tb.values = tmp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tstring res = &quot;&quot;;</span><br><span class=\"line\">\t\treverse(values.begin(), values.end());</span><br><span class=\"line\">\t\treverse(b.values.begin(), b.values.end());</span><br><span class=\"line\">\t\tint i = 0;</span><br><span class=\"line\">\t\tfor (; i &lt; values.length() &amp;&amp; i &lt; b.values.length(); ++i)</span><br><span class=\"line\">\t\t\tres.push_back(values.at(i) - b.values.at(i) + &#x27;0&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (i &lt; values.length()) </span><br><span class=\"line\">\t\t\tfor (; i &lt; values.length(); ++i)</span><br><span class=\"line\">\t\t\t\tres.push_back(values.at(i));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint carry = 0;</span><br><span class=\"line\">\t\tfor (i = 0; i &lt; values.length(); ++i)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tint newValue = res.at(i) - carry - &#x27;0&#x27;;</span><br><span class=\"line\">\t\t\tif (newValue &lt; 0) carry = 1;</span><br><span class=\"line\">\t\t\telse carry = 0;</span><br><span class=\"line\">\t\t\tres.at(i) = newValue + carry * 10 + &#x27;0&#x27;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\twhile (res[res.length() - 1] == &#x27;0&#x27;)</span><br><span class=\"line\">\t\t\tres.pop_back();</span><br><span class=\"line\">\t\treverse(res.begin(), res.end());</span><br><span class=\"line\">\t\tvalues = res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn *this;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> BigInt &amp;BigInt::operator - (BigInt b)</span><br><span class=\"line\"> &#123;\t</span><br><span class=\"line\">\t BigInt tmp(b);</span><br><span class=\"line\">\t tmp.flag = !tmp.flag;</span><br><span class=\"line\">\t return *this+tmp;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> BigInt &amp;BigInt::operator * (BigInt b)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">\t BigInt res;</span><br><span class=\"line\">\t if (values == &quot;0&quot; || b.values == &quot;0&quot;)&#123;</span><br><span class=\"line\">\t\t values = &quot;0&quot;;</span><br><span class=\"line\">\t\t return *this;</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\">\t if (flag == b.flag)</span><br><span class=\"line\">\t\t flag = true;</span><br><span class=\"line\">\t else</span><br><span class=\"line\">\t\t flag = false;</span><br><span class=\"line\"></span><br><span class=\"line\">\t BigInt thisbk(*this);</span><br><span class=\"line\">\t for (int i = 0; i &lt; b.values.length(); ++i)&#123;</span><br><span class=\"line\">\t\t for (int j = 0; j &lt; b.values[i] - &#x27;0&#x27;; ++j)&#123;</span><br><span class=\"line\">\t\t\t res = res + thisbk;</span><br><span class=\"line\">\t\t &#125;</span><br><span class=\"line\">\t\tres.values.push_back(&#x27;0&#x27;);</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\">\t res.values.pop_back();</span><br><span class=\"line\">\t values = res.values;</span><br><span class=\"line\">\t return *this;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> BigInt &amp;BigInt::operator / (BigInt b)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">\t if (b.values == &quot;0&quot;)</span><br><span class=\"line\">\t\t throw &quot;Division by zero condition!&quot;;</span><br><span class=\"line\">\t if (flag == b.flag)</span><br><span class=\"line\">\t\t flag = true;</span><br><span class=\"line\">\t else</span><br><span class=\"line\">\t\t flag = false;</span><br><span class=\"line\"></span><br><span class=\"line\">\t BigInt one(1);</span><br><span class=\"line\">\t while (*this &gt;= b)&#123;</span><br><span class=\"line\">\t\t b.values.push_back(&#x27;0&#x27;);</span><br><span class=\"line\">\t\t one.values.push_back(&#x27;0&#x27;);</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\">\t b.values.pop_back();</span><br><span class=\"line\">\t one.values.pop_back();</span><br><span class=\"line\"></span><br><span class=\"line\">\t BigInt thisbk(*this), res(0);</span><br><span class=\"line\">\t while (one.values.compare(&quot;0&quot;) &gt; 0)&#123;</span><br><span class=\"line\">\t\t while (*this &gt;= b)&#123;</span><br><span class=\"line\">\t\t\t *this - b;</span><br><span class=\"line\">\t\t\t res + one;</span><br><span class=\"line\">\t\t &#125;</span><br><span class=\"line\">\t\t b.values.pop_back();</span><br><span class=\"line\">\t\t one.values.pop_back();</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\">\t values = res.values;</span><br><span class=\"line\">\t return *this;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ostream&amp; operator &lt;&lt; (ostream&amp; ou, const BigInt&amp; b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tif (!b.flag)</span><br><span class=\"line\">\t\tou &lt;&lt; &#x27;-&#x27;;</span><br><span class=\"line\">\tou &lt;&lt; b.values;</span><br><span class=\"line\">\treturn ou;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">istream&amp; operator &gt;&gt; (istream&amp; in, BigInt&amp; b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tstring str;</span><br><span class=\"line\">\tin &gt;&gt; str;</span><br><span class=\"line\">\tb.values = str;</span><br><span class=\"line\">\treturn in;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tBigInt b1, b2;</span><br><span class=\"line\">\tstring str;</span><br><span class=\"line\">\tcin &gt;&gt; b1 &gt;&gt; str &gt;&gt; b2;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif (str == &quot;+&quot;)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; b1 + b2 &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\telse if (str == &quot;-&quot;)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; b1 - b2 &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\telse if (str == &quot;*&quot;)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; b1 * b2 &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\telse</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; b1 / b2 &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"奇异值分解","typora-root-url":"../../source","date":"2018-01-30T12:55:11.000Z","_content":"\n### 1. 基本定义\n特征值分解\n$$ A = \\boldsymbol{V}diag(\\lambda)\\boldsymbol{V}^{-1} $$\n奇异值分解类似，但不要求A是方阵\n$$ A = \\boldsymbol{UDV}^T$$\n假设$A$是(m,n)，那么$\\boldsymbol{U}$是(m,m)，$\\boldsymbol{D}$是(m,n)，$\\boldsymbol{V}$是(n,n)。$\\boldsymbol{U}$、$\\boldsymbol{V}$均为对称矩阵，分别称为左奇异向量，右奇异向量，$D$是对角矩阵，其对角元素称为奇异值。\n两者关系\n$A$的左奇异向量，是$AA^T$的特征向量，$A$的右奇异向量，是$A^TA$的特征向量。$A$的非零奇异值，是$AA^T$和$A^TA$的特征值的平方根。\n\n### 2. 待续吧\n等我知道了SVD怎么算之后再写。\n\n\n\n\n","source":"_posts/奇异值分解.md","raw":"---\ntitle: 奇异值分解\ntypora-root-url: ../../source\ndate: 2018-01-30 20:55:11\ntags: 机器学习\ncategories: 数学基础\n---\n\n### 1. 基本定义\n特征值分解\n$$ A = \\boldsymbol{V}diag(\\lambda)\\boldsymbol{V}^{-1} $$\n奇异值分解类似，但不要求A是方阵\n$$ A = \\boldsymbol{UDV}^T$$\n假设$A$是(m,n)，那么$\\boldsymbol{U}$是(m,m)，$\\boldsymbol{D}$是(m,n)，$\\boldsymbol{V}$是(n,n)。$\\boldsymbol{U}$、$\\boldsymbol{V}$均为对称矩阵，分别称为左奇异向量，右奇异向量，$D$是对角矩阵，其对角元素称为奇异值。\n两者关系\n$A$的左奇异向量，是$AA^T$的特征向量，$A$的右奇异向量，是$A^TA$的特征向量。$A$的非零奇异值，是$AA^T$和$A^TA$的特征值的平方根。\n\n### 2. 待续吧\n等我知道了SVD怎么算之后再写。\n\n\n\n\n","slug":"奇异值分解","published":1,"updated":"2023-11-05T11:42:33.905Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li9003ps2kz9iqka9lr","content":"<h3 id=\"1-基本定义\"><a href=\"#1-基本定义\" class=\"headerlink\" title=\"1. 基本定义\"></a>1. 基本定义</h3><p>特征值分解<br>$$ A &#x3D; \\boldsymbol{V}diag(\\lambda)\\boldsymbol{V}^{-1} $$<br>奇异值分解类似，但不要求A是方阵<br>$$ A &#x3D; \\boldsymbol{UDV}^T$$<br>假设$A$是(m,n)，那么$\\boldsymbol{U}$是(m,m)，$\\boldsymbol{D}$是(m,n)，$\\boldsymbol{V}$是(n,n)。$\\boldsymbol{U}$、$\\boldsymbol{V}$均为对称矩阵，分别称为左奇异向量，右奇异向量，$D$是对角矩阵，其对角元素称为奇异值。<br>两者关系<br>$A$的左奇异向量，是$AA^T$的特征向量，$A$的右奇异向量，是$A^TA$的特征向量。$A$的非零奇异值，是$AA^T$和$A^TA$的特征值的平方根。</p>\n<h3 id=\"2-待续吧\"><a href=\"#2-待续吧\" class=\"headerlink\" title=\"2. 待续吧\"></a>2. 待续吧</h3><p>等我知道了SVD怎么算之后再写。</p>\n","excerpt":"","more":"<h3 id=\"1-基本定义\"><a href=\"#1-基本定义\" class=\"headerlink\" title=\"1. 基本定义\"></a>1. 基本定义</h3><p>特征值分解<br>$$ A &#x3D; \\boldsymbol{V}diag(\\lambda)\\boldsymbol{V}^{-1} $$<br>奇异值分解类似，但不要求A是方阵<br>$$ A &#x3D; \\boldsymbol{UDV}^T$$<br>假设$A$是(m,n)，那么$\\boldsymbol{U}$是(m,m)，$\\boldsymbol{D}$是(m,n)，$\\boldsymbol{V}$是(n,n)。$\\boldsymbol{U}$、$\\boldsymbol{V}$均为对称矩阵，分别称为左奇异向量，右奇异向量，$D$是对角矩阵，其对角元素称为奇异值。<br>两者关系<br>$A$的左奇异向量，是$AA^T$的特征向量，$A$的右奇异向量，是$A^TA$的特征向量。$A$的非零奇异值，是$AA^T$和$A^TA$的特征值的平方根。</p>\n<h3 id=\"2-待续吧\"><a href=\"#2-待续吧\" class=\"headerlink\" title=\"2. 待续吧\"></a>2. 待续吧</h3><p>等我知道了SVD怎么算之后再写。</p>\n"},{"title":"如何优雅地排人才公寓","typora-root-url":"../../source","date":"2018-11-27T13:10:07.000Z","_content":"\n```python\nimport requests\nfrom bs4 import BeautifulSoup\nimport datetime\n\nstart_date = datetime.date(2018, 6, 6)\nstart_rank = 866\n\ncookies = {\n    'ASP.NET_SessionId': 'obe4o1esws0xutvslbbapc55',\n    'safedog-flow-item': '',\n}\n\nheaders = {\n    'Connection': 'keep-alive',\n    'Upgrade-Insecure-Requests': '1',\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36',\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',\n    'Referer': 'https://rcgy.zjhui.net/',\n    'Accept-Encoding': 'gzip, deflate, br',\n    'Accept-Language': 'zh',\n}\n\nparams = (\n    ('flag', '0'),\n    ('userName', '13122358292'),\n    ('passWord', 'MzAyMDI4MnpqeWQ='),\n    ('md5', '08dcb32a31936c855b5f8f5c21f5b957'),\n)\n\nresponse = requests.get('https://rcgy.zjhui.net/Login.aspx', headers=headers, params=params, cookies=cookies)\n\nheaders = {\n    'Connection': 'keep-alive',\n    'Pragma': 'no-cache',\n    'Cache-Control': 'no-cache',\n    'Upgrade-Insecure-Requests': '1',\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36',\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',\n    'Referer': 'https://rcgy.zjhui.net/System/ApplyRecord.aspx',\n    'Accept-Encoding': 'gzip, deflate, br',\n    'Accept-Language': 'zh',\n}\n\nresponse = requests.get('https://rcgy.zjhui.net/System/WaitingRecord.aspx', headers=headers, cookies=cookies)\n\nsoup = BeautifulSoup(response.content, features=\"lxml\")\nrank = soup.find(id='ctl00_ctl00_ctl00_main_main_main_rptPtApplyRecord_ctl00_labPageRank').string\nrank = int(rank)\n\ntoday = datetime.date.today()\nremain_days = float(rank) * (today - start_date).days / (start_rank - rank)\nremain_days = int(remain_days)\ncheck_in_date = today + datetime.timedelta(days=remain_days)\n\nprint \"rank:\\t\", rank\nprint \"days remaining:\\t\", remain_days\nprint \"check in date:\\t\", check_in_date\n\n```\n","source":"_posts/如何优雅地排人才公寓.md","raw":"---\ntitle: 如何优雅地排人才公寓\ntypora-root-url: ../../source\ndate: 2018-11-27 21:10:07\n---\n\n```python\nimport requests\nfrom bs4 import BeautifulSoup\nimport datetime\n\nstart_date = datetime.date(2018, 6, 6)\nstart_rank = 866\n\ncookies = {\n    'ASP.NET_SessionId': 'obe4o1esws0xutvslbbapc55',\n    'safedog-flow-item': '',\n}\n\nheaders = {\n    'Connection': 'keep-alive',\n    'Upgrade-Insecure-Requests': '1',\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36',\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',\n    'Referer': 'https://rcgy.zjhui.net/',\n    'Accept-Encoding': 'gzip, deflate, br',\n    'Accept-Language': 'zh',\n}\n\nparams = (\n    ('flag', '0'),\n    ('userName', '13122358292'),\n    ('passWord', 'MzAyMDI4MnpqeWQ='),\n    ('md5', '08dcb32a31936c855b5f8f5c21f5b957'),\n)\n\nresponse = requests.get('https://rcgy.zjhui.net/Login.aspx', headers=headers, params=params, cookies=cookies)\n\nheaders = {\n    'Connection': 'keep-alive',\n    'Pragma': 'no-cache',\n    'Cache-Control': 'no-cache',\n    'Upgrade-Insecure-Requests': '1',\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36',\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',\n    'Referer': 'https://rcgy.zjhui.net/System/ApplyRecord.aspx',\n    'Accept-Encoding': 'gzip, deflate, br',\n    'Accept-Language': 'zh',\n}\n\nresponse = requests.get('https://rcgy.zjhui.net/System/WaitingRecord.aspx', headers=headers, cookies=cookies)\n\nsoup = BeautifulSoup(response.content, features=\"lxml\")\nrank = soup.find(id='ctl00_ctl00_ctl00_main_main_main_rptPtApplyRecord_ctl00_labPageRank').string\nrank = int(rank)\n\ntoday = datetime.date.today()\nremain_days = float(rank) * (today - start_date).days / (start_rank - rank)\nremain_days = int(remain_days)\ncheck_in_date = today + datetime.timedelta(days=remain_days)\n\nprint \"rank:\\t\", rank\nprint \"days remaining:\\t\", remain_days\nprint \"check in date:\\t\", check_in_date\n\n```\n","slug":"如何优雅地排人才公寓","published":1,"updated":"2023-11-05T11:42:33.906Z","comments":1,"layout":"post","photos":[],"_id":"clolf0li9003rs2kzerq5dnrr","content":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"></span><br><span class=\"line\">start_date = datetime.date(<span class=\"number\">2018</span>, <span class=\"number\">6</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">start_rank = <span class=\"number\">866</span></span><br><span class=\"line\"></span><br><span class=\"line\">cookies = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;ASP.NET_SessionId&#x27;</span>: <span class=\"string\">&#x27;obe4o1esws0xutvslbbapc55&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;safedog-flow-item&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;Connection&#x27;</span>: <span class=\"string\">&#x27;keep-alive&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Accept&#x27;</span>: <span class=\"string\">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Referer&#x27;</span>: <span class=\"string\">&#x27;https://rcgy.zjhui.net/&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Accept-Encoding&#x27;</span>: <span class=\"string\">&#x27;gzip, deflate, br&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Accept-Language&#x27;</span>: <span class=\"string\">&#x27;zh&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">params = (</span><br><span class=\"line\">    (<span class=\"string\">&#x27;flag&#x27;</span>, <span class=\"string\">&#x27;0&#x27;</span>),</span><br><span class=\"line\">    (<span class=\"string\">&#x27;userName&#x27;</span>, <span class=\"string\">&#x27;13122358292&#x27;</span>),</span><br><span class=\"line\">    (<span class=\"string\">&#x27;passWord&#x27;</span>, <span class=\"string\">&#x27;MzAyMDI4MnpqeWQ=&#x27;</span>),</span><br><span class=\"line\">    (<span class=\"string\">&#x27;md5&#x27;</span>, <span class=\"string\">&#x27;08dcb32a31936c855b5f8f5c21f5b957&#x27;</span>),</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.get(<span class=\"string\">&#x27;https://rcgy.zjhui.net/Login.aspx&#x27;</span>, headers=headers, params=params, cookies=cookies)</span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;Connection&#x27;</span>: <span class=\"string\">&#x27;keep-alive&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Pragma&#x27;</span>: <span class=\"string\">&#x27;no-cache&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Cache-Control&#x27;</span>: <span class=\"string\">&#x27;no-cache&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Accept&#x27;</span>: <span class=\"string\">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Referer&#x27;</span>: <span class=\"string\">&#x27;https://rcgy.zjhui.net/System/ApplyRecord.aspx&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Accept-Encoding&#x27;</span>: <span class=\"string\">&#x27;gzip, deflate, br&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Accept-Language&#x27;</span>: <span class=\"string\">&#x27;zh&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.get(<span class=\"string\">&#x27;https://rcgy.zjhui.net/System/WaitingRecord.aspx&#x27;</span>, headers=headers, cookies=cookies)</span><br><span class=\"line\"></span><br><span class=\"line\">soup = BeautifulSoup(response.content, features=<span class=\"string\">&quot;lxml&quot;</span>)</span><br><span class=\"line\">rank = soup.find(<span class=\"built_in\">id</span>=<span class=\"string\">&#x27;ctl00_ctl00_ctl00_main_main_main_rptPtApplyRecord_ctl00_labPageRank&#x27;</span>).string</span><br><span class=\"line\">rank = <span class=\"built_in\">int</span>(rank)</span><br><span class=\"line\"></span><br><span class=\"line\">today = datetime.date.today()</span><br><span class=\"line\">remain_days = <span class=\"built_in\">float</span>(rank) * (today - start_date).days / (start_rank - rank)</span><br><span class=\"line\">remain_days = <span class=\"built_in\">int</span>(remain_days)</span><br><span class=\"line\">check_in_date = today + datetime.timedelta(days=remain_days)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;rank:\\t&quot;</span>, rank</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;days remaining:\\t&quot;</span>, remain_days</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;check in date:\\t&quot;</span>, check_in_date</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"></span><br><span class=\"line\">start_date = datetime.date(<span class=\"number\">2018</span>, <span class=\"number\">6</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">start_rank = <span class=\"number\">866</span></span><br><span class=\"line\"></span><br><span class=\"line\">cookies = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;ASP.NET_SessionId&#x27;</span>: <span class=\"string\">&#x27;obe4o1esws0xutvslbbapc55&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;safedog-flow-item&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;Connection&#x27;</span>: <span class=\"string\">&#x27;keep-alive&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Accept&#x27;</span>: <span class=\"string\">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Referer&#x27;</span>: <span class=\"string\">&#x27;https://rcgy.zjhui.net/&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Accept-Encoding&#x27;</span>: <span class=\"string\">&#x27;gzip, deflate, br&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Accept-Language&#x27;</span>: <span class=\"string\">&#x27;zh&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">params = (</span><br><span class=\"line\">    (<span class=\"string\">&#x27;flag&#x27;</span>, <span class=\"string\">&#x27;0&#x27;</span>),</span><br><span class=\"line\">    (<span class=\"string\">&#x27;userName&#x27;</span>, <span class=\"string\">&#x27;13122358292&#x27;</span>),</span><br><span class=\"line\">    (<span class=\"string\">&#x27;passWord&#x27;</span>, <span class=\"string\">&#x27;MzAyMDI4MnpqeWQ=&#x27;</span>),</span><br><span class=\"line\">    (<span class=\"string\">&#x27;md5&#x27;</span>, <span class=\"string\">&#x27;08dcb32a31936c855b5f8f5c21f5b957&#x27;</span>),</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.get(<span class=\"string\">&#x27;https://rcgy.zjhui.net/Login.aspx&#x27;</span>, headers=headers, params=params, cookies=cookies)</span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;Connection&#x27;</span>: <span class=\"string\">&#x27;keep-alive&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Pragma&#x27;</span>: <span class=\"string\">&#x27;no-cache&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Cache-Control&#x27;</span>: <span class=\"string\">&#x27;no-cache&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Accept&#x27;</span>: <span class=\"string\">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Referer&#x27;</span>: <span class=\"string\">&#x27;https://rcgy.zjhui.net/System/ApplyRecord.aspx&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Accept-Encoding&#x27;</span>: <span class=\"string\">&#x27;gzip, deflate, br&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Accept-Language&#x27;</span>: <span class=\"string\">&#x27;zh&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.get(<span class=\"string\">&#x27;https://rcgy.zjhui.net/System/WaitingRecord.aspx&#x27;</span>, headers=headers, cookies=cookies)</span><br><span class=\"line\"></span><br><span class=\"line\">soup = BeautifulSoup(response.content, features=<span class=\"string\">&quot;lxml&quot;</span>)</span><br><span class=\"line\">rank = soup.find(<span class=\"built_in\">id</span>=<span class=\"string\">&#x27;ctl00_ctl00_ctl00_main_main_main_rptPtApplyRecord_ctl00_labPageRank&#x27;</span>).string</span><br><span class=\"line\">rank = <span class=\"built_in\">int</span>(rank)</span><br><span class=\"line\"></span><br><span class=\"line\">today = datetime.date.today()</span><br><span class=\"line\">remain_days = <span class=\"built_in\">float</span>(rank) * (today - start_date).days / (start_rank - rank)</span><br><span class=\"line\">remain_days = <span class=\"built_in\">int</span>(remain_days)</span><br><span class=\"line\">check_in_date = today + datetime.timedelta(days=remain_days)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;rank:\\t&quot;</span>, rank</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;days remaining:\\t&quot;</span>, remain_days</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;check in date:\\t&quot;</span>, check_in_date</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"微信公众号机器人","typora-root-url":"../../source","date":"2018-10-06T08:47:23.000Z","_content":"\n# itchatmp\n- itchat是个微信机器人，作者通过微信网页版抓的接口\n- itchatmp是对应的微信公众号的机器人，微信官方提供的接口，但相比于itchat，不太完善，文档也不行\n- 我已经要放弃这个了，这里只记录一下我修改nginx配置的过程\n1. `itchatmp.run(port=8180)`，这里首先要指定端口\n2. 微信公众号的配置页面里，写上对应的域名，yongxinxue.xin/weixin，由于我根域名被占了，所以建立了个新路径\n3. nginx里增加配置，[这里简单说一下last和break的区别](https://blog.csdn.net/zhanlanmg/article/details/49684803)，\n```nginx\nserver {\n    listen       80;\n    server_name  _;\n\n    location / {\n      ...\n    }\n    location /weixin {\n      rewrite /weixin/(.*) /$1 break;\n      proxy_pass http://127.0.0.1:8180/;\n    }\n}\n```\n\n> rewrite break 重写后，直接使用当前资源，不再执行location里余下的语句，完成本次请求，地址栏url不变 \n> rewrite last 重写后，马上发起一个新的请求，再次进入server块，重试location匹配，超过10次匹配不到报500错误，地址栏url不变\n\n# werobot\n- 看着更成熟一点，后面再看，[这里](https://werobot.readthedocs.io/zh_CN/latest/replies.html)\n","source":"_posts/微信公众号机器人.md","raw":"---\ntitle: 微信公众号机器人\ntypora-root-url: ../../source\ntags:\n  - 微信\n  - 公众号\ncategories: flask\ndate: 2018-10-06 16:47:23\n---\n\n# itchatmp\n- itchat是个微信机器人，作者通过微信网页版抓的接口\n- itchatmp是对应的微信公众号的机器人，微信官方提供的接口，但相比于itchat，不太完善，文档也不行\n- 我已经要放弃这个了，这里只记录一下我修改nginx配置的过程\n1. `itchatmp.run(port=8180)`，这里首先要指定端口\n2. 微信公众号的配置页面里，写上对应的域名，yongxinxue.xin/weixin，由于我根域名被占了，所以建立了个新路径\n3. nginx里增加配置，[这里简单说一下last和break的区别](https://blog.csdn.net/zhanlanmg/article/details/49684803)，\n```nginx\nserver {\n    listen       80;\n    server_name  _;\n\n    location / {\n      ...\n    }\n    location /weixin {\n      rewrite /weixin/(.*) /$1 break;\n      proxy_pass http://127.0.0.1:8180/;\n    }\n}\n```\n\n> rewrite break 重写后，直接使用当前资源，不再执行location里余下的语句，完成本次请求，地址栏url不变 \n> rewrite last 重写后，马上发起一个新的请求，再次进入server块，重试location匹配，超过10次匹配不到报500错误，地址栏url不变\n\n# werobot\n- 看着更成熟一点，后面再看，[这里](https://werobot.readthedocs.io/zh_CN/latest/replies.html)\n","slug":"微信公众号机器人","published":1,"updated":"2023-11-05T11:42:33.906Z","comments":1,"layout":"post","photos":[],"_id":"clolf0lia003ws2kz95pv27vg","content":"<h1 id=\"itchatmp\"><a href=\"#itchatmp\" class=\"headerlink\" title=\"itchatmp\"></a>itchatmp</h1><ul>\n<li>itchat是个微信机器人，作者通过微信网页版抓的接口</li>\n<li>itchatmp是对应的微信公众号的机器人，微信官方提供的接口，但相比于itchat，不太完善，文档也不行</li>\n<li>我已经要放弃这个了，这里只记录一下我修改nginx配置的过程</li>\n</ul>\n<ol>\n<li><code>itchatmp.run(port=8180)</code>，这里首先要指定端口</li>\n<li>微信公众号的配置页面里，写上对应的域名，yongxinxue.xin&#x2F;weixin，由于我根域名被占了，所以建立了个新路径</li>\n<li>nginx里增加配置，<a href=\"https://blog.csdn.net/zhanlanmg/article/details/49684803\">这里简单说一下last和break的区别</a>，<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  _;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"section\">location</span> /weixin &#123;</span><br><span class=\"line\">      <span class=\"attribute\">rewrite</span> /weixin/(.*) /<span class=\"variable\">$1</span> <span class=\"literal\">break</span>;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_pass</span> http://127.0.0.1:8180/;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>rewrite break 重写后，直接使用当前资源，不再执行location里余下的语句，完成本次请求，地址栏url不变<br>rewrite last 重写后，马上发起一个新的请求，再次进入server块，重试location匹配，超过10次匹配不到报500错误，地址栏url不变</p>\n</blockquote>\n<h1 id=\"werobot\"><a href=\"#werobot\" class=\"headerlink\" title=\"werobot\"></a>werobot</h1><ul>\n<li>看着更成熟一点，后面再看，<a href=\"https://werobot.readthedocs.io/zh_CN/latest/replies.html\">这里</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"itchatmp\"><a href=\"#itchatmp\" class=\"headerlink\" title=\"itchatmp\"></a>itchatmp</h1><ul>\n<li>itchat是个微信机器人，作者通过微信网页版抓的接口</li>\n<li>itchatmp是对应的微信公众号的机器人，微信官方提供的接口，但相比于itchat，不太完善，文档也不行</li>\n<li>我已经要放弃这个了，这里只记录一下我修改nginx配置的过程</li>\n</ul>\n<ol>\n<li><code>itchatmp.run(port=8180)</code>，这里首先要指定端口</li>\n<li>微信公众号的配置页面里，写上对应的域名，yongxinxue.xin&#x2F;weixin，由于我根域名被占了，所以建立了个新路径</li>\n<li>nginx里增加配置，<a href=\"https://blog.csdn.net/zhanlanmg/article/details/49684803\">这里简单说一下last和break的区别</a>，<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  _;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"section\">location</span> /weixin &#123;</span><br><span class=\"line\">      <span class=\"attribute\">rewrite</span> /weixin/(.*) /<span class=\"variable\">$1</span> <span class=\"literal\">break</span>;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_pass</span> http://127.0.0.1:8180/;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>rewrite break 重写后，直接使用当前资源，不再执行location里余下的语句，完成本次请求，地址栏url不变<br>rewrite last 重写后，马上发起一个新的请求，再次进入server块，重试location匹配，超过10次匹配不到报500错误，地址栏url不变</p>\n</blockquote>\n<h1 id=\"werobot\"><a href=\"#werobot\" class=\"headerlink\" title=\"werobot\"></a>werobot</h1><ul>\n<li>看着更成熟一点，后面再看，<a href=\"https://werobot.readthedocs.io/zh_CN/latest/replies.html\">这里</a></li>\n</ul>\n"},{"title":"服务器端口记录","typora-root-url":"../../source","date":"2020-02-21T15:48:19.000Z","_content":"\n\n| 端口                                                     | 内容                                                    |\n| -------------------------------------------------------- | ------------------------------------------------------- |\n| [http://122.51.137.82:8080/](http://122.51.137.82:8080/) | 个人网盘，用于向服务器传文件                            |\n| [http://122.51.137.82:8082/](http://122.51.137.82:8082/) | 用vue做的[地图游戏](https://github.com/zjyfdu/geo_game) |\n| [http://122.51.137.82:8085/](http://122.51.137.82:8085/) | b站橙卡的giligili教学<del>半成品</del>残次品            |\n| [http://122.51.137.82:8086/](http://122.51.137.82:8086/) | 《go web编程》的gitbook                                 |\n","source":"_posts/服务器端口记录.md","raw":"---\ntitle: 服务器端口记录\ntags:\n  - caffe\n  - docker\ncategories: cpp\ntypora-root-url: ../../source\ndate: 2020-02-21 23:48:19\n---\n\n\n| 端口                                                     | 内容                                                    |\n| -------------------------------------------------------- | ------------------------------------------------------- |\n| [http://122.51.137.82:8080/](http://122.51.137.82:8080/) | 个人网盘，用于向服务器传文件                            |\n| [http://122.51.137.82:8082/](http://122.51.137.82:8082/) | 用vue做的[地图游戏](https://github.com/zjyfdu/geo_game) |\n| [http://122.51.137.82:8085/](http://122.51.137.82:8085/) | b站橙卡的giligili教学<del>半成品</del>残次品            |\n| [http://122.51.137.82:8086/](http://122.51.137.82:8086/) | 《go web编程》的gitbook                                 |\n","slug":"服务器端口记录","published":1,"updated":"2023-11-05T11:42:33.906Z","comments":1,"layout":"post","photos":[],"_id":"clolf0lia003zs2kzd7yw1ss9","content":"<table>\n<thead>\n<tr>\n<th>端口</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"http://122.51.137.82:8080/\">http://122.51.137.82:8080/</a></td>\n<td>个人网盘，用于向服务器传文件</td>\n</tr>\n<tr>\n<td><a href=\"http://122.51.137.82:8082/\">http://122.51.137.82:8082/</a></td>\n<td>用vue做的<a href=\"https://github.com/zjyfdu/geo_game\">地图游戏</a></td>\n</tr>\n<tr>\n<td><a href=\"http://122.51.137.82:8085/\">http://122.51.137.82:8085/</a></td>\n<td>b站橙卡的giligili教学<del>半成品</del>残次品</td>\n</tr>\n<tr>\n<td><a href=\"http://122.51.137.82:8086/\">http://122.51.137.82:8086/</a></td>\n<td>《go web编程》的gitbook</td>\n</tr>\n</tbody></table>\n","excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>端口</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"http://122.51.137.82:8080/\">http://122.51.137.82:8080/</a></td>\n<td>个人网盘，用于向服务器传文件</td>\n</tr>\n<tr>\n<td><a href=\"http://122.51.137.82:8082/\">http://122.51.137.82:8082/</a></td>\n<td>用vue做的<a href=\"https://github.com/zjyfdu/geo_game\">地图游戏</a></td>\n</tr>\n<tr>\n<td><a href=\"http://122.51.137.82:8085/\">http://122.51.137.82:8085/</a></td>\n<td>b站橙卡的giligili教学<del>半成品</del>残次品</td>\n</tr>\n<tr>\n<td><a href=\"http://122.51.137.82:8086/\">http://122.51.137.82:8086/</a></td>\n<td>《go web编程》的gitbook</td>\n</tr>\n</tbody></table>\n"},{"title":"正则","typora-root-url":"../../source","date":"2019-03-08T09:13:00.000Z","_content":"\n- 这里占个坑\n- 我想些反向搜索，但是我自己都没搞懂","source":"_posts/正则.md","raw":"---\ntitle: 正则\ntypora-root-url: ../../source\ndate: 2019-03-08 17:13:00\n---\n\n- 这里占个坑\n- 我想些反向搜索，但是我自己都没搞懂","slug":"正则","published":1,"updated":"2023-11-05T11:42:33.906Z","comments":1,"layout":"post","photos":[],"_id":"clolf0lia0041s2kz252nahn7","content":"<ul>\n<li>这里占个坑</li>\n<li>我想些反向搜索，但是我自己都没搞懂</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li>这里占个坑</li>\n<li>我想些反向搜索，但是我自己都没搞懂</li>\n</ul>\n"},{"title":"百度真香啊","typora-root-url":"../../source","date":"2019-12-14T16:08:16.000Z","_content":"\n- 目前我知道有两个地方能薅到免费的GPU，一个是google的colab，一个是百度的aistudio\n  \n# colab\n\n- colab是tesla p100，一次可以运行12h，只能以jupyter notebook的形式运行，没有shell真的很难受啊，\n- 文件可以挂载在google driver\n- 有人做了ssh访问colab，看[这里](https://imadelhanafi.com/posts/google_colal_server/)，使用Ngrok做了个反向的代理\n\n# aistudio\n- 百度最友好的是提供命令行，同时也有个work路径，持久存储，比谷歌舒服多了\n- 给的还是Tesla V100啊\n- 理论上只能支持paddlepaddle，但亲测可以pytorch，需要自己安装\n\n```shell\nwget https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2019.10-Linux-x86_64.sh\n```\n\n- 安装之后需要修改conda的镜像，否则下载很慢，修改`~/.condarc`\n\n- 这个是我的`.condarc`，基本上是`conda install`的时候，如果下载的url不是清华的镜像，就需要添加相应的镜像了\n\n```\nchannels:\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/\nshow_channel_urls: true\n```\n\n- 安装pytorch\n\n```\nconda install --channel https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/ pytorch torchvision cudatoolkit=9.2 -c pytorch\n```","source":"_posts/百度真香.md","raw":"---\ntitle: 百度真香啊\ntypora-root-url: ../../source\ndate: 2019-12-15 00:08:16\n---\n\n- 目前我知道有两个地方能薅到免费的GPU，一个是google的colab，一个是百度的aistudio\n  \n# colab\n\n- colab是tesla p100，一次可以运行12h，只能以jupyter notebook的形式运行，没有shell真的很难受啊，\n- 文件可以挂载在google driver\n- 有人做了ssh访问colab，看[这里](https://imadelhanafi.com/posts/google_colal_server/)，使用Ngrok做了个反向的代理\n\n# aistudio\n- 百度最友好的是提供命令行，同时也有个work路径，持久存储，比谷歌舒服多了\n- 给的还是Tesla V100啊\n- 理论上只能支持paddlepaddle，但亲测可以pytorch，需要自己安装\n\n```shell\nwget https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2019.10-Linux-x86_64.sh\n```\n\n- 安装之后需要修改conda的镜像，否则下载很慢，修改`~/.condarc`\n\n- 这个是我的`.condarc`，基本上是`conda install`的时候，如果下载的url不是清华的镜像，就需要添加相应的镜像了\n\n```\nchannels:\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/\nshow_channel_urls: true\n```\n\n- 安装pytorch\n\n```\nconda install --channel https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/ pytorch torchvision cudatoolkit=9.2 -c pytorch\n```","slug":"百度真香","published":1,"updated":"2023-11-05T11:42:33.906Z","comments":1,"layout":"post","photos":[],"_id":"clolf0lia0045s2kz0tz66g2k","content":"<ul>\n<li>目前我知道有两个地方能薅到免费的GPU，一个是google的colab，一个是百度的aistudio</li>\n</ul>\n<h1 id=\"colab\"><a href=\"#colab\" class=\"headerlink\" title=\"colab\"></a>colab</h1><ul>\n<li>colab是tesla p100，一次可以运行12h，只能以jupyter notebook的形式运行，没有shell真的很难受啊，</li>\n<li>文件可以挂载在google driver</li>\n<li>有人做了ssh访问colab，看<a href=\"https://imadelhanafi.com/posts/google_colal_server/\">这里</a>，使用Ngrok做了个反向的代理</li>\n</ul>\n<h1 id=\"aistudio\"><a href=\"#aistudio\" class=\"headerlink\" title=\"aistudio\"></a>aistudio</h1><ul>\n<li>百度最友好的是提供命令行，同时也有个work路径，持久存储，比谷歌舒服多了</li>\n<li>给的还是Tesla V100啊</li>\n<li>理论上只能支持paddlepaddle，但亲测可以pytorch，需要自己安装</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2019.10-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>安装之后需要修改conda的镜像，否则下载很慢，修改<code>~/.condarc</code></p>\n</li>\n<li><p>这个是我的<code>.condarc</code>，基本上是<code>conda install</code>的时候，如果下载的url不是清华的镜像，就需要添加相应的镜像了</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channels:</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br><span class=\"line\">show_channel_urls: true</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装pytorch</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install --channel https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/ pytorch torchvision cudatoolkit=9.2 -c pytorch</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<ul>\n<li>目前我知道有两个地方能薅到免费的GPU，一个是google的colab，一个是百度的aistudio</li>\n</ul>\n<h1 id=\"colab\"><a href=\"#colab\" class=\"headerlink\" title=\"colab\"></a>colab</h1><ul>\n<li>colab是tesla p100，一次可以运行12h，只能以jupyter notebook的形式运行，没有shell真的很难受啊，</li>\n<li>文件可以挂载在google driver</li>\n<li>有人做了ssh访问colab，看<a href=\"https://imadelhanafi.com/posts/google_colal_server/\">这里</a>，使用Ngrok做了个反向的代理</li>\n</ul>\n<h1 id=\"aistudio\"><a href=\"#aistudio\" class=\"headerlink\" title=\"aistudio\"></a>aistudio</h1><ul>\n<li>百度最友好的是提供命令行，同时也有个work路径，持久存储，比谷歌舒服多了</li>\n<li>给的还是Tesla V100啊</li>\n<li>理论上只能支持paddlepaddle，但亲测可以pytorch，需要自己安装</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2019.10-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>安装之后需要修改conda的镜像，否则下载很慢，修改<code>~/.condarc</code></p>\n</li>\n<li><p>这个是我的<code>.condarc</code>，基本上是<code>conda install</code>的时候，如果下载的url不是清华的镜像，就需要添加相应的镜像了</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channels:</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br><span class=\"line\">show_channel_urls: true</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装pytorch</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install --channel https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/ pytorch torchvision cudatoolkit=9.2 -c pytorch</span><br></pre></td></tr></table></figure>"},{"title":"计算感受野","typora-root-url":"../../source","date":"2018-06-20T00:58:51.000Z","_content":"\n- feature map的计算公式为`outsize = (insize - fsize + 2*pad) / stride + 1`\n- stride 的计算公式为`totstride = totstride * stride`，这两个公式都是从前往后算\n- receptive field `RF = ((RF -1)* stride) + fsize`，这个要从后往前算\n\n```python\n#!/usr/bin/env python\n\nnet_struct = {'alexnet': {'net':[[11,4,0],[3,2,0],[5,1,2],[3,2,0],[3,1,1],[3,1,1],[3,1,1],[3,2,0]],\n                   'name':['conv1','pool1','conv2','pool2','conv3','conv4','conv5','pool5']},\n       'vgg16': {'net':[[3,1,1],[3,1,1],[2,2,0],[3,1,1],[3,1,1],[2,2,0],[3,1,1],[3,1,1],[3,1,1],\n                        [2,2,0],[3,1,1],[3,1,1],[3,1,1],[2,2,0],[3,1,1],[3,1,1],[3,1,1],[2,2,0]],\n                 'name':['conv1_1','conv1_2','pool1','conv2_1','conv2_2','pool2','conv3_1','conv3_2',\n                         'conv3_3', 'pool3','conv4_1','conv4_2','conv4_3','pool4','conv5_1','conv5_2','conv5_3','pool5']},\n       'zf-5':{'net': [[7,2,3],[3,2,1],[5,2,2],[3,2,1],[3,1,1],[3,1,1],[3,1,1]],\n               'name': ['conv1','pool1','conv2','pool2','conv3','conv4','conv5']}}\n\n#[3,1,1] stands for filter_size, stride, padding\n\nimsize = 224\n\ndef outFromIn(isz, net, layernum):\n    totstride = 1\n    insize = isz\n    for layer in range(layernum):\n        fsize, stride, pad = net[layer]\n        outsize = (insize - fsize + 2*pad) / stride + 1\n        insize = outsize\n        totstride = totstride * stride\n    return outsize, totstride\n\ndef inFromOut(net, layernum):\n    RF = 1\n    for layer in reversed(range(layernum)):\n        fsize, stride, pad = net[layer]\n        RF = ((RF -1)* stride) + fsize\n    return RF\n\nif __name__ == '__main__':\n    print \"layer output sizes given image = %dx%d\" % (imsize, imsize)\n    for net in net_struct.keys():\n        print '************net structrue name is %s**************'% net\n        for i in range(len(net_struct[net]['net'])):\n            p = outFromIn(imsize,net_struct[net]['net'], i+1)\n            rf = inFromOut(net_struct[net]['net'], i+1)\n            print \"Layer Name = %s, Output size = %3d, Stride = % 3d, RF size = %3d\" % (net_struct[net]['name'][i], p[0], p[1], rf)\n\n```\n\n```\nlayer output sizes given image = 224x224\n************net structrue name is vgg16**************\nLayer Name = conv1_1, Output size = 224, Stride =   1, RF size =   3\nLayer Name = conv1_2, Output size = 224, Stride =   1, RF size =   5\nLayer Name = pool1, Output size = 112, Stride =   2, RF size =   6\nLayer Name = conv2_1, Output size = 112, Stride =   2, RF size =  10\nLayer Name = conv2_2, Output size = 112, Stride =   2, RF size =  14\nLayer Name = pool2, Output size =  56, Stride =   4, RF size =  16\nLayer Name = conv3_1, Output size =  56, Stride =   4, RF size =  24\nLayer Name = conv3_2, Output size =  56, Stride =   4, RF size =  32\nLayer Name = conv3_3, Output size =  56, Stride =   4, RF size =  40\nLayer Name = pool3, Output size =  28, Stride =   8, RF size =  44\nLayer Name = conv4_1, Output size =  28, Stride =   8, RF size =  60\nLayer Name = conv4_2, Output size =  28, Stride =   8, RF size =  76\nLayer Name = conv4_3, Output size =  28, Stride =   8, RF size =  92\nLayer Name = pool4, Output size =  14, Stride =  16, RF size = 100\nLayer Name = conv5_1, Output size =  14, Stride =  16, RF size = 132\nLayer Name = conv5_2, Output size =  14, Stride =  16, RF size = 164\nLayer Name = conv5_3, Output size =  14, Stride =  16, RF size = 196\nLayer Name = pool5, Output size =   7, Stride =  32, RF size = 212\n************net structrue name is zf-5**************\nLayer Name = conv1, Output size = 112, Stride =   2, RF size =   7\nLayer Name = pool1, Output size =  56, Stride =   4, RF size =  11\nLayer Name = conv2, Output size =  28, Stride =   8, RF size =  27\nLayer Name = pool2, Output size =  14, Stride =  16, RF size =  43\nLayer Name = conv3, Output size =  14, Stride =  16, RF size =  75\nLayer Name = conv4, Output size =  14, Stride =  16, RF size = 107\nLayer Name = conv5, Output size =  14, Stride =  16, RF size = 139\n************net structrue name is alexnet**************\nLayer Name = conv1, Output size =  54, Stride =   4, RF size =  11\nLayer Name = pool1, Output size =  26, Stride =   8, RF size =  19\nLayer Name = conv2, Output size =  26, Stride =   8, RF size =  51\nLayer Name = pool2, Output size =  12, Stride =  16, RF size =  67\nLayer Name = conv3, Output size =  12, Stride =  16, RF size =  99\nLayer Name = conv4, Output size =  12, Stride =  16, RF size = 131\nLayer Name = conv5, Output size =  12, Stride =  16, RF size = 163\nLayer Name = pool5, Output size =   5, Stride =  32, RF size = 195\n```\n","source":"_posts/计算感受野.md","raw":"---\ntitle: 计算感受野\ntypora-root-url: ../../source\ndate: 2018-06-20 08:58:51\ntags: 感受野\ncategories: caffe\n---\n\n- feature map的计算公式为`outsize = (insize - fsize + 2*pad) / stride + 1`\n- stride 的计算公式为`totstride = totstride * stride`，这两个公式都是从前往后算\n- receptive field `RF = ((RF -1)* stride) + fsize`，这个要从后往前算\n\n```python\n#!/usr/bin/env python\n\nnet_struct = {'alexnet': {'net':[[11,4,0],[3,2,0],[5,1,2],[3,2,0],[3,1,1],[3,1,1],[3,1,1],[3,2,0]],\n                   'name':['conv1','pool1','conv2','pool2','conv3','conv4','conv5','pool5']},\n       'vgg16': {'net':[[3,1,1],[3,1,1],[2,2,0],[3,1,1],[3,1,1],[2,2,0],[3,1,1],[3,1,1],[3,1,1],\n                        [2,2,0],[3,1,1],[3,1,1],[3,1,1],[2,2,0],[3,1,1],[3,1,1],[3,1,1],[2,2,0]],\n                 'name':['conv1_1','conv1_2','pool1','conv2_1','conv2_2','pool2','conv3_1','conv3_2',\n                         'conv3_3', 'pool3','conv4_1','conv4_2','conv4_3','pool4','conv5_1','conv5_2','conv5_3','pool5']},\n       'zf-5':{'net': [[7,2,3],[3,2,1],[5,2,2],[3,2,1],[3,1,1],[3,1,1],[3,1,1]],\n               'name': ['conv1','pool1','conv2','pool2','conv3','conv4','conv5']}}\n\n#[3,1,1] stands for filter_size, stride, padding\n\nimsize = 224\n\ndef outFromIn(isz, net, layernum):\n    totstride = 1\n    insize = isz\n    for layer in range(layernum):\n        fsize, stride, pad = net[layer]\n        outsize = (insize - fsize + 2*pad) / stride + 1\n        insize = outsize\n        totstride = totstride * stride\n    return outsize, totstride\n\ndef inFromOut(net, layernum):\n    RF = 1\n    for layer in reversed(range(layernum)):\n        fsize, stride, pad = net[layer]\n        RF = ((RF -1)* stride) + fsize\n    return RF\n\nif __name__ == '__main__':\n    print \"layer output sizes given image = %dx%d\" % (imsize, imsize)\n    for net in net_struct.keys():\n        print '************net structrue name is %s**************'% net\n        for i in range(len(net_struct[net]['net'])):\n            p = outFromIn(imsize,net_struct[net]['net'], i+1)\n            rf = inFromOut(net_struct[net]['net'], i+1)\n            print \"Layer Name = %s, Output size = %3d, Stride = % 3d, RF size = %3d\" % (net_struct[net]['name'][i], p[0], p[1], rf)\n\n```\n\n```\nlayer output sizes given image = 224x224\n************net structrue name is vgg16**************\nLayer Name = conv1_1, Output size = 224, Stride =   1, RF size =   3\nLayer Name = conv1_2, Output size = 224, Stride =   1, RF size =   5\nLayer Name = pool1, Output size = 112, Stride =   2, RF size =   6\nLayer Name = conv2_1, Output size = 112, Stride =   2, RF size =  10\nLayer Name = conv2_2, Output size = 112, Stride =   2, RF size =  14\nLayer Name = pool2, Output size =  56, Stride =   4, RF size =  16\nLayer Name = conv3_1, Output size =  56, Stride =   4, RF size =  24\nLayer Name = conv3_2, Output size =  56, Stride =   4, RF size =  32\nLayer Name = conv3_3, Output size =  56, Stride =   4, RF size =  40\nLayer Name = pool3, Output size =  28, Stride =   8, RF size =  44\nLayer Name = conv4_1, Output size =  28, Stride =   8, RF size =  60\nLayer Name = conv4_2, Output size =  28, Stride =   8, RF size =  76\nLayer Name = conv4_3, Output size =  28, Stride =   8, RF size =  92\nLayer Name = pool4, Output size =  14, Stride =  16, RF size = 100\nLayer Name = conv5_1, Output size =  14, Stride =  16, RF size = 132\nLayer Name = conv5_2, Output size =  14, Stride =  16, RF size = 164\nLayer Name = conv5_3, Output size =  14, Stride =  16, RF size = 196\nLayer Name = pool5, Output size =   7, Stride =  32, RF size = 212\n************net structrue name is zf-5**************\nLayer Name = conv1, Output size = 112, Stride =   2, RF size =   7\nLayer Name = pool1, Output size =  56, Stride =   4, RF size =  11\nLayer Name = conv2, Output size =  28, Stride =   8, RF size =  27\nLayer Name = pool2, Output size =  14, Stride =  16, RF size =  43\nLayer Name = conv3, Output size =  14, Stride =  16, RF size =  75\nLayer Name = conv4, Output size =  14, Stride =  16, RF size = 107\nLayer Name = conv5, Output size =  14, Stride =  16, RF size = 139\n************net structrue name is alexnet**************\nLayer Name = conv1, Output size =  54, Stride =   4, RF size =  11\nLayer Name = pool1, Output size =  26, Stride =   8, RF size =  19\nLayer Name = conv2, Output size =  26, Stride =   8, RF size =  51\nLayer Name = pool2, Output size =  12, Stride =  16, RF size =  67\nLayer Name = conv3, Output size =  12, Stride =  16, RF size =  99\nLayer Name = conv4, Output size =  12, Stride =  16, RF size = 131\nLayer Name = conv5, Output size =  12, Stride =  16, RF size = 163\nLayer Name = pool5, Output size =   5, Stride =  32, RF size = 195\n```\n","slug":"计算感受野","published":1,"updated":"2023-11-05T11:42:33.906Z","comments":1,"layout":"post","photos":[],"_id":"clolf0lid005fs2kz50um8h02","content":"<ul>\n<li>feature map的计算公式为<code>outsize = (insize - fsize + 2*pad) / stride + 1</code></li>\n<li>stride 的计算公式为<code>totstride = totstride * stride</code>，这两个公式都是从前往后算</li>\n<li>receptive field <code>RF = ((RF -1)* stride) + fsize</code>，这个要从后往前算</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"></span><br><span class=\"line\">net_struct = &#123;<span class=\"string\">&#x27;alexnet&#x27;</span>: &#123;<span class=\"string\">&#x27;net&#x27;</span>:[[<span class=\"number\">11</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>],[<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>],[<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>]],</span><br><span class=\"line\">                   <span class=\"string\">&#x27;name&#x27;</span>:[<span class=\"string\">&#x27;conv1&#x27;</span>,<span class=\"string\">&#x27;pool1&#x27;</span>,<span class=\"string\">&#x27;conv2&#x27;</span>,<span class=\"string\">&#x27;pool2&#x27;</span>,<span class=\"string\">&#x27;conv3&#x27;</span>,<span class=\"string\">&#x27;conv4&#x27;</span>,<span class=\"string\">&#x27;conv5&#x27;</span>,<span class=\"string\">&#x27;pool5&#x27;</span>]&#125;,</span><br><span class=\"line\">       <span class=\"string\">&#x27;vgg16&#x27;</span>: &#123;<span class=\"string\">&#x27;net&#x27;</span>:[[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],</span><br><span class=\"line\">                        [<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>]],</span><br><span class=\"line\">                 <span class=\"string\">&#x27;name&#x27;</span>:[<span class=\"string\">&#x27;conv1_1&#x27;</span>,<span class=\"string\">&#x27;conv1_2&#x27;</span>,<span class=\"string\">&#x27;pool1&#x27;</span>,<span class=\"string\">&#x27;conv2_1&#x27;</span>,<span class=\"string\">&#x27;conv2_2&#x27;</span>,<span class=\"string\">&#x27;pool2&#x27;</span>,<span class=\"string\">&#x27;conv3_1&#x27;</span>,<span class=\"string\">&#x27;conv3_2&#x27;</span>,</span><br><span class=\"line\">                         <span class=\"string\">&#x27;conv3_3&#x27;</span>, <span class=\"string\">&#x27;pool3&#x27;</span>,<span class=\"string\">&#x27;conv4_1&#x27;</span>,<span class=\"string\">&#x27;conv4_2&#x27;</span>,<span class=\"string\">&#x27;conv4_3&#x27;</span>,<span class=\"string\">&#x27;pool4&#x27;</span>,<span class=\"string\">&#x27;conv5_1&#x27;</span>,<span class=\"string\">&#x27;conv5_2&#x27;</span>,<span class=\"string\">&#x27;conv5_3&#x27;</span>,<span class=\"string\">&#x27;pool5&#x27;</span>]&#125;,</span><br><span class=\"line\">       <span class=\"string\">&#x27;zf-5&#x27;</span>:&#123;<span class=\"string\">&#x27;net&#x27;</span>: [[<span class=\"number\">7</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>],[<span class=\"number\">5</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>],[<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>]],</span><br><span class=\"line\">               <span class=\"string\">&#x27;name&#x27;</span>: [<span class=\"string\">&#x27;conv1&#x27;</span>,<span class=\"string\">&#x27;pool1&#x27;</span>,<span class=\"string\">&#x27;conv2&#x27;</span>,<span class=\"string\">&#x27;pool2&#x27;</span>,<span class=\"string\">&#x27;conv3&#x27;</span>,<span class=\"string\">&#x27;conv4&#x27;</span>,<span class=\"string\">&#x27;conv5&#x27;</span>]&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#[3,1,1] stands for filter_size, stride, padding</span></span><br><span class=\"line\"></span><br><span class=\"line\">imsize = <span class=\"number\">224</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">outFromIn</span>(<span class=\"params\">isz, net, layernum</span>):</span><br><span class=\"line\">    totstride = <span class=\"number\">1</span></span><br><span class=\"line\">    insize = isz</span><br><span class=\"line\">    <span class=\"keyword\">for</span> layer <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(layernum):</span><br><span class=\"line\">        fsize, stride, pad = net[layer]</span><br><span class=\"line\">        outsize = (insize - fsize + <span class=\"number\">2</span>*pad) / stride + <span class=\"number\">1</span></span><br><span class=\"line\">        insize = outsize</span><br><span class=\"line\">        totstride = totstride * stride</span><br><span class=\"line\">    <span class=\"keyword\">return</span> outsize, totstride</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inFromOut</span>(<span class=\"params\">net, layernum</span>):</span><br><span class=\"line\">    RF = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> layer <span class=\"keyword\">in</span> <span class=\"built_in\">reversed</span>(<span class=\"built_in\">range</span>(layernum)):</span><br><span class=\"line\">        fsize, stride, pad = net[layer]</span><br><span class=\"line\">        RF = ((RF -<span class=\"number\">1</span>)* stride) + fsize</span><br><span class=\"line\">    <span class=\"keyword\">return</span> RF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;layer output sizes given image = %dx%d&quot;</span> % (imsize, imsize)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> net <span class=\"keyword\">in</span> net_struct.keys():</span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&#x27;************net structrue name is %s**************&#x27;</span>% net</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(net_struct[net][<span class=\"string\">&#x27;net&#x27;</span>])):</span><br><span class=\"line\">            p = outFromIn(imsize,net_struct[net][<span class=\"string\">&#x27;net&#x27;</span>], i+<span class=\"number\">1</span>)</span><br><span class=\"line\">            rf = inFromOut(net_struct[net][<span class=\"string\">&#x27;net&#x27;</span>], i+<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span> <span class=\"string\">&quot;Layer Name = %s, Output size = %3d, Stride = % 3d, RF size = %3d&quot;</span> % (net_struct[net][<span class=\"string\">&#x27;name&#x27;</span>][i], p[<span class=\"number\">0</span>], p[<span class=\"number\">1</span>], rf)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">layer output sizes given image = 224x224</span><br><span class=\"line\">************net structrue name is vgg16**************</span><br><span class=\"line\">Layer Name = conv1_1, Output size = 224, Stride =   1, RF size =   3</span><br><span class=\"line\">Layer Name = conv1_2, Output size = 224, Stride =   1, RF size =   5</span><br><span class=\"line\">Layer Name = pool1, Output size = 112, Stride =   2, RF size =   6</span><br><span class=\"line\">Layer Name = conv2_1, Output size = 112, Stride =   2, RF size =  10</span><br><span class=\"line\">Layer Name = conv2_2, Output size = 112, Stride =   2, RF size =  14</span><br><span class=\"line\">Layer Name = pool2, Output size =  56, Stride =   4, RF size =  16</span><br><span class=\"line\">Layer Name = conv3_1, Output size =  56, Stride =   4, RF size =  24</span><br><span class=\"line\">Layer Name = conv3_2, Output size =  56, Stride =   4, RF size =  32</span><br><span class=\"line\">Layer Name = conv3_3, Output size =  56, Stride =   4, RF size =  40</span><br><span class=\"line\">Layer Name = pool3, Output size =  28, Stride =   8, RF size =  44</span><br><span class=\"line\">Layer Name = conv4_1, Output size =  28, Stride =   8, RF size =  60</span><br><span class=\"line\">Layer Name = conv4_2, Output size =  28, Stride =   8, RF size =  76</span><br><span class=\"line\">Layer Name = conv4_3, Output size =  28, Stride =   8, RF size =  92</span><br><span class=\"line\">Layer Name = pool4, Output size =  14, Stride =  16, RF size = 100</span><br><span class=\"line\">Layer Name = conv5_1, Output size =  14, Stride =  16, RF size = 132</span><br><span class=\"line\">Layer Name = conv5_2, Output size =  14, Stride =  16, RF size = 164</span><br><span class=\"line\">Layer Name = conv5_3, Output size =  14, Stride =  16, RF size = 196</span><br><span class=\"line\">Layer Name = pool5, Output size =   7, Stride =  32, RF size = 212</span><br><span class=\"line\">************net structrue name is zf-5**************</span><br><span class=\"line\">Layer Name = conv1, Output size = 112, Stride =   2, RF size =   7</span><br><span class=\"line\">Layer Name = pool1, Output size =  56, Stride =   4, RF size =  11</span><br><span class=\"line\">Layer Name = conv2, Output size =  28, Stride =   8, RF size =  27</span><br><span class=\"line\">Layer Name = pool2, Output size =  14, Stride =  16, RF size =  43</span><br><span class=\"line\">Layer Name = conv3, Output size =  14, Stride =  16, RF size =  75</span><br><span class=\"line\">Layer Name = conv4, Output size =  14, Stride =  16, RF size = 107</span><br><span class=\"line\">Layer Name = conv5, Output size =  14, Stride =  16, RF size = 139</span><br><span class=\"line\">************net structrue name is alexnet**************</span><br><span class=\"line\">Layer Name = conv1, Output size =  54, Stride =   4, RF size =  11</span><br><span class=\"line\">Layer Name = pool1, Output size =  26, Stride =   8, RF size =  19</span><br><span class=\"line\">Layer Name = conv2, Output size =  26, Stride =   8, RF size =  51</span><br><span class=\"line\">Layer Name = pool2, Output size =  12, Stride =  16, RF size =  67</span><br><span class=\"line\">Layer Name = conv3, Output size =  12, Stride =  16, RF size =  99</span><br><span class=\"line\">Layer Name = conv4, Output size =  12, Stride =  16, RF size = 131</span><br><span class=\"line\">Layer Name = conv5, Output size =  12, Stride =  16, RF size = 163</span><br><span class=\"line\">Layer Name = pool5, Output size =   5, Stride =  32, RF size = 195</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<ul>\n<li>feature map的计算公式为<code>outsize = (insize - fsize + 2*pad) / stride + 1</code></li>\n<li>stride 的计算公式为<code>totstride = totstride * stride</code>，这两个公式都是从前往后算</li>\n<li>receptive field <code>RF = ((RF -1)* stride) + fsize</code>，这个要从后往前算</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"></span><br><span class=\"line\">net_struct = &#123;<span class=\"string\">&#x27;alexnet&#x27;</span>: &#123;<span class=\"string\">&#x27;net&#x27;</span>:[[<span class=\"number\">11</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>],[<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>],[<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>]],</span><br><span class=\"line\">                   <span class=\"string\">&#x27;name&#x27;</span>:[<span class=\"string\">&#x27;conv1&#x27;</span>,<span class=\"string\">&#x27;pool1&#x27;</span>,<span class=\"string\">&#x27;conv2&#x27;</span>,<span class=\"string\">&#x27;pool2&#x27;</span>,<span class=\"string\">&#x27;conv3&#x27;</span>,<span class=\"string\">&#x27;conv4&#x27;</span>,<span class=\"string\">&#x27;conv5&#x27;</span>,<span class=\"string\">&#x27;pool5&#x27;</span>]&#125;,</span><br><span class=\"line\">       <span class=\"string\">&#x27;vgg16&#x27;</span>: &#123;<span class=\"string\">&#x27;net&#x27;</span>:[[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],</span><br><span class=\"line\">                        [<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>]],</span><br><span class=\"line\">                 <span class=\"string\">&#x27;name&#x27;</span>:[<span class=\"string\">&#x27;conv1_1&#x27;</span>,<span class=\"string\">&#x27;conv1_2&#x27;</span>,<span class=\"string\">&#x27;pool1&#x27;</span>,<span class=\"string\">&#x27;conv2_1&#x27;</span>,<span class=\"string\">&#x27;conv2_2&#x27;</span>,<span class=\"string\">&#x27;pool2&#x27;</span>,<span class=\"string\">&#x27;conv3_1&#x27;</span>,<span class=\"string\">&#x27;conv3_2&#x27;</span>,</span><br><span class=\"line\">                         <span class=\"string\">&#x27;conv3_3&#x27;</span>, <span class=\"string\">&#x27;pool3&#x27;</span>,<span class=\"string\">&#x27;conv4_1&#x27;</span>,<span class=\"string\">&#x27;conv4_2&#x27;</span>,<span class=\"string\">&#x27;conv4_3&#x27;</span>,<span class=\"string\">&#x27;pool4&#x27;</span>,<span class=\"string\">&#x27;conv5_1&#x27;</span>,<span class=\"string\">&#x27;conv5_2&#x27;</span>,<span class=\"string\">&#x27;conv5_3&#x27;</span>,<span class=\"string\">&#x27;pool5&#x27;</span>]&#125;,</span><br><span class=\"line\">       <span class=\"string\">&#x27;zf-5&#x27;</span>:&#123;<span class=\"string\">&#x27;net&#x27;</span>: [[<span class=\"number\">7</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>],[<span class=\"number\">5</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>],[<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>]],</span><br><span class=\"line\">               <span class=\"string\">&#x27;name&#x27;</span>: [<span class=\"string\">&#x27;conv1&#x27;</span>,<span class=\"string\">&#x27;pool1&#x27;</span>,<span class=\"string\">&#x27;conv2&#x27;</span>,<span class=\"string\">&#x27;pool2&#x27;</span>,<span class=\"string\">&#x27;conv3&#x27;</span>,<span class=\"string\">&#x27;conv4&#x27;</span>,<span class=\"string\">&#x27;conv5&#x27;</span>]&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#[3,1,1] stands for filter_size, stride, padding</span></span><br><span class=\"line\"></span><br><span class=\"line\">imsize = <span class=\"number\">224</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">outFromIn</span>(<span class=\"params\">isz, net, layernum</span>):</span><br><span class=\"line\">    totstride = <span class=\"number\">1</span></span><br><span class=\"line\">    insize = isz</span><br><span class=\"line\">    <span class=\"keyword\">for</span> layer <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(layernum):</span><br><span class=\"line\">        fsize, stride, pad = net[layer]</span><br><span class=\"line\">        outsize = (insize - fsize + <span class=\"number\">2</span>*pad) / stride + <span class=\"number\">1</span></span><br><span class=\"line\">        insize = outsize</span><br><span class=\"line\">        totstride = totstride * stride</span><br><span class=\"line\">    <span class=\"keyword\">return</span> outsize, totstride</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inFromOut</span>(<span class=\"params\">net, layernum</span>):</span><br><span class=\"line\">    RF = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> layer <span class=\"keyword\">in</span> <span class=\"built_in\">reversed</span>(<span class=\"built_in\">range</span>(layernum)):</span><br><span class=\"line\">        fsize, stride, pad = net[layer]</span><br><span class=\"line\">        RF = ((RF -<span class=\"number\">1</span>)* stride) + fsize</span><br><span class=\"line\">    <span class=\"keyword\">return</span> RF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;layer output sizes given image = %dx%d&quot;</span> % (imsize, imsize)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> net <span class=\"keyword\">in</span> net_struct.keys():</span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&#x27;************net structrue name is %s**************&#x27;</span>% net</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(net_struct[net][<span class=\"string\">&#x27;net&#x27;</span>])):</span><br><span class=\"line\">            p = outFromIn(imsize,net_struct[net][<span class=\"string\">&#x27;net&#x27;</span>], i+<span class=\"number\">1</span>)</span><br><span class=\"line\">            rf = inFromOut(net_struct[net][<span class=\"string\">&#x27;net&#x27;</span>], i+<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span> <span class=\"string\">&quot;Layer Name = %s, Output size = %3d, Stride = % 3d, RF size = %3d&quot;</span> % (net_struct[net][<span class=\"string\">&#x27;name&#x27;</span>][i], p[<span class=\"number\">0</span>], p[<span class=\"number\">1</span>], rf)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">layer output sizes given image = 224x224</span><br><span class=\"line\">************net structrue name is vgg16**************</span><br><span class=\"line\">Layer Name = conv1_1, Output size = 224, Stride =   1, RF size =   3</span><br><span class=\"line\">Layer Name = conv1_2, Output size = 224, Stride =   1, RF size =   5</span><br><span class=\"line\">Layer Name = pool1, Output size = 112, Stride =   2, RF size =   6</span><br><span class=\"line\">Layer Name = conv2_1, Output size = 112, Stride =   2, RF size =  10</span><br><span class=\"line\">Layer Name = conv2_2, Output size = 112, Stride =   2, RF size =  14</span><br><span class=\"line\">Layer Name = pool2, Output size =  56, Stride =   4, RF size =  16</span><br><span class=\"line\">Layer Name = conv3_1, Output size =  56, Stride =   4, RF size =  24</span><br><span class=\"line\">Layer Name = conv3_2, Output size =  56, Stride =   4, RF size =  32</span><br><span class=\"line\">Layer Name = conv3_3, Output size =  56, Stride =   4, RF size =  40</span><br><span class=\"line\">Layer Name = pool3, Output size =  28, Stride =   8, RF size =  44</span><br><span class=\"line\">Layer Name = conv4_1, Output size =  28, Stride =   8, RF size =  60</span><br><span class=\"line\">Layer Name = conv4_2, Output size =  28, Stride =   8, RF size =  76</span><br><span class=\"line\">Layer Name = conv4_3, Output size =  28, Stride =   8, RF size =  92</span><br><span class=\"line\">Layer Name = pool4, Output size =  14, Stride =  16, RF size = 100</span><br><span class=\"line\">Layer Name = conv5_1, Output size =  14, Stride =  16, RF size = 132</span><br><span class=\"line\">Layer Name = conv5_2, Output size =  14, Stride =  16, RF size = 164</span><br><span class=\"line\">Layer Name = conv5_3, Output size =  14, Stride =  16, RF size = 196</span><br><span class=\"line\">Layer Name = pool5, Output size =   7, Stride =  32, RF size = 212</span><br><span class=\"line\">************net structrue name is zf-5**************</span><br><span class=\"line\">Layer Name = conv1, Output size = 112, Stride =   2, RF size =   7</span><br><span class=\"line\">Layer Name = pool1, Output size =  56, Stride =   4, RF size =  11</span><br><span class=\"line\">Layer Name = conv2, Output size =  28, Stride =   8, RF size =  27</span><br><span class=\"line\">Layer Name = pool2, Output size =  14, Stride =  16, RF size =  43</span><br><span class=\"line\">Layer Name = conv3, Output size =  14, Stride =  16, RF size =  75</span><br><span class=\"line\">Layer Name = conv4, Output size =  14, Stride =  16, RF size = 107</span><br><span class=\"line\">Layer Name = conv5, Output size =  14, Stride =  16, RF size = 139</span><br><span class=\"line\">************net structrue name is alexnet**************</span><br><span class=\"line\">Layer Name = conv1, Output size =  54, Stride =   4, RF size =  11</span><br><span class=\"line\">Layer Name = pool1, Output size =  26, Stride =   8, RF size =  19</span><br><span class=\"line\">Layer Name = conv2, Output size =  26, Stride =   8, RF size =  51</span><br><span class=\"line\">Layer Name = pool2, Output size =  12, Stride =  16, RF size =  67</span><br><span class=\"line\">Layer Name = conv3, Output size =  12, Stride =  16, RF size =  99</span><br><span class=\"line\">Layer Name = conv4, Output size =  12, Stride =  16, RF size = 131</span><br><span class=\"line\">Layer Name = conv5, Output size =  12, Stride =  16, RF size = 163</span><br><span class=\"line\">Layer Name = pool5, Output size =   5, Stride =  32, RF size = 195</span><br></pre></td></tr></table></figure>\n"},{"title":"火车上写的博客","typora-root-url":"../../source","date":"2018-02-04T08:11:19.000Z","_content":"### 0. 关于火车，关于回家\n\n这篇是在火车上写的，回家坐火车会有种奇妙的感觉，大概一学期也就这么一次，你不会为挥霍时间而慌张，反而是时间越快越高兴，大概是家的魔力吧。\n\n所以这篇思路~~可能~~会有点跳，想到哪写到哪吧。\n\n### 1. 关于博客，关于js\n\n之前我一直不愿意用hexo写博客，几个原因，\n1. 这种静态的博客，一点逼格也没有，连个留言都要第三方插件解决\n2. 没有博客对编辑界面，只能在某个特定对电脑上写，然后再推上去\n3. 我不会node\n\n然而最终还是意外地向hexo妥协了，还是那么几个原因，\n1. 好像我的博客不会有人注册或留言的，静态也够用\n2. 我已经人机合一了。。。\n3. 我对python的热爱被flask终结掉了，我想换个语言了\n4. 想通了一个道理，不拥抱js/css，网站一定会很丑。。。\n\n所以还是要感谢FJ，在我下定好决心学node又不知道做什么的时候，FJ说要有小程序，~~于是就有了小程序~~于是我就像突然看到了灯塔一样，也突然有了动力。\n\n其实也是挺奇怪的事，我也早早想到过小程序，但是呢，所有自己想到的项目，都会在心里自动贴一个标签，练手。然后练手两个字，就完全限制了这个项目的意义，练到手熟之后呢，大概就不了了之了。FJ的作用，大概只是说了句小程序，然后提了一堆我看来奇奇怪怪的需求。但也是因此，这个本来应该是练手的项目，它的意义就足以支撑我认真做下去了。\n\n所以啊，我还是一个靠意义活着的生物，不管真假。\n\n### 2. 关于圣经旧约\n\n我是这学期开始看圣经的，当然正如你们所见的，我是个温和的共产主义者。看圣经完全是出于好奇心，主要是《西部世界》带起来的。\n\n故事性不强而且很散，为了怕我看了就忘了，先把看了的部分记下来。\n\n如有错误或冒犯，烦请指正。\n\n- 上帝创世，嗯。\n- 然后就是伊甸园里，撒旦化身成蛇，引诱夏娃亚当吃了禁果，然后他们知羞耻。上帝惩罚蛇用肚子走路，女人见蛇就踩，蛇见女人就咬脚后跟，男人需要劳作才能收获果实，然后把亚当夏娃逐出伊甸园。\n- 亚当夏娃大儿子该隐种地，二儿子亚伯放牧。该隐献给上帝谷物，亚伯献给上帝羊羔，上帝喜欢亚伯的礼物，该隐妒嫉，遂杀弟。\n- 后来世风日下，god has seen too much evil，上帝后悔造了人，于是计划大洪水大清洗一下。\n- 让诺亚造船，然后每个动物带一对。水落之后，诺亚放出鸽子，鸽子衔橄榄枝返回，诺亚于是知道水完全退了。上帝以彩虹立誓，不在用洪水灭世。\n- 上帝让诺亚的长孙亚伯拉罕带着族人去往应许之地迦南。但亚伯拉罕的侄子罗德，执意去往索多玛。索多玛后被周围国家所灭，罗德通遭罪，亚伯拉罕于是去解救。\n- 亚伯拉罕妻子不会生孩子，两个人急了，于是找婢女夏甲生了孩子，取名实马里。后上帝赐子亚伯拉罕，并取名为以撒。\n- 上帝说索多玛恶贯满盈，要毁灭索多玛。亚伯拉罕恳求，上帝答应只要索多玛能有十个好人，就放过这里。前来考察的两个天使遇上罗德，罗德招待他们，但索多玛的全城老幼却要求罗德交出客人。天使让罗德一家逃难，然后毁灭了索多玛。罗德妻子在逃跑时，回头看，变成盐柱。\n- 上帝考验亚伯拉罕，亚拿儿子献祭，上帝及时制止，并送了只羊羔。\n- 以撒母亲帮儿子从她的族人中，选取了妻子利百加。\n- 利百加也不能生，于是上帝让她怀上了双胞胎，分别是以扫和雅各。雅各骗取了哥哥以扫的长子权，骗取了父亲本应该给以扫的祝福。以扫恨之入骨，雅各逃往舅舅拉班家。\n- 拉班有两个女儿，小女儿好看。雅各给舅舅放羊，舅答应七年之后把好看的小女儿嫁给雅各。七年之后，过完新婚之夜，雅各发现嫁给她的时大女儿。因为按照当地习俗，妹妹不能比姐姐先嫁。于是雅各又答应给拉班放七年羊，然后和妹妹结婚。\n- 婚后雅各只喜欢妹妹，冷落姐姐，于是上帝让姐姐怀孕。反正后来姐妹互相争宠，给雅各生了一堆孩子。雅各放羊放着放着就变得很富有，拉班及其子妒嫉，于是上帝让雅各回到故乡。\n- 好长好啰嗦，后面慢慢更。\n","source":"_posts/老子在火车上写博客.md","raw":"---\ntitle: 火车上写的博客\ntypora-root-url: ../../source\ndate: 2018-02-04 16:11:19\n---\n### 0. 关于火车，关于回家\n\n这篇是在火车上写的，回家坐火车会有种奇妙的感觉，大概一学期也就这么一次，你不会为挥霍时间而慌张，反而是时间越快越高兴，大概是家的魔力吧。\n\n所以这篇思路~~可能~~会有点跳，想到哪写到哪吧。\n\n### 1. 关于博客，关于js\n\n之前我一直不愿意用hexo写博客，几个原因，\n1. 这种静态的博客，一点逼格也没有，连个留言都要第三方插件解决\n2. 没有博客对编辑界面，只能在某个特定对电脑上写，然后再推上去\n3. 我不会node\n\n然而最终还是意外地向hexo妥协了，还是那么几个原因，\n1. 好像我的博客不会有人注册或留言的，静态也够用\n2. 我已经人机合一了。。。\n3. 我对python的热爱被flask终结掉了，我想换个语言了\n4. 想通了一个道理，不拥抱js/css，网站一定会很丑。。。\n\n所以还是要感谢FJ，在我下定好决心学node又不知道做什么的时候，FJ说要有小程序，~~于是就有了小程序~~于是我就像突然看到了灯塔一样，也突然有了动力。\n\n其实也是挺奇怪的事，我也早早想到过小程序，但是呢，所有自己想到的项目，都会在心里自动贴一个标签，练手。然后练手两个字，就完全限制了这个项目的意义，练到手熟之后呢，大概就不了了之了。FJ的作用，大概只是说了句小程序，然后提了一堆我看来奇奇怪怪的需求。但也是因此，这个本来应该是练手的项目，它的意义就足以支撑我认真做下去了。\n\n所以啊，我还是一个靠意义活着的生物，不管真假。\n\n### 2. 关于圣经旧约\n\n我是这学期开始看圣经的，当然正如你们所见的，我是个温和的共产主义者。看圣经完全是出于好奇心，主要是《西部世界》带起来的。\n\n故事性不强而且很散，为了怕我看了就忘了，先把看了的部分记下来。\n\n如有错误或冒犯，烦请指正。\n\n- 上帝创世，嗯。\n- 然后就是伊甸园里，撒旦化身成蛇，引诱夏娃亚当吃了禁果，然后他们知羞耻。上帝惩罚蛇用肚子走路，女人见蛇就踩，蛇见女人就咬脚后跟，男人需要劳作才能收获果实，然后把亚当夏娃逐出伊甸园。\n- 亚当夏娃大儿子该隐种地，二儿子亚伯放牧。该隐献给上帝谷物，亚伯献给上帝羊羔，上帝喜欢亚伯的礼物，该隐妒嫉，遂杀弟。\n- 后来世风日下，god has seen too much evil，上帝后悔造了人，于是计划大洪水大清洗一下。\n- 让诺亚造船，然后每个动物带一对。水落之后，诺亚放出鸽子，鸽子衔橄榄枝返回，诺亚于是知道水完全退了。上帝以彩虹立誓，不在用洪水灭世。\n- 上帝让诺亚的长孙亚伯拉罕带着族人去往应许之地迦南。但亚伯拉罕的侄子罗德，执意去往索多玛。索多玛后被周围国家所灭，罗德通遭罪，亚伯拉罕于是去解救。\n- 亚伯拉罕妻子不会生孩子，两个人急了，于是找婢女夏甲生了孩子，取名实马里。后上帝赐子亚伯拉罕，并取名为以撒。\n- 上帝说索多玛恶贯满盈，要毁灭索多玛。亚伯拉罕恳求，上帝答应只要索多玛能有十个好人，就放过这里。前来考察的两个天使遇上罗德，罗德招待他们，但索多玛的全城老幼却要求罗德交出客人。天使让罗德一家逃难，然后毁灭了索多玛。罗德妻子在逃跑时，回头看，变成盐柱。\n- 上帝考验亚伯拉罕，亚拿儿子献祭，上帝及时制止，并送了只羊羔。\n- 以撒母亲帮儿子从她的族人中，选取了妻子利百加。\n- 利百加也不能生，于是上帝让她怀上了双胞胎，分别是以扫和雅各。雅各骗取了哥哥以扫的长子权，骗取了父亲本应该给以扫的祝福。以扫恨之入骨，雅各逃往舅舅拉班家。\n- 拉班有两个女儿，小女儿好看。雅各给舅舅放羊，舅答应七年之后把好看的小女儿嫁给雅各。七年之后，过完新婚之夜，雅各发现嫁给她的时大女儿。因为按照当地习俗，妹妹不能比姐姐先嫁。于是雅各又答应给拉班放七年羊，然后和妹妹结婚。\n- 婚后雅各只喜欢妹妹，冷落姐姐，于是上帝让姐姐怀孕。反正后来姐妹互相争宠，给雅各生了一堆孩子。雅各放羊放着放着就变得很富有，拉班及其子妒嫉，于是上帝让雅各回到故乡。\n- 好长好啰嗦，后面慢慢更。\n","slug":"老子在火车上写博客","published":1,"updated":"2023-11-05T11:42:33.906Z","comments":1,"layout":"post","photos":[],"_id":"clolf0lid005gs2kz8tsjccwh","content":"<h3 id=\"0-关于火车，关于回家\"><a href=\"#0-关于火车，关于回家\" class=\"headerlink\" title=\"0. 关于火车，关于回家\"></a>0. 关于火车，关于回家</h3><p>这篇是在火车上写的，回家坐火车会有种奇妙的感觉，大概一学期也就这么一次，你不会为挥霍时间而慌张，反而是时间越快越高兴，大概是家的魔力吧。</p>\n<p>所以这篇思路<del>可能</del>会有点跳，想到哪写到哪吧。</p>\n<h3 id=\"1-关于博客，关于js\"><a href=\"#1-关于博客，关于js\" class=\"headerlink\" title=\"1. 关于博客，关于js\"></a>1. 关于博客，关于js</h3><p>之前我一直不愿意用hexo写博客，几个原因，</p>\n<ol>\n<li>这种静态的博客，一点逼格也没有，连个留言都要第三方插件解决</li>\n<li>没有博客对编辑界面，只能在某个特定对电脑上写，然后再推上去</li>\n<li>我不会node</li>\n</ol>\n<p>然而最终还是意外地向hexo妥协了，还是那么几个原因，</p>\n<ol>\n<li>好像我的博客不会有人注册或留言的，静态也够用</li>\n<li>我已经人机合一了。。。</li>\n<li>我对python的热爱被flask终结掉了，我想换个语言了</li>\n<li>想通了一个道理，不拥抱js&#x2F;css，网站一定会很丑。。。</li>\n</ol>\n<p>所以还是要感谢FJ，在我下定好决心学node又不知道做什么的时候，FJ说要有小程序，<del>于是就有了小程序</del>于是我就像突然看到了灯塔一样，也突然有了动力。</p>\n<p>其实也是挺奇怪的事，我也早早想到过小程序，但是呢，所有自己想到的项目，都会在心里自动贴一个标签，练手。然后练手两个字，就完全限制了这个项目的意义，练到手熟之后呢，大概就不了了之了。FJ的作用，大概只是说了句小程序，然后提了一堆我看来奇奇怪怪的需求。但也是因此，这个本来应该是练手的项目，它的意义就足以支撑我认真做下去了。</p>\n<p>所以啊，我还是一个靠意义活着的生物，不管真假。</p>\n<h3 id=\"2-关于圣经旧约\"><a href=\"#2-关于圣经旧约\" class=\"headerlink\" title=\"2. 关于圣经旧约\"></a>2. 关于圣经旧约</h3><p>我是这学期开始看圣经的，当然正如你们所见的，我是个温和的共产主义者。看圣经完全是出于好奇心，主要是《西部世界》带起来的。</p>\n<p>故事性不强而且很散，为了怕我看了就忘了，先把看了的部分记下来。</p>\n<p>如有错误或冒犯，烦请指正。</p>\n<ul>\n<li>上帝创世，嗯。</li>\n<li>然后就是伊甸园里，撒旦化身成蛇，引诱夏娃亚当吃了禁果，然后他们知羞耻。上帝惩罚蛇用肚子走路，女人见蛇就踩，蛇见女人就咬脚后跟，男人需要劳作才能收获果实，然后把亚当夏娃逐出伊甸园。</li>\n<li>亚当夏娃大儿子该隐种地，二儿子亚伯放牧。该隐献给上帝谷物，亚伯献给上帝羊羔，上帝喜欢亚伯的礼物，该隐妒嫉，遂杀弟。</li>\n<li>后来世风日下，god has seen too much evil，上帝后悔造了人，于是计划大洪水大清洗一下。</li>\n<li>让诺亚造船，然后每个动物带一对。水落之后，诺亚放出鸽子，鸽子衔橄榄枝返回，诺亚于是知道水完全退了。上帝以彩虹立誓，不在用洪水灭世。</li>\n<li>上帝让诺亚的长孙亚伯拉罕带着族人去往应许之地迦南。但亚伯拉罕的侄子罗德，执意去往索多玛。索多玛后被周围国家所灭，罗德通遭罪，亚伯拉罕于是去解救。</li>\n<li>亚伯拉罕妻子不会生孩子，两个人急了，于是找婢女夏甲生了孩子，取名实马里。后上帝赐子亚伯拉罕，并取名为以撒。</li>\n<li>上帝说索多玛恶贯满盈，要毁灭索多玛。亚伯拉罕恳求，上帝答应只要索多玛能有十个好人，就放过这里。前来考察的两个天使遇上罗德，罗德招待他们，但索多玛的全城老幼却要求罗德交出客人。天使让罗德一家逃难，然后毁灭了索多玛。罗德妻子在逃跑时，回头看，变成盐柱。</li>\n<li>上帝考验亚伯拉罕，亚拿儿子献祭，上帝及时制止，并送了只羊羔。</li>\n<li>以撒母亲帮儿子从她的族人中，选取了妻子利百加。</li>\n<li>利百加也不能生，于是上帝让她怀上了双胞胎，分别是以扫和雅各。雅各骗取了哥哥以扫的长子权，骗取了父亲本应该给以扫的祝福。以扫恨之入骨，雅各逃往舅舅拉班家。</li>\n<li>拉班有两个女儿，小女儿好看。雅各给舅舅放羊，舅答应七年之后把好看的小女儿嫁给雅各。七年之后，过完新婚之夜，雅各发现嫁给她的时大女儿。因为按照当地习俗，妹妹不能比姐姐先嫁。于是雅各又答应给拉班放七年羊，然后和妹妹结婚。</li>\n<li>婚后雅各只喜欢妹妹，冷落姐姐，于是上帝让姐姐怀孕。反正后来姐妹互相争宠，给雅各生了一堆孩子。雅各放羊放着放着就变得很富有，拉班及其子妒嫉，于是上帝让雅各回到故乡。</li>\n<li>好长好啰嗦，后面慢慢更。</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"0-关于火车，关于回家\"><a href=\"#0-关于火车，关于回家\" class=\"headerlink\" title=\"0. 关于火车，关于回家\"></a>0. 关于火车，关于回家</h3><p>这篇是在火车上写的，回家坐火车会有种奇妙的感觉，大概一学期也就这么一次，你不会为挥霍时间而慌张，反而是时间越快越高兴，大概是家的魔力吧。</p>\n<p>所以这篇思路<del>可能</del>会有点跳，想到哪写到哪吧。</p>\n<h3 id=\"1-关于博客，关于js\"><a href=\"#1-关于博客，关于js\" class=\"headerlink\" title=\"1. 关于博客，关于js\"></a>1. 关于博客，关于js</h3><p>之前我一直不愿意用hexo写博客，几个原因，</p>\n<ol>\n<li>这种静态的博客，一点逼格也没有，连个留言都要第三方插件解决</li>\n<li>没有博客对编辑界面，只能在某个特定对电脑上写，然后再推上去</li>\n<li>我不会node</li>\n</ol>\n<p>然而最终还是意外地向hexo妥协了，还是那么几个原因，</p>\n<ol>\n<li>好像我的博客不会有人注册或留言的，静态也够用</li>\n<li>我已经人机合一了。。。</li>\n<li>我对python的热爱被flask终结掉了，我想换个语言了</li>\n<li>想通了一个道理，不拥抱js&#x2F;css，网站一定会很丑。。。</li>\n</ol>\n<p>所以还是要感谢FJ，在我下定好决心学node又不知道做什么的时候，FJ说要有小程序，<del>于是就有了小程序</del>于是我就像突然看到了灯塔一样，也突然有了动力。</p>\n<p>其实也是挺奇怪的事，我也早早想到过小程序，但是呢，所有自己想到的项目，都会在心里自动贴一个标签，练手。然后练手两个字，就完全限制了这个项目的意义，练到手熟之后呢，大概就不了了之了。FJ的作用，大概只是说了句小程序，然后提了一堆我看来奇奇怪怪的需求。但也是因此，这个本来应该是练手的项目，它的意义就足以支撑我认真做下去了。</p>\n<p>所以啊，我还是一个靠意义活着的生物，不管真假。</p>\n<h3 id=\"2-关于圣经旧约\"><a href=\"#2-关于圣经旧约\" class=\"headerlink\" title=\"2. 关于圣经旧约\"></a>2. 关于圣经旧约</h3><p>我是这学期开始看圣经的，当然正如你们所见的，我是个温和的共产主义者。看圣经完全是出于好奇心，主要是《西部世界》带起来的。</p>\n<p>故事性不强而且很散，为了怕我看了就忘了，先把看了的部分记下来。</p>\n<p>如有错误或冒犯，烦请指正。</p>\n<ul>\n<li>上帝创世，嗯。</li>\n<li>然后就是伊甸园里，撒旦化身成蛇，引诱夏娃亚当吃了禁果，然后他们知羞耻。上帝惩罚蛇用肚子走路，女人见蛇就踩，蛇见女人就咬脚后跟，男人需要劳作才能收获果实，然后把亚当夏娃逐出伊甸园。</li>\n<li>亚当夏娃大儿子该隐种地，二儿子亚伯放牧。该隐献给上帝谷物，亚伯献给上帝羊羔，上帝喜欢亚伯的礼物，该隐妒嫉，遂杀弟。</li>\n<li>后来世风日下，god has seen too much evil，上帝后悔造了人，于是计划大洪水大清洗一下。</li>\n<li>让诺亚造船，然后每个动物带一对。水落之后，诺亚放出鸽子，鸽子衔橄榄枝返回，诺亚于是知道水完全退了。上帝以彩虹立誓，不在用洪水灭世。</li>\n<li>上帝让诺亚的长孙亚伯拉罕带着族人去往应许之地迦南。但亚伯拉罕的侄子罗德，执意去往索多玛。索多玛后被周围国家所灭，罗德通遭罪，亚伯拉罕于是去解救。</li>\n<li>亚伯拉罕妻子不会生孩子，两个人急了，于是找婢女夏甲生了孩子，取名实马里。后上帝赐子亚伯拉罕，并取名为以撒。</li>\n<li>上帝说索多玛恶贯满盈，要毁灭索多玛。亚伯拉罕恳求，上帝答应只要索多玛能有十个好人，就放过这里。前来考察的两个天使遇上罗德，罗德招待他们，但索多玛的全城老幼却要求罗德交出客人。天使让罗德一家逃难，然后毁灭了索多玛。罗德妻子在逃跑时，回头看，变成盐柱。</li>\n<li>上帝考验亚伯拉罕，亚拿儿子献祭，上帝及时制止，并送了只羊羔。</li>\n<li>以撒母亲帮儿子从她的族人中，选取了妻子利百加。</li>\n<li>利百加也不能生，于是上帝让她怀上了双胞胎，分别是以扫和雅各。雅各骗取了哥哥以扫的长子权，骗取了父亲本应该给以扫的祝福。以扫恨之入骨，雅各逃往舅舅拉班家。</li>\n<li>拉班有两个女儿，小女儿好看。雅各给舅舅放羊，舅答应七年之后把好看的小女儿嫁给雅各。七年之后，过完新婚之夜，雅各发现嫁给她的时大女儿。因为按照当地习俗，妹妹不能比姐姐先嫁。于是雅各又答应给拉班放七年羊，然后和妹妹结婚。</li>\n<li>婚后雅各只喜欢妹妹，冷落姐姐，于是上帝让姐姐怀孕。反正后来姐妹互相争宠，给雅各生了一堆孩子。雅各放羊放着放着就变得很富有，拉班及其子妒嫉，于是上帝让雅各回到故乡。</li>\n<li>好长好啰嗦，后面慢慢更。</li>\n</ul>\n"},{"title":"贪吃蛇AI","typora-root-url":"../../source","date":"2019-07-15T15:52:35.000Z","_content":"\n用pygame实现的贪吃蛇AI，代码在[这里](https://github.com/zjyfdu/Snake-)\n\n![屏幕快照 2019-07-15 下午11.26.42](/images/屏幕快照 2019-07-15 下午11.26.42.png)\n\n# 使用\n\n```shell\npip3 install requirements.txt\npython3 main-bfs2.py\n```\n\n# 思路\n\n主要是参考这篇 [实现贪吃蛇AI](http://mp.weixin.qq.com/s?__biz=MzA5ODUxOTA5Mg==&mid=211204280&idx=1&sn=4589891ff2ddff98058f44f3e9dd942e&scene=24&srcid=0923YmTbhMIczvNdLDgrgPMz#rd)，原实现在[这里](https://github.com/Hawstein/snake-ai)，主要的思路是下面这个图\n\n主要的思路是派出一条假蛇去探路，假蛇吃完食物还能活着，真蛇才会去吃（假蛇吃完食物怎么样算能活，这个比较难判断，我的改动也主要在这里，后面会说）\n\n```flow\nst=>start: 开始\nop_tmp_sanke=>operation: 一条虚拟的蛇探路\ncond_food=>condition: 能否到食物\ncond_tmp_snake=>condition: 虚蛇和尾巴之间有通路\nop_shortest=>operation: 走离食物最短的路\ncond_tail=>condition: 蛇和尾巴之间有通路\nop_longest=>operation: 走离蛇尾最长的路\ncond_move=>condition: 有可行的路\nop_dead=>operation: 你死了\ne=>end: 结束\n\nst->cond_food\ncond_food(yes)->op_tmp_sanke->cond_tmp_snake\ncond_food(no)->cond_tail\ncond_tmp_snake(yes)->op_shortest\ncond_tmp_snake(no)->cond_tail\ncond_tail(yes)->op_longest\ncond_tail(no)->cond_move\ncond_move(yes)->op_shortest\ncond_move(no)->op_dead->e\n\n```\n\n# 改动\n\n只是做了一些微小的修改\n\n1. 把curses改为pygame，界面好看多了\n2. 加了没有什么卵用的类\n3. 假蛇吃到食物之后，怎么算和尾巴之间有通路？\n   1. 头和尾相邻算没有通路（原方法），比较保守，走到最后经常会循环起来，不敢吃食\n   2. 如果头尾相邻算成有通路，容易在前期就把自己撞死\n   3. 没有解决这个问题，加了个判断，蛇默认是保守的，但如果长时间没有吃到食物，就变激进。从测试结果看解决了原有的问题<del>，虽然不优雅</del>\n\n# 待改进\n\n1. 这个算法调起来像无底洞，我应该不会再改进这个了，感觉要加逻辑判断的地方很多，应该会有更优雅的实现\n2. 当最后蛇很长的时候，蛇走和食物的最短路径是不合理的，因为走最短路径留下的空隙很可能会被填上食物，还需要绕一大圈才能吃到。应该是到最后，蛇直接一排一排地扫，反而是最快的\n\n","source":"_posts/贪吃蛇AI.md","raw":"---\ntitle: 贪吃蛇AI\ntypora-root-url: ../../source\ndate: 2019-07-15 23:52:35\n---\n\n用pygame实现的贪吃蛇AI，代码在[这里](https://github.com/zjyfdu/Snake-)\n\n![屏幕快照 2019-07-15 下午11.26.42](/images/屏幕快照 2019-07-15 下午11.26.42.png)\n\n# 使用\n\n```shell\npip3 install requirements.txt\npython3 main-bfs2.py\n```\n\n# 思路\n\n主要是参考这篇 [实现贪吃蛇AI](http://mp.weixin.qq.com/s?__biz=MzA5ODUxOTA5Mg==&mid=211204280&idx=1&sn=4589891ff2ddff98058f44f3e9dd942e&scene=24&srcid=0923YmTbhMIczvNdLDgrgPMz#rd)，原实现在[这里](https://github.com/Hawstein/snake-ai)，主要的思路是下面这个图\n\n主要的思路是派出一条假蛇去探路，假蛇吃完食物还能活着，真蛇才会去吃（假蛇吃完食物怎么样算能活，这个比较难判断，我的改动也主要在这里，后面会说）\n\n```flow\nst=>start: 开始\nop_tmp_sanke=>operation: 一条虚拟的蛇探路\ncond_food=>condition: 能否到食物\ncond_tmp_snake=>condition: 虚蛇和尾巴之间有通路\nop_shortest=>operation: 走离食物最短的路\ncond_tail=>condition: 蛇和尾巴之间有通路\nop_longest=>operation: 走离蛇尾最长的路\ncond_move=>condition: 有可行的路\nop_dead=>operation: 你死了\ne=>end: 结束\n\nst->cond_food\ncond_food(yes)->op_tmp_sanke->cond_tmp_snake\ncond_food(no)->cond_tail\ncond_tmp_snake(yes)->op_shortest\ncond_tmp_snake(no)->cond_tail\ncond_tail(yes)->op_longest\ncond_tail(no)->cond_move\ncond_move(yes)->op_shortest\ncond_move(no)->op_dead->e\n\n```\n\n# 改动\n\n只是做了一些微小的修改\n\n1. 把curses改为pygame，界面好看多了\n2. 加了没有什么卵用的类\n3. 假蛇吃到食物之后，怎么算和尾巴之间有通路？\n   1. 头和尾相邻算没有通路（原方法），比较保守，走到最后经常会循环起来，不敢吃食\n   2. 如果头尾相邻算成有通路，容易在前期就把自己撞死\n   3. 没有解决这个问题，加了个判断，蛇默认是保守的，但如果长时间没有吃到食物，就变激进。从测试结果看解决了原有的问题<del>，虽然不优雅</del>\n\n# 待改进\n\n1. 这个算法调起来像无底洞，我应该不会再改进这个了，感觉要加逻辑判断的地方很多，应该会有更优雅的实现\n2. 当最后蛇很长的时候，蛇走和食物的最短路径是不合理的，因为走最短路径留下的空隙很可能会被填上食物，还需要绕一大圈才能吃到。应该是到最后，蛇直接一排一排地扫，反而是最快的\n\n","slug":"贪吃蛇AI","published":1,"updated":"2023-11-05T11:42:33.906Z","comments":1,"layout":"post","photos":[],"_id":"clolf0lid005is2kzbdm84568","content":"<p>用pygame实现的贪吃蛇AI，代码在<a href=\"https://github.com/zjyfdu/Snake-\">这里</a></p>\n<p>![屏幕快照 2019-07-15 下午11.26.42](&#x2F;images&#x2F;屏幕快照 2019-07-15 下午11.26.42.png)</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install requirements.txt</span><br><span class=\"line\">python3 main-bfs2.py</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>主要是参考这篇 <a href=\"http://mp.weixin.qq.com/s?__biz=MzA5ODUxOTA5Mg==&mid=211204280&idx=1&sn=4589891ff2ddff98058f44f3e9dd942e&scene=24&srcid=0923YmTbhMIczvNdLDgrgPMz#rd\">实现贪吃蛇AI</a>，原实现在<a href=\"https://github.com/Hawstein/snake-ai\">这里</a>，主要的思路是下面这个图</p>\n<p>主要的思路是派出一条假蛇去探路，假蛇吃完食物还能活着，真蛇才会去吃（假蛇吃完食物怎么样算能活，这个比较难判断，我的改动也主要在这里，后面会说）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">st=&gt;start: 开始</span><br><span class=\"line\">op_tmp_sanke=&gt;operation: 一条虚拟的蛇探路</span><br><span class=\"line\">cond_food=&gt;condition: 能否到食物</span><br><span class=\"line\">cond_tmp_snake=&gt;condition: 虚蛇和尾巴之间有通路</span><br><span class=\"line\">op_shortest=&gt;operation: 走离食物最短的路</span><br><span class=\"line\">cond_tail=&gt;condition: 蛇和尾巴之间有通路</span><br><span class=\"line\">op_longest=&gt;operation: 走离蛇尾最长的路</span><br><span class=\"line\">cond_move=&gt;condition: 有可行的路</span><br><span class=\"line\">op_dead=&gt;operation: 你死了</span><br><span class=\"line\">e=&gt;end: 结束</span><br><span class=\"line\"></span><br><span class=\"line\">st-&gt;cond_food</span><br><span class=\"line\">cond_food(yes)-&gt;op_tmp_sanke-&gt;cond_tmp_snake</span><br><span class=\"line\">cond_food(no)-&gt;cond_tail</span><br><span class=\"line\">cond_tmp_snake(yes)-&gt;op_shortest</span><br><span class=\"line\">cond_tmp_snake(no)-&gt;cond_tail</span><br><span class=\"line\">cond_tail(yes)-&gt;op_longest</span><br><span class=\"line\">cond_tail(no)-&gt;cond_move</span><br><span class=\"line\">cond_move(yes)-&gt;op_shortest</span><br><span class=\"line\">cond_move(no)-&gt;op_dead-&gt;e</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"改动\"><a href=\"#改动\" class=\"headerlink\" title=\"改动\"></a>改动</h1><p>只是做了一些微小的修改</p>\n<ol>\n<li>把curses改为pygame，界面好看多了</li>\n<li>加了没有什么卵用的类</li>\n<li>假蛇吃到食物之后，怎么算和尾巴之间有通路？<ol>\n<li>头和尾相邻算没有通路（原方法），比较保守，走到最后经常会循环起来，不敢吃食</li>\n<li>如果头尾相邻算成有通路，容易在前期就把自己撞死</li>\n<li>没有解决这个问题，加了个判断，蛇默认是保守的，但如果长时间没有吃到食物，就变激进。从测试结果看解决了原有的问题<del>，虽然不优雅</del></li>\n</ol>\n</li>\n</ol>\n<h1 id=\"待改进\"><a href=\"#待改进\" class=\"headerlink\" title=\"待改进\"></a>待改进</h1><ol>\n<li>这个算法调起来像无底洞，我应该不会再改进这个了，感觉要加逻辑判断的地方很多，应该会有更优雅的实现</li>\n<li>当最后蛇很长的时候，蛇走和食物的最短路径是不合理的，因为走最短路径留下的空隙很可能会被填上食物，还需要绕一大圈才能吃到。应该是到最后，蛇直接一排一排地扫，反而是最快的</li>\n</ol>\n","excerpt":"","more":"<p>用pygame实现的贪吃蛇AI，代码在<a href=\"https://github.com/zjyfdu/Snake-\">这里</a></p>\n<p>![屏幕快照 2019-07-15 下午11.26.42](&#x2F;images&#x2F;屏幕快照 2019-07-15 下午11.26.42.png)</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install requirements.txt</span><br><span class=\"line\">python3 main-bfs2.py</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>主要是参考这篇 <a href=\"http://mp.weixin.qq.com/s?__biz=MzA5ODUxOTA5Mg==&mid=211204280&idx=1&sn=4589891ff2ddff98058f44f3e9dd942e&scene=24&srcid=0923YmTbhMIczvNdLDgrgPMz#rd\">实现贪吃蛇AI</a>，原实现在<a href=\"https://github.com/Hawstein/snake-ai\">这里</a>，主要的思路是下面这个图</p>\n<p>主要的思路是派出一条假蛇去探路，假蛇吃完食物还能活着，真蛇才会去吃（假蛇吃完食物怎么样算能活，这个比较难判断，我的改动也主要在这里，后面会说）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">st=&gt;start: 开始</span><br><span class=\"line\">op_tmp_sanke=&gt;operation: 一条虚拟的蛇探路</span><br><span class=\"line\">cond_food=&gt;condition: 能否到食物</span><br><span class=\"line\">cond_tmp_snake=&gt;condition: 虚蛇和尾巴之间有通路</span><br><span class=\"line\">op_shortest=&gt;operation: 走离食物最短的路</span><br><span class=\"line\">cond_tail=&gt;condition: 蛇和尾巴之间有通路</span><br><span class=\"line\">op_longest=&gt;operation: 走离蛇尾最长的路</span><br><span class=\"line\">cond_move=&gt;condition: 有可行的路</span><br><span class=\"line\">op_dead=&gt;operation: 你死了</span><br><span class=\"line\">e=&gt;end: 结束</span><br><span class=\"line\"></span><br><span class=\"line\">st-&gt;cond_food</span><br><span class=\"line\">cond_food(yes)-&gt;op_tmp_sanke-&gt;cond_tmp_snake</span><br><span class=\"line\">cond_food(no)-&gt;cond_tail</span><br><span class=\"line\">cond_tmp_snake(yes)-&gt;op_shortest</span><br><span class=\"line\">cond_tmp_snake(no)-&gt;cond_tail</span><br><span class=\"line\">cond_tail(yes)-&gt;op_longest</span><br><span class=\"line\">cond_tail(no)-&gt;cond_move</span><br><span class=\"line\">cond_move(yes)-&gt;op_shortest</span><br><span class=\"line\">cond_move(no)-&gt;op_dead-&gt;e</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"改动\"><a href=\"#改动\" class=\"headerlink\" title=\"改动\"></a>改动</h1><p>只是做了一些微小的修改</p>\n<ol>\n<li>把curses改为pygame，界面好看多了</li>\n<li>加了没有什么卵用的类</li>\n<li>假蛇吃到食物之后，怎么算和尾巴之间有通路？<ol>\n<li>头和尾相邻算没有通路（原方法），比较保守，走到最后经常会循环起来，不敢吃食</li>\n<li>如果头尾相邻算成有通路，容易在前期就把自己撞死</li>\n<li>没有解决这个问题，加了个判断，蛇默认是保守的，但如果长时间没有吃到食物，就变激进。从测试结果看解决了原有的问题<del>，虽然不优雅</del></li>\n</ol>\n</li>\n</ol>\n<h1 id=\"待改进\"><a href=\"#待改进\" class=\"headerlink\" title=\"待改进\"></a>待改进</h1><ol>\n<li>这个算法调起来像无底洞，我应该不会再改进这个了，感觉要加逻辑判断的地方很多，应该会有更优雅的实现</li>\n<li>当最后蛇很长的时候，蛇走和食物的最短路径是不合理的，因为走最短路径留下的空隙很可能会被填上食物，还需要绕一大圈才能吃到。应该是到最后，蛇直接一排一排地扫，反而是最快的</li>\n</ol>\n"},{"title":"看过的论文汇总","date":"2018-07-17T07:09:47.000Z","typora-root-url":"../../source","_content":"\n论文常看常忘，还是把看过的先记下来，再补充总结\n\n# NET\n\n## pvanet\n\n- pvanet是为了实时目标识别提出来的网络，用来提取特征的，用了很多方法来减小计算量，看起来像个大杂烩\n- C.ReLU，由于观察到浅层的网络卷基层总是存在互补层，所以直接把卷积取反再concatenate，可以减少一半的计算量\n- Inception，使用了inception unit，用两个3\\*3的卷集合替代了5\\*5的卷积，也是为了减小计算量\n- HypteNet多层融合，融合哪两层是比较讲究的，选择不好的话，会白白增加计算量。这里作者使用了最后输出层2倍和4倍多layer进行融合，以2倍的layer为标准，分别pooling和差值upscale。\n- ResNet，再inception unit里也用了残差网络。\n- 整个网络结构如下表\n\n![pvanet](/images/62552972.jpg)\n\n- pvanet里还提到了一种学习策略，动态调整学习率，如果一定的迭代次数内，loss下降小于阈值，就说明是on plateau，这时候就降低学习率。[在github上有人实现](https://github.com/BVLC/caffe/pull/4606/files)，只不过没有被merge进来。\n\n## mobilenet\n\n## shufflenet\n\n- mobile和shuffle可以看{% post_link mobileNet和shuffleNet 以前写的这篇 %}\n\n## densenet\n\n- 每一层都有来自前面所有层的输入，L个层，就是$\\frac{L*(L+1)}{2}$个连接。\n- Each layer has direct access to the gradients from the loss function and the original input signal, leading to an implicit deep supervision.\n- resNet中，l层的输出是l-1的非线性加l-1\n\n$$x_l = H_l(x_{l-1}) + x_{l-1}$$\n\n- denseNet中，是直接做的concatenate\n\n$$x_l = H_l([x_0, x_1, ..., x_{l-1}])$$\n\n- denseNet中包含三个dense block，如下图所示（盗图自[这里](https://blog.csdn.net/u014380165/article/details/75142664)）\n\n![dense block](/images/25005397.jpg)\n\n- 整个网络的结构图如下\n\n![dense net](/images/51626114.jpg)\n\n- 由于denseNet是concatenate，所以到最后一层的时候，channel会异常地大，所以每个3\\*3卷积前，会有个1\\*1的bottle neck层，减小channel数量\n\n- dense block之间还有transition层，也是用1\\*1的卷积减小channel数\n\n# Attention 和 CTC\n\nAttention is all you need\nCTC\n\n# text localization\n\n## EAST\n\n- 用于文本检测，输出可以是四边形或rotated box\n\n![east](/images/14151415.jpg)\n\n- 最左边用的是PVANet，也可以换成其他ResNet什么的\n- 然后中间是特征融合，这里作者借鉴了U-net的做法，用到了unpool，原因是文字有大有小，需要有不同的感受野\n- 最后是输出层，包括score map和位置信息，输出的size是原图的1/4大小\n- score对应的ground truth: 是将原始的bounding box按照短边长度r向内收缩了0.3r的距离。不懂为什么要这么做\n- 针对bounding box内部的每个点，计算他们到上下左右四个边的距离，并且计算角度。针对bounding box外部的点，ground truth置为0\n- loss包含两个部分，score map的loss和位置坐标的loss\n- score的loss使用的是balanced cross entropy，可以配合正负样本不均衡的情况\n\n$$ L_s = -\\beta Y^* log(\\hat{Y}) - (1-\\beta)(1-Y^*)log(1-\\hat{Y})$$\n$$ \\beta = 1 - \\frac{\\sum_{y^* \\in Y^*} y^*}{|Y^*|}$$\n\n- 位置坐标的loss我只看了rotated box的，又可以分成两个部分，iou的loss和角度的loss，角度的loss前面会乘个系数，10或者20，是个超参数\n\n## InceptText from Alibaba, IJCAI2018\n\n# text recognition\n\nFAN\nEdit Probability\n\n# OCR end2end\n\nan end to end textspotter with explicit aligment and attention, ICCV2018\nTextbox++\n\n# OCR 综述\n\nText Detection and Recognition in Imagery: A Survey\n\n# Character Segmentation\n\nA Gradient Vector Flow-Based Method for Video Character Segmentation, ICDAR201z1\n\n# GAN and Draw\n\n- GAN可以看{% post_link GAN总结 GAN总结 %}\n- draw\n\n# General CV\n\n## YOLO\n## SSD\n## Faster rcnn\n## mask rcnn\n## FCN\n\n- FCN里用到了三个技术，全卷积、上采样和跳层链接\n- 全卷积：一般的CNN最后会有全连接层，把二维的图像压缩成以为的向量，FCN把全连接换成了卷积，实际上计算上是等价的。\n\n![fcn](/images/26480255.jpg)\n\n- 上采样：或者叫反卷积、转置卷积（Caffe和Kera里叫Deconvolution，tensorflow里叫conv_transpose）。\n- 跳层连接：将全卷积之后的结果直接上采样得到的结果是很粗糙的，所以用不同池化层的结果进行上采样之后来优化输出。\n\n![fcn2](/images/48652183.jpg)\n\n- 原文感觉不好看，主要参考了[这里](https://blog.csdn.net/junparadox/article/details/52610744)\n\n## deeplab\n\n- deeplab可以看{% post_link deeplab 以前写的这篇 %}\n\n# Visualization\n\nUnderstanding neural Networks Through Deep Visualization\n","source":"_posts/看过的论文汇总.md","raw":"---\ntitle: 看过的论文汇总\ntags:\n  - 还债\ncategories: caffe\ndate: 2018-07-17 15:09:47\ntypora-root-url: ../../source\n---\n\n论文常看常忘，还是把看过的先记下来，再补充总结\n\n# NET\n\n## pvanet\n\n- pvanet是为了实时目标识别提出来的网络，用来提取特征的，用了很多方法来减小计算量，看起来像个大杂烩\n- C.ReLU，由于观察到浅层的网络卷基层总是存在互补层，所以直接把卷积取反再concatenate，可以减少一半的计算量\n- Inception，使用了inception unit，用两个3\\*3的卷集合替代了5\\*5的卷积，也是为了减小计算量\n- HypteNet多层融合，融合哪两层是比较讲究的，选择不好的话，会白白增加计算量。这里作者使用了最后输出层2倍和4倍多layer进行融合，以2倍的layer为标准，分别pooling和差值upscale。\n- ResNet，再inception unit里也用了残差网络。\n- 整个网络结构如下表\n\n![pvanet](/images/62552972.jpg)\n\n- pvanet里还提到了一种学习策略，动态调整学习率，如果一定的迭代次数内，loss下降小于阈值，就说明是on plateau，这时候就降低学习率。[在github上有人实现](https://github.com/BVLC/caffe/pull/4606/files)，只不过没有被merge进来。\n\n## mobilenet\n\n## shufflenet\n\n- mobile和shuffle可以看{% post_link mobileNet和shuffleNet 以前写的这篇 %}\n\n## densenet\n\n- 每一层都有来自前面所有层的输入，L个层，就是$\\frac{L*(L+1)}{2}$个连接。\n- Each layer has direct access to the gradients from the loss function and the original input signal, leading to an implicit deep supervision.\n- resNet中，l层的输出是l-1的非线性加l-1\n\n$$x_l = H_l(x_{l-1}) + x_{l-1}$$\n\n- denseNet中，是直接做的concatenate\n\n$$x_l = H_l([x_0, x_1, ..., x_{l-1}])$$\n\n- denseNet中包含三个dense block，如下图所示（盗图自[这里](https://blog.csdn.net/u014380165/article/details/75142664)）\n\n![dense block](/images/25005397.jpg)\n\n- 整个网络的结构图如下\n\n![dense net](/images/51626114.jpg)\n\n- 由于denseNet是concatenate，所以到最后一层的时候，channel会异常地大，所以每个3\\*3卷积前，会有个1\\*1的bottle neck层，减小channel数量\n\n- dense block之间还有transition层，也是用1\\*1的卷积减小channel数\n\n# Attention 和 CTC\n\nAttention is all you need\nCTC\n\n# text localization\n\n## EAST\n\n- 用于文本检测，输出可以是四边形或rotated box\n\n![east](/images/14151415.jpg)\n\n- 最左边用的是PVANet，也可以换成其他ResNet什么的\n- 然后中间是特征融合，这里作者借鉴了U-net的做法，用到了unpool，原因是文字有大有小，需要有不同的感受野\n- 最后是输出层，包括score map和位置信息，输出的size是原图的1/4大小\n- score对应的ground truth: 是将原始的bounding box按照短边长度r向内收缩了0.3r的距离。不懂为什么要这么做\n- 针对bounding box内部的每个点，计算他们到上下左右四个边的距离，并且计算角度。针对bounding box外部的点，ground truth置为0\n- loss包含两个部分，score map的loss和位置坐标的loss\n- score的loss使用的是balanced cross entropy，可以配合正负样本不均衡的情况\n\n$$ L_s = -\\beta Y^* log(\\hat{Y}) - (1-\\beta)(1-Y^*)log(1-\\hat{Y})$$\n$$ \\beta = 1 - \\frac{\\sum_{y^* \\in Y^*} y^*}{|Y^*|}$$\n\n- 位置坐标的loss我只看了rotated box的，又可以分成两个部分，iou的loss和角度的loss，角度的loss前面会乘个系数，10或者20，是个超参数\n\n## InceptText from Alibaba, IJCAI2018\n\n# text recognition\n\nFAN\nEdit Probability\n\n# OCR end2end\n\nan end to end textspotter with explicit aligment and attention, ICCV2018\nTextbox++\n\n# OCR 综述\n\nText Detection and Recognition in Imagery: A Survey\n\n# Character Segmentation\n\nA Gradient Vector Flow-Based Method for Video Character Segmentation, ICDAR201z1\n\n# GAN and Draw\n\n- GAN可以看{% post_link GAN总结 GAN总结 %}\n- draw\n\n# General CV\n\n## YOLO\n## SSD\n## Faster rcnn\n## mask rcnn\n## FCN\n\n- FCN里用到了三个技术，全卷积、上采样和跳层链接\n- 全卷积：一般的CNN最后会有全连接层，把二维的图像压缩成以为的向量，FCN把全连接换成了卷积，实际上计算上是等价的。\n\n![fcn](/images/26480255.jpg)\n\n- 上采样：或者叫反卷积、转置卷积（Caffe和Kera里叫Deconvolution，tensorflow里叫conv_transpose）。\n- 跳层连接：将全卷积之后的结果直接上采样得到的结果是很粗糙的，所以用不同池化层的结果进行上采样之后来优化输出。\n\n![fcn2](/images/48652183.jpg)\n\n- 原文感觉不好看，主要参考了[这里](https://blog.csdn.net/junparadox/article/details/52610744)\n\n## deeplab\n\n- deeplab可以看{% post_link deeplab 以前写的这篇 %}\n\n# Visualization\n\nUnderstanding neural Networks Through Deep Visualization\n","slug":"看过的论文汇总","published":1,"updated":"2023-11-05T11:42:33.906Z","comments":1,"layout":"post","photos":[],"_id":"clolf0lid005js2kzho0sglid","content":"<p>论文常看常忘，还是把看过的先记下来，再补充总结</p>\n<h1 id=\"NET\"><a href=\"#NET\" class=\"headerlink\" title=\"NET\"></a>NET</h1><h2 id=\"pvanet\"><a href=\"#pvanet\" class=\"headerlink\" title=\"pvanet\"></a>pvanet</h2><ul>\n<li>pvanet是为了实时目标识别提出来的网络，用来提取特征的，用了很多方法来减小计算量，看起来像个大杂烩</li>\n<li>C.ReLU，由于观察到浅层的网络卷基层总是存在互补层，所以直接把卷积取反再concatenate，可以减少一半的计算量</li>\n<li>Inception，使用了inception unit，用两个3*3的卷集合替代了5*5的卷积，也是为了减小计算量</li>\n<li>HypteNet多层融合，融合哪两层是比较讲究的，选择不好的话，会白白增加计算量。这里作者使用了最后输出层2倍和4倍多layer进行融合，以2倍的layer为标准，分别pooling和差值upscale。</li>\n<li>ResNet，再inception unit里也用了残差网络。</li>\n<li>整个网络结构如下表</li>\n</ul>\n<p><img src=\"/images/62552972.jpg\" alt=\"pvanet\"></p>\n<ul>\n<li>pvanet里还提到了一种学习策略，动态调整学习率，如果一定的迭代次数内，loss下降小于阈值，就说明是on plateau，这时候就降低学习率。<a href=\"https://github.com/BVLC/caffe/pull/4606/files\">在github上有人实现</a>，只不过没有被merge进来。</li>\n</ul>\n<h2 id=\"mobilenet\"><a href=\"#mobilenet\" class=\"headerlink\" title=\"mobilenet\"></a>mobilenet</h2><h2 id=\"shufflenet\"><a href=\"#shufflenet\" class=\"headerlink\" title=\"shufflenet\"></a>shufflenet</h2><ul>\n<li>mobile和shuffle可以看<a href=\"/2018/05/13/mobileNet%E5%92%8CshuffleNet/\" title=\"mobileNet和shuffleNet\">以前写的这篇</a></li>\n</ul>\n<h2 id=\"densenet\"><a href=\"#densenet\" class=\"headerlink\" title=\"densenet\"></a>densenet</h2><ul>\n<li>每一层都有来自前面所有层的输入，L个层，就是$\\frac{L*(L+1)}{2}$个连接。</li>\n<li>Each layer has direct access to the gradients from the loss function and the original input signal, leading to an implicit deep supervision.</li>\n<li>resNet中，l层的输出是l-1的非线性加l-1</li>\n</ul>\n<p>$$x_l &#x3D; H_l(x_{l-1}) + x_{l-1}$$</p>\n<ul>\n<li>denseNet中，是直接做的concatenate</li>\n</ul>\n<p>$$x_l &#x3D; H_l([x_0, x_1, …, x_{l-1}])$$</p>\n<ul>\n<li>denseNet中包含三个dense block，如下图所示（盗图自<a href=\"https://blog.csdn.net/u014380165/article/details/75142664\">这里</a>）</li>\n</ul>\n<p><img src=\"/images/25005397.jpg\" alt=\"dense block\"></p>\n<ul>\n<li>整个网络的结构图如下</li>\n</ul>\n<p><img src=\"/images/51626114.jpg\" alt=\"dense net\"></p>\n<ul>\n<li><p>由于denseNet是concatenate，所以到最后一层的时候，channel会异常地大，所以每个3*3卷积前，会有个1*1的bottle neck层，减小channel数量</p>\n</li>\n<li><p>dense block之间还有transition层，也是用1*1的卷积减小channel数</p>\n</li>\n</ul>\n<h1 id=\"Attention-和-CTC\"><a href=\"#Attention-和-CTC\" class=\"headerlink\" title=\"Attention 和 CTC\"></a>Attention 和 CTC</h1><p>Attention is all you need<br>CTC</p>\n<h1 id=\"text-localization\"><a href=\"#text-localization\" class=\"headerlink\" title=\"text localization\"></a>text localization</h1><h2 id=\"EAST\"><a href=\"#EAST\" class=\"headerlink\" title=\"EAST\"></a>EAST</h2><ul>\n<li>用于文本检测，输出可以是四边形或rotated box</li>\n</ul>\n<p><img src=\"/images/14151415.jpg\" alt=\"east\"></p>\n<ul>\n<li>最左边用的是PVANet，也可以换成其他ResNet什么的</li>\n<li>然后中间是特征融合，这里作者借鉴了U-net的做法，用到了unpool，原因是文字有大有小，需要有不同的感受野</li>\n<li>最后是输出层，包括score map和位置信息，输出的size是原图的1&#x2F;4大小</li>\n<li>score对应的ground truth: 是将原始的bounding box按照短边长度r向内收缩了0.3r的距离。不懂为什么要这么做</li>\n<li>针对bounding box内部的每个点，计算他们到上下左右四个边的距离，并且计算角度。针对bounding box外部的点，ground truth置为0</li>\n<li>loss包含两个部分，score map的loss和位置坐标的loss</li>\n<li>score的loss使用的是balanced cross entropy，可以配合正负样本不均衡的情况</li>\n</ul>\n<p>$$ L_s &#x3D; -\\beta Y^* log(\\hat{Y}) - (1-\\beta)(1-Y^*)log(1-\\hat{Y})$$<br>$$ \\beta &#x3D; 1 - \\frac{\\sum_{y^* \\in Y^*} y^*}{|Y^*|}$$</p>\n<ul>\n<li>位置坐标的loss我只看了rotated box的，又可以分成两个部分，iou的loss和角度的loss，角度的loss前面会乘个系数，10或者20，是个超参数</li>\n</ul>\n<h2 id=\"InceptText-from-Alibaba-IJCAI2018\"><a href=\"#InceptText-from-Alibaba-IJCAI2018\" class=\"headerlink\" title=\"InceptText from Alibaba, IJCAI2018\"></a>InceptText from Alibaba, IJCAI2018</h2><h1 id=\"text-recognition\"><a href=\"#text-recognition\" class=\"headerlink\" title=\"text recognition\"></a>text recognition</h1><p>FAN<br>Edit Probability</p>\n<h1 id=\"OCR-end2end\"><a href=\"#OCR-end2end\" class=\"headerlink\" title=\"OCR end2end\"></a>OCR end2end</h1><p>an end to end textspotter with explicit aligment and attention, ICCV2018<br>Textbox++</p>\n<h1 id=\"OCR-综述\"><a href=\"#OCR-综述\" class=\"headerlink\" title=\"OCR 综述\"></a>OCR 综述</h1><p>Text Detection and Recognition in Imagery: A Survey</p>\n<h1 id=\"Character-Segmentation\"><a href=\"#Character-Segmentation\" class=\"headerlink\" title=\"Character Segmentation\"></a>Character Segmentation</h1><p>A Gradient Vector Flow-Based Method for Video Character Segmentation, ICDAR201z1</p>\n<h1 id=\"GAN-and-Draw\"><a href=\"#GAN-and-Draw\" class=\"headerlink\" title=\"GAN and Draw\"></a>GAN and Draw</h1><ul>\n<li>GAN可以看<a href=\"/2019/01/27/GAN%E6%80%BB%E7%BB%93/\" title=\"GAN总结\">GAN总结</a></li>\n<li>draw</li>\n</ul>\n<h1 id=\"General-CV\"><a href=\"#General-CV\" class=\"headerlink\" title=\"General CV\"></a>General CV</h1><h2 id=\"YOLO\"><a href=\"#YOLO\" class=\"headerlink\" title=\"YOLO\"></a>YOLO</h2><h2 id=\"SSD\"><a href=\"#SSD\" class=\"headerlink\" title=\"SSD\"></a>SSD</h2><h2 id=\"Faster-rcnn\"><a href=\"#Faster-rcnn\" class=\"headerlink\" title=\"Faster rcnn\"></a>Faster rcnn</h2><h2 id=\"mask-rcnn\"><a href=\"#mask-rcnn\" class=\"headerlink\" title=\"mask rcnn\"></a>mask rcnn</h2><h2 id=\"FCN\"><a href=\"#FCN\" class=\"headerlink\" title=\"FCN\"></a>FCN</h2><ul>\n<li>FCN里用到了三个技术，全卷积、上采样和跳层链接</li>\n<li>全卷积：一般的CNN最后会有全连接层，把二维的图像压缩成以为的向量，FCN把全连接换成了卷积，实际上计算上是等价的。</li>\n</ul>\n<p><img src=\"/images/26480255.jpg\" alt=\"fcn\"></p>\n<ul>\n<li>上采样：或者叫反卷积、转置卷积（Caffe和Kera里叫Deconvolution，tensorflow里叫conv_transpose）。</li>\n<li>跳层连接：将全卷积之后的结果直接上采样得到的结果是很粗糙的，所以用不同池化层的结果进行上采样之后来优化输出。</li>\n</ul>\n<p><img src=\"/images/48652183.jpg\" alt=\"fcn2\"></p>\n<ul>\n<li>原文感觉不好看，主要参考了<a href=\"https://blog.csdn.net/junparadox/article/details/52610744\">这里</a></li>\n</ul>\n<h2 id=\"deeplab\"><a href=\"#deeplab\" class=\"headerlink\" title=\"deeplab\"></a>deeplab</h2><ul>\n<li>deeplab可以看<a href=\"/2018/06/19/deeplab/\" title=\"deeplab\">以前写的这篇</a></li>\n</ul>\n<h1 id=\"Visualization\"><a href=\"#Visualization\" class=\"headerlink\" title=\"Visualization\"></a>Visualization</h1><p>Understanding neural Networks Through Deep Visualization</p>\n","excerpt":"","more":"<p>论文常看常忘，还是把看过的先记下来，再补充总结</p>\n<h1 id=\"NET\"><a href=\"#NET\" class=\"headerlink\" title=\"NET\"></a>NET</h1><h2 id=\"pvanet\"><a href=\"#pvanet\" class=\"headerlink\" title=\"pvanet\"></a>pvanet</h2><ul>\n<li>pvanet是为了实时目标识别提出来的网络，用来提取特征的，用了很多方法来减小计算量，看起来像个大杂烩</li>\n<li>C.ReLU，由于观察到浅层的网络卷基层总是存在互补层，所以直接把卷积取反再concatenate，可以减少一半的计算量</li>\n<li>Inception，使用了inception unit，用两个3*3的卷集合替代了5*5的卷积，也是为了减小计算量</li>\n<li>HypteNet多层融合，融合哪两层是比较讲究的，选择不好的话，会白白增加计算量。这里作者使用了最后输出层2倍和4倍多layer进行融合，以2倍的layer为标准，分别pooling和差值upscale。</li>\n<li>ResNet，再inception unit里也用了残差网络。</li>\n<li>整个网络结构如下表</li>\n</ul>\n<p><img src=\"/images/62552972.jpg\" alt=\"pvanet\"></p>\n<ul>\n<li>pvanet里还提到了一种学习策略，动态调整学习率，如果一定的迭代次数内，loss下降小于阈值，就说明是on plateau，这时候就降低学习率。<a href=\"https://github.com/BVLC/caffe/pull/4606/files\">在github上有人实现</a>，只不过没有被merge进来。</li>\n</ul>\n<h2 id=\"mobilenet\"><a href=\"#mobilenet\" class=\"headerlink\" title=\"mobilenet\"></a>mobilenet</h2><h2 id=\"shufflenet\"><a href=\"#shufflenet\" class=\"headerlink\" title=\"shufflenet\"></a>shufflenet</h2><ul>\n<li>mobile和shuffle可以看<a href=\"/2018/05/13/mobileNet%E5%92%8CshuffleNet/\" title=\"mobileNet和shuffleNet\">以前写的这篇</a></li>\n</ul>\n<h2 id=\"densenet\"><a href=\"#densenet\" class=\"headerlink\" title=\"densenet\"></a>densenet</h2><ul>\n<li>每一层都有来自前面所有层的输入，L个层，就是$\\frac{L*(L+1)}{2}$个连接。</li>\n<li>Each layer has direct access to the gradients from the loss function and the original input signal, leading to an implicit deep supervision.</li>\n<li>resNet中，l层的输出是l-1的非线性加l-1</li>\n</ul>\n<p>$$x_l &#x3D; H_l(x_{l-1}) + x_{l-1}$$</p>\n<ul>\n<li>denseNet中，是直接做的concatenate</li>\n</ul>\n<p>$$x_l &#x3D; H_l([x_0, x_1, …, x_{l-1}])$$</p>\n<ul>\n<li>denseNet中包含三个dense block，如下图所示（盗图自<a href=\"https://blog.csdn.net/u014380165/article/details/75142664\">这里</a>）</li>\n</ul>\n<p><img src=\"/images/25005397.jpg\" alt=\"dense block\"></p>\n<ul>\n<li>整个网络的结构图如下</li>\n</ul>\n<p><img src=\"/images/51626114.jpg\" alt=\"dense net\"></p>\n<ul>\n<li><p>由于denseNet是concatenate，所以到最后一层的时候，channel会异常地大，所以每个3*3卷积前，会有个1*1的bottle neck层，减小channel数量</p>\n</li>\n<li><p>dense block之间还有transition层，也是用1*1的卷积减小channel数</p>\n</li>\n</ul>\n<h1 id=\"Attention-和-CTC\"><a href=\"#Attention-和-CTC\" class=\"headerlink\" title=\"Attention 和 CTC\"></a>Attention 和 CTC</h1><p>Attention is all you need<br>CTC</p>\n<h1 id=\"text-localization\"><a href=\"#text-localization\" class=\"headerlink\" title=\"text localization\"></a>text localization</h1><h2 id=\"EAST\"><a href=\"#EAST\" class=\"headerlink\" title=\"EAST\"></a>EAST</h2><ul>\n<li>用于文本检测，输出可以是四边形或rotated box</li>\n</ul>\n<p><img src=\"/images/14151415.jpg\" alt=\"east\"></p>\n<ul>\n<li>最左边用的是PVANet，也可以换成其他ResNet什么的</li>\n<li>然后中间是特征融合，这里作者借鉴了U-net的做法，用到了unpool，原因是文字有大有小，需要有不同的感受野</li>\n<li>最后是输出层，包括score map和位置信息，输出的size是原图的1&#x2F;4大小</li>\n<li>score对应的ground truth: 是将原始的bounding box按照短边长度r向内收缩了0.3r的距离。不懂为什么要这么做</li>\n<li>针对bounding box内部的每个点，计算他们到上下左右四个边的距离，并且计算角度。针对bounding box外部的点，ground truth置为0</li>\n<li>loss包含两个部分，score map的loss和位置坐标的loss</li>\n<li>score的loss使用的是balanced cross entropy，可以配合正负样本不均衡的情况</li>\n</ul>\n<p>$$ L_s &#x3D; -\\beta Y^* log(\\hat{Y}) - (1-\\beta)(1-Y^*)log(1-\\hat{Y})$$<br>$$ \\beta &#x3D; 1 - \\frac{\\sum_{y^* \\in Y^*} y^*}{|Y^*|}$$</p>\n<ul>\n<li>位置坐标的loss我只看了rotated box的，又可以分成两个部分，iou的loss和角度的loss，角度的loss前面会乘个系数，10或者20，是个超参数</li>\n</ul>\n<h2 id=\"InceptText-from-Alibaba-IJCAI2018\"><a href=\"#InceptText-from-Alibaba-IJCAI2018\" class=\"headerlink\" title=\"InceptText from Alibaba, IJCAI2018\"></a>InceptText from Alibaba, IJCAI2018</h2><h1 id=\"text-recognition\"><a href=\"#text-recognition\" class=\"headerlink\" title=\"text recognition\"></a>text recognition</h1><p>FAN<br>Edit Probability</p>\n<h1 id=\"OCR-end2end\"><a href=\"#OCR-end2end\" class=\"headerlink\" title=\"OCR end2end\"></a>OCR end2end</h1><p>an end to end textspotter with explicit aligment and attention, ICCV2018<br>Textbox++</p>\n<h1 id=\"OCR-综述\"><a href=\"#OCR-综述\" class=\"headerlink\" title=\"OCR 综述\"></a>OCR 综述</h1><p>Text Detection and Recognition in Imagery: A Survey</p>\n<h1 id=\"Character-Segmentation\"><a href=\"#Character-Segmentation\" class=\"headerlink\" title=\"Character Segmentation\"></a>Character Segmentation</h1><p>A Gradient Vector Flow-Based Method for Video Character Segmentation, ICDAR201z1</p>\n<h1 id=\"GAN-and-Draw\"><a href=\"#GAN-and-Draw\" class=\"headerlink\" title=\"GAN and Draw\"></a>GAN and Draw</h1><ul>\n<li>GAN可以看<a href=\"/2019/01/27/GAN%E6%80%BB%E7%BB%93/\" title=\"GAN总结\">GAN总结</a></li>\n<li>draw</li>\n</ul>\n<h1 id=\"General-CV\"><a href=\"#General-CV\" class=\"headerlink\" title=\"General CV\"></a>General CV</h1><h2 id=\"YOLO\"><a href=\"#YOLO\" class=\"headerlink\" title=\"YOLO\"></a>YOLO</h2><h2 id=\"SSD\"><a href=\"#SSD\" class=\"headerlink\" title=\"SSD\"></a>SSD</h2><h2 id=\"Faster-rcnn\"><a href=\"#Faster-rcnn\" class=\"headerlink\" title=\"Faster rcnn\"></a>Faster rcnn</h2><h2 id=\"mask-rcnn\"><a href=\"#mask-rcnn\" class=\"headerlink\" title=\"mask rcnn\"></a>mask rcnn</h2><h2 id=\"FCN\"><a href=\"#FCN\" class=\"headerlink\" title=\"FCN\"></a>FCN</h2><ul>\n<li>FCN里用到了三个技术，全卷积、上采样和跳层链接</li>\n<li>全卷积：一般的CNN最后会有全连接层，把二维的图像压缩成以为的向量，FCN把全连接换成了卷积，实际上计算上是等价的。</li>\n</ul>\n<p><img src=\"/images/26480255.jpg\" alt=\"fcn\"></p>\n<ul>\n<li>上采样：或者叫反卷积、转置卷积（Caffe和Kera里叫Deconvolution，tensorflow里叫conv_transpose）。</li>\n<li>跳层连接：将全卷积之后的结果直接上采样得到的结果是很粗糙的，所以用不同池化层的结果进行上采样之后来优化输出。</li>\n</ul>\n<p><img src=\"/images/48652183.jpg\" alt=\"fcn2\"></p>\n<ul>\n<li>原文感觉不好看，主要参考了<a href=\"https://blog.csdn.net/junparadox/article/details/52610744\">这里</a></li>\n</ul>\n<h2 id=\"deeplab\"><a href=\"#deeplab\" class=\"headerlink\" title=\"deeplab\"></a>deeplab</h2><ul>\n<li>deeplab可以看<a href=\"/2018/06/19/deeplab/\" title=\"deeplab\">以前写的这篇</a></li>\n</ul>\n<h1 id=\"Visualization\"><a href=\"#Visualization\" class=\"headerlink\" title=\"Visualization\"></a>Visualization</h1><p>Understanding neural Networks Through Deep Visualization</p>\n"},{"title":"记录一个vscode的bug","typora-root-url":"../../source","date":"2018-08-07T16:53:58.000Z","_content":"# 啰嗦一下\n\n- 在mac下，使用vscode，使用汉字输入法，删除完后，会多一个退格符！而且这个退格符默认是不可见的！\n- 过年在家写论文的时候，就发现xetex莫名其妙不能编译，说是多了字符，苦于不知道这个字符是啥，也不知道怎么描述这个现象，一直没有找到原因。\n- 就在今天，我配置博客的搜索的时候，又被这个bug给搞了，看别人的解释说是生成的检索文件里，多了BS(unicode)这个字符，终于顺着这个BS，我找到了困扰我半年的bug。\n- 十分激动，以至于我一改冷淡的文风，在大半夜里啰嗦这么多。\n\n# vscode并不打算修\n\n- 参考[这里](https://juejin.im/entry/5a806ddef265da4e84092eeb)的说明。\n> vscode底层使用了electron，这是electron的bug，electron不解决这个问题，vscode就不会解决。\n> electron底层使用了chromium， 这是chromium的bug，chromium不解决，elctron就无法解决。\n- 非常稳，于是[这个bug还是open的](https://github.com/Microsoft/vscode/issues/37114)。\n\n# 补救措施\n\n- 首先让这个字符显示出来\n\n```json\n\"editor.renderControlCharacters\": true\n```\n\n- 使用插件 Remove backspace control character，并如下配置，这样在保存文件的时候，会自动帮你删除这些控制符\n\n```json\n“editor.formatOnSave”: true \n```\n","source":"_posts/记录一个vscode的bug.md","raw":"---\ntitle: 记录一个vscode的bug\ntypora-root-url: ../../source\ntags:\n  - vscode\ndate: 2018-08-08 00:53:58\n---\n# 啰嗦一下\n\n- 在mac下，使用vscode，使用汉字输入法，删除完后，会多一个退格符！而且这个退格符默认是不可见的！\n- 过年在家写论文的时候，就发现xetex莫名其妙不能编译，说是多了字符，苦于不知道这个字符是啥，也不知道怎么描述这个现象，一直没有找到原因。\n- 就在今天，我配置博客的搜索的时候，又被这个bug给搞了，看别人的解释说是生成的检索文件里，多了BS(unicode)这个字符，终于顺着这个BS，我找到了困扰我半年的bug。\n- 十分激动，以至于我一改冷淡的文风，在大半夜里啰嗦这么多。\n\n# vscode并不打算修\n\n- 参考[这里](https://juejin.im/entry/5a806ddef265da4e84092eeb)的说明。\n> vscode底层使用了electron，这是electron的bug，electron不解决这个问题，vscode就不会解决。\n> electron底层使用了chromium， 这是chromium的bug，chromium不解决，elctron就无法解决。\n- 非常稳，于是[这个bug还是open的](https://github.com/Microsoft/vscode/issues/37114)。\n\n# 补救措施\n\n- 首先让这个字符显示出来\n\n```json\n\"editor.renderControlCharacters\": true\n```\n\n- 使用插件 Remove backspace control character，并如下配置，这样在保存文件的时候，会自动帮你删除这些控制符\n\n```json\n“editor.formatOnSave”: true \n```\n","slug":"记录一个vscode的bug","published":1,"updated":"2023-11-05T11:42:33.906Z","comments":1,"layout":"post","photos":[],"_id":"clolf0lid005ls2kz853b5kca","content":"<h1 id=\"啰嗦一下\"><a href=\"#啰嗦一下\" class=\"headerlink\" title=\"啰嗦一下\"></a>啰嗦一下</h1><ul>\n<li>在mac下，使用vscode，使用汉字输入法，删除完后，会多一个退格符！而且这个退格符默认是不可见的！</li>\n<li>过年在家写论文的时候，就发现xetex莫名其妙不能编译，说是多了字符，苦于不知道这个字符是啥，也不知道怎么描述这个现象，一直没有找到原因。</li>\n<li>就在今天，我配置博客的搜索的时候，又被这个bug给搞了，看别人的解释说是生成的检索文件里，多了BS(unicode)这个字符，终于顺着这个BS，我找到了困扰我半年的bug。</li>\n<li>十分激动，以至于我一改冷淡的文风，在大半夜里啰嗦这么多。</li>\n</ul>\n<h1 id=\"vscode并不打算修\"><a href=\"#vscode并不打算修\" class=\"headerlink\" title=\"vscode并不打算修\"></a>vscode并不打算修</h1><ul>\n<li>参考<a href=\"https://juejin.im/entry/5a806ddef265da4e84092eeb\">这里</a>的说明。<blockquote>\n<p>vscode底层使用了electron，这是electron的bug，electron不解决这个问题，vscode就不会解决。<br>electron底层使用了chromium， 这是chromium的bug，chromium不解决，elctron就无法解决。</p>\n</blockquote>\n</li>\n<li>非常稳，于是<a href=\"https://github.com/Microsoft/vscode/issues/37114\">这个bug还是open的</a>。</li>\n</ul>\n<h1 id=\"补救措施\"><a href=\"#补救措施\" class=\"headerlink\" title=\"补救措施\"></a>补救措施</h1><ul>\n<li>首先让这个字符显示出来</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;editor.renderControlCharacters&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用插件 Remove backspace control character，并如下配置，这样在保存文件的时候，会自动帮你删除这些控制符</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">“editor.formatOnSave”<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span> </span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"啰嗦一下\"><a href=\"#啰嗦一下\" class=\"headerlink\" title=\"啰嗦一下\"></a>啰嗦一下</h1><ul>\n<li>在mac下，使用vscode，使用汉字输入法，删除完后，会多一个退格符！而且这个退格符默认是不可见的！</li>\n<li>过年在家写论文的时候，就发现xetex莫名其妙不能编译，说是多了字符，苦于不知道这个字符是啥，也不知道怎么描述这个现象，一直没有找到原因。</li>\n<li>就在今天，我配置博客的搜索的时候，又被这个bug给搞了，看别人的解释说是生成的检索文件里，多了BS(unicode)这个字符，终于顺着这个BS，我找到了困扰我半年的bug。</li>\n<li>十分激动，以至于我一改冷淡的文风，在大半夜里啰嗦这么多。</li>\n</ul>\n<h1 id=\"vscode并不打算修\"><a href=\"#vscode并不打算修\" class=\"headerlink\" title=\"vscode并不打算修\"></a>vscode并不打算修</h1><ul>\n<li>参考<a href=\"https://juejin.im/entry/5a806ddef265da4e84092eeb\">这里</a>的说明。<blockquote>\n<p>vscode底层使用了electron，这是electron的bug，electron不解决这个问题，vscode就不会解决。<br>electron底层使用了chromium， 这是chromium的bug，chromium不解决，elctron就无法解决。</p>\n</blockquote>\n</li>\n<li>非常稳，于是<a href=\"https://github.com/Microsoft/vscode/issues/37114\">这个bug还是open的</a>。</li>\n</ul>\n<h1 id=\"补救措施\"><a href=\"#补救措施\" class=\"headerlink\" title=\"补救措施\"></a>补救措施</h1><ul>\n<li>首先让这个字符显示出来</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;editor.renderControlCharacters&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用插件 Remove backspace control character，并如下配置，这样在保存文件的时候，会自动帮你删除这些控制符</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">“editor.formatOnSave”<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span> </span><br></pre></td></tr></table></figure>\n"},{"title":"视频防盗啊啊","typora-root-url":"../../source","date":"2018-02-12T03:59:48.000Z","_content":"\n### 前言\n好烦啊，一直搞不定\n下面只是记录我踩过的一些坑，大家不要看了\n\n### 背景\n默认的video标签会有下载按钮，而且不能倍速播放，于是使用了video.js\n为防止下载video禁止掉了右键菜单\n目前存在的问题\n- 打开调试或者查看原网页可以直接看到视频链接\n- 手机端会之间显示浏览器的播放界面，都有直接下载的按钮\n\n### 途径\n\n#### 坑1 修改referrer\n想通过referrer判断是否是播放还是直接下载（先假设下载都是空referrer）\nvideo.js不能直接控制http请求，不能控制referrer\n控制全局referrer可以在head中加下面这句\n```\n<meta name=\"referrer\" content=\"always/never/origin/default\">\n```\n应该是下载空referrer这个假设本来就有问题，这条路堵死了\n\n#### 坑2 blob\nblob用于处理二进制文件，youtube和bilibili都是用的blob，看起来很promising\n但是我不会用啊。。。\n```\n<video id=\"id\" width=\"320\" height=\"240\"  type='video/mp4' controls  > </video>\n\nwindow.onload = function() {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', 'mov_bbb.mp4', true);\n    xhr.responseType = 'blob'; //important\n    xhr.onload = function(e) {\n        if (this.status == 200) {\n            console.log(\"loaded\");\n            var blob = this.response;\n            var video = document.getElementById('id');\n            video.oncanplaythrough = function() {\n                console.log(\"Can play through video without stopping\");\n                URL.revokeObjectURL(this.src);\n            };\n            video.src = URL.createObjectURL(blob);\n            video.load();\n        }\n    };\n    xhr.send();\n}\n```\n可以工作，但需要先把视频加载一遍才能看，意思是这个页面加载时间要以分钟来记了。。。\n而且还有跨域的问题\n\n#### 坑3 阿里云的flash\n这个坑还没踩进去，但是还是不想用flash，都2018年了啊\n\n#### 后面的坑 \n- 不行就用ua，把手机端的禁掉，然后pc端由他们下去吧\n- 然后再看看[这个链接](https://stackoverflow.com/questions/9756837/prevent-html5-video-from-being-downloaded-right-click-saved)里的方法，说不定能用呢😢\n- 近期不搞了，先专心写毕业论文吧\n\n\n","source":"_posts/视频防盗啊啊.md","raw":"---\ntitle: 视频防盗啊啊\ntypora-root-url: ../../source\ndate: 2018-02-12 11:59:48\ncategories: flask网站总结\n---\n\n### 前言\n好烦啊，一直搞不定\n下面只是记录我踩过的一些坑，大家不要看了\n\n### 背景\n默认的video标签会有下载按钮，而且不能倍速播放，于是使用了video.js\n为防止下载video禁止掉了右键菜单\n目前存在的问题\n- 打开调试或者查看原网页可以直接看到视频链接\n- 手机端会之间显示浏览器的播放界面，都有直接下载的按钮\n\n### 途径\n\n#### 坑1 修改referrer\n想通过referrer判断是否是播放还是直接下载（先假设下载都是空referrer）\nvideo.js不能直接控制http请求，不能控制referrer\n控制全局referrer可以在head中加下面这句\n```\n<meta name=\"referrer\" content=\"always/never/origin/default\">\n```\n应该是下载空referrer这个假设本来就有问题，这条路堵死了\n\n#### 坑2 blob\nblob用于处理二进制文件，youtube和bilibili都是用的blob，看起来很promising\n但是我不会用啊。。。\n```\n<video id=\"id\" width=\"320\" height=\"240\"  type='video/mp4' controls  > </video>\n\nwindow.onload = function() {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', 'mov_bbb.mp4', true);\n    xhr.responseType = 'blob'; //important\n    xhr.onload = function(e) {\n        if (this.status == 200) {\n            console.log(\"loaded\");\n            var blob = this.response;\n            var video = document.getElementById('id');\n            video.oncanplaythrough = function() {\n                console.log(\"Can play through video without stopping\");\n                URL.revokeObjectURL(this.src);\n            };\n            video.src = URL.createObjectURL(blob);\n            video.load();\n        }\n    };\n    xhr.send();\n}\n```\n可以工作，但需要先把视频加载一遍才能看，意思是这个页面加载时间要以分钟来记了。。。\n而且还有跨域的问题\n\n#### 坑3 阿里云的flash\n这个坑还没踩进去，但是还是不想用flash，都2018年了啊\n\n#### 后面的坑 \n- 不行就用ua，把手机端的禁掉，然后pc端由他们下去吧\n- 然后再看看[这个链接](https://stackoverflow.com/questions/9756837/prevent-html5-video-from-being-downloaded-right-click-saved)里的方法，说不定能用呢😢\n- 近期不搞了，先专心写毕业论文吧\n\n\n","slug":"视频防盗啊啊","published":1,"updated":"2023-11-05T11:42:33.906Z","comments":1,"layout":"post","photos":[],"_id":"clolf0lie005os2kzdlzqe06o","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>好烦啊，一直搞不定<br>下面只是记录我踩过的一些坑，大家不要看了</p>\n<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>默认的video标签会有下载按钮，而且不能倍速播放，于是使用了video.js<br>为防止下载video禁止掉了右键菜单<br>目前存在的问题</p>\n<ul>\n<li>打开调试或者查看原网页可以直接看到视频链接</li>\n<li>手机端会之间显示浏览器的播放界面，都有直接下载的按钮</li>\n</ul>\n<h3 id=\"途径\"><a href=\"#途径\" class=\"headerlink\" title=\"途径\"></a>途径</h3><h4 id=\"坑1-修改referrer\"><a href=\"#坑1-修改referrer\" class=\"headerlink\" title=\"坑1 修改referrer\"></a>坑1 修改referrer</h4><p>想通过referrer判断是否是播放还是直接下载（先假设下载都是空referrer）<br>video.js不能直接控制http请求，不能控制referrer<br>控制全局referrer可以在head中加下面这句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;referrer&quot; content=&quot;always/never/origin/default&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p>应该是下载空referrer这个假设本来就有问题，这条路堵死了</p>\n<h4 id=\"坑2-blob\"><a href=\"#坑2-blob\" class=\"headerlink\" title=\"坑2 blob\"></a>坑2 blob</h4><p>blob用于处理二进制文件，youtube和bilibili都是用的blob，看起来很promising<br>但是我不会用啊。。。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;video id=&quot;id&quot; width=&quot;320&quot; height=&quot;240&quot;  type=&#x27;video/mp4&#x27; controls  &gt; &lt;/video&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = function() &#123;</span><br><span class=\"line\">    var xhr = new XMLHttpRequest();</span><br><span class=\"line\">    xhr.open(&#x27;GET&#x27;, &#x27;mov_bbb.mp4&#x27;, true);</span><br><span class=\"line\">    xhr.responseType = &#x27;blob&#x27;; //important</span><br><span class=\"line\">    xhr.onload = function(e) &#123;</span><br><span class=\"line\">        if (this.status == 200) &#123;</span><br><span class=\"line\">            console.log(&quot;loaded&quot;);</span><br><span class=\"line\">            var blob = this.response;</span><br><span class=\"line\">            var video = document.getElementById(&#x27;id&#x27;);</span><br><span class=\"line\">            video.oncanplaythrough = function() &#123;</span><br><span class=\"line\">                console.log(&quot;Can play through video without stopping&quot;);</span><br><span class=\"line\">                URL.revokeObjectURL(this.src);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            video.src = URL.createObjectURL(blob);</span><br><span class=\"line\">            video.load();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    xhr.send();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以工作，但需要先把视频加载一遍才能看，意思是这个页面加载时间要以分钟来记了。。。<br>而且还有跨域的问题</p>\n<h4 id=\"坑3-阿里云的flash\"><a href=\"#坑3-阿里云的flash\" class=\"headerlink\" title=\"坑3 阿里云的flash\"></a>坑3 阿里云的flash</h4><p>这个坑还没踩进去，但是还是不想用flash，都2018年了啊</p>\n<h4 id=\"后面的坑\"><a href=\"#后面的坑\" class=\"headerlink\" title=\"后面的坑\"></a>后面的坑</h4><ul>\n<li>不行就用ua，把手机端的禁掉，然后pc端由他们下去吧</li>\n<li>然后再看看<a href=\"https://stackoverflow.com/questions/9756837/prevent-html5-video-from-being-downloaded-right-click-saved\">这个链接</a>里的方法，说不定能用呢😢</li>\n<li>近期不搞了，先专心写毕业论文吧</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>好烦啊，一直搞不定<br>下面只是记录我踩过的一些坑，大家不要看了</p>\n<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>默认的video标签会有下载按钮，而且不能倍速播放，于是使用了video.js<br>为防止下载video禁止掉了右键菜单<br>目前存在的问题</p>\n<ul>\n<li>打开调试或者查看原网页可以直接看到视频链接</li>\n<li>手机端会之间显示浏览器的播放界面，都有直接下载的按钮</li>\n</ul>\n<h3 id=\"途径\"><a href=\"#途径\" class=\"headerlink\" title=\"途径\"></a>途径</h3><h4 id=\"坑1-修改referrer\"><a href=\"#坑1-修改referrer\" class=\"headerlink\" title=\"坑1 修改referrer\"></a>坑1 修改referrer</h4><p>想通过referrer判断是否是播放还是直接下载（先假设下载都是空referrer）<br>video.js不能直接控制http请求，不能控制referrer<br>控制全局referrer可以在head中加下面这句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;referrer&quot; content=&quot;always/never/origin/default&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p>应该是下载空referrer这个假设本来就有问题，这条路堵死了</p>\n<h4 id=\"坑2-blob\"><a href=\"#坑2-blob\" class=\"headerlink\" title=\"坑2 blob\"></a>坑2 blob</h4><p>blob用于处理二进制文件，youtube和bilibili都是用的blob，看起来很promising<br>但是我不会用啊。。。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;video id=&quot;id&quot; width=&quot;320&quot; height=&quot;240&quot;  type=&#x27;video/mp4&#x27; controls  &gt; &lt;/video&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = function() &#123;</span><br><span class=\"line\">    var xhr = new XMLHttpRequest();</span><br><span class=\"line\">    xhr.open(&#x27;GET&#x27;, &#x27;mov_bbb.mp4&#x27;, true);</span><br><span class=\"line\">    xhr.responseType = &#x27;blob&#x27;; //important</span><br><span class=\"line\">    xhr.onload = function(e) &#123;</span><br><span class=\"line\">        if (this.status == 200) &#123;</span><br><span class=\"line\">            console.log(&quot;loaded&quot;);</span><br><span class=\"line\">            var blob = this.response;</span><br><span class=\"line\">            var video = document.getElementById(&#x27;id&#x27;);</span><br><span class=\"line\">            video.oncanplaythrough = function() &#123;</span><br><span class=\"line\">                console.log(&quot;Can play through video without stopping&quot;);</span><br><span class=\"line\">                URL.revokeObjectURL(this.src);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            video.src = URL.createObjectURL(blob);</span><br><span class=\"line\">            video.load();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    xhr.send();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以工作，但需要先把视频加载一遍才能看，意思是这个页面加载时间要以分钟来记了。。。<br>而且还有跨域的问题</p>\n<h4 id=\"坑3-阿里云的flash\"><a href=\"#坑3-阿里云的flash\" class=\"headerlink\" title=\"坑3 阿里云的flash\"></a>坑3 阿里云的flash</h4><p>这个坑还没踩进去，但是还是不想用flash，都2018年了啊</p>\n<h4 id=\"后面的坑\"><a href=\"#后面的坑\" class=\"headerlink\" title=\"后面的坑\"></a>后面的坑</h4><ul>\n<li>不行就用ua，把手机端的禁掉，然后pc端由他们下去吧</li>\n<li>然后再看看<a href=\"https://stackoverflow.com/questions/9756837/prevent-html5-video-from-being-downloaded-right-click-saved\">这个链接</a>里的方法，说不定能用呢😢</li>\n<li>近期不搞了，先专心写毕业论文吧</li>\n</ul>\n"},{"title":"这也太破了","typora-root-url":"../../source","date":"2023-11-05T03:42:24.000Z","_content":"\n# 起因\n\n事情是这样的，最近面试有些多，看别人简历会有些附带博客，让我也想起来我有这么个事实上废弃了的博客\n\n博客写多一点，一个是说明这人有积累，一个还能引导面试官的面试方向，于是就决定去捡起我的博客来\n\n写博客最密集的是18、19这两年，那时候我还在帮hxf做网站，刚刚艰难毕业，刚刚开始工作，是我对未来充满憧憬，求知欲最旺盛的时候，肯分享肯折腾\n\n啊，想起来真的美好啊\n\n不像现在老太龙钟，上班在sql和xgb中消磨人生，下班边玩边骂原神\n\n这简直都不是博客不博客的问题了，这是要找回青春找回自我\n\n# 一地鸡毛\n\n原本设想是美好的，我在本地调通hexo，然后部署到github的action里，这样我直接在网页端写博客就行\n\n是啊，2023年了，本来写博客就够变态了，更不要说在本地部署写了\n\n第一步给我的小mac充电，它现在不插电只能续航一个小时了，都是岁月的痕迹\n\n找到博客的路径，hexo命令我忘了，但是terminal都记得，我直接hexo deploy\n\n不出意外地，push不上去了，好像是github不支持https这种方式了，问题不大，就是重新ssh-keygen，我很熟\n\n就是从登录github开始，事情起变化了，我登不上去了，github强制两部验证？这是啥？为什么手机验证码不支持+86？\n\ngithub解决之后，又发现hexo generate出来的网页是空的，版本问题，hexo和node版本不兼容，node太新，hexo太老，这种问题一般有两个选项，降级node，后者更新hexo，但我现在是个有经验的程序员了，升级风险不可控，我选择苟在老版本\n\n当时已经过了一点了，我现在想不起来昨天一点我是怎么折腾的，但最后我妥协用了新版本\n\n其实就是把hexo再重新部署一遍，但老项目里有我很多配置项，不能完整迁移过来，我没办法完全复原我的老博客\n\n新版本的hexo也太破了，配置项完全改了不说，一个语言设置选项都没法用，博客语言在阿拉伯和泰中来回切换，我最终的结局方法是啥，把语言配置文件删到只剩中文\n\nhexo的搜索插件也是，很多文章搜不出来，我记得老版本没这些问题的，还有mathjax也不对\n\n总之就是博客回来了，但没完全回来，回来了，但好像没那个味道了\n\n但写到这里我确实想知道昨天为啥没有降级成功，我决定再去降级一次\n\n应该是npm install很慢，然后我决定用cnpm，但cnpm直接不给下老版本的依赖，导致我最终放弃\n\n本来我想描述一下昨天的一地鸡毛的，变成了现场表演一地鸡毛\n\nnpm就是卡在这里\n\n```\n⸨    ░░░░░░░░░░░░░░⸩ ⠇ fetchMetadata: sill mapToRegistry uri https://registry.npm.taobao.org/repeat-string\n(node:22980) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 error listeners added. Use emitter.setMaxListeners() to increase limit\n```\n\n# 留不住\n\n~~这次我要耐心等npm，我还有一个下午，应该不至于再搞到很晚了。~~\n\n降级还是未遂，那一个个报错就像拼多多的砍一刀，“再搞定这个报错，就能彻底找回你原来的博客了哦”\n\n确实没必要强求了，虽然代码和三年前的一模一样，但好像真的不好回来了\n\n但搞不成也无所谓，用新版本的hexo也是可以用的，老文章也是在的，我现在都在继续写了。要是我哪天真的想看老博客git的历史还在，北极还保存着一份呢\n\n这里才是我想和自己说的，留不住就不要强留了，可以怀念但不要沉湎，现在也有好多事要做呢\n\n耽误太多时间，事情可就做不完了！\n\n# 嗯？\n\n我现在咋这么矫情，根本原因是我不懂node，不懂hexo，咋说出这么多话来？","source":"_posts/这也太破了.md","raw":"---\ntitle: 这也太破了\ntags:\n  - 乱感叹\ncategories: 发疯文学\ntypora-root-url: ../../source\ndate: 2023-11-05 11:42:24\n---\n\n# 起因\n\n事情是这样的，最近面试有些多，看别人简历会有些附带博客，让我也想起来我有这么个事实上废弃了的博客\n\n博客写多一点，一个是说明这人有积累，一个还能引导面试官的面试方向，于是就决定去捡起我的博客来\n\n写博客最密集的是18、19这两年，那时候我还在帮hxf做网站，刚刚艰难毕业，刚刚开始工作，是我对未来充满憧憬，求知欲最旺盛的时候，肯分享肯折腾\n\n啊，想起来真的美好啊\n\n不像现在老太龙钟，上班在sql和xgb中消磨人生，下班边玩边骂原神\n\n这简直都不是博客不博客的问题了，这是要找回青春找回自我\n\n# 一地鸡毛\n\n原本设想是美好的，我在本地调通hexo，然后部署到github的action里，这样我直接在网页端写博客就行\n\n是啊，2023年了，本来写博客就够变态了，更不要说在本地部署写了\n\n第一步给我的小mac充电，它现在不插电只能续航一个小时了，都是岁月的痕迹\n\n找到博客的路径，hexo命令我忘了，但是terminal都记得，我直接hexo deploy\n\n不出意外地，push不上去了，好像是github不支持https这种方式了，问题不大，就是重新ssh-keygen，我很熟\n\n就是从登录github开始，事情起变化了，我登不上去了，github强制两部验证？这是啥？为什么手机验证码不支持+86？\n\ngithub解决之后，又发现hexo generate出来的网页是空的，版本问题，hexo和node版本不兼容，node太新，hexo太老，这种问题一般有两个选项，降级node，后者更新hexo，但我现在是个有经验的程序员了，升级风险不可控，我选择苟在老版本\n\n当时已经过了一点了，我现在想不起来昨天一点我是怎么折腾的，但最后我妥协用了新版本\n\n其实就是把hexo再重新部署一遍，但老项目里有我很多配置项，不能完整迁移过来，我没办法完全复原我的老博客\n\n新版本的hexo也太破了，配置项完全改了不说，一个语言设置选项都没法用，博客语言在阿拉伯和泰中来回切换，我最终的结局方法是啥，把语言配置文件删到只剩中文\n\nhexo的搜索插件也是，很多文章搜不出来，我记得老版本没这些问题的，还有mathjax也不对\n\n总之就是博客回来了，但没完全回来，回来了，但好像没那个味道了\n\n但写到这里我确实想知道昨天为啥没有降级成功，我决定再去降级一次\n\n应该是npm install很慢，然后我决定用cnpm，但cnpm直接不给下老版本的依赖，导致我最终放弃\n\n本来我想描述一下昨天的一地鸡毛的，变成了现场表演一地鸡毛\n\nnpm就是卡在这里\n\n```\n⸨    ░░░░░░░░░░░░░░⸩ ⠇ fetchMetadata: sill mapToRegistry uri https://registry.npm.taobao.org/repeat-string\n(node:22980) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 error listeners added. Use emitter.setMaxListeners() to increase limit\n```\n\n# 留不住\n\n~~这次我要耐心等npm，我还有一个下午，应该不至于再搞到很晚了。~~\n\n降级还是未遂，那一个个报错就像拼多多的砍一刀，“再搞定这个报错，就能彻底找回你原来的博客了哦”\n\n确实没必要强求了，虽然代码和三年前的一模一样，但好像真的不好回来了\n\n但搞不成也无所谓，用新版本的hexo也是可以用的，老文章也是在的，我现在都在继续写了。要是我哪天真的想看老博客git的历史还在，北极还保存着一份呢\n\n这里才是我想和自己说的，留不住就不要强留了，可以怀念但不要沉湎，现在也有好多事要做呢\n\n耽误太多时间，事情可就做不完了！\n\n# 嗯？\n\n我现在咋这么矫情，根本原因是我不懂node，不懂hexo，咋说出这么多话来？","slug":"这也太破了","published":1,"updated":"2023-11-05T11:42:33.906Z","comments":1,"layout":"post","photos":[],"_id":"clolf0lie005ps2kz5daueikn","content":"<h1 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h1><p>事情是这样的，最近面试有些多，看别人简历会有些附带博客，让我也想起来我有这么个事实上废弃了的博客</p>\n<p>博客写多一点，一个是说明这人有积累，一个还能引导面试官的面试方向，于是就决定去捡起我的博客来</p>\n<p>写博客最密集的是18、19这两年，那时候我还在帮hxf做网站，刚刚艰难毕业，刚刚开始工作，是我对未来充满憧憬，求知欲最旺盛的时候，肯分享肯折腾</p>\n<p>啊，想起来真的美好啊</p>\n<p>不像现在老太龙钟，上班在sql和xgb中消磨人生，下班边玩边骂原神</p>\n<p>这简直都不是博客不博客的问题了，这是要找回青春找回自我</p>\n<h1 id=\"一地鸡毛\"><a href=\"#一地鸡毛\" class=\"headerlink\" title=\"一地鸡毛\"></a>一地鸡毛</h1><p>原本设想是美好的，我在本地调通hexo，然后部署到github的action里，这样我直接在网页端写博客就行</p>\n<p>是啊，2023年了，本来写博客就够变态了，更不要说在本地部署写了</p>\n<p>第一步给我的小mac充电，它现在不插电只能续航一个小时了，都是岁月的痕迹</p>\n<p>找到博客的路径，hexo命令我忘了，但是terminal都记得，我直接hexo deploy</p>\n<p>不出意外地，push不上去了，好像是github不支持https这种方式了，问题不大，就是重新ssh-keygen，我很熟</p>\n<p>就是从登录github开始，事情起变化了，我登不上去了，github强制两部验证？这是啥？为什么手机验证码不支持+86？</p>\n<p>github解决之后，又发现hexo generate出来的网页是空的，版本问题，hexo和node版本不兼容，node太新，hexo太老，这种问题一般有两个选项，降级node，后者更新hexo，但我现在是个有经验的程序员了，升级风险不可控，我选择苟在老版本</p>\n<p>当时已经过了一点了，我现在想不起来昨天一点我是怎么折腾的，但最后我妥协用了新版本</p>\n<p>其实就是把hexo再重新部署一遍，但老项目里有我很多配置项，不能完整迁移过来，我没办法完全复原我的老博客</p>\n<p>新版本的hexo也太破了，配置项完全改了不说，一个语言设置选项都没法用，博客语言在阿拉伯和泰中来回切换，我最终的结局方法是啥，把语言配置文件删到只剩中文</p>\n<p>hexo的搜索插件也是，很多文章搜不出来，我记得老版本没这些问题的，还有mathjax也不对</p>\n<p>总之就是博客回来了，但没完全回来，回来了，但好像没那个味道了</p>\n<p>但写到这里我确实想知道昨天为啥没有降级成功，我决定再去降级一次</p>\n<p>应该是npm install很慢，然后我决定用cnpm，但cnpm直接不给下老版本的依赖，导致我最终放弃</p>\n<p>本来我想描述一下昨天的一地鸡毛的，变成了现场表演一地鸡毛</p>\n<p>npm就是卡在这里</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">⸨    ░░░░░░░░░░░░░░⸩ ⠇ fetchMetadata: sill mapToRegistry uri https://registry.npm.taobao.org/repeat-string</span><br><span class=\"line\">(node:22980) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 error listeners added. Use emitter.setMaxListeners() to increase limit</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"留不住\"><a href=\"#留不住\" class=\"headerlink\" title=\"留不住\"></a>留不住</h1><p><del>这次我要耐心等npm，我还有一个下午，应该不至于再搞到很晚了。</del></p>\n<p>降级还是未遂，那一个个报错就像拼多多的砍一刀，“再搞定这个报错，就能彻底找回你原来的博客了哦”</p>\n<p>确实没必要强求了，虽然代码和三年前的一模一样，但好像真的不好回来了</p>\n<p>但搞不成也无所谓，用新版本的hexo也是可以用的，老文章也是在的，我现在都在继续写了。要是我哪天真的想看老博客git的历史还在，北极还保存着一份呢</p>\n<p>这里才是我想和自己说的，留不住就不要强留了，可以怀念但不要沉湎，现在也有好多事要做呢</p>\n<p>耽误太多时间，事情可就做不完了！</p>\n<h1 id=\"嗯？\"><a href=\"#嗯？\" class=\"headerlink\" title=\"嗯？\"></a>嗯？</h1><p>我现在咋这么矫情，根本原因是我不懂node，不懂hexo，咋说出这么多话来？</p>\n","excerpt":"","more":"<h1 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h1><p>事情是这样的，最近面试有些多，看别人简历会有些附带博客，让我也想起来我有这么个事实上废弃了的博客</p>\n<p>博客写多一点，一个是说明这人有积累，一个还能引导面试官的面试方向，于是就决定去捡起我的博客来</p>\n<p>写博客最密集的是18、19这两年，那时候我还在帮hxf做网站，刚刚艰难毕业，刚刚开始工作，是我对未来充满憧憬，求知欲最旺盛的时候，肯分享肯折腾</p>\n<p>啊，想起来真的美好啊</p>\n<p>不像现在老太龙钟，上班在sql和xgb中消磨人生，下班边玩边骂原神</p>\n<p>这简直都不是博客不博客的问题了，这是要找回青春找回自我</p>\n<h1 id=\"一地鸡毛\"><a href=\"#一地鸡毛\" class=\"headerlink\" title=\"一地鸡毛\"></a>一地鸡毛</h1><p>原本设想是美好的，我在本地调通hexo，然后部署到github的action里，这样我直接在网页端写博客就行</p>\n<p>是啊，2023年了，本来写博客就够变态了，更不要说在本地部署写了</p>\n<p>第一步给我的小mac充电，它现在不插电只能续航一个小时了，都是岁月的痕迹</p>\n<p>找到博客的路径，hexo命令我忘了，但是terminal都记得，我直接hexo deploy</p>\n<p>不出意外地，push不上去了，好像是github不支持https这种方式了，问题不大，就是重新ssh-keygen，我很熟</p>\n<p>就是从登录github开始，事情起变化了，我登不上去了，github强制两部验证？这是啥？为什么手机验证码不支持+86？</p>\n<p>github解决之后，又发现hexo generate出来的网页是空的，版本问题，hexo和node版本不兼容，node太新，hexo太老，这种问题一般有两个选项，降级node，后者更新hexo，但我现在是个有经验的程序员了，升级风险不可控，我选择苟在老版本</p>\n<p>当时已经过了一点了，我现在想不起来昨天一点我是怎么折腾的，但最后我妥协用了新版本</p>\n<p>其实就是把hexo再重新部署一遍，但老项目里有我很多配置项，不能完整迁移过来，我没办法完全复原我的老博客</p>\n<p>新版本的hexo也太破了，配置项完全改了不说，一个语言设置选项都没法用，博客语言在阿拉伯和泰中来回切换，我最终的结局方法是啥，把语言配置文件删到只剩中文</p>\n<p>hexo的搜索插件也是，很多文章搜不出来，我记得老版本没这些问题的，还有mathjax也不对</p>\n<p>总之就是博客回来了，但没完全回来，回来了，但好像没那个味道了</p>\n<p>但写到这里我确实想知道昨天为啥没有降级成功，我决定再去降级一次</p>\n<p>应该是npm install很慢，然后我决定用cnpm，但cnpm直接不给下老版本的依赖，导致我最终放弃</p>\n<p>本来我想描述一下昨天的一地鸡毛的，变成了现场表演一地鸡毛</p>\n<p>npm就是卡在这里</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">⸨    ░░░░░░░░░░░░░░⸩ ⠇ fetchMetadata: sill mapToRegistry uri https://registry.npm.taobao.org/repeat-string</span><br><span class=\"line\">(node:22980) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 error listeners added. Use emitter.setMaxListeners() to increase limit</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"留不住\"><a href=\"#留不住\" class=\"headerlink\" title=\"留不住\"></a>留不住</h1><p><del>这次我要耐心等npm，我还有一个下午，应该不至于再搞到很晚了。</del></p>\n<p>降级还是未遂，那一个个报错就像拼多多的砍一刀，“再搞定这个报错，就能彻底找回你原来的博客了哦”</p>\n<p>确实没必要强求了，虽然代码和三年前的一模一样，但好像真的不好回来了</p>\n<p>但搞不成也无所谓，用新版本的hexo也是可以用的，老文章也是在的，我现在都在继续写了。要是我哪天真的想看老博客git的历史还在，北极还保存着一份呢</p>\n<p>这里才是我想和自己说的，留不住就不要强留了，可以怀念但不要沉湎，现在也有好多事要做呢</p>\n<p>耽误太多时间，事情可就做不完了！</p>\n<h1 id=\"嗯？\"><a href=\"#嗯？\" class=\"headerlink\" title=\"嗯？\"></a>嗯？</h1><p>我现在咋这么矫情，根本原因是我不懂node，不懂hexo，咋说出这么多话来？</p>\n"},{"title":"配置评论、搜索和代码","typora-root-url":"../../source","date":"2018-07-06T08:14:11.000Z","_content":"\n# 评论\n\n## gitment\n\n- gitment是挂在github的issue上，从github给的api上提交和拉取评论，然后界面（应该）是作者自己做的。\n- 当然好处是只能github账号登陆，坏处的话，issue会很乱吧。。。\n- 具体操作：可以看[这里](http://xichen.pub/2018/01/31/2018-01-31-gitment/)，就是先注册个application，然后把id、secret什么的填到next的config里就好。\n- 坑：Error：validation failed。原因是作者的方法在create an issue时，提交的id号太长了。。。方法是在`next/_third-party/comments/gitment.swig`里，修改`id: window.location.pathname`为`id: '{{ page.date }}'`\n\n## [valine](https://valine.js.org/)\n\n- 是我目前见到过的唯一支持匿名评论的，也是需要注册valine的账号\n\n# 搜索\n\n## ~~Swiftype~~\n\n- ~~去注册账号，拿到swiftype_key，写道next的配置里就好~~\n- 后来才这道这个是要收费的，不要用了\n\n# local search\n\n- `npm install --save hexo-generator-search`\n- 在主题的config里，local_search的enable要打开\n- 在hexo的config里，写上\n\n```yml\nsearch:\n  path: search.xml\n  field: post(或者all)\n```\n\n- 最后`hexo g`就可以了\n\n# 代码\n\n- 修改hexo的配置\n\n```yml\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n```\n\n- 然后在next的配置里修改代码配色\n\n```yml\nhighlight_theme: night bright\n```\n\n- 写代码的时候，要注意在\\`\\`\\`后加上代码类型如c、python、yml等等\n\n# 公式\n\n- 在next的config里，enable mathjax\n- 行内公式用`$`，行间公式用`$$`\n- 但是还有些问题，比如说公式里有两个`_`，hexo会优先按markdown给你解析成斜体，所以latex公式还不能直接抄，有些富豪需要转义\n- 当然，也有优雅的方法，换个render\n\n```shell\nnpm uninstall hexo-renderer-marked --save\nnpm install hexo-renderer-kramed --save\n```\n\n- 更换完了行内公式还是有问题，参考[这里](https://www.jianshu.com/p/e8d433a2c5b7)\n- 修改kramed的转义规则，文件为`/node_modules/kramed/lib/rules/inline.js`\n\n```js\nescape: /^\\\\([`*\\[\\]()# +\\-.!_>])/,\nem: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n```\n\n- mathjax公式粗体，放弃`\\bm{}`，使用`\\boldsymbol{}`\n\n# 流程图\n\n```shell\nnpm install --save hexo-filter-flowchart\n```\n\n","source":"_posts/配置评论、搜索和代码.md","raw":"---\ntitle: 配置评论、搜索和代码\ntypora-root-url: ../../source\ntags:\n  - hexo\n  - next\ncategories: hexo-next\ndate: 2018-07-06 16:14:11\n---\n\n# 评论\n\n## gitment\n\n- gitment是挂在github的issue上，从github给的api上提交和拉取评论，然后界面（应该）是作者自己做的。\n- 当然好处是只能github账号登陆，坏处的话，issue会很乱吧。。。\n- 具体操作：可以看[这里](http://xichen.pub/2018/01/31/2018-01-31-gitment/)，就是先注册个application，然后把id、secret什么的填到next的config里就好。\n- 坑：Error：validation failed。原因是作者的方法在create an issue时，提交的id号太长了。。。方法是在`next/_third-party/comments/gitment.swig`里，修改`id: window.location.pathname`为`id: '{{ page.date }}'`\n\n## [valine](https://valine.js.org/)\n\n- 是我目前见到过的唯一支持匿名评论的，也是需要注册valine的账号\n\n# 搜索\n\n## ~~Swiftype~~\n\n- ~~去注册账号，拿到swiftype_key，写道next的配置里就好~~\n- 后来才这道这个是要收费的，不要用了\n\n# local search\n\n- `npm install --save hexo-generator-search`\n- 在主题的config里，local_search的enable要打开\n- 在hexo的config里，写上\n\n```yml\nsearch:\n  path: search.xml\n  field: post(或者all)\n```\n\n- 最后`hexo g`就可以了\n\n# 代码\n\n- 修改hexo的配置\n\n```yml\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n```\n\n- 然后在next的配置里修改代码配色\n\n```yml\nhighlight_theme: night bright\n```\n\n- 写代码的时候，要注意在\\`\\`\\`后加上代码类型如c、python、yml等等\n\n# 公式\n\n- 在next的config里，enable mathjax\n- 行内公式用`$`，行间公式用`$$`\n- 但是还有些问题，比如说公式里有两个`_`，hexo会优先按markdown给你解析成斜体，所以latex公式还不能直接抄，有些富豪需要转义\n- 当然，也有优雅的方法，换个render\n\n```shell\nnpm uninstall hexo-renderer-marked --save\nnpm install hexo-renderer-kramed --save\n```\n\n- 更换完了行内公式还是有问题，参考[这里](https://www.jianshu.com/p/e8d433a2c5b7)\n- 修改kramed的转义规则，文件为`/node_modules/kramed/lib/rules/inline.js`\n\n```js\nescape: /^\\\\([`*\\[\\]()# +\\-.!_>])/,\nem: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n```\n\n- mathjax公式粗体，放弃`\\bm{}`，使用`\\boldsymbol{}`\n\n# 流程图\n\n```shell\nnpm install --save hexo-filter-flowchart\n```\n\n","slug":"配置评论、搜索和代码","published":1,"updated":"2023-11-05T11:42:33.907Z","comments":1,"layout":"post","photos":[],"_id":"clolf0lie005rs2kzhtvrcysg","content":"<h1 id=\"评论\"><a href=\"#评论\" class=\"headerlink\" title=\"评论\"></a>评论</h1><h2 id=\"gitment\"><a href=\"#gitment\" class=\"headerlink\" title=\"gitment\"></a>gitment</h2><ul>\n<li>gitment是挂在github的issue上，从github给的api上提交和拉取评论，然后界面（应该）是作者自己做的。</li>\n<li>当然好处是只能github账号登陆，坏处的话，issue会很乱吧。。。</li>\n<li>具体操作：可以看<a href=\"http://xichen.pub/2018/01/31/2018-01-31-gitment/\">这里</a>，就是先注册个application，然后把id、secret什么的填到next的config里就好。</li>\n<li>坑：Error：validation failed。原因是作者的方法在create an issue时，提交的id号太长了。。。方法是在<code>next/_third-party/comments/gitment.swig</code>里，修改<code>id: window.location.pathname</code>为<code>id: &#39;&#123;&#123; page.date &#125;&#125;&#39;</code></li>\n</ul>\n<h2 id=\"valine\"><a href=\"#valine\" class=\"headerlink\" title=\"valine\"></a><a href=\"https://valine.js.org/\">valine</a></h2><ul>\n<li>是我目前见到过的唯一支持匿名评论的，也是需要注册valine的账号</li>\n</ul>\n<h1 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h1><h2 id=\"Swiftype\"><a href=\"#Swiftype\" class=\"headerlink\" title=\"Swiftype\"></a><del>Swiftype</del></h2><ul>\n<li><del>去注册账号，拿到swiftype_key，写道next的配置里就好</del></li>\n<li>后来才这道这个是要收费的，不要用了</li>\n</ul>\n<h1 id=\"local-search\"><a href=\"#local-search\" class=\"headerlink\" title=\"local search\"></a>local search</h1><ul>\n<li><code>npm install --save hexo-generator-search</code></li>\n<li>在主题的config里，local_search的enable要打开</li>\n<li>在hexo的config里，写上</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.xml</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post(或者all)</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>最后<code>hexo g</code>就可以了</li>\n</ul>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><ul>\n<li>修改hexo的配置</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">highlight:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">line_number:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">auto_detect:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">tab_replace:</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>然后在next的配置里修改代码配色</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">highlight_theme:</span> <span class=\"string\">night</span> <span class=\"string\">bright</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>写代码的时候，要注意在```后加上代码类型如c、python、yml等等</li>\n</ul>\n<h1 id=\"公式\"><a href=\"#公式\" class=\"headerlink\" title=\"公式\"></a>公式</h1><ul>\n<li>在next的config里，enable mathjax</li>\n<li>行内公式用<code>$</code>，行间公式用<code>$$</code></li>\n<li>但是还有些问题，比如说公式里有两个<code>_</code>，hexo会优先按markdown给你解析成斜体，所以latex公式还不能直接抄，有些富豪需要转义</li>\n<li>当然，也有优雅的方法，换个render</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall hexo-renderer-marked --save</span><br><span class=\"line\">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>更换完了行内公式还是有问题，参考<a href=\"https://www.jianshu.com/p/e8d433a2c5b7\">这里</a></li>\n<li>修改kramed的转义规则，文件为<code>/node_modules/kramed/lib/rules/inline.js</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">escape</span>: <span class=\"regexp\">/^\\\\([`*\\[\\]()# +\\-.!_&gt;])/</span>,</span><br><span class=\"line\"><span class=\"attr\">em</span>: <span class=\"regexp\">/^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/</span>,</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mathjax公式粗体，放弃<code>\\bm&#123;&#125;</code>，使用<code>\\boldsymbol&#123;&#125;</code></li>\n</ul>\n<h1 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-filter-flowchart</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h1 id=\"评论\"><a href=\"#评论\" class=\"headerlink\" title=\"评论\"></a>评论</h1><h2 id=\"gitment\"><a href=\"#gitment\" class=\"headerlink\" title=\"gitment\"></a>gitment</h2><ul>\n<li>gitment是挂在github的issue上，从github给的api上提交和拉取评论，然后界面（应该）是作者自己做的。</li>\n<li>当然好处是只能github账号登陆，坏处的话，issue会很乱吧。。。</li>\n<li>具体操作：可以看<a href=\"http://xichen.pub/2018/01/31/2018-01-31-gitment/\">这里</a>，就是先注册个application，然后把id、secret什么的填到next的config里就好。</li>\n<li>坑：Error：validation failed。原因是作者的方法在create an issue时，提交的id号太长了。。。方法是在<code>next/_third-party/comments/gitment.swig</code>里，修改<code>id: window.location.pathname</code>为<code>id: &#39;&#123;&#123; page.date &#125;&#125;&#39;</code></li>\n</ul>\n<h2 id=\"valine\"><a href=\"#valine\" class=\"headerlink\" title=\"valine\"></a><a href=\"https://valine.js.org/\">valine</a></h2><ul>\n<li>是我目前见到过的唯一支持匿名评论的，也是需要注册valine的账号</li>\n</ul>\n<h1 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h1><h2 id=\"Swiftype\"><a href=\"#Swiftype\" class=\"headerlink\" title=\"Swiftype\"></a><del>Swiftype</del></h2><ul>\n<li><del>去注册账号，拿到swiftype_key，写道next的配置里就好</del></li>\n<li>后来才这道这个是要收费的，不要用了</li>\n</ul>\n<h1 id=\"local-search\"><a href=\"#local-search\" class=\"headerlink\" title=\"local search\"></a>local search</h1><ul>\n<li><code>npm install --save hexo-generator-search</code></li>\n<li>在主题的config里，local_search的enable要打开</li>\n<li>在hexo的config里，写上</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.xml</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post(或者all)</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>最后<code>hexo g</code>就可以了</li>\n</ul>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><ul>\n<li>修改hexo的配置</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">highlight:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">line_number:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">auto_detect:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">tab_replace:</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>然后在next的配置里修改代码配色</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">highlight_theme:</span> <span class=\"string\">night</span> <span class=\"string\">bright</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>写代码的时候，要注意在```后加上代码类型如c、python、yml等等</li>\n</ul>\n<h1 id=\"公式\"><a href=\"#公式\" class=\"headerlink\" title=\"公式\"></a>公式</h1><ul>\n<li>在next的config里，enable mathjax</li>\n<li>行内公式用<code>$</code>，行间公式用<code>$$</code></li>\n<li>但是还有些问题，比如说公式里有两个<code>_</code>，hexo会优先按markdown给你解析成斜体，所以latex公式还不能直接抄，有些富豪需要转义</li>\n<li>当然，也有优雅的方法，换个render</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall hexo-renderer-marked --save</span><br><span class=\"line\">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>更换完了行内公式还是有问题，参考<a href=\"https://www.jianshu.com/p/e8d433a2c5b7\">这里</a></li>\n<li>修改kramed的转义规则，文件为<code>/node_modules/kramed/lib/rules/inline.js</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">escape</span>: <span class=\"regexp\">/^\\\\([`*\\[\\]()# +\\-.!_&gt;])/</span>,</span><br><span class=\"line\"><span class=\"attr\">em</span>: <span class=\"regexp\">/^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/</span>,</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mathjax公式粗体，放弃<code>\\bm&#123;&#125;</code>，使用<code>\\boldsymbol&#123;&#125;</code></li>\n</ul>\n<h1 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-filter-flowchart</span><br></pre></td></tr></table></figure>\n\n"},{"title":"阅读更多","typora-root-url":"../../source","date":"2018-01-30T06:28:31.000Z","_content":"\n```html\n<div id=\"wrap{{ subject.id }}\" class=\"wrap\">{{ subject.about_subject | safe }}</div>\n<div id=\"read-more{{ subject.id }}\" class=\"read-more\"></div>\n```\n```css\n<style>\n.wrap{position: relative;overflow: hidden;}\n.read-more a{padding-right: 22px;background: url() no-repeat 100% 50%;font-weight: bold;text-decoration: none;}\n.read-more a:hover{color: #000;}\n</style>\n```\n```javascript\n<script type=\"text/javascript\">\n{% for subject in subjects %}\n$(function(){\n var slideHeight = 300; // px\n var defHeight = $('#wrap{{ subject.id }}').height();\n if(defHeight >= slideHeight){\n  $('#wrap{{ subject.id }}').css('height' , slideHeight + 'px');\n  $('#read-more{{ subject.id }}').append('<a href=\"#\">查看更多</a>');\n  $('#read-more{{ subject.id }} a').click(function(){\n   var curHeight = $('#wrap{{ subject.id }}').height();\n   if(curHeight == slideHeight){\n    $('#wrap{{ subject.id }}').animate({\n     height: defHeight\n    }, \"normal\");\n    $('#read-more{{ subject.id }} a').html('隐藏');\n   }else{\n    $('#wrap{{ subject.id }}').animate({\n     height: slideHeight\n    }, \"normal\");\n    $('#read-more{{ subject.id }} a').html('查看更多');\n   }\n   return false;\n  });\n }\n});\n{% endfor %}\n</script>\n```\n","source":"_posts/阅读更多.md","raw":"---\ntitle: 阅读更多\ntypora-root-url: ../../source\ndate: 2018-01-30 14:28:31\ncategories: flask网站总结\n---\n\n```html\n<div id=\"wrap{{ subject.id }}\" class=\"wrap\">{{ subject.about_subject | safe }}</div>\n<div id=\"read-more{{ subject.id }}\" class=\"read-more\"></div>\n```\n```css\n<style>\n.wrap{position: relative;overflow: hidden;}\n.read-more a{padding-right: 22px;background: url() no-repeat 100% 50%;font-weight: bold;text-decoration: none;}\n.read-more a:hover{color: #000;}\n</style>\n```\n```javascript\n<script type=\"text/javascript\">\n{% for subject in subjects %}\n$(function(){\n var slideHeight = 300; // px\n var defHeight = $('#wrap{{ subject.id }}').height();\n if(defHeight >= slideHeight){\n  $('#wrap{{ subject.id }}').css('height' , slideHeight + 'px');\n  $('#read-more{{ subject.id }}').append('<a href=\"#\">查看更多</a>');\n  $('#read-more{{ subject.id }} a').click(function(){\n   var curHeight = $('#wrap{{ subject.id }}').height();\n   if(curHeight == slideHeight){\n    $('#wrap{{ subject.id }}').animate({\n     height: defHeight\n    }, \"normal\");\n    $('#read-more{{ subject.id }} a').html('隐藏');\n   }else{\n    $('#wrap{{ subject.id }}').animate({\n     height: slideHeight\n    }, \"normal\");\n    $('#read-more{{ subject.id }} a').html('查看更多');\n   }\n   return false;\n  });\n }\n});\n{% endfor %}\n</script>\n```\n","slug":"阅读更多","published":1,"updated":"2023-11-05T11:42:33.907Z","comments":1,"layout":"post","photos":[],"_id":"clolf0lif005vs2kzefxr3ivq","content":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;wrap&#123;&#123; subject.id &#125;&#125;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wrap&quot;</span>&gt;</span>&#123;&#123; subject.about_subject | safe &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;read-more&#123;&#123; subject.id &#125;&#125;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;read-more&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\"><span class=\"selector-class\">.wrap</span>&#123;<span class=\"attribute\">position</span>: relative;<span class=\"attribute\">overflow</span>: hidden;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.read-more</span> <span class=\"selector-tag\">a</span>&#123;<span class=\"attribute\">padding-right</span>: <span class=\"number\">22px</span>;<span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>() no-repeat <span class=\"number\">100%</span> <span class=\"number\">50%</span>;<span class=\"attribute\">font-weight</span>: bold;<span class=\"attribute\">text-decoration</span>: none;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.read-more</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span>&#123;<span class=\"attribute\">color</span>: <span class=\"number\">#000</span>;&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">&#123;% <span class=\"keyword\">for</span> subject <span class=\"keyword\">in</span> subjects %&#125;</span><br><span class=\"line\">$(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> slideHeight = <span class=\"number\">300</span>; <span class=\"comment\">// px</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> defHeight = $(<span class=\"string\">&#x27;#wrap&#123;&#123; subject.id &#125;&#125;&#x27;</span>).<span class=\"title function_\">height</span>();</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(defHeight &gt;= slideHeight)&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&#x27;#wrap&#123;&#123; subject.id &#125;&#125;&#x27;</span>).<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;height&#x27;</span> , slideHeight + <span class=\"string\">&#x27;px&#x27;</span>);</span><br><span class=\"line\">  $(<span class=\"string\">&#x27;#read-more&#123;&#123; subject.id &#125;&#125;&#x27;</span>).<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;&lt;a href=&quot;#&quot;&gt;查看更多&lt;/a&gt;&#x27;</span>);</span><br><span class=\"line\">  $(<span class=\"string\">&#x27;#read-more&#123;&#123; subject.id &#125;&#125; a&#x27;</span>).<span class=\"title function_\">click</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> curHeight = $(<span class=\"string\">&#x27;#wrap&#123;&#123; subject.id &#125;&#125;&#x27;</span>).<span class=\"title function_\">height</span>();</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(curHeight == slideHeight)&#123;</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#wrap&#123;&#123; subject.id &#125;&#125;&#x27;</span>).<span class=\"title function_\">animate</span>(&#123;</span><br><span class=\"line\">     <span class=\"attr\">height</span>: defHeight</span><br><span class=\"line\">    &#125;, <span class=\"string\">&quot;normal&quot;</span>);</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#read-more&#123;&#123; subject.id &#125;&#125; a&#x27;</span>).<span class=\"title function_\">html</span>(<span class=\"string\">&#x27;隐藏&#x27;</span>);</span><br><span class=\"line\">   &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#wrap&#123;&#123; subject.id &#125;&#125;&#x27;</span>).<span class=\"title function_\">animate</span>(&#123;</span><br><span class=\"line\">     <span class=\"attr\">height</span>: slideHeight</span><br><span class=\"line\">    &#125;, <span class=\"string\">&quot;normal&quot;</span>);</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#read-more&#123;&#123; subject.id &#125;&#125; a&#x27;</span>).<span class=\"title function_\">html</span>(<span class=\"string\">&#x27;查看更多&#x27;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&#123;% endfor %&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;wrap&#123;&#123; subject.id &#125;&#125;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wrap&quot;</span>&gt;</span>&#123;&#123; subject.about_subject | safe &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;read-more&#123;&#123; subject.id &#125;&#125;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;read-more&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\"><span class=\"selector-class\">.wrap</span>&#123;<span class=\"attribute\">position</span>: relative;<span class=\"attribute\">overflow</span>: hidden;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.read-more</span> <span class=\"selector-tag\">a</span>&#123;<span class=\"attribute\">padding-right</span>: <span class=\"number\">22px</span>;<span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>() no-repeat <span class=\"number\">100%</span> <span class=\"number\">50%</span>;<span class=\"attribute\">font-weight</span>: bold;<span class=\"attribute\">text-decoration</span>: none;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.read-more</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span>&#123;<span class=\"attribute\">color</span>: <span class=\"number\">#000</span>;&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">&#123;% <span class=\"keyword\">for</span> subject <span class=\"keyword\">in</span> subjects %&#125;</span><br><span class=\"line\">$(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> slideHeight = <span class=\"number\">300</span>; <span class=\"comment\">// px</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> defHeight = $(<span class=\"string\">&#x27;#wrap&#123;&#123; subject.id &#125;&#125;&#x27;</span>).<span class=\"title function_\">height</span>();</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(defHeight &gt;= slideHeight)&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&#x27;#wrap&#123;&#123; subject.id &#125;&#125;&#x27;</span>).<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;height&#x27;</span> , slideHeight + <span class=\"string\">&#x27;px&#x27;</span>);</span><br><span class=\"line\">  $(<span class=\"string\">&#x27;#read-more&#123;&#123; subject.id &#125;&#125;&#x27;</span>).<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;&lt;a href=&quot;#&quot;&gt;查看更多&lt;/a&gt;&#x27;</span>);</span><br><span class=\"line\">  $(<span class=\"string\">&#x27;#read-more&#123;&#123; subject.id &#125;&#125; a&#x27;</span>).<span class=\"title function_\">click</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> curHeight = $(<span class=\"string\">&#x27;#wrap&#123;&#123; subject.id &#125;&#125;&#x27;</span>).<span class=\"title function_\">height</span>();</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(curHeight == slideHeight)&#123;</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#wrap&#123;&#123; subject.id &#125;&#125;&#x27;</span>).<span class=\"title function_\">animate</span>(&#123;</span><br><span class=\"line\">     <span class=\"attr\">height</span>: defHeight</span><br><span class=\"line\">    &#125;, <span class=\"string\">&quot;normal&quot;</span>);</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#read-more&#123;&#123; subject.id &#125;&#125; a&#x27;</span>).<span class=\"title function_\">html</span>(<span class=\"string\">&#x27;隐藏&#x27;</span>);</span><br><span class=\"line\">   &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#wrap&#123;&#123; subject.id &#125;&#125;&#x27;</span>).<span class=\"title function_\">animate</span>(&#123;</span><br><span class=\"line\">     <span class=\"attr\">height</span>: slideHeight</span><br><span class=\"line\">    &#125;, <span class=\"string\">&quot;normal&quot;</span>);</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#read-more&#123;&#123; subject.id &#125;&#125; a&#x27;</span>).<span class=\"title function_\">html</span>(<span class=\"string\">&#x27;查看更多&#x27;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&#123;% endfor %&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n"},{"title":"随便写点什么吧","typora-root-url":"../../source","date":"2019-06-16T10:03:50.000Z","_content":"\n净资产 = 总资产 - 负债\n股本数：发行的股票的数量\n每股净资产 = 净资产 / 股本数\n市值 = 每股价格 * 股本数\n市净率（PB） = 市值 / 净资产 = 每股价格 / 每股净资产\n\n每股利润 = 净利润 / 股本数\n市盈率（PE） = 市值 / 净利润 = 每股价格 / 每股利润\n\n市盈增长比（PEG） = 市盈率 / (平均增长率 * 100)\n","source":"_posts/随便写点什么吧.md","raw":"---\ntitle: 随便写点什么吧\ntypora-root-url: ../../source\ntags:\n  - 股票\ncategories: \ndate: 2019-06-16 18:03:50\n---\n\n净资产 = 总资产 - 负债\n股本数：发行的股票的数量\n每股净资产 = 净资产 / 股本数\n市值 = 每股价格 * 股本数\n市净率（PB） = 市值 / 净资产 = 每股价格 / 每股净资产\n\n每股利润 = 净利润 / 股本数\n市盈率（PE） = 市值 / 净利润 = 每股价格 / 每股利润\n\n市盈增长比（PEG） = 市盈率 / (平均增长率 * 100)\n","slug":"随便写点什么吧","published":1,"updated":"2023-11-05T11:42:33.907Z","comments":1,"layout":"post","photos":[],"_id":"clolf0lif005xs2kz571dawmw","content":"<p>净资产 &#x3D; 总资产 - 负债<br>股本数：发行的股票的数量<br>每股净资产 &#x3D; 净资产 &#x2F; 股本数<br>市值 &#x3D; 每股价格 * 股本数<br>市净率（PB） &#x3D; 市值 &#x2F; 净资产 &#x3D; 每股价格 &#x2F; 每股净资产</p>\n<p>每股利润 &#x3D; 净利润 &#x2F; 股本数<br>市盈率（PE） &#x3D; 市值 &#x2F; 净利润 &#x3D; 每股价格 &#x2F; 每股利润</p>\n<p>市盈增长比（PEG） &#x3D; 市盈率 &#x2F; (平均增长率 * 100)</p>\n","excerpt":"","more":"<p>净资产 &#x3D; 总资产 - 负债<br>股本数：发行的股票的数量<br>每股净资产 &#x3D; 净资产 &#x2F; 股本数<br>市值 &#x3D; 每股价格 * 股本数<br>市净率（PB） &#x3D; 市值 &#x2F; 净资产 &#x3D; 每股价格 &#x2F; 每股净资产</p>\n<p>每股利润 &#x3D; 净利润 &#x2F; 股本数<br>市盈率（PE） &#x3D; 市值 &#x2F; 净利润 &#x3D; 每股价格 &#x2F; 每股利润</p>\n<p>市盈增长比（PEG） &#x3D; 市盈率 &#x2F; (平均增长率 * 100)</p>\n"},{"title":"蒋勋的红楼梦","typora-root-url":"../../source","date":"2019-06-16T12:15:33.000Z","_content":"\n- 最近在听蒋勋的细说红楼梦，那温柔的台普，那细腻的解读，那新颖的角度，那穿插在解说其中的娓娓道来的个人经历\n\n- 但是我搜了几个在线的FM，都没有资源，不得已在一个微信公众号上听，体验不是太好\n\n- 于是我想在网上找资源下载下来\n\n- 翻来翻去，找到了这个看着很古老的[网站](https://www.ishuyin.com/show-15626.html)，我打开chrome的调试，音频资源直接大大方方地暴露在外面，没有任何反爬措施，奈斯\n\n![](/images/jiangxun.png)\n\n- 于是就有了下面这个爬虫，其实代码主要是从[这里](https://www.cnblogs.com/lilinwei340/p/6793796.html)抄的\n\n```python\n# -*- coding: utf-8 -*-\nimport os\nfrom contextlib import closing\nimport threading\nimport requests\n\nheaders = {\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36'\n}\n\nout_dir = './out'  # 输出文件夹\nthread_num = 4    # 线程数\n\nif not os.path.exists(out_dir):\n    os.mkdir(out_dir)\n\ndef download(img_url, img_name):\n    if os.path.isfile(os.path.join(out_dir, img_name)):\n        return\n    with closing(requests.get(img_url, stream=True, headers=headers)) as r:\n        rc = r.status_code\n        if 299 < rc or rc < 200:\n            print 'returnCode%s\\t%s' % (rc, img_url)\n            return\n        content_length = int(r.headers.get('content-length', '0'))\n        if content_length == 0:\n            print 'size0\\t%s' % img_url\n            return\n        with open(os.path.join(out_dir, img_name), 'wb') as f:\n            for data in r.iter_content(1024):\n                f.write(data)\n\ndef get_imgurl_generate():\n    for i in range(1, 161):\n        yield (\"http://mp3.aikeu.com/15626/{}.mp3\".format(i), \"{}.mp3\".format(i))\n\nlock = threading.Lock()\n\ndef loop(imgs):\n    print 'thread %s is running...' % threading.current_thread().name\n\n    while True:\n        try:\n            with lock:\n                img_url, img_name = next(imgs)\n        except StopIteration:\n            break\n        try:\n            download(img_url, img_name)\n        except:\n            print 'exceptfail\\t%s' % img_url\n    print 'thread %s is end...' % threading.current_thread().name\n\nimg_gen = get_imgurl_generate()\n\nfor i in range(0, thread_num):\n    t = threading.Thread(target=loop, name='LoopThread%s' %i, args=(img_gen,))\n    t.start()\n```","source":"_posts/蒋勋的红楼梦.md","raw":"---\ntitle: 蒋勋的红楼梦\ntypora-root-url: ../../source\ntags:\n  - 蒋勋\n  - 红楼梦\ncategories: scrapy\ndate: 2019-06-16 20:15:33\n---\n\n- 最近在听蒋勋的细说红楼梦，那温柔的台普，那细腻的解读，那新颖的角度，那穿插在解说其中的娓娓道来的个人经历\n\n- 但是我搜了几个在线的FM，都没有资源，不得已在一个微信公众号上听，体验不是太好\n\n- 于是我想在网上找资源下载下来\n\n- 翻来翻去，找到了这个看着很古老的[网站](https://www.ishuyin.com/show-15626.html)，我打开chrome的调试，音频资源直接大大方方地暴露在外面，没有任何反爬措施，奈斯\n\n![](/images/jiangxun.png)\n\n- 于是就有了下面这个爬虫，其实代码主要是从[这里](https://www.cnblogs.com/lilinwei340/p/6793796.html)抄的\n\n```python\n# -*- coding: utf-8 -*-\nimport os\nfrom contextlib import closing\nimport threading\nimport requests\n\nheaders = {\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36'\n}\n\nout_dir = './out'  # 输出文件夹\nthread_num = 4    # 线程数\n\nif not os.path.exists(out_dir):\n    os.mkdir(out_dir)\n\ndef download(img_url, img_name):\n    if os.path.isfile(os.path.join(out_dir, img_name)):\n        return\n    with closing(requests.get(img_url, stream=True, headers=headers)) as r:\n        rc = r.status_code\n        if 299 < rc or rc < 200:\n            print 'returnCode%s\\t%s' % (rc, img_url)\n            return\n        content_length = int(r.headers.get('content-length', '0'))\n        if content_length == 0:\n            print 'size0\\t%s' % img_url\n            return\n        with open(os.path.join(out_dir, img_name), 'wb') as f:\n            for data in r.iter_content(1024):\n                f.write(data)\n\ndef get_imgurl_generate():\n    for i in range(1, 161):\n        yield (\"http://mp3.aikeu.com/15626/{}.mp3\".format(i), \"{}.mp3\".format(i))\n\nlock = threading.Lock()\n\ndef loop(imgs):\n    print 'thread %s is running...' % threading.current_thread().name\n\n    while True:\n        try:\n            with lock:\n                img_url, img_name = next(imgs)\n        except StopIteration:\n            break\n        try:\n            download(img_url, img_name)\n        except:\n            print 'exceptfail\\t%s' % img_url\n    print 'thread %s is end...' % threading.current_thread().name\n\nimg_gen = get_imgurl_generate()\n\nfor i in range(0, thread_num):\n    t = threading.Thread(target=loop, name='LoopThread%s' %i, args=(img_gen,))\n    t.start()\n```","slug":"蒋勋的红楼梦","published":1,"updated":"2023-11-05T11:42:33.906Z","comments":1,"layout":"post","photos":[],"_id":"clolf0lif005zs2kz2xueg0cu","content":"<ul>\n<li><p>最近在听蒋勋的细说红楼梦，那温柔的台普，那细腻的解读，那新颖的角度，那穿插在解说其中的娓娓道来的个人经历</p>\n</li>\n<li><p>但是我搜了几个在线的FM，都没有资源，不得已在一个微信公众号上听，体验不是太好</p>\n</li>\n<li><p>于是我想在网上找资源下载下来</p>\n</li>\n<li><p>翻来翻去，找到了这个看着很古老的<a href=\"https://www.ishuyin.com/show-15626.html\">网站</a>，我打开chrome的调试，音频资源直接大大方方地暴露在外面，没有任何反爬措施，奈斯</p>\n</li>\n</ul>\n<p><img src=\"/images/jiangxun.png\"></p>\n<ul>\n<li>于是就有了下面这个爬虫，其实代码主要是从<a href=\"https://www.cnblogs.com/lilinwei340/p/6793796.html\">这里</a>抄的</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> contextlib <span class=\"keyword\">import</span> closing</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">out_dir = <span class=\"string\">&#x27;./out&#x27;</span>  <span class=\"comment\"># 输出文件夹</span></span><br><span class=\"line\">thread_num = <span class=\"number\">4</span>    <span class=\"comment\"># 线程数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(out_dir):</span><br><span class=\"line\">    os.mkdir(out_dir)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">download</span>(<span class=\"params\">img_url, img_name</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> os.path.isfile(os.path.join(out_dir, img_name)):</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> closing(requests.get(img_url, stream=<span class=\"literal\">True</span>, headers=headers)) <span class=\"keyword\">as</span> r:</span><br><span class=\"line\">        rc = r.status_code</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">299</span> &lt; rc <span class=\"keyword\">or</span> rc &lt; <span class=\"number\">200</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span> <span class=\"string\">&#x27;returnCode%s\\t%s&#x27;</span> % (rc, img_url)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        content_length = <span class=\"built_in\">int</span>(r.headers.get(<span class=\"string\">&#x27;content-length&#x27;</span>, <span class=\"string\">&#x27;0&#x27;</span>))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> content_length == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span> <span class=\"string\">&#x27;size0\\t%s&#x27;</span> % img_url</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(out_dir, img_name), <span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> r.iter_content(<span class=\"number\">1024</span>):</span><br><span class=\"line\">                f.write(data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_imgurl_generate</span>():</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">161</span>):</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> (<span class=\"string\">&quot;http://mp3.aikeu.com/15626/&#123;&#125;.mp3&quot;</span>.<span class=\"built_in\">format</span>(i), <span class=\"string\">&quot;&#123;&#125;.mp3&quot;</span>.<span class=\"built_in\">format</span>(i))</span><br><span class=\"line\"></span><br><span class=\"line\">lock = threading.Lock()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">loop</span>(<span class=\"params\">imgs</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&#x27;thread %s is running...&#x27;</span> % threading.current_thread().name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">with</span> lock:</span><br><span class=\"line\">                img_url, img_name = <span class=\"built_in\">next</span>(imgs)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> StopIteration:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            download(img_url, img_name)</span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span> <span class=\"string\">&#x27;exceptfail\\t%s&#x27;</span> % img_url</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&#x27;thread %s is end...&#x27;</span> % threading.current_thread().name</span><br><span class=\"line\"></span><br><span class=\"line\">img_gen = get_imgurl_generate()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, thread_num):</span><br><span class=\"line\">    t = threading.Thread(target=loop, name=<span class=\"string\">&#x27;LoopThread%s&#x27;</span> %i, args=(img_gen,))</span><br><span class=\"line\">    t.start()</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<ul>\n<li><p>最近在听蒋勋的细说红楼梦，那温柔的台普，那细腻的解读，那新颖的角度，那穿插在解说其中的娓娓道来的个人经历</p>\n</li>\n<li><p>但是我搜了几个在线的FM，都没有资源，不得已在一个微信公众号上听，体验不是太好</p>\n</li>\n<li><p>于是我想在网上找资源下载下来</p>\n</li>\n<li><p>翻来翻去，找到了这个看着很古老的<a href=\"https://www.ishuyin.com/show-15626.html\">网站</a>，我打开chrome的调试，音频资源直接大大方方地暴露在外面，没有任何反爬措施，奈斯</p>\n</li>\n</ul>\n<p><img src=\"/images/jiangxun.png\"></p>\n<ul>\n<li>于是就有了下面这个爬虫，其实代码主要是从<a href=\"https://www.cnblogs.com/lilinwei340/p/6793796.html\">这里</a>抄的</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> contextlib <span class=\"keyword\">import</span> closing</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">out_dir = <span class=\"string\">&#x27;./out&#x27;</span>  <span class=\"comment\"># 输出文件夹</span></span><br><span class=\"line\">thread_num = <span class=\"number\">4</span>    <span class=\"comment\"># 线程数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(out_dir):</span><br><span class=\"line\">    os.mkdir(out_dir)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">download</span>(<span class=\"params\">img_url, img_name</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> os.path.isfile(os.path.join(out_dir, img_name)):</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> closing(requests.get(img_url, stream=<span class=\"literal\">True</span>, headers=headers)) <span class=\"keyword\">as</span> r:</span><br><span class=\"line\">        rc = r.status_code</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">299</span> &lt; rc <span class=\"keyword\">or</span> rc &lt; <span class=\"number\">200</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span> <span class=\"string\">&#x27;returnCode%s\\t%s&#x27;</span> % (rc, img_url)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        content_length = <span class=\"built_in\">int</span>(r.headers.get(<span class=\"string\">&#x27;content-length&#x27;</span>, <span class=\"string\">&#x27;0&#x27;</span>))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> content_length == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span> <span class=\"string\">&#x27;size0\\t%s&#x27;</span> % img_url</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(out_dir, img_name), <span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> r.iter_content(<span class=\"number\">1024</span>):</span><br><span class=\"line\">                f.write(data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_imgurl_generate</span>():</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">161</span>):</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> (<span class=\"string\">&quot;http://mp3.aikeu.com/15626/&#123;&#125;.mp3&quot;</span>.<span class=\"built_in\">format</span>(i), <span class=\"string\">&quot;&#123;&#125;.mp3&quot;</span>.<span class=\"built_in\">format</span>(i))</span><br><span class=\"line\"></span><br><span class=\"line\">lock = threading.Lock()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">loop</span>(<span class=\"params\">imgs</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&#x27;thread %s is running...&#x27;</span> % threading.current_thread().name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">with</span> lock:</span><br><span class=\"line\">                img_url, img_name = <span class=\"built_in\">next</span>(imgs)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> StopIteration:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            download(img_url, img_name)</span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span> <span class=\"string\">&#x27;exceptfail\\t%s&#x27;</span> % img_url</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&#x27;thread %s is end...&#x27;</span> % threading.current_thread().name</span><br><span class=\"line\"></span><br><span class=\"line\">img_gen = get_imgurl_generate()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, thread_num):</span><br><span class=\"line\">    t = threading.Thread(target=loop, name=<span class=\"string\">&#x27;LoopThread%s&#x27;</span> %i, args=(img_gen,))</span><br><span class=\"line\">    t.start()</span><br></pre></td></tr></table></figure>"},{"title":"记一点推荐的基础知识","typora-root-url":"../../source","date":"2023-11-11T08:52:21.000Z","_content":"\n推荐水哥的这个[系列](https://zhuanlan.zhihu.com/p/407871839)\n\n我这记一点里面需要注意的知识\n\n# AUC/GAUC\n\n阿里提出了一个新的评价指标 Group AUC，是用户维度加权的auc\n\n$$\nGAUC = \\frac{\\sum w_u AUC_u}{\\sum w_u}\n$$\n\n这里的w代表权重，可以是曝光数、点击数，更倾向于高活用户。\n\nAUC[这篇](https://tracholar.github.io/machine-learning/2018/01/26/auc.html)写挺好的\n- auc曲线横坐标是$FPR=\\frac{FP}{FP+TN}$，假阳率，预测为阴性里有多少是阳的，越小越好\n- 纵坐标是$FPR=\\frac{TP}{TP+FN}$，真阳率，召回率，预测为阳性的里面有多少是真阳性，越大越好\n- AUC可以看做随机从正负样本中选取一对正负样本，其中正样本的得分大于负样本的概率\n- 可以使用sql来计算AUC\n> 假设我们将测试集的正负样本按照模型预测得分**从小到大**排序，对于第j\n个正样本，假设它的排序为 rj， 那么说明排在这个正样本前面的总样本有 rj−1\n个，其中正样本有 j−1 个（因为这个正样本在所有的正样本里面排第j）， 所以排在第j个正样本前面(得分比它小)的负样本个数为 rj−j个。也就是说，对于第j个正样本来说，其得分比随机取的一个负样本大(排序比它靠后)的概率是 (rj−j)/N−,其中N−是总的负样本数目。所以，平均下来，随机取的正样本得分比负样本大的概率为\n> $$\nAUC = \\frac{1}{N_+} \\sum_{j=1}^{N_+}(r_j - j)/N_- \\\\\n= \\frac{\\sum_{j=1}^{N_+}r_j - N_+(N_+ + 1)/2}{N_+N_-}\n$$\n```sql\nselect\n\t(ry - 0.5*n1*(n1+1))/n0/n1 as auc\nfrom(\n\tselect\n\t\tsum(if(y=0, 1, 0)) as n0,\n\t\tsum(if(y=1, 1, 0)) as n1,\n\t\tsum(if(y=1, r, 0)) as ry\n\tfrom(\n\t\tselect y, row_number() over(order by score asc) as r\n\t\tfrom(\n\t\t\tselect y, score\n\t\t\tfrom some.table\n\t\t)A\n\t)B\n)C\n```\n\n# NDGC\n\nNormalized Discounted Cumulative Gain\n\n还是这位老哥说得清楚 https://blog.csdn.net/xihuanyuye/article/details/85019816\n\n\n","source":"_posts/记一点推荐的基础知识.md","raw":"---\ntitle: 记一点推荐的基础知识\ntags:\n  - 推荐\ncategories: 推荐\ntypora-root-url: ../../source\ndate: 2023-11-11 16:52:21\n---\n\n推荐水哥的这个[系列](https://zhuanlan.zhihu.com/p/407871839)\n\n我这记一点里面需要注意的知识\n\n# AUC/GAUC\n\n阿里提出了一个新的评价指标 Group AUC，是用户维度加权的auc\n\n$$\nGAUC = \\frac{\\sum w_u AUC_u}{\\sum w_u}\n$$\n\n这里的w代表权重，可以是曝光数、点击数，更倾向于高活用户。\n\nAUC[这篇](https://tracholar.github.io/machine-learning/2018/01/26/auc.html)写挺好的\n- auc曲线横坐标是$FPR=\\frac{FP}{FP+TN}$，假阳率，预测为阴性里有多少是阳的，越小越好\n- 纵坐标是$FPR=\\frac{TP}{TP+FN}$，真阳率，召回率，预测为阳性的里面有多少是真阳性，越大越好\n- AUC可以看做随机从正负样本中选取一对正负样本，其中正样本的得分大于负样本的概率\n- 可以使用sql来计算AUC\n> 假设我们将测试集的正负样本按照模型预测得分**从小到大**排序，对于第j\n个正样本，假设它的排序为 rj， 那么说明排在这个正样本前面的总样本有 rj−1\n个，其中正样本有 j−1 个（因为这个正样本在所有的正样本里面排第j）， 所以排在第j个正样本前面(得分比它小)的负样本个数为 rj−j个。也就是说，对于第j个正样本来说，其得分比随机取的一个负样本大(排序比它靠后)的概率是 (rj−j)/N−,其中N−是总的负样本数目。所以，平均下来，随机取的正样本得分比负样本大的概率为\n> $$\nAUC = \\frac{1}{N_+} \\sum_{j=1}^{N_+}(r_j - j)/N_- \\\\\n= \\frac{\\sum_{j=1}^{N_+}r_j - N_+(N_+ + 1)/2}{N_+N_-}\n$$\n```sql\nselect\n\t(ry - 0.5*n1*(n1+1))/n0/n1 as auc\nfrom(\n\tselect\n\t\tsum(if(y=0, 1, 0)) as n0,\n\t\tsum(if(y=1, 1, 0)) as n1,\n\t\tsum(if(y=1, r, 0)) as ry\n\tfrom(\n\t\tselect y, row_number() over(order by score asc) as r\n\t\tfrom(\n\t\t\tselect y, score\n\t\t\tfrom some.table\n\t\t)A\n\t)B\n)C\n```\n\n# NDGC\n\nNormalized Discounted Cumulative Gain\n\n还是这位老哥说得清楚 https://blog.csdn.net/xihuanyuye/article/details/85019816\n\n\n","slug":"记一点推荐的基础知识","published":1,"updated":"2025-06-01T08:16:48.287Z","_id":"cmbdaqhb40000sakz3p97hyph","comments":1,"layout":"post","photos":[],"content":"<p>推荐水哥的这个<a href=\"https://zhuanlan.zhihu.com/p/407871839\">系列</a></p>\n<p>我这记一点里面需要注意的知识</p>\n<h1 id=\"AUC-GAUC\"><a href=\"#AUC-GAUC\" class=\"headerlink\" title=\"AUC&#x2F;GAUC\"></a>AUC&#x2F;GAUC</h1><p>阿里提出了一个新的评价指标 Group AUC，是用户维度加权的auc</p>\n<p>$$<br>GAUC &#x3D; \\frac{\\sum w_u AUC_u}{\\sum w_u}<br>$$</p>\n<p>这里的w代表权重，可以是曝光数、点击数，更倾向于高活用户。</p>\n<p>AUC<a href=\"https://tracholar.github.io/machine-learning/2018/01/26/auc.html\">这篇</a>写挺好的</p>\n<ul>\n<li>auc曲线横坐标是$FPR&#x3D;\\frac{FP}{FP+TN}$，假阳率，预测为阴性里有多少是阳的，越小越好</li>\n<li>纵坐标是$FPR&#x3D;\\frac{TP}{TP+FN}$，真阳率，召回率，预测为阳性的里面有多少是真阳性，越大越好</li>\n<li>AUC可以看做随机从正负样本中选取一对正负样本，其中正样本的得分大于负样本的概率</li>\n<li>可以使用sql来计算AUC<blockquote>\n<p>假设我们将测试集的正负样本按照模型预测得分<strong>从小到大</strong>排序，对于第j<br>个正样本，假设它的排序为 rj， 那么说明排在这个正样本前面的总样本有 rj−1<br>个，其中正样本有 j−1 个（因为这个正样本在所有的正样本里面排第j）， 所以排在第j个正样本前面(得分比它小)的负样本个数为 rj−j个。也就是说，对于第j个正样本来说，其得分比随机取的一个负样本大(排序比它靠后)的概率是 (rj−j)&#x2F;N−,其中N−是总的负样本数目。所以，平均下来，随机取的正样本得分比负样本大的概率为<br>$$<br>AUC &#x3D; \\frac{1}{N_+} \\sum_{j&#x3D;1}^{N_+}(r_j - j)&#x2F;N_- \\<br>&#x3D; \\frac{\\sum_{j&#x3D;1}^{N_+}r_j - N_+(N_+ + 1)&#x2F;2}{N_+N_-}<br>$$</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">\t(ry <span class=\"operator\">-</span> <span class=\"number\">0.5</span><span class=\"operator\">*</span>n1<span class=\"operator\">*</span>(n1<span class=\"operator\">+</span><span class=\"number\">1</span>))<span class=\"operator\">/</span>n0<span class=\"operator\">/</span>n1 <span class=\"keyword\">as</span> auc</span><br><span class=\"line\"><span class=\"keyword\">from</span>(</span><br><span class=\"line\">\t<span class=\"keyword\">select</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">sum</span>(if(y<span class=\"operator\">=</span><span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>)) <span class=\"keyword\">as</span> n0,</span><br><span class=\"line\">\t\t<span class=\"built_in\">sum</span>(if(y<span class=\"operator\">=</span><span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>)) <span class=\"keyword\">as</span> n1,</span><br><span class=\"line\">\t\t<span class=\"built_in\">sum</span>(if(y<span class=\"operator\">=</span><span class=\"number\">1</span>, r, <span class=\"number\">0</span>)) <span class=\"keyword\">as</span> ry</span><br><span class=\"line\">\t<span class=\"keyword\">from</span>(</span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> y, <span class=\"built_in\">row_number</span>() <span class=\"keyword\">over</span>(<span class=\"keyword\">order</span> <span class=\"keyword\">by</span> score <span class=\"keyword\">asc</span>) <span class=\"keyword\">as</span> r</span><br><span class=\"line\">\t\t<span class=\"keyword\">from</span>(</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">select</span> y, score</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">from</span> some.table</span><br><span class=\"line\">\t\t)A</span><br><span class=\"line\">\t)B</span><br><span class=\"line\">)C</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"NDGC\"><a href=\"#NDGC\" class=\"headerlink\" title=\"NDGC\"></a>NDGC</h1><p>Normalized Discounted Cumulative Gain</p>\n<p>还是这位老哥说得清楚 <a href=\"https://blog.csdn.net/xihuanyuye/article/details/85019816\">https://blog.csdn.net/xihuanyuye/article/details/85019816</a></p>\n","excerpt":"","more":"<p>推荐水哥的这个<a href=\"https://zhuanlan.zhihu.com/p/407871839\">系列</a></p>\n<p>我这记一点里面需要注意的知识</p>\n<h1 id=\"AUC-GAUC\"><a href=\"#AUC-GAUC\" class=\"headerlink\" title=\"AUC&#x2F;GAUC\"></a>AUC&#x2F;GAUC</h1><p>阿里提出了一个新的评价指标 Group AUC，是用户维度加权的auc</p>\n<p>$$<br>GAUC &#x3D; \\frac{\\sum w_u AUC_u}{\\sum w_u}<br>$$</p>\n<p>这里的w代表权重，可以是曝光数、点击数，更倾向于高活用户。</p>\n<p>AUC<a href=\"https://tracholar.github.io/machine-learning/2018/01/26/auc.html\">这篇</a>写挺好的</p>\n<ul>\n<li>auc曲线横坐标是$FPR&#x3D;\\frac{FP}{FP+TN}$，假阳率，预测为阴性里有多少是阳的，越小越好</li>\n<li>纵坐标是$FPR&#x3D;\\frac{TP}{TP+FN}$，真阳率，召回率，预测为阳性的里面有多少是真阳性，越大越好</li>\n<li>AUC可以看做随机从正负样本中选取一对正负样本，其中正样本的得分大于负样本的概率</li>\n<li>可以使用sql来计算AUC<blockquote>\n<p>假设我们将测试集的正负样本按照模型预测得分<strong>从小到大</strong>排序，对于第j<br>个正样本，假设它的排序为 rj， 那么说明排在这个正样本前面的总样本有 rj−1<br>个，其中正样本有 j−1 个（因为这个正样本在所有的正样本里面排第j）， 所以排在第j个正样本前面(得分比它小)的负样本个数为 rj−j个。也就是说，对于第j个正样本来说，其得分比随机取的一个负样本大(排序比它靠后)的概率是 (rj−j)&#x2F;N−,其中N−是总的负样本数目。所以，平均下来，随机取的正样本得分比负样本大的概率为<br>$$<br>AUC &#x3D; \\frac{1}{N_+} \\sum_{j&#x3D;1}^{N_+}(r_j - j)&#x2F;N_- \\<br>&#x3D; \\frac{\\sum_{j&#x3D;1}^{N_+}r_j - N_+(N_+ + 1)&#x2F;2}{N_+N_-}<br>$$</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">\t(ry <span class=\"operator\">-</span> <span class=\"number\">0.5</span><span class=\"operator\">*</span>n1<span class=\"operator\">*</span>(n1<span class=\"operator\">+</span><span class=\"number\">1</span>))<span class=\"operator\">/</span>n0<span class=\"operator\">/</span>n1 <span class=\"keyword\">as</span> auc</span><br><span class=\"line\"><span class=\"keyword\">from</span>(</span><br><span class=\"line\">\t<span class=\"keyword\">select</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">sum</span>(if(y<span class=\"operator\">=</span><span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>)) <span class=\"keyword\">as</span> n0,</span><br><span class=\"line\">\t\t<span class=\"built_in\">sum</span>(if(y<span class=\"operator\">=</span><span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>)) <span class=\"keyword\">as</span> n1,</span><br><span class=\"line\">\t\t<span class=\"built_in\">sum</span>(if(y<span class=\"operator\">=</span><span class=\"number\">1</span>, r, <span class=\"number\">0</span>)) <span class=\"keyword\">as</span> ry</span><br><span class=\"line\">\t<span class=\"keyword\">from</span>(</span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> y, <span class=\"built_in\">row_number</span>() <span class=\"keyword\">over</span>(<span class=\"keyword\">order</span> <span class=\"keyword\">by</span> score <span class=\"keyword\">asc</span>) <span class=\"keyword\">as</span> r</span><br><span class=\"line\">\t\t<span class=\"keyword\">from</span>(</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">select</span> y, score</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">from</span> some.table</span><br><span class=\"line\">\t\t)A</span><br><span class=\"line\">\t)B</span><br><span class=\"line\">)C</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"NDGC\"><a href=\"#NDGC\" class=\"headerlink\" title=\"NDGC\"></a>NDGC</h1><p>Normalized Discounted Cumulative Gain</p>\n<p>还是这位老哥说得清楚 <a href=\"https://blog.csdn.net/xihuanyuye/article/details/85019816\">https://blog.csdn.net/xihuanyuye/article/details/85019816</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clolf0lhv0009s2kzhxhe6zsl","category_id":"clolf0lhw000bs2kz9hsw3tyw","_id":"clolf0lhz000ms2kz6b6v1xsn"},{"post_id":"clolf0lhx000ds2kz6ng565t7","category_id":"clolf0lhw000bs2kz9hsw3tyw","_id":"clolf0lhz000rs2kzalfnd28u"},{"post_id":"clolf0lhz000os2kz080jcyqs","category_id":"clolf0lhz000ls2kzczv03jcc","_id":"clolf0li0000xs2kz3n6h9jyp"},{"post_id":"clolf0lhx000es2kz7hm4bm6c","category_id":"clolf0lhz000ls2kzczv03jcc","_id":"clolf0li00011s2kz58oghksf"},{"post_id":"clolf0lhz000qs2kz7uvd53hp","category_id":"clolf0lhz000ls2kzczv03jcc","_id":"clolf0li00014s2kzdd5ddlxc"},{"post_id":"clolf0lhx000fs2kza146bgd7","category_id":"clolf0lhz000ss2kz9mk7dljt","_id":"clolf0li10017s2kz1ogualj6"},{"post_id":"clolf0li00010s2kz5gb5bbkw","category_id":"clolf0lhz000ls2kzczv03jcc","_id":"clolf0li1001bs2kzass7glgd"},{"post_id":"clolf0lhy000js2kzb8enbmpq","category_id":"clolf0li0000ys2kz005fe6ii","_id":"clolf0li1001es2kzhximdlho"},{"post_id":"clolf0li00013s2kz30w96w6h","category_id":"clolf0lhw000bs2kz9hsw3tyw","_id":"clolf0li1001hs2kz55cy7fly"},{"post_id":"clolf0li00016s2kz7s7b0rc7","category_id":"clolf0lhw000bs2kz9hsw3tyw","_id":"clolf0li2001ks2kz7qjuhwv9"},{"post_id":"clolf0lhy000ks2kz5zqp4zpd","category_id":"clolf0li0000ys2kz005fe6ii","_id":"clolf0li2001ns2kz0vtg3psj"},{"post_id":"clolf0li1001ds2kza2de4t9z","category_id":"clolf0li0000ys2kz005fe6ii","_id":"clolf0li2001qs2kzbncadynf"},{"post_id":"clolf0li0000ws2kz4l6xaces","category_id":"clolf0li0000ys2kz005fe6ii","_id":"clolf0li2001us2kz0yb98pxm"},{"post_id":"clolf0li1001gs2kz443j88hq","category_id":"clolf0lhz000ls2kzczv03jcc","_id":"clolf0li3001ws2kzdv0ifnq8"},{"post_id":"clolf0li2001js2kz9jayb2a1","category_id":"clolf0lhw000bs2kz9hsw3tyw","_id":"clolf0li3001zs2kzcadf1ulg"},{"post_id":"clolf0li1001as2kzgiak71t3","category_id":"clolf0li1001is2kz2ht3f3ou","_id":"clolf0li30023s2kz1cio3c8p"},{"post_id":"clolf0li2001ps2kzenvw5evi","category_id":"clolf0li0000ys2kz005fe6ii","_id":"clolf0li30026s2kzgjd15an9"},{"post_id":"clolf0li2001ts2kz462y1pqu","category_id":"clolf0li0000ys2kz005fe6ii","_id":"clolf0li30029s2kz8if0087b"},{"post_id":"clolf0li3001vs2kza3u7hife","category_id":"clolf0lhw000bs2kz9hsw3tyw","_id":"clolf0li4002cs2kz9h8igu1u"},{"post_id":"clolf0li30022s2kz3trk9atl","category_id":"clolf0li0000ys2kz005fe6ii","_id":"clolf0li4002gs2kze4kc3yhl"},{"post_id":"clolf0li30028s2kzcvec8pn3","category_id":"clolf0li0000ys2kz005fe6ii","_id":"clolf0li4002js2kzf17jb44n"},{"post_id":"clolf0li4002fs2kzaw5g1afn","category_id":"clolf0lhz000ls2kzczv03jcc","_id":"clolf0li5002ps2kz2oqm6gc9"},{"post_id":"clolf0li30025s2kzbpoufy25","category_id":"clolf0li4002as2kzd9hugm22","_id":"clolf0li5002ss2kzfo2aebsp"},{"post_id":"clolf0li4002is2kzc6q8dfb8","category_id":"clolf0li1001is2kz2ht3f3ou","_id":"clolf0li5002vs2kz20u2c9r5"},{"post_id":"clolf0li4002ms2kz5kdc1eaa","category_id":"clolf0li1001is2kz2ht3f3ou","_id":"clolf0li5002xs2kzc5xu1kad"},{"post_id":"clolf0li5002rs2kz8kztdvqi","category_id":"clolf0li0000ys2kz005fe6ii","_id":"clolf0li60030s2kzgave41i7"},{"post_id":"clolf0li5002ws2kz0j867j0t","category_id":"clolf0lhz000ls2kzczv03jcc","_id":"clolf0li60035s2kz7kuhht49"},{"post_id":"clolf0li5002os2kz8so5cfqj","category_id":"clolf0li5002ts2kz8jhzdbl3","_id":"clolf0li60039s2kzaerz6nif"},{"post_id":"clolf0li5002zs2kz88aodg50","category_id":"clolf0lhz000ls2kzczv03jcc","_id":"clolf0li6003ds2kz9lubb29g"},{"post_id":"clolf0li60034s2kz51hb90or","category_id":"clolf0lhz000ls2kzczv03jcc","_id":"clolf0li8003gs2kz2ekjbgc6"},{"post_id":"clolf0li60031s2kzbh0s4dwe","category_id":"clolf0li60036s2kzcpjxeo6i","_id":"clolf0li9003ms2kzajnibkzl"},{"post_id":"clolf0li8003js2kzfguohlsy","category_id":"clolf0lhw000bs2kz9hsw3tyw","_id":"clolf0li9003ss2kz69g12oy3"},{"post_id":"clolf0li9003ls2kz467s4s01","category_id":"clolf0lhz000ls2kzczv03jcc","_id":"clolf0lia003xs2kz3rm149ci"},{"post_id":"clolf0lia003zs2kzd7yw1ss9","category_id":"clolf0lhz000ls2kzczv03jcc","_id":"clolf0lia0047s2kzajnq751i"},{"post_id":"clolf0li9003ps2kz9iqka9lr","category_id":"clolf0li9003ts2kzeelchoeb","_id":"clolf0lib0049s2kzfj439wuz"},{"post_id":"clolf0lia003ws2kz95pv27vg","category_id":"clolf0lia0042s2kz6an5exql","_id":"clolf0lib004cs2kz5bir51p0"},{"post_id":"clolf0lid005fs2kz50um8h02","category_id":"clolf0lhw000bs2kz9hsw3tyw","_id":"clolf0lid005ks2kz8l2a5mkb"},{"post_id":"clolf0lid005js2kzho0sglid","category_id":"clolf0lhw000bs2kz9hsw3tyw","_id":"clolf0lie005qs2kz1mrn725h"},{"post_id":"clolf0lie005os2kzdlzqe06o","category_id":"clolf0li0000ys2kz005fe6ii","_id":"clolf0lif005ws2kz58ficgff"},{"post_id":"clolf0lif005vs2kzefxr3ivq","category_id":"clolf0li0000ys2kz005fe6ii","_id":"clolf0lif0062s2kz5i0g25e8"},{"post_id":"clolf0lie005ps2kz5daueikn","category_id":"clolf0lif005ts2kz6aek8kpz","_id":"clolf0lif0064s2kz58ra6jep"},{"post_id":"clolf0lif005zs2kz2xueg0cu","category_id":"clolf0li5002ts2kz8jhzdbl3","_id":"clolf0lif0066s2kz7w553a88"},{"post_id":"clolf0lie005rs2kzhtvrcysg","category_id":"clolf0lif0060s2kzflyq4ef4","_id":"clolf0lig0068s2kzacs6d05x"},{"post_id":"cmbdaqhb40000sakz3p97hyph","category_id":"cmbdaqhb70001sakzf11makam","_id":"cmbdaqhba0004sakzg4hf9nq5"}],"PostTag":[{"post_id":"clolf0lhv0009s2kzhxhe6zsl","tag_id":"clolf0lhw000cs2kz48tu3532","_id":"clolf0lhy000is2kzb5pq28k4"},{"post_id":"clolf0lhx000ds2kz6ng565t7","tag_id":"clolf0lhy000hs2kz6uvu4o6u","_id":"clolf0lhz000ps2kz3bdzehsk"},{"post_id":"clolf0lhx000es2kz7hm4bm6c","tag_id":"clolf0lhz000ns2kz08u0ffhc","_id":"clolf0li0000vs2kzf2cr1hf1"},{"post_id":"clolf0lhx000fs2kza146bgd7","tag_id":"clolf0lhz000ts2kz8vtlaidl","_id":"clolf0li00012s2kza31kekn4"},{"post_id":"clolf0lhy000js2kzb8enbmpq","tag_id":"clolf0li0000zs2kz86atg70x","_id":"clolf0li10019s2kzehjxde7e"},{"post_id":"clolf0lhy000ks2kz5zqp4zpd","tag_id":"clolf0li10018s2kz0dghgg9x","_id":"clolf0li2001os2kzhhjm471m"},{"post_id":"clolf0lhy000ks2kz5zqp4zpd","tag_id":"clolf0li1001fs2kz4pb431wl","_id":"clolf0li2001rs2kz73rugf86"},{"post_id":"clolf0li2001ts2kz462y1pqu","tag_id":"clolf0li10018s2kz0dghgg9x","_id":"clolf0li3001xs2kz94328isl"},{"post_id":"clolf0lhz000os2kz080jcyqs","tag_id":"clolf0li2001ls2kz391d9ckn","_id":"clolf0li30021s2kzas7z6zmr"},{"post_id":"clolf0lhz000os2kz080jcyqs","tag_id":"clolf0li2001ss2kz3khr2chq","_id":"clolf0li30024s2kzgj9m0l4f"},{"post_id":"clolf0li30028s2kzcvec8pn3","tag_id":"clolf0li0000zs2kz86atg70x","_id":"clolf0li4002es2kz97e6hwdg"},{"post_id":"clolf0lhz000qs2kz7uvd53hp","tag_id":"clolf0li30020s2kzbrzjhnt2","_id":"clolf0li4002hs2kze99n4muh"},{"post_id":"clolf0lhz000qs2kz7uvd53hp","tag_id":"clolf0li30027s2kzez7t59pe","_id":"clolf0li4002ks2kz2s0ih9gn"},{"post_id":"clolf0lhz000us2kz8q4befvx","tag_id":"clolf0li4002ds2kzhfrwgij7","_id":"clolf0li5002ns2kzeyfb98hr"},{"post_id":"clolf0li5002zs2kz88aodg50","tag_id":"clolf0li30020s2kzbrzjhnt2","_id":"clolf0li60033s2kzankb1igc"},{"post_id":"clolf0li5002zs2kz88aodg50","tag_id":"clolf0li30027s2kzez7t59pe","_id":"clolf0li60037s2kzh37702w6"},{"post_id":"clolf0li00013s2kz30w96w6h","tag_id":"clolf0li30020s2kzbrzjhnt2","_id":"clolf0li6003bs2kz8w7j1tz9"},{"post_id":"clolf0li00013s2kz30w96w6h","tag_id":"clolf0li5002qs2kz4pdd0gz7","_id":"clolf0li7003es2kzf6zsd80x"},{"post_id":"clolf0li00013s2kz30w96w6h","tag_id":"clolf0li30027s2kzez7t59pe","_id":"clolf0li8003is2kz4gcd9nhn"},{"post_id":"clolf0li60034s2kz51hb90or","tag_id":"clolf0li30020s2kzbrzjhnt2","_id":"clolf0li9003ks2kz7mku0tf3"},{"post_id":"clolf0li60034s2kz51hb90or","tag_id":"clolf0li30027s2kzez7t59pe","_id":"clolf0li9003os2kz7awtb9oq"},{"post_id":"clolf0li00016s2kz7s7b0rc7","tag_id":"clolf0li30020s2kzbrzjhnt2","_id":"clolf0li9003qs2kz45mq345s"},{"post_id":"clolf0li8003js2kzfguohlsy","tag_id":"clolf0li5002qs2kz4pdd0gz7","_id":"clolf0li9003us2kzg4cpbq3g"},{"post_id":"clolf0li1001as2kzgiak71t3","tag_id":"clolf0li6003as2kzhyzk5za9","_id":"clolf0lia003ys2kz5mljc0du"},{"post_id":"clolf0li1001as2kzgiak71t3","tag_id":"clolf0li8003hs2kz3lj7fp1b","_id":"clolf0lia0040s2kzgoyj3mbr"},{"post_id":"clolf0lia003zs2kzd7yw1ss9","tag_id":"clolf0li30020s2kzbrzjhnt2","_id":"clolf0lia0044s2kz0ad8c1xd"},{"post_id":"clolf0lia003zs2kzd7yw1ss9","tag_id":"clolf0li30027s2kzez7t59pe","_id":"clolf0lia0046s2kzbr79ggix"},{"post_id":"clolf0li1001gs2kz443j88hq","tag_id":"clolf0li9003ns2kzc0us8g29","_id":"clolf0lib004as2kz8sx7fcy2"},{"post_id":"clolf0li1001gs2kz443j88hq","tag_id":"clolf0li9003vs2kzh90z0zrd","_id":"clolf0lib004bs2kzcc7veovb"},{"post_id":"clolf0li1001gs2kz443j88hq","tag_id":"clolf0lia0043s2kzh0gvcjl8","_id":"clolf0lib004es2kzdub98osu"},{"post_id":"clolf0li2001ms2kzdeemaf3y","tag_id":"clolf0lia0048s2kz2chc9mjd","_id":"clolf0lib004gs2kz8chl8u6j"},{"post_id":"clolf0li2001ms2kzdeemaf3y","tag_id":"clolf0lib004ds2kz814tdsxs","_id":"clolf0lib004hs2kz6lasa8w1"},{"post_id":"clolf0li2001ps2kzenvw5evi","tag_id":"clolf0lib004fs2kzdbw7fpld","_id":"clolf0lib004js2kzhbh5dsph"},{"post_id":"clolf0li30022s2kz3trk9atl","tag_id":"clolf0lib004is2kzgc9j0dhz","_id":"clolf0lib004ls2kzcrgla5ae"},{"post_id":"clolf0li30025s2kzbpoufy25","tag_id":"clolf0lib004ks2kzft72frme","_id":"clolf0lib004ps2kzfbgy6agg"},{"post_id":"clolf0li30025s2kzbpoufy25","tag_id":"clolf0lib004ms2kzej3o7gj5","_id":"clolf0lib004qs2kz51kues9f"},{"post_id":"clolf0li30025s2kzbpoufy25","tag_id":"clolf0lib004ns2kz5jswfwwn","_id":"clolf0lib004ss2kzaqr306pi"},{"post_id":"clolf0li4002bs2kz3ma8d7ob","tag_id":"clolf0lib004os2kz9l3pak86","_id":"clolf0lib004us2kzdj036prt"},{"post_id":"clolf0li4002bs2kz3ma8d7ob","tag_id":"clolf0lib004rs2kzccbl8ub9","_id":"clolf0lib004vs2kz2e02gtdc"},{"post_id":"clolf0li4002fs2kzaw5g1afn","tag_id":"clolf0lib004ts2kz0at65v8f","_id":"clolf0lib004xs2kz3jcb4urf"},{"post_id":"clolf0li4002is2kzc6q8dfb8","tag_id":"clolf0lib004ws2kzh9mx5eqi","_id":"clolf0lic0051s2kzb6nd7wr2"},{"post_id":"clolf0li4002is2kzc6q8dfb8","tag_id":"clolf0lib004ys2kz7cmcdv4t","_id":"clolf0lic0052s2kz0j5ddy2s"},{"post_id":"clolf0li4002is2kzc6q8dfb8","tag_id":"clolf0lib004zs2kzfgc03qep","_id":"clolf0lic0054s2kzbxa9btfp"},{"post_id":"clolf0li4002ms2kz5kdc1eaa","tag_id":"clolf0li8003hs2kz3lj7fp1b","_id":"clolf0lic0055s2kz96hf3s2z"},{"post_id":"clolf0li5002rs2kz8kztdvqi","tag_id":"clolf0lic0053s2kz32g35rzf","_id":"clolf0lic0057s2kzepukeibu"},{"post_id":"clolf0li60031s2kzbh0s4dwe","tag_id":"clolf0lic0056s2kzdzfveg4c","_id":"clolf0lic0059s2kz38b975ex"},{"post_id":"clolf0li9003ps2kz9iqka9lr","tag_id":"clolf0lic0058s2kz3xr33auj","_id":"clolf0lic005bs2kze4xp7p86"},{"post_id":"clolf0lia003ws2kz95pv27vg","tag_id":"clolf0lic005as2kzfg6x6ojx","_id":"clolf0lic005ds2kz3sfw4b8g"},{"post_id":"clolf0lia003ws2kz95pv27vg","tag_id":"clolf0lic005cs2kz4fsw28c3","_id":"clolf0lic005es2kz13pyb5d7"},{"post_id":"clolf0lid005fs2kz50um8h02","tag_id":"clolf0lid005hs2kz8kqh1b7c","_id":"clolf0lie005ns2kz21a87ao8"},{"post_id":"clolf0lid005js2kzho0sglid","tag_id":"clolf0lie005ms2kzg9gxc1n9","_id":"clolf0lif005us2kzhygl9oy4"},{"post_id":"clolf0lid005ls2kz853b5kca","tag_id":"clolf0lie005ss2kz9qh57fu6","_id":"clolf0lif0061s2kz2ddyh1qm"},{"post_id":"clolf0lie005ps2kz5daueikn","tag_id":"clolf0lif005ys2kzfop2geg8","_id":"clolf0lif0065s2kzgpffgrdt"},{"post_id":"clolf0lie005rs2kzhtvrcysg","tag_id":"clolf0lif0063s2kz6rmz1mzc","_id":"clolf0lig006as2kz5c095a3d"},{"post_id":"clolf0lie005rs2kzhtvrcysg","tag_id":"clolf0lif0067s2kz0eda6iji","_id":"clolf0lig006bs2kz9jlvhdys"},{"post_id":"clolf0lif005xs2kz571dawmw","tag_id":"clolf0lig0069s2kze0o6dy6a","_id":"clolf0lig006ds2kzb6jxfvtb"},{"post_id":"clolf0lif005zs2kz2xueg0cu","tag_id":"clolf0lig006cs2kz274p5yy7","_id":"clolf0lig006fs2kzex8h27pv"},{"post_id":"clolf0lif005zs2kz2xueg0cu","tag_id":"clolf0lig006es2kz6bm976wa","_id":"clolf0lig006gs2kzggi0btpc"},{"post_id":"cmbdaqhb40000sakz3p97hyph","tag_id":"cmbdaqhba0002sakzhvzf1q9d","_id":"cmbdaqhba0003sakzgpz2f44j"}],"Tag":[{"name":"Attention","_id":"clolf0lhw000cs2kz48tu3532"},{"name":"CTC","_id":"clolf0lhy000hs2kz6uvu4o6u"},{"name":"cpp","_id":"clolf0lhz000ns2kz08u0ffhc"},{"name":"GAN","_id":"clolf0lhz000ts2kz8vtlaidl"},{"name":"flask","_id":"clolf0li0000zs2kz86atg70x"},{"name":"javaScript","_id":"clolf0li10018s2kz0dghgg9x"},{"name":"复习笔记","_id":"clolf0li1001fs2kz4pb431wl"},{"name":"opencv","_id":"clolf0li2001ls2kz391d9ckn"},{"name":"YUV","_id":"clolf0li2001ss2kz3khr2chq"},{"name":"caffe","_id":"clolf0li30020s2kzbrzjhnt2"},{"name":"docker","_id":"clolf0li30027s2kzez7t59pe"},{"name":"yolo","_id":"clolf0li4002ds2kzhfrwgij7"},{"name":"学习笔记","_id":"clolf0li5002qs2kz4pdd0gz7"},{"name":"conda","_id":"clolf0li6003as2kzhyzk5za9"},{"name":"python","_id":"clolf0li8003hs2kz3lj7fp1b"},{"name":"cin/cout","_id":"clolf0li9003ns2kzc0us8g29"},{"name":"lambda","_id":"clolf0li9003vs2kzh90z0zrd"},{"name":"构造函数","_id":"clolf0lia0043s2kzh0gvcjl8"},{"name":"正则","_id":"clolf0lia0048s2kz2chc9mjd"},{"name":"grep","_id":"clolf0lib004ds2kz814tdsxs"},{"name":"https","_id":"clolf0lib004fs2kzdbw7fpld"},{"name":"nginx配置","_id":"clolf0lib004is2kzgc9j0dhz"},{"name":"npm","_id":"clolf0lib004ks2kzft72frme"},{"name":"webpack","_id":"clolf0lib004ms2kzej3o7gj5"},{"name":"vue","_id":"clolf0lib004ns2kz5jswfwwn"},{"name":"onlyoffice","_id":"clolf0lib004os2kz9l3pak86"},{"name":"beego","_id":"clolf0lib004rs2kzccbl8ub9"},{"name":"openCV","_id":"clolf0lib004ts2kz0at65v8f"},{"name":"编码","_id":"clolf0lib004ws2kzh9mx5eqi"},{"name":"字符串","_id":"clolf0lib004ys2kz7cmcdv4t"},{"name":"unicode","_id":"clolf0lib004zs2kzfgc03qep"},{"name":"sqlite","_id":"clolf0lic0053s2kz32g35rzf"},{"name":"shell","_id":"clolf0lic0056s2kzdzfveg4c"},{"name":"机器学习","_id":"clolf0lic0058s2kz3xr33auj"},{"name":"微信","_id":"clolf0lic005as2kzfg6x6ojx"},{"name":"公众号","_id":"clolf0lic005cs2kz4fsw28c3"},{"name":"感受野","_id":"clolf0lid005hs2kz8kqh1b7c"},{"name":"还债","_id":"clolf0lie005ms2kzg9gxc1n9"},{"name":"vscode","_id":"clolf0lie005ss2kz9qh57fu6"},{"name":"乱感叹","_id":"clolf0lif005ys2kzfop2geg8"},{"name":"hexo","_id":"clolf0lif0063s2kz6rmz1mzc"},{"name":"next","_id":"clolf0lif0067s2kz0eda6iji"},{"name":"股票","_id":"clolf0lig0069s2kze0o6dy6a"},{"name":"蒋勋","_id":"clolf0lig006cs2kz274p5yy7"},{"name":"红楼梦","_id":"clolf0lig006es2kz6bm976wa"},{"name":"推荐","_id":"cmbdaqhba0002sakzhvzf1q9d"}]}}